@using Newtonsoft.Json;
@using Microsoft.AspNetCore.Http;
@inject IHttpContextAccessor HttpContextAccessor
@model DGRA_V1.Models.DailyGenSummary

@{
    ViewData["Title"] = "Wind TML View";
}
@{
    string windSiteList = "";

    var usermodel = JsonConvert.DeserializeObject<UserAccess>(@HttpContextAccessor.HttpContext.Session.GetString("UserAccess"));

}
@for (int i = 0; i < @usermodel.access_list.Count; i++)
{

    if (@usermodel.access_list[i].page_type == 3 && @usermodel.access_list[i].site_type == 1)
    {
        windSiteList += @usermodel.access_list[i].identity.ToString() + ",";
    }


}

<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700&display=fallback">
<!-- Font Awesome -->
<link rel="stylesheet" href="~/Content/theme/plugins/fontawesome-free/css/all.min.css">
<!-- daterange picker -->
<link rel="stylesheet" href="~/Content/theme/plugins/daterangepicker/daterangepicker.css">
<!-- DataTables -->
<link rel="stylesheet" href="~/Content/theme/plugins/datatables-bs4/css/dataTables.bootstrap4.min.css">
<link rel="stylesheet" href="~/Content/theme/plugins/datatables-responsive/css/responsive.bootstrap4.min.css">
<link rel="stylesheet" href="~/Content/theme/plugins/datatables-buttons/css/buttons.bootstrap4.min.css">
<link rel="stylesheet" href="~/Content/theme/plugins/multiple-select/dist/multiple-select.min.css" />
<link href="~/Content/theme/dist/css/adminlte.css" rel="stylesheet" />
<!-- dropdown search -->
<link href="https://unpkg.com/multiple-select@1.5.2/dist/multiple-select.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js"></script>
<script src="https://unpkg.com/multiple-select@1.5.2/dist/multiple-select.min.js"></script>
<style>
    .anychart-credits {
        display: none !important;
    }
</style>

<!-- Content Wrapper. Contains page content -->
<div class="content-wrapper">
    <section class="content">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title text-center">Wind Expected Vs Actual</h3>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-3">
                        <div class="form-group">
                            <div class="row">
                                <label class="col-sm-2 col-form-label text-left">Site : </label>
                                <select class="form-control  col-sm-8" id="site" name="site[]" multiple>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-5">
                        <div class="input-group row">
                            <label class="col-sm-3 col-form-label">Date Range : </label>
                            <div class="input-group-prepend">
                                <span class="input-group-text">
                                    <i class="far fa-calendar-alt"></i>
                                </span>
                            </div>
                            <input type="text" class="form-control float-right" id="daterange" name="daterange">
                        </div>
                    </div>
                    <div class="col-md-1"></div>
                    <div class="col-md-2">
                        <div style="display: flex; flex-direction: row; justify-content: center; gap: 10%">
                            <button type="button" class="btn btn-block btn-primary" onclick="getReport()" style="margin-left:-5rem; width: 5rem;">Search</button>
                            <!--<button type="button" class="btn btn-block btn-danger" onclick="clearRecords()" style="margin-left:-5rem; width: 5rem;">Clear</button>-->
                        </div>
                    </div>
                    <div class="col-md-1"></div>
                </div>
                <br>
                <hr>
                <br>
                <div class="col-sm-12">
                    <div id="Waterfall" style="overflow-x: auto; width: 100%; height: 400px;"></div>
                    <!--<canvas id="Waterfall" style="min-height: 400px; height: 400px; max-height: 400px; max-width: 100%; width: 640px; margin-top: -1rem "></canvas>-->
                </div>
                <div class="col-sm-12">
                    <div id="WaterfallYearly" style="overflow-x: auto; width: 100%; height: 400px;"></div>
                    <!--<canvas id="Waterfall" style="min-height: 400px; height: 400px; max-height: 400px; max-width: 100%; width: 640px; margin-top: -1rem "></canvas>-->
                </div>
                <hr>
                <div id="DailyGenView" style="overflow-x: auto;" class="DailyGenView"></div>
                <div id="loader" class="loader  center" style="display:none"></div>
            </div>
        </div>
    </section>

</div>
<!-- /.content-wrapper -->
<script src="~/Content/theme/plugins/jquery/jquery.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js"></script>

<!--Date Range -->
<script src="~/Content/theme/plugins/moment/moment.min.js"></script>
<script src="~/Content/theme/plugins/multiple-select/dist/multiple-select.min.js" defer></script>
<script src="~/Content/theme/plugins/inputmask/jquery.inputmask.min.js"></script>
<script src="~/Content/theme/plugins/daterangepicker/daterangepicker.js" defer></script>
<script src="~/Content/theme/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>


<!-- DataTables  & Plugins -->
<script src="~/Content/theme/plugins/datatables/jquery.dataTables.min.js"></script>
<script src="~/Content/theme/plugins/datatables/jquery.dataTables.js" defer></script>
<script src="~/Content/theme/plugins/datatables-buttons/js/dataTables.buttons.min.js" defer></script>
<script src="~/Content/theme/plugins/jszip/jszip.min.js" defer></script>
<script src="~/Content/theme/plugins/datatables-buttons/js/buttons.html5.min.js" defer></script>
<script src="~/Content/theme/plugins/datatables-buttons/js/buttons.colVis.min.js" defer></script>
<script src="~/Content/theme/plugins/jszip/jszip.min.js" defer></script>
<script src="~/Content/theme/plugins/pdfmake/pdfmake.min.js" defer></script>
<script src="~/Content/theme/plugins/datatables-buttons/js/buttons.colVis.min.js" defer></script>
<script src="~/Content/theme/dist/js/comman.js"></script>
<script src="~/Content/theme/plugins/chart.js/Chart.min.js"></script>
<script src="~/Content/theme/plugins/multiple-select/dist/multiple-select.min.js" defer></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js@3.0.0/dist/chart.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.0.0-rc"></script>
<!--<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.min.js"></script>-->
<script src="https://cdn.anychart.com/releases/8.9.0/js/anychart-core.min.js"></script>
<script src="https://cdn.anychart.com/releases/8.9.0/js/anychart-waterfall.min.js"></script>
<script src="https://cdn.anychart.com/releases/8.7.1/js/anychart-base.min.js"></script>
@*<script src="https://cdn.plot.ly/plotly-latest.min.js"></script>*@
<script src='https://cdn.plot.ly/plotly-2.20.0.min.js'></script>

@*------------------------------------------------------------------------------------------------------------------------------------------------*@
<script type="text/javascript">
    $(document).ready(function () {
        $('#daterange').daterangepicker(
            {
                maxDate: new Date(),
                locale: {
                    format: 'DD/MM/YYYY',
                }
            });

        $("#hide").click(function () {
            $("#chart").hide();
            $("#show").css('display', 'block');
        });
        $("#show").click(function () {
            $("chart").show();
            $("#hide").css('display', 'none');
        });

    });


    window.onload = function () {
        var state = "";
        var spv = "";
        var site_ids = "@Html.Raw(windSiteList.TrimEnd(','))";
        $.ajax({
            type: "POST",
            //url: "/WindReport/GetSiteList",
            url: '@Url.Action("GetSiteList", "WindReport")' + '?sitelist=' + site_ids,
            contentType: "application/json; charset=utf-8",
            // data: '{"state":"' + val + '"}',
            datatype: "html",
            success: function (result, status, xhr) {
                var options = "";
                for (var k = 0; k < result.length; k++) {
                    options += '<option value="' + result[k].site_master_id + '">' + result[k].site + '</option>';
                }
                $("#site").html(options);
                $('select#site').multipleSelect({
                    "minimumCountSelected": 1,
                    "placeholder": "Select Site(s)",
                    filter:true
                });
            }

        });
    }

    function getReport() {

        let site_id = "";
        var site = $('select#site option:selected').each(function () {
            site_id += $(this).val() + ",";
        });
        site_id = site_id != "" ? site_id.slice(0, -1) : site_id;
        if (site_id == "" || site_id == null) {
            alert("Please select site ");
            return false;
        }
        document.getElementById("loader").style.display = 'flex';
        console.log(site_id);
        var daterange = $('#daterange').val();
        var arr1 = new Array();
        arr1 = daterange.split("-");
        var fromDate = moment(arr1[0], 'DD/MM/YYYY').format('YYYY-MM-DD');
        var toDate = moment(arr1[1], 'DD/MM/YYYY').format('YYYY-MM-DD');

        $.ajax({
            type: "GET",
            url: '@Url.Action("GetWindTMLData", "WindView")' + '?site='+ site_id + '&fromDate=' + fromDate + '&toDate=' + toDate,
            contentType: "application/json; charset=utf-8",
            datatype: "JSON",

            success: function (result, status, xhr) {
                //console.log(result);
                console.log("GetWindTmlData fetched successfully.");
                document.getElementById("loader").style.display = 'none';
                //calling function of getting data for chart.
                getChartData(site_id, fromDate, toDate);
                getChartDataYearly(site_id);

                var tbl = '<table id="example1" class="table table-bordered table-striped" style="width: 160%;">';
                tbl += '<thead class="tbl-head"><tr>';
                tbl += '<th  style="width: 10%;">Site</th>';
                tbl += '<th style="width: 7%;">Date</th>';
                tbl += '<th>WTG</th>';
                tbl += '<th>From Time</th>';
                tbl += '<th>To Time</th>';
                tbl += '<th>Avg Active Power</th>';
                tbl += '<th>Avg Wind Speed</th>';
                tbl += '<th>Restructive WTG</th>';
                tbl += '<th style="width: 10%;">PLC Max</th>';
                tbl += '<th style="width: 10%;">PLC Min</th>';
                tbl += '<th>PLC State Code</th>';
                tbl += '<th>Status</th>';
                tbl += '<th>Reconstructed Windspeed</th>';
                tbl += '<th>Expected Power</th>';
                tbl += '<th>Deviation kW</th>';
                tbl += '<th>Loss kW</th>';
                tbl += '<th>Manual Breakdown </th>';
                tbl += '<th>All Breakdown</th>';
                tbl += '</tr></thead>';

                if (result.length > 0) {
                    for (var i = 0; i < result.length; i++) {
                        var status = "";
                        if (result[i].status_code === 1) {
                            status = "Missing";
                        }
                        if (result[i].status_code === 0) {
                            status = "Available";
                        }
                        tbl += '<tr>';
                       tbl += '<td  class="text-center">' + result[i].site + '</td>';
                        tbl += '<td  class="text-center">' + result[i].date + '</td>';
                        tbl += '<td  class="text-center">' + result[i].wtGs + '</td>';
                        tbl += '<td  class="text-center">' + toHoursAndMinutes(result[i].from_time.totalSeconds) + '</td>';
                        tbl += '<td class="text-center">' + toHoursAndMinutes(result[i].to_time.totalSeconds) + '</td>';
                       tbl += '<td class="text-center">' + result[i].avg_active_power.toFixed(2) + '</td>';
                       tbl += '<td class="text-center">' + result[i].avg_wind_speed.toFixed(2) + '</td>';
                       tbl += '<td class="text-center">' + result[i].restructive_WTG + '</td>';
                        tbl += '<td class="text-center">' + result[i].plC_max + '</td>';
                        tbl += '<td class="text-center">' + result[i].plC_min + '</td>';
                        tbl += '<td class="text-center">' + result[i].plc_state_code + '</td>';
                       tbl += '<td class="text-center">' + status + '</td>';
                       tbl += '<td class="text-center">' + result[i].recon_wind_speed.toFixed(2) + '</td>';
                       tbl += '<td class="text-center">' + result[i].exp_power_kw.toFixed(2) + '</td>';
                       tbl += '<td class="text-center">' + result[i].deviation_kw.toFixed(2) + '</td>';
                       tbl += '<td class="text-center">' + result[i].loss_kw.toFixed(2) + '</td>';
                       tbl += '<td class="text-center">' + result[i].manual_bd + '</td>';
                       tbl += '<td class="text-center">' + result[i].all_bd + '</td>';
                        tbl += '</tr>';
                    }
                }
                else {

                    // tbl += '<tr><th colspan="19" style="text-align:center">Data Not Available <th></tr>';
                }
                tbl += '</table>';
               // $("#DailyGenView").html(tbl);
                $("#DailyGenView").html("").html(tbl);
                $('#example1').DataTable({
                    dom: 'Bfrtip',
                    responsive: false,
                    lengthChange: false,
                    autoWidth: true,
                    paging: true,
                    lengthChange: false,
                    searching: true,
                    ordering: true,
                    info: true,
                    autoWidth: true,
                    responsive: false,
                    pageLength: 50,
                    buttons: [
                        {
                            extend: 'excel',
                            title: 'Wind Expected Vs Actual',
                            exportOptions: {
                                columns: ':visible'
                            }
                        },
                        {
                            extend: 'csv',
                            title: 'Wind Expected Vs Actual',
                            exportOptions: {
                                columns: ':visible'
                            }
                        },
                        'colvis'
                    ]
                });
                $(".dt-buttons").addClass('btn-group flex-wrap');
                $(".dt-buttons > button").addClass('btn btn-secondary');
                $(".dataTables_filter> label >input").addClass('form-control form-control-sm');
                $('#example1').wrap("<div class='scrolledTable'></div>");
                //document.getElementById("wms_comparision").style.display = 'block';
                //$('#example1').removeClass('dataTable');
            }
        });
    }

    var data = [];
    function getChartData(site_id, fromDate, toDate) {
        var expected_final = 0.0;
        var lineloss_final = 0.0;
        var target_final = 0.0;
        var lossUSMH_final = 0.0;
        var lossSMH_final = 0.0;
        var lossNC_final = 0.0;
        var lossIGBD_final = 0.0;
        var lossEGBD_final = 0.0;
        var lossLULL_final = 0.0;
        var lossPCD_final = 0.0;
        var actual_final = 0.0;
        console.log("Inside getChartData function.");
        $.ajax({
            type: "GET",
            url: '@Url.Action("GetWindTMLGraphData", "WindView")' + '?site='+ site_id + '&fromDate=' + fromDate + '&toDate=' + toDate,
            contentType: "application/json; charset=utf-8",
            datatype: "JSON",

            success: function (result, status, xhr) {
                console.log(result);
                document.getElementById("loader").style.display = 'none';

                if (result.length > 0) {
                    for (var i = 0; i < result.length; i++) {
                        console.log("Expected : ", result[i].expected_final);
                        console.log("LineLoss : ", result[i].lineloss_final);
                        console.log("Target : ",result[i].target_final);
                        console.log("USHM : ",result[i].lossUSMH_final);
                        console.log("SMH : ",result[i].lossSMH_final);
                        console.log("NC : ",result[i].lossNC_final);
                        console.log("IGBD : ",result[i].lossIGBD_final);
                        console.log("EGBD : ",result[i].lossLULL_final);
                        console.log("LULL : ",result[i].lossPCD_final);
                        console.log("Actual : ",result[i].actual_final);

                        expected_final = result[i].expected_final;
                        lineloss_final = result[i].lineloss_final;
                        target_final = result[i].target_final /1000000;
                        lossUSMH_final = result[i].lossUSMH_final;
                        lossSMH_final = result[i].lossSMH_final;
                        lossNC_final = result[i].lossNC_final;
                        lossIGBD_final = result[i].lossIGBD_final;
                        lossEGBD_final = result[i].lossEGBD_final;
                        lossLULL_final = result[i].lossLULL_final;
                        lossPCD_final = result[i].lossPCD_final;
                        actual_final = result[i].actual_final;

                        CreateChart(target_final.toFixed(4), expected_final.toFixed(4), lossUSMH_final.toFixed(4), lossSMH_final.toFixed(4), lossNC_final.toFixed(4), lossIGBD_final.toFixed(4), lossEGBD_final.toFixed(4), lossLULL_final.toFixed(4), lossPCD_final.toFixed(4), lineloss_final.toFixed(4), actual_final.toFixed(4));

                        console.log("-------------------------------------------");
                        console.log("Expected : ", expected_final);
                        console.log("LineLoss : ", lineloss_final);
                        console.log("Target : ", target_final);
                        console.log("USHM : ", lossUSMH_final);
                        console.log("SMH : ", lossSMH_final);
                        console.log("NC : ", lossNC_final);
                        console.log("IGBD : ", lossIGBD_final);
                        console.log("EGBD : ", lossEGBD_final);
                        console.log("LULL : ", lossLULL_final);
                        console.log("PCD : ", lossPCD_final);
                        console.log("Actual : ", actual_final);
                        //data = [
                        //    { x: 'Target', value: target_final.toFixed(1) },
                        //    { x: 'Expected', value: expected_final.toFixed(1) },
                        //    { x: 'USMH', value: lossUSMH_final.toFixed(1) },
                        //    { x: 'SMH', value: lossSMH_final.toFixed(1) },
                        //    { x: 'Other', value: lossNC_final.toFixed(1) },
                        //    { x: 'IGBD', value: lossIGBD_final.toFixed(1) },
                        //    { x: 'EGBD', value: lossEGBD_final.toFixed(1) },
                        //    { x: 'LULL', value: lossLULL_final.toFixed(1) },
                        //    { x: 'PCD', value: lossPCD_final.toFixed(1) },
                        //    { x: 'LineLoss', value: lineloss_final.toFixed(1) },
                        //    { x: 'Actual', value: actual_final.toFixed(1) },
                        //];
                    }
                }
                else {

                    // tbl += '<tr><th colspan="19" style="text-align:center">Data Not Available <th></tr>';
                }
            }
        });


        console.log("target : ", target_final, " Expected : ", expected_final, " USMH : ", lossUSMH_final, " SMH : ", lossSMH_final, " Other ", lossNC_final, " IGBD : " + lossIGBD_final, " EGBD : ", lossEGBD_final, " LULL : ", lossLULL_final, " PCD : ", lossPCD_final, "Lineloss : ", lineloss_final, " Actual : ", actual_final);
        //monthlychart(data);

    }

    function getChartDataYearly(site_id) {
        var expected_final = 0.0;
        var lineloss_final = 0.0;
        var target_final = 0.0;
        var lossUSMH_final = 0.0;
        var lossSMH_final = 0.0;
        var lossNC_final = 0.0;
        var lossIGBD_final = 0.0;
        var lossEGBD_final = 0.0;
        var lossLULL_final = 0.0;
        var lossPCD_final = 0.0;
        var actual_final = 0.0;
        console.log("Inside getChartDataYearly function.");
        var data_Array1 = [];
        document.getElementById("loader").style.display = 'flex';
        var daterange = $('#daterange').val();
        var arr1 = new Array();
        arr1 = daterange.split("-");
        var today = new Date(arr1[0]);

        fyear = getFinancialYear(today);
        fdate = getFinancialYearDateStartDate(fyear);
        var fromDate = fdate.startdate;//moment(arr1[0], 'DD/MM/YYYY').format('YYYY-MM-DD');
        var toDate = moment(arr1[1], 'DD/MM/YYYY').format('YYYY-MM-DD');
        var dateParts = fromDate.split('-');
        var year = parseInt(dateParts[0]);
        year -= 1;
        var newDate = new Date(year, dateParts[1] - 1, dateParts[2]);
        var newFromDate = newDate.toISOString().slice(0, 10);
        console.log("Yearly Report From date : " + newFromDate + " To date : " + toDate);

        console.log("Get Yearly Data :- from: " + fromDate + ", to date :" + toDate);
        var fromToDates = getFinancialYearDates(toDate);
        console.log("Returned result from getFinancialYearDates function FROM : " + fromToDates.fromDate + ", TO : " + fromToDates.toDate);

        $.ajax({
            type: "GET",
            url: '@Url.Action("GetWindTMLGraphData", "WindView")' + '?site=' + site_id + '&fromDate=' + fromToDates.fromDate + '&toDate=' + fromToDates.toDate,
            contentType: "application/json; charset=utf-8",
            datatype: "JSON",

            success: function (result, status, xhr) {
                console.log(result);
                document.getElementById("loader").style.display = 'none';

                if (result.length > 0) {
                    for (var i = 0; i < result.length; i++) {
                        console.log("Expected : ", result[i].expected_final);
                        console.log("LineLoss : ", result[i].lineloss_final);
                        console.log("Target : ",result[i].target_final);
                        console.log("USHM : ",result[i].lossUSMH_final);
                        console.log("SMH : ",result[i].lossSMH_final);
                        console.log("NC : ",result[i].lossNC_final);
                        console.log("IGBD : ",result[i].lossIGBD_final);
                        console.log("EGBD : ",result[i].lossLULL_final);
                        console.log("LULL : ",result[i].lossPCD_final);
                        console.log("Actual : ",result[i].actual_final);

                        expected_final = result[i].expected_final;
                        lineloss_final = result[i].lineloss_final;
                        target_final = result[i].target_final /1000000;
                        lossUSMH_final = result[i].lossUSMH_final;
                        lossSMH_final = result[i].lossSMH_final;
                        lossNC_final = result[i].lossNC_final;
                        lossIGBD_final = result[i].lossIGBD_final;
                        lossEGBD_final = result[i].lossEGBD_final;
                        lossLULL_final = result[i].lossLULL_final;
                        lossPCD_final = result[i].lossPCD_final;
                        actual_final = result[i].actual_final;

                        CreateChartYearly(target_final.toFixed(4), expected_final.toFixed(4), lossUSMH_final.toFixed(4), lossSMH_final.toFixed(4), lossNC_final.toFixed(4), lossIGBD_final.toFixed(4), lossEGBD_final.toFixed(4), lossLULL_final.toFixed(4), lossPCD_final.toFixed(4), lineloss_final.toFixed(4), actual_final.toFixed(4));

                        console.log("-------------------------------------------");
                        console.log("Expected : ", expected_final);
                        console.log("LineLoss : ", lineloss_final);
                        console.log("Target : ", target_final);
                        console.log("USHM : ", lossUSMH_final);
                        console.log("SMH : ", lossSMH_final);
                        console.log("NC : ", lossNC_final);
                        console.log("IGBD : ", lossIGBD_final);
                        console.log("EGBD : ", lossEGBD_final);
                        console.log("LULL : ", lossLULL_final);
                        console.log("PCD : ", lossPCD_final);
                        console.log("Actual : ", actual_final);
                        //data = [
                        //    { x: 'Target', value: target_final.toFixed(1) },
                        //    { x: 'Expected', value: expected_final.toFixed(1) },
                        //    { x: 'USMH', value: lossUSMH_final.toFixed(1) },
                        //    { x: 'SMH', value: lossSMH_final.toFixed(1) },
                        //    { x: 'Other', value: lossNC_final.toFixed(1) },
                        //    { x: 'IGBD', value: lossIGBD_final.toFixed(1) },
                        //    { x: 'EGBD', value: lossEGBD_final.toFixed(1) },
                        //    { x: 'LULL', value: lossLULL_final.toFixed(1) },
                        //    { x: 'PCD', value: lossPCD_final.toFixed(1) },
                        //    { x: 'LineLoss', value: lineloss_final.toFixed(1) },
                        //    { x: 'Actual', value: actual_final.toFixed(1) },
                        //];
                    }
                }
                else {

                    // tbl += '<tr><th colspan="19" style="text-align:center">Data Not Available <th></tr>';
                }
            }
        });


        console.log("target : ", target_final, " Expected : ", expected_final, " USMH : ", lossUSMH_final, " SMH : ", lossSMH_final, " Other ", lossNC_final, " IGBD : " + lossIGBD_final, " EGBD : ", lossEGBD_final, " LULL : ", lossLULL_final, " PCD : ", lossPCD_final, "Lineloss : ", lineloss_final, " Actual : ", actual_final);
        //monthlychart(data);

    }

    function CreateChart(total_target, total_expected, total_usmh, total_smh, total_oh, total_igbd, total_egbd, total_lull, total_pcd, total_lineloss, total_actual) {
        console.log("Inside create chart function : Target : " + total_target + " Expected : " + total_expected + " USMH : " + total_usmh + " SMH : " + total_smh + " Other : " + total_oh + " IGBD : " + total_igbd + " EGBD : " + total_egbd + " LULL : " + total_lull + " PCD : " + total_pcd + " Linesloss : " + total_lineloss + " Actual : " + total_actual);
        let t_target = Number(total_target).toFixed(2);
        let t_expected = Number(total_expected).toFixed(2);
        let t_usmh = Number(total_usmh).toFixed(2);
        let t_smh = Number(total_smh).toFixed(2);
        let t_oh = Number(total_oh).toFixed(2);
        let t_igbd = Number(total_igbd).toFixed(2);
        let t_egbd = Number(total_egbd).toFixed(2);
        let t_lull = Number(total_lull).toFixed(2);
        let t_pcd = Number(total_pcd).toFixed(2);
        let t_lineloss = Number(total_lineloss).toFixed(2);
        let t_actual = Number(total_actual).toFixed(2);



        // Percentage Value 
        let exp_percentage = ((t_expected - t_target) / t_target) * 100;
        let usmh_percentage = (t_usmh / t_expected) * 100;
        let smh_percentage = (t_smh / t_expected) * 100;
        let oh_percentage = (t_oh / t_expected) * 100;
        let igbd_percentage = (t_igbd / t_expected) * 100;
        let egbd_percentage = (t_egbd / t_expected) * 100;
        let lull_percentage = (t_lull / t_expected) * 100;
        let pcd_percentage = (t_pcd / t_expected) * 100;
        let line_percentage = (t_lineloss / t_expected) * 100;
        let actul_percentage = ((t_actual - t_expected) / t_expected) * 100;

        //#86C466 : green. #77CAE7 : blue. #EE403D : red. #14a105 : dark-green.
        //#7dddff
        var columnColors = [
            "#86C466", // Target
            "#7dddff", // Expected
            "#EE403D", // USMH
            "#EE403D", // SMH
            "#EE403D", // Other
            "#EE403D", // IGBD
            "#EE403D", // EGBD
            "#86C466", // PCD
            "#7dddff", // Lineloss
            "#7dddff"  // Actual
        ];

        let rMeasure = "relative";
        let aMeasure = "absolute";
        let pcdMeasure = "relative";
        let lineLossMeasure = "relative";

        if (Number(total_pcd) > 0) {
            //columnColors[7] = "#EE403D";
            pcdMeasure = "absolute";
        }
        if (Number(total_lineloss) > 0) {
            //columnColors[8] = "#EE403D";
            lineLossMeasure = "absolute";
        }

        var data = [
            {
                //name: "2018",
                type: "waterfall",
                orientation: "v",
                measure: [
                    "relative",
                    "absolute",
                    "relative",
                    "relative",
                    "relative",
                    "relative",
                    "relative",
                    "relative",
                    "relative",
                    "absolute"
                ],
                x: [
                    "Target",
                    "Expected",
                    "USMH",
                    "SMH",
                    "Other",
                    "IGBD",
                    "EGBD",
                    "PCD",
                    "Lineloss",
                    "Actual"
                ],
                textposition: "outside",
                //textposition: "inside",
                text: [
                    t_target,
                    t_expected,
                    t_usmh,
                    t_smh,
                    t_oh,
                    t_igbd,
                    t_egbd,
                    t_pcd ,
                    t_lineloss,
                    t_actual
                ],
                y: [
                    Number(total_target),
                    Number(total_expected),
                    Number(total_usmh),
                    Number(total_smh),
                    Number(total_oh),
                    Number(total_igbd),
                    Number(total_egbd),
                    Number(total_pcd),
                    Number(total_lineloss),
                    Number(total_actual)
                ],
                hoverData: [
                    Number(total_target),
                    Number(total_expected),
                    Number(total_usmh),
                    Number(total_smh),
                    Number(total_oh),
                    Number(total_igbd),
                    Number(total_egbd),
                    Number(total_pcd),
                    Number(total_lineloss),
                    Number(total_actual)
                ],
                hovertemplate: [
                    '<b>Target</b><br>Value: ' + total_target,
                    '<b>Expected</b><br>Value: ' + total_expected + '<br> (' + exp_percentage.toFixed(2) + '% )',
                    '<b>USMH</b><br>Value: ' + total_usmh + '<br> (' + usmh_percentage.toFixed(2) + '% )',
                    '<b>SMH</b><br>Value: ' + total_smh + '<br> (' + smh_percentage.toFixed(2) + '% )',
                    '<b>Other</b><br>Value: ' + total_oh + '<br> (' + oh_percentage.toFixed(2) + '% )',
                    '<b>IGBD</b><br>Value: ' + total_igbd + '<br> (' + igbd_percentage.toFixed(2) + '% )',
                    '<b>EGBD</b><br>Value: ' + total_egbd + '<br> (' + egbd_percentage.toFixed(2) + '% )',
                    '<b>PCD</b><br>Value: ' + total_pcd + '<br> (' + pcd_percentage.toFixed(2) + '% )',
                    '<b>Lineloss</b><br>Value: ' + total_lineloss + '<br> (' + line_percentage.toFixed(2) + '% )',
                    '<b>Actual</b><br>Value: ' + total_actual + '<br> (' + actul_percentage.toFixed(2) + '% )'
                ],

                    //'<b>%{x}</b><br>' +
                    ///*'Column: %{x}<br>' +*/
                    //'Value: %{y}',
                //absolute: { marker: { color: "#77CAE7" } },
                //relative: { marker: { color: "#77CAE7" } },
                totals: { marker: { color: "#86C466" } },
                increasing: { marker: { color: "#77CAE7" } },
                decreasing: { marker: { color: "#EE403D" } },

                //totals: { marker: { color: columnColors } },
                //increasing: { marker: { color: columnColors } },
                //decreasing: { marker: { color: columnColors } },
                connector: {
                    line: {
                        color: "white"
                    }
                },
            }
        ];
        layout = {
            title: {
                text: "Monthly"
            },
            xaxis: {
                type: "category",
                fixedrange: true
            },
            yaxis: {
                type: "linear",
                fixedrange: true,
                range: [0, Math.max(...data[0].y) * 1.1]
            },
            autosize: true,
            showlegend: true
        };
        Plotly.newPlot('Waterfall', data, layout);
        //Plotly.newPlot('Waterfall', data, layout, { staticPlot: true });

    }

    function CreateChartYearly(total_target, total_expected, total_usmh, total_smh, total_oh, total_igbd, total_egbd, total_lull, total_pcd, total_lineloss, total_actual) {
        console.log("Inside create chart function : Target : " + total_target + " Expected : " + total_expected + " USMH : " + total_usmh + " SMH : " + total_smh + " Other : " + total_oh + " IGBD : " + total_igbd + " EGBD : " + total_egbd + " LULL : " + total_lull + " PCD : " + total_pcd + " Linesloss : " + total_lineloss + " Actual : " + total_actual);
        let t_target = Number(total_target).toFixed(2);
        let t_expected = Number(total_expected).toFixed(2);
        let t_usmh = Number(total_usmh).toFixed(2);
        let t_smh = Number(total_smh).toFixed(2);
        let t_oh = Number(total_oh).toFixed(2);
        let t_igbd = Number(total_igbd).toFixed(2);
        let t_egbd = Number(total_egbd).toFixed(2);
        let t_lull = Number(total_lull).toFixed(2);
        let t_pcd = Number(total_pcd).toFixed(2);
        let t_lineloss = Number(total_lineloss).toFixed(2);
        let t_actual = Number(total_actual).toFixed(2);


        // Percentage Value 
        let exp_percentage = ((t_expected - t_target) / t_target) * 100;
        let usmh_percentage = ((t_usmh - t_expected) / t_expected) * 100;
        let smh_percentage = ((t_smh - t_expected) / t_expected) * 100;
        let oh_percentage = ((t_oh - t_expected) / t_expected) * 100;
        let igbd_percentage = ((t_igbd - t_expected) / t_expected) * 100;
        let egbd_percentage = ((t_egbd - t_expected) / t_expected) * 100;
        let lull_percentage = ((t_lull - t_expected) / t_expected) * 100;
        let pcd_percentage = ((t_pcd - t_expected) / t_expected) * 100;
        let line_percentage = ((t_lineloss - t_expected) / t_expected) * 100;;
        let actul_percentage = ((t_actual - t_expected) / t_expected) * 100;

        var data = [
            {
                //name: "2018",
                type: "waterfall",
                orientation: "v",
                measure: [
                    "relative",
                    "absolute",
                    "relative",
                    "relative",
                    "relative",
                    "relative",
                    "relative",
                    "relative",
                    "relative",
                    "absolute"
                ],
                x: [
                    "Target",
                    "Expected",
                    "USMH",
                    "SMH",
                    "Other",
                    "IGBD",
                    "EGBD",
                    "PCD",
                    "Lineloss",
                    "Actual"
                ],
                textposition: "outside",
                //textposition: "inside",
                text: [
                    t_target,
                    t_expected,
                    t_usmh,
                    t_smh,
                    t_oh,
                    t_igbd,
                    t_egbd,
                    t_pcd,
                    t_lineloss,
                    t_actual
                ],
                y: [
                    Number(total_target),
                    Number(total_expected),
                    Number(total_usmh),
                    Number(total_smh),
                    Number(total_oh),
                    Number(total_igbd),
                    Number(total_egbd),
                    Number(total_pcd),
                    Number(total_lineloss),
                    Number(total_actual)
                ],
                hovertemplate: [
                    '<b>Target</b><br>Value: ' + total_target,
                    '<b>Expected</b><br>Value: ' + total_expected + '<br> (' + exp_percentage.toFixed(2) + '% )',
                    '<b>USMH</b><br>Value: ' + total_usmh + '<br> (' + usmh_percentage.toFixed(2) + '% )',
                    '<b>SMH</b><br>Value: ' + total_smh + '<br> (' + smh_percentage.toFixed(2) + '% )',
                    '<b>Other</b><br>Value: ' + total_oh + '<br> (' + oh_percentage.toFixed(2) + '% )',
                    '<b>IGBD</b><br>Value: ' + total_igbd + '<br> (' + igbd_percentage.toFixed(2) + '% )',
                    '<b>EGBD</b><br>Value: ' + total_egbd + '<br> (' + egbd_percentage.toFixed(2) + '% )',
                    '<b>PCD</b><br>Value: ' + total_pcd + '<br> (' + pcd_percentage.toFixed(2) + '% )',
                    '<b>Lineloss</b><br>Value: ' + total_lineloss + '<br> (' + line_percentage.toFixed(2) + '% )',
                    '<b>Actual</b><br>Value: ' + total_actual + '<br> (' + actul_percentage.toFixed(2) + '% )'
                ],
                //hovertemplate: '<b>%{x}</b><br>' +
                //    /*'Column: %{x}<br>' +*/
                //    'Value: %{y}',
                //absolute: { marker: { color: "#77CAE7" } },
                //relative: { marker: { color: "#77CAE7" } },
                totals: { marker: { color: "#86C466" } },
                increasing: { marker: { color: "#77CAE7" } },
                decreasing: { marker: { color: "#EE403D" } },
                connector: {
                    line: {
                        color: "white"
                    }
                },
            }
        ];
        layout = {
            title: {
                text: "Yearly"
            },
            xaxis: {
                type: "category",
                fixedrange: true
            },
            yaxis: {
                type: "linear",
                fixedrange: true,
                range: [0, Math.max(...data[0].y) * 1.1]
            },
            autosize: true,
            showlegend: true
        };
        Plotly.newPlot('WaterfallYearly', data, layout);
        //Plotly.newPlot('Waterfall', data, layout, { staticPlot: true });

    }

    /*
    function monthlychart(data) {
        console.log("Inside Monthly chart function and data received is : " + data + " hello : " + data[0]);
        let chartStatus = Chart.getChart("Waterfall"); // <canvas> id
        if (chartStatus != undefined) {
            chartStatus.destroy();
        }
        anychart.onDocumentReady(function () {
            //create a waterfall chart with the data
        var dataRef = [
            { x: "Starting Value", value: 100 },
            { x: "Positive 1", value: 50 },
            { x: "Positive 2", value: 20 },
            { x: "Negative 1", value: -30 },
            { x: "Negative 2", value: -40 },
            { x: "Ending Value", value: 100 }
        ];
            var chart = anychart.waterfall();
            //set the chart title
            chart.title('TML Data');
            //legend disabled
            chart.legend(false);
            //tooltips disabled
            chart.tooltip(false);
            chart.yScale().minimum(0);
            chart.yScale().maximum(200);
            // create a series and set the data
            var chart = anychart.waterfall(data, { base: 0 });
            var series = chart.waterfall(dataRef);
            // set color
            //series.normal().relative(0, 0);
            //series.normal().risingRelativeToPrevious(false);
            //series.normal().risingRelativeTo(0,0);
            //series.normal().relativeStart(0).relativeEnd(0);
            series.rising('relative');
            series.normal().fill('#77CAE7');
            series.normal().hatchFill('forward-diagonal', '#77CAE7');

            // second, falling columns
            series.normal().fallingFill('#EE403D');
            series.normal().fallingStroke('#EE403D');

            // third, rising columns
            series.normal().risingFill('#77CAE7');
            series.normal().risingStroke('#77CAE7');

            chart.container('Waterfall');

            //draw the resulting chart
            chart.draw();
        });
    }
    */
    /*
    function monthlychart(data) {
        console.log("Inside Monthly chart function and data received is : ", data);
        var dataRef = [
            { x: "Starting Value", value: 100 },
            { x: "Positive 1", value: 50 },
            { x: "Positive 2", value: 20 },
            { x: "Negative 1", value: -30 },
            { x: "Negative 2", value: -40 },
            { x: "Ending Value", value: 100 }
        ];
        let chartStatus = Chart.getChart("Waterfall"); // <canvas> id

        if (chartStatus != undefined) {
            chartStatus.destroy();
        }

        anychart.onDocumentReady(function () {
            // create a waterfall chart with the data
            var chart = anychart.waterfall(dataRef);

            // set chart title, legend, and tooltip
            chart.title('TML Data');
            chart.legend(false);
            chart.tooltip(false);
            var series = chart.waterfall(dataRef);
            // set fill and stroke colors for rising and falling columns
            series.normal().fill('#77CAE7');
            series.normal().hatchFill('forward-diagonal', '#77CAE7');
            series.fallingFill('#EE403D');
            series.fallingStroke('#EE403D');
            series.risingFill('#77CAE7');
            series.risingStroke('#77CAE7');

            // set the chart container
            chart.container('Waterfall');

            // draw the chart
            chart.draw();
        });
    }
    */

    function clearRecords() {
        console.log("Inside clear onclick function.");
        var table = document.getElementById("example1");
        table.innerHTML = "";

        const dataTable = $('#example1').DataTable();

        // clear the DataTable
        dataTable.clear().draw();
    }


</script>




