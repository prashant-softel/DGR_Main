@using Newtonsoft.Json;
@using Microsoft.AspNetCore.Http;
@inject IHttpContextAccessor HttpContextAccessor
@model DGRA_V1.Models.DailyGenSummary

@{
    ViewData["Title"] = "Wind TML View";
}
@{
    string windSiteList = "";

    var usermodel = JsonConvert.DeserializeObject<UserAccess>(@HttpContextAccessor.HttpContext.Session.GetString("UserAccess"));

}
@for (int i = 0; i < @usermodel.access_list.Count; i++)
{

    if (@usermodel.access_list[i].page_type == 3 && @usermodel.access_list[i].site_type == 1)
    {
        windSiteList += @usermodel.access_list[i].identity.ToString() + ",";
    }


}

<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700&display=fallback">
<!-- Font Awesome -->
<link rel="stylesheet" href="~/Content/theme/plugins/fontawesome-free/css/all.min.css">
<!-- daterange picker -->
<link rel="stylesheet" href="~/Content/theme/plugins/daterangepicker/daterangepicker.css">
<!-- DataTables -->
<link rel="stylesheet" href="~/Content/theme/plugins/datatables-bs4/css/dataTables.bootstrap4.min.css">
<link rel="stylesheet" href="~/Content/theme/plugins/datatables-responsive/css/responsive.bootstrap4.min.css">
<link rel="stylesheet" href="https://cdn.datatables.net/fixedcolumns/4.3.0/css/fixedColumns.dataTables.min.css" />
<link rel="stylesheet" href="~/Content/theme/plugins/datatables-buttons/css/buttons.bootstrap4.min.css">
<link rel="stylesheet" href="~/Content/theme/plugins/multiple-select/dist/multiple-select.min.css" />
<!--<link href="~/Content/theme/plugins/datatables/fixedHeader.dataTables.min.css" rel="stylesheet" />-->
<link href="~/Content/theme/dist/css/adminlte.css" rel="stylesheet" />
<!-- dropdown search -->
<link href="https://unpkg.com/multiple-select@1.5.2/dist/multiple-select.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js"></script>
<script src="https://unpkg.com/multiple-select@1.5.2/dist/multiple-select.min.js"></script>
<style>
    .anychart-credits {
        display: none !important;
    }
</style>

<!-- Content Wrapper. Contains page content -->
<div class="content-wrapper">
    <section class="content">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title text-center">Wind Expected Vs Actual</h3>
            </div>
            <div class="card-body">
                <div class="row" style="margin-bottom: -6px;">
                    <div class="col-md-3" style=" margin-left: 15px;">
                        <div class="input-group row">
                            <label class="col-sm-3.1 col-form-label">Date Range :&nbsp;&nbsp;</label>
                            <div class="input-group-prepend">
                                <span class="input-group-text">
                                    <i class="far fa-calendar-alt"></i>
                                </span>
                            </div>
                            <input type="text" class="form-control float-right col-sm-9" id="daterange" name="daterange">
                        </div>
                    </div>
                    <div class="col-sm-3" style=" margin-left: -13px;">
                        <div class="form-group">
                            <div class="row">
                                <label class="col-sm-3 col-form-label text-right">SPV : </label>
                                <select class="form-control  col-sm-9" id="spv" name="spv[]" value="" onchange="getSite(true)" multiple></select>
                            </div>
                        </div>
                    </div>
                   
                    <div class="col-sm-3">
                        <div class="form-group">
                            <div class="row">
                                <label class="col-sm-3 col-form-label text-right">Site : </label>
                                <select class="form-control  col-sm-9" id="site" name="site[]" multiple></select>
                            </div>
                        </div>
                    </div>

                    @*<div class="col-md-3">
                            <div class="form-group">
                                <div class="row">
                                    <label class="col-sm-2 col-form-label text-left">Site : </label>
                                    <select class="form-control  col-sm-8" id="site" name="site[]" multiple>
                                    </select>
                                </div>
                            </div>
                        </div>*@
                    <div class="col-md-2">
                        <div style="display: flex; flex-direction: row; justify-content: center; gap: 10%">
                            <button type="button" class="btn btn-block btn-primary" onclick="getReport()" style="margin-left: -5rem; width: 5rem; line-height: 1.3;">Search</button>
                            <!--<button type="button" class="btn btn-block btn-danger" onclick="clearRecords()" style="margin-left:-5rem; width: 5rem;">Clear</button>-->
                        </div>
                    </div>
                    <div class="col-md-1"></div>
                </div>
                <hr>
                <div class="col-sm-12">
                    <div class="card-title text-center" id="monthTitle" style="display: none; position: absolute; top: 60px; left: 50%; transform: translateX(-50%); z-index: 2; background-color: white; background-color: white; font-family: 'Open Sans', verdana, arial, sans-serif; font-size: 17px; fill: rgb(68, 68, 68); opacity: 1; font-weight: normal; white-space: pre;">Monthly</div>
                     <div id="dataNotPresentDiv" style="display: flex; justify-content: center; align-items: center; height: 400px;">
                        <h5 id="dataNotPresent" style="display: none; color: #007bff;"></h5>
                    </div>
                    <div id="Waterfall" style="overflow-x: auto; width: 100%; height: 400px;"></div>
                    <!--<canvas id="Waterfall" style="min-height: 400px; height: 400px; max-height: 400px; max-width: 100%; width: 640px; margin-top: -1rem "></canvas>-->
                </div>
                <div class="col-sm-12">
                    <div class="card-title text-center" id="yearTitle" style="display: none; position: absolute; top: 60px; left: 50%; transform: translateX(-50%); z-index: 2; background-color: white; background-color: white; font-family: 'Open Sans', verdana, arial, sans-serif; font-size: 17px; fill: rgb(68, 68, 68); opacity: 1; font-weight: normal; white-space: pre;">Yearly</div>
                    <div id="WaterfallYearly" style="overflow-x: auto; width: 100%; height: 400px;"></div>
                    <!--<canvas id="Waterfall" style="min-height: 400px; height: 400px; max-height: 400px; max-width: 100%; width: 640px; margin-top: -1rem "></canvas>-->
                </div>
                <hr>
                <div class="row" id="viewTableBtn" style="display: none">
                    <div class="col-sm-2">
                        <div style="display: flex; flex-direction: row; justify-content: center; gap: 10%">
                            <button type="button" class="btn btn-block btn-primary" onclick="getTableData()" style="margin-left:0rem; width: 10rem;">View Table</button>
                        </div>
                    </div>
                </div>
                <div class="row" id="CloseViewTableBtn" style="display: none">
                    <div class="col-sm-2">
                        <div style="display: flex; flex-direction: row; justify-content: center; gap: 10%">
                            <button type="button" class="btn btn-block btn-danger" onclick="closeTableData()" style="margin-left:0rem; width: 10rem;">Close Table</button>
                        </div>
                    </div>
                </div>
                <br />
                @*<button id="viewTableBtn" type="button" class="btn btn-block btn-primary" onclick="getReport()" style="margin-left:-5rem; width: 5rem;">View Table</button>*@
                <div id="DailyGenView" style="overflow-x: auto;" class="DailyGenView"></div>
                <div id="loader" class="loader  center" style="display:none"></div>
            </div>
        </div>
    </section>

</div>
<!-- /.content-wrapper -->
<script src="~/Content/theme/plugins/jquery/jquery.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js"></script>

<!--Date Range -->
<script src="~/Content/theme/plugins/moment/moment.min.js"></script>
<script src="~/Content/theme/plugins/multiple-select/dist/multiple-select.min.js" defer></script>
<script src="~/Content/theme/plugins/inputmask/jquery.inputmask.min.js"></script>
<script src="~/Content/theme/plugins/daterangepicker/daterangepicker.js" defer></script>
<script src="~/Content/theme/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>


<!-- DataTables  & Plugins -->
<script src="~/Content/theme/plugins/datatables/jquery.dataTables.min.js"></script>
<script src="~/Content/theme/plugins/datatables/jquery.dataTables.js" defer></script>
<script src="~/Content/theme/plugins/datatables/dataTables.fixedHeader.min.js" defer></script>
<script src="https://cdn.datatables.net/fixedcolumns/4.3.0/js/dataTables.fixedColumns.min.js" defer></script>
<script src="~/Content/theme/plugins/datatables-buttons/js/dataTables.buttons.min.js" defer></script>
<script src="~/Content/theme/plugins/jszip/jszip.min.js" defer></script>
<script src="~/Content/theme/plugins/datatables-buttons/js/buttons.html5.min.js" defer></script>
<script src="~/Content/theme/plugins/datatables-buttons/js/buttons.colVis.min.js" defer></script>
<script src="~/Content/theme/plugins/jszip/jszip.min.js" defer></script>
<script src="~/Content/theme/plugins/pdfmake/pdfmake.min.js" defer></script>
<script src="~/Content/theme/plugins/datatables-buttons/js/buttons.colVis.min.js" defer></script>
<script src="~/Content/theme/dist/js/comman.js"></script>
<script src="~/Content/theme/plugins/chart.js/Chart.min.js"></script>
<script src="~/Content/theme/plugins/multiple-select/dist/multiple-select.min.js" defer></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js@3.0.0/dist/chart.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.0.0-rc"></script>
<!--<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.min.js"></script>-->
<script src="https://cdn.anychart.com/releases/8.9.0/js/anychart-core.min.js"></script>
<script src="https://cdn.anychart.com/releases/8.9.0/js/anychart-waterfall.min.js"></script>
<script src="https://cdn.anychart.com/releases/8.7.1/js/anychart-base.min.js"></script>
@*<script src="https://cdn.plot.ly/plotly-latest.min.js"></script>*@
<script src='https://cdn.plot.ly/plotly-2.20.0.min.js'></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.5/xlsx.full.min.js"></script>
<!--<script src="~/Content/theme/plugins/datatables/dataTables.fixedHeader.min.js" defer></script>-->
@*------------------------------------------------------------------------------------------------------------------------------------------------*@
<script type="text/javascript">
    var userIdFromSession = "@Html.Raw(@HttpContextAccessor.HttpContext.Session.GetString("userid"))";
    var userRoles = "@Html.Raw(@HttpContextAccessor.HttpContext.Session.GetString("role"))";
    var isAdmin = 0;
    if (userRoles == "Admin") {
        isAdmin = 1;
    }
	const columnMap = {};
	const userColumnId = [];
    var exceldata;
    $(document).ready(function () {
        $('#daterange').daterangepicker(
            {
                maxDate: new Date(),
                locale: {
                    format: 'DD/MM/YYYY',
                }
            });

        $("#hide").click(function () {
            $("#chart").hide();
            $("#show").css('display', 'block');
        });
        $("#show").click(function () {
            $("chart").show();
            $("#hide").css('display', 'none');
        });

    });


    window.onload = function () {
        console.log("User Id from session" + userIdFromSession);
        getPageColumns();
        getUserGroupColumns();
        var state = "";
        var spv = "";
        var site_ids = "@Html.Raw(windSiteList.TrimEnd(','))";
        @*$.ajax({
            type: "POST",
            //url: "/WindReport/GetSiteList",
            url: '@Url.Action("GetSiteList", "WindReport")' + '?sitelist=' + site_ids,
            contentType: "application/json; charset=utf-8",
            // data: '{"state":"' + val + '"}',
            datatype: "html",
            success: function (result, status, xhr) {
                var options = "";
                for (var k = 0; k < result.length; k++) {
                    options += '<option value="' + result[k].site_master_id + '">' + result[k].site + '</option>';
                }
                $("#site").html(options);
                $('select#site').multipleSelect({
                    "minimumCountSelected": 1,
                    "placeholder": "Select Site(s)",
                    filter:true
                });
            }

        });*@
        GetSPV(false);
        getSite(false);
    }
    function getPageColumns() {
        $.ajax({
        type: "GET",
       // url: "/WindReport/GetSiteMaster",
          url: '@Url.Action("GetPageColumns", "Home")' + '?page_id=31',
        contentType: "application/json; charset=utf-8",
        //data: '{"countryname":"' + selcountry + '"}',
        datatype: "html",
        success: function (result, status, xhr) {
            if (result.length > 0) {
                console.log(result);
                result.forEach(item => {
                    columnMap[item.column_name] = [item.column_id, item.required];
                });
                console.log(columnMap);
                console.log(columnMap["Country"], " : ", columnMap["Country"][0], "  :  ", columnMap["Country"][1]);
            }
            else {
            }
        }
    });
    }
    function getUserGroupColumns() {
        $.ajax({
        type: "GET",
            // url: "/WindReport/GetSiteMaster",
            url: '@Url.Action("GetUserGroupColumns", "Home")' + '?page_id=31&userId=' + userIdFromSession,
        contentType: "application/json; charset=utf-8",
        //data: '{"countryname":"' + selcountry + '"}',
        datatype: "html",
        success: function (result, status, xhr) {
            if (result.length > 0) {
                console.log(result);
                result.forEach(item => {
                    userColumnId.push(item.column_id);
                });
                console.log(userColumnId);
            }
            else {
            }
        }
    });
    }

    let site_id = "";
    function getReport() {
        var site = "";
        site_id = "";
       /* site = $('select#site option:selected').each(function () {
            site_id += $(this).val() + ",";
        });
        site_id = site_id != "" ? site_id.slice(0, -1) : site_id;
        if (site_id == "" || site_id == null) {
            alert("Please select site ");
            return false;
        }*/
        var cnt = 0;
        $('#site option').each(function () {
            if ($(this).is(':selected')) {
                cnt++;
            }

        });
        if (cnt > 0) {
            var site = $('select#site option:selected').each(function () {
                site_id += $(this).val() + ",";
            });
            site_id = site_id != "" ? site_id.slice(0, -1) : site_id;
        }
        else {
            $('select#site').find('option').each(function () {
                site_id += $(this).val() + ",";
            });
            site_id = site_id != "" ? site_id.slice(0, -1) : site_id;
        }
        console.log("SIte List", site_id);
        document.getElementById("loader").style.display = 'flex';
        document.getElementById("CloseViewTableBtn").style.display = 'none';
        document.getElementById("DailyGenView").style.display = 'none';
      //  console.log(site_id);
        var daterange = $('#daterange').val();
        var arr1 = new Array();
        arr1 = daterange.split("-");
        var fromDate = moment(arr1[0], 'DD/MM/YYYY').format('YYYY-MM-DD');
        var toDate = moment(arr1[1], 'DD/MM/YYYY').format('YYYY-MM-DD');


        getChartData(site_id, fromDate, toDate);
        //setTimeout(() => {
        //    getChartDataYearly(site_id);
        //}, 2000);
        //getChartDataYearly(site_id);
    }

    function GetSPV(fliterVal) {
        let state_id = "";
        let site_ids = "";

        if (fliterVal == false) {
            site_ids = "@Html.Raw(windSiteList.TrimEnd(','))";
        }
        if($('#state').val())
        {
            $('select#state option:selected').each(function () {
                state_id += "'"+$(this).val() + "',";
            });
            state_id = state_id != "" ? state_id.slice(0, -1) : state_id;
        }
        if (state_id != "") {
             site_ids = "@Html.Raw(windSiteList.TrimEnd(','))";
        }
        $.ajax({
            type: "GET",
            ///url: "/WindReport/GetSPVList?state=" + val,
            url: '@Url.Action("GetSPVList", "WindReport")' + '?state=' + state_id + '&sitelist=' + site_ids,
            contentType: "application/json; charset=utf-8",
            datatype: "html",
            success: function (result, status, xhr) {

                var options = "";
                for (var j = 0; j < result.length; j++) {
                    options += '<option value="' + result[j].spv + '">' + result[j].spv + '</option>';
                }
                $("#spv").multipleSelect('destroy');
                $("#spv").html(options);
                $('select#spv').multipleSelect({
                    "minimumCountSelected": 2,
                    "placeholder": "Select SPV(s)",
                    filter:true
                });

            }
        });
        getSite(false);
    }

    function getSite(fliterVal) {
        var site_ids = "";
        if (fliterVal == false) {
            site_ids = "@Html.Raw(windSiteList.TrimEnd(','))";
        }
        let state_id = "";
        $('select#state option:selected').each(function () {
            state_id += $(this).val() + ",";
        });
        state_id = state_id != "" ? state_id.slice(0, -1) : state_id;

        let spv = "";
        $('select#spv option:selected').each(function () {
            spv += $(this).val() + ",";
        });
        spv = spv != "" ? spv.slice(0, -1) : spv;
        if (state_id != "" || spv != "") {
             site_ids = "@Html.Raw(windSiteList.TrimEnd(','))";
        }
        $.ajax({
            type: "POST",
            url: '@Url.Action("GetSiteList", "WindReport")' + '?state=' + state_id + '&spv=' + spv + '&sitelist=' + site_ids,
            contentType: "application/json; charset=utf-8",
            datatype: "html",
            success: function (result, status, xhr) {
                var options = "";
                for (var k = 0; k < result.length; k++) {
                    options += '<option value="' + result[k].site_master_id + '">' + result[k].site + '</option>';
                }
                $("#site").multipleSelect('destroy');
                $("#site").html("").html(options);

                $('select#site').multipleSelect({
                    "minimumCountSelected": 2,
                    "placeholder": "Select Site(s)",
                    filter:true
                });
            }
        });
         /*GetWTG(false);*/
    }

    function exportToExcel() {

        result = exceldata;
        var columns = [
            "Site", "Date", "WTG", "TML_Count", "WindSpeed", "Target_Energy", "Actual_Energy", "Expected_Energy", "USMH_Loss", "SMH_Loss", "OH_Loss", "IGBD_Loss", "EGBD_Loss", "LS_Loss", "PCD", "Lineloss", "MA", "IGA", "EGA_A", "EGA_B", "EGA_C"
        ];

        var rows = [];
        for (var i = 0; i < result.length; i++) {
            var row = [];
            var status = "";
            if (result[i].status_code === 1) {
                status = "Missing";
            }
            if (result[i].status_code === 0) {
                status = "Available";
            }
            var usmh_loss = result[i].usmh_loss + result[i].initialization_loss;
            var formattedDate = moment(result[i].data_date, 'YYYY/MM/DD').format('DD-MM-YYYY');
            row.push(result[i].site);
            row.push(formattedDate);
            row.push(result[i].wtg);
            row.push(result[i].tml_count);
            row.push(result[i].actual_wind_speed);
            row.push(result[i].target_kwh);
            row.push(result[i].actual_active_power);
            row.push(result[i].adjusted_expected);
            row.push(usmh_loss);
            row.push(result[i].smh_loss);
            row.push(result[i].others_loss);
            row.push(result[i].igbd_loss);
            row.push(result[i].egbd_loss);
            row.push(result[i].loadshedding_loss);
            row.push(result[i].pcd_loss);
            row.push(result[i].lineloss_mu);
            row.push(result[i].ma);
            row.push(result[i].iga);
            row.push(result[i].ega_a);
            row.push(result[i].ega_b);
            row.push(result[i].ega_c);
            rows.push(row);
        }

        var data = [columns].concat(rows);

        var ws = XLSX.utils.aoa_to_sheet(data);
        var wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, "Wind Expected Vs Actual");
        var wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'binary' });

        function s2ab(s) {
            var buf = new ArrayBuffer(s.length);
            var view = new Uint8Array(buf);
            for (var i = 0; i !== s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
            return buf;
        }

        saveAs(new Blob([s2ab(wbout)], { type: "application/octet-stream" }), "Wind Expected Vs Actual.xlsx");

    }
    function getTableData() {

        let site_id = "";
       /* var site = $('select#site option:selected').each(function () {
            site_id += $(this).val() + ",";
        });
        site_id = site_id != "" ? site_id.slice(0, -1) : site_id;
        if (site_id == "" || site_id == null) {
            alert("Please select site ");
            return false;
        }*/
        var cnt = 0;
        $('#site option').each(function () {
            if ($(this).is(':selected')) {
                cnt++;
            }

        });
        if (cnt > 0) {
            var site = $('select#site option:selected').each(function () {
                site_id += $(this).val() + ",";
            });
            site_id = site_id != "" ? site_id.slice(0, -1) : site_id;
        }
        else {
            $('select#site').find('option').each(function () {
                site_id += $(this).val() + ",";
            });
            site_id = site_id != "" ? site_id.slice(0, -1) : site_id;
        }
        console.log("SIte List", site_id);

        document.getElementById("loader").style.display = 'flex';
       // console.log(site_id);
        var daterange = $('#daterange').val();
        var arr1 = new Array();
        arr1 = daterange.split("-");
        var fromDate = moment(arr1[0], 'DD/MM/YYYY').format('YYYY-MM-DD');
        var toDate = moment(arr1[1], 'DD/MM/YYYY').format('YYYY-MM-DD');



        $.ajax({
            type: "GET",
            url: '@Url.Action("GetWindTMLData", "WindView")' + '?site='+ site_id + '&fromDate=' + fromDate + '&toDate=' + toDate,
            contentType: "application/json; charset=utf-8",
            datatype: "JSON",

            success: function (result, status, xhr) {
                //console.log(result);
                //console.log("GetWindTmlData fetched successfully.");
                document.getElementById("loader").style.display = 'none';
                document.getElementById("viewTableBtn").style.display = 'none';
                document.getElementById("CloseViewTableBtn").style.display = 'flex';
                document.getElementById("DailyGenView").style.display = 'list-item';
                //calling function of getting data for chart.

                var tbl = '<table id="example1" class="table table-bordered table-striped" style="width: 160%;">';
                tbl += '<thead class="tbl-head"><tr>';
                if (userColumnId.includes(columnMap["Site"][0]) || columnMap["Site"][1] == 1 || isAdmin == 1) {
                    tbl += '<th  style="width: 5%;">Site</th>';
                    
                }
                if (userColumnId.includes(columnMap["Date"][0]) || columnMap["Date"][1] == 1 || isAdmin == 1) {
                    tbl += '<th style="width: 7%;">Date</th>';
                    
                }
                if (userColumnId.includes(columnMap["WTG"][0]) || columnMap["WTG"][1] == 1 || isAdmin == 1) {
                    tbl += '<th>WTG</th>';
                    
                }
                if (userColumnId.includes(columnMap["TML_Count"][0]) || columnMap["TML_Count"][1] == 1 || isAdmin == 1) {
                    tbl += '<th>TML Count</th>';
                    
                }
                if (userColumnId.includes(columnMap["WindSpeed"][0]) || columnMap["WindSpeed"][1] == 1 || isAdmin == 1) {
                    tbl += '<th>WindSpeed (m/s)</th>';
                    
                }
                if (userColumnId.includes(columnMap["Target_Energy"][0]) || columnMap["Target_Energy"][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Target Energy (MU)</th>';
                    
                }
                if (userColumnId.includes(columnMap["Actual_Energy"][0]) || columnMap["Actual_Energy"][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Actual<br> Energy (MU)</th>';
                    
                }
                if (userColumnId.includes(columnMap["Expected_Energy"][0]) || columnMap["Expected_Energy"][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Expected<br> Energy (MU)</th>';
                    
                }
                if (userColumnId.includes(columnMap["USMH_Loss"][0]) || columnMap["USMH_Loss"][1] == 1 || isAdmin == 1) {
                    tbl += '<th>USMH_Loss<br> (MU)</th>';
                    
                }
                if (userColumnId.includes(columnMap["SMH_Loss"][0]) || columnMap["SMH_Loss"][1] == 1 || isAdmin == 1) {
                    tbl += '<th>SMH_Loss<br> (MU)</th>';
                    
                }
                if (userColumnId.includes(columnMap["OH_Loss"][0]) || columnMap["OH_Loss"][1] == 1 || isAdmin == 1) {
                    tbl += '<th>OH_Loss<br> (MU)</th>';
                    
                }
                if (userColumnId.includes(columnMap["IGBDH_Loss"][0]) || columnMap["IGBDH_Loss"][1] == 1 || isAdmin == 1) {
                    tbl += '<th>IGBD_Loss<br> (MU)</th>';
                    
                }
                if (userColumnId.includes(columnMap["EGBDH_Loss"][0]) || columnMap["EGBDH_Loss"][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGBD_Loss<br> (MU)</th>';
                    
                }
                if (userColumnId.includes(columnMap["LS_Loss"][0]) || columnMap["LS_Loss"][1] == 1 || isAdmin == 1) {
                    tbl += '<th>LS_Loss<br> (MU)</th>';
                    
                }
                if (userColumnId.includes(columnMap["PCD"][0]) || columnMap["PCD"][1] == 1 || isAdmin == 1) {
                    tbl += '<th>PCD<br> (MU)</th>';
                    
                }
                if (userColumnId.includes(columnMap["Line_Loss"][0]) || columnMap["Line_Loss"][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Lineloss<br> (MU)</th>';
                    
                }
                if (userColumnId.includes(columnMap["MA"][0]) || columnMap["MA"][1] == 1 || isAdmin == 1) {
                    tbl += '<th>MA<br> (%)</th>';
                    
                }
                if (userColumnId.includes(columnMap["IGA"][0]) || columnMap["IGA"][1] == 1 || isAdmin == 1) {
                    tbl += '<th>IGA<br> (%)</th>';
                    
                }
                if (userColumnId.includes(columnMap["EGA_A"][0]) || columnMap["EGA_A"][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGA_A<br>(%) <span class="information">i<span></th>';
                    
                }
                if (userColumnId.includes(columnMap["EGA_B"][0]) || columnMap["EGA_B"][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGA_B<br>(%) <span class="information">i<span></th>';                    
                }
                if (userColumnId.includes(columnMap["EGA_C"][0]) || columnMap["EGA_C"][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGA_C<br>(%) <span class="information">i<span></th>';
                }
                tbl += '</tr></thead>';

                if (result.length > 0) {
                    exceldata = result;
                    for (var i = 0; i < result.length; i++) {
                        var status = "";
                        if (result[i].status_code === 1) {
                            status = "Missing";
                        }
                        if (result[i].status_code === 0) {
                            status = "Available";
                        }
                        var formattedDate = moment(result[i].data_date, 'YYYY/MM/DD').format('DD-MM-YYYY');
                        tbl += '<tr>';
                        if (userColumnId.includes(columnMap["Site"][0]) || columnMap["Site"][1] == 1 || isAdmin == 1) {
                            tbl += '<td  class="text-center">' + result[i].site + '</td>';
                        }
                        if (userColumnId.includes(columnMap["Date"][0]) || columnMap["Date"][1] == 1 || isAdmin == 1) {
                            tbl += '<td  class="text-center">' + formattedDate + '</td>';
                        }
                        if (userColumnId.includes(columnMap["WTG"][0]) || columnMap["WTG"][1] == 1 || isAdmin == 1) {
                            tbl += '<td  class="text-center">' + result[i].wtg + '</td>';
                        }
                        if (userColumnId.includes(columnMap["TML_Count"][0]) || columnMap["TML_Count"][1] == 1 || isAdmin == 1) {
                            tbl += '<td  class="text-center">' + result[i].tml_count + '</td>';
                        }
                        if (userColumnId.includes(columnMap["WindSpeed"][0]) || columnMap["WindSpeed"][1] == 1 || isAdmin == 1) {
                            tbl += '<td class="text-center">' + result[i].actual_wind_speed + '</td>';
                        }
                        if (userColumnId.includes(columnMap["Target_Energy"][0]) || columnMap["Target_Energy"][1] == 1 || isAdmin == 1) {
                            tbl += '<td class="text-center">' + result[i].target_kwh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap["Actual_Energy"][0]) || columnMap["Actual_Energy"][1] == 1 || isAdmin == 1) {
                            tbl += '<td class="text-center">' + result[i].actual_active_power.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap["Expected_Energy"][0]) || columnMap["Expected_Energy"][1] == 1 || isAdmin == 1) {
                            tbl += '<td class="text-center">' + result[i].adjusted_expected.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap["USMH_Loss"][0]) || columnMap["USMH_Loss"][1] == 1 || isAdmin == 1) {
                            tbl += '<td class="text-center">' + (result[i].usmh_loss + result[i].initialization_loss).toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap["SMH_Loss"][0]) || columnMap["SMH_Loss"][1] == 1 || isAdmin == 1) {
                            tbl += '<td class="text-center">' + result[i].smh_loss.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap["OH_Loss"][0]) || columnMap["OH_Loss"][1] == 1 || isAdmin == 1) {
                            tbl += '<td class="text-center">' + result[i].others_loss.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap["IGBDH_Loss"][0]) || columnMap["IGBDH_Loss"][1] == 1 || isAdmin == 1) {
                            tbl += '<td class="text-center">' + result[i].igbd_loss.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap["EGBDH_Loss"][0]) || columnMap["EGBDH_Loss"][1] == 1 || isAdmin == 1) {
                            tbl += '<td class="text-center">' + result[i].egbd_loss.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap["LS_Loss"][0]) || columnMap["LS_Loss"][1] == 1 || isAdmin == 1) {
                            tbl += '<td class="text-center">' + result[i].loadshedding_loss.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap["PCD"][0]) || columnMap["PCD"][1] == 1 || isAdmin == 1) {
                            tbl += '<td class="text-center">' + result[i].pcd_loss.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap["Line_Loss"][0]) || columnMap["Line_Loss"][1] == 1 || isAdmin == 1) {
                            tbl += '<td class="text-center">' + result[i].lineloss_mu.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap["MA"][0]) || columnMap["MA"][1] == 1 || isAdmin == 1) {
                            tbl += '<td class="text-center">' + result[i].ma.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap["IGA"][0]) || columnMap["IGA"][1] == 1 || isAdmin == 1) {
                            tbl += '<td class="text-center">' + result[i].iga.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap["EGA_A"][0]) || columnMap["EGA_A"][1] == 1 || isAdmin == 1) {
                            tbl += '<td class="text-center">' + result[i].ega_a.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap["EGA_B"][0]) || columnMap["EGA_B"][1] == 1 || isAdmin == 1) {
                            tbl += '<td class="text-center">' + result[i].ega_b.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap["EGA_C"][0]) || columnMap["EGA_C"][1] == 1 || isAdmin == 1) {
                            tbl += '<td class="text-center">' + result[i].ega_c.toFixed(2) + '</td>';
                        }                        
                        tbl += '</tr>';
                    }
                }
                else {

                    // tbl += '<tr><th colspan="19" style="text-align:center">Data Not Available <th></tr>';
                }
               /* for (var i = 0; i < 30; i++) {
                    tbl += '<tr>';
                    tbl += '<td  class="text-center">Alote</td>';
                    tbl += '<td  class="text-center">15-05-2023.</td > ';
                    tbl += '<td  class="text-center">WTG</td>';
                    tbl += '<td  class="text-center">12:10</td>';
                    tbl += '<td class="text-center">12:30</td>';
                    tbl += '<td class="text-center">120</td>';
                    tbl += '<td class="text-center">4.6</td>';
                    tbl += '<td class="text-center">Res</td>';
                    tbl += '<td class="text-center">10</td>';
                    tbl += '<td class="text-center">8</td>';
                    tbl += '<td class="text-center">PCD</td>';
                    tbl += '<td class="text-center">Y</td>';
                    tbl += '<td class="text-center">4.56</td>';
                    tbl += '<td class="text-center">9.3</td>';
                    tbl += '<td class="text-center">4000</td>';
                    tbl += '<td class="text-center">5.3</td>';
                    tbl += '<td class="text-center">32</td>';
                    tbl += '<td class="text-center">65</td>';
                    tbl += '</tr>';
                }*/
                tbl += '</table>';
               // $("#DailyGenView").html(tbl);
                $("#DailyGenView").html("").html(tbl);
                $('#example1').DataTable({
                    dom: 'Bfrtip',
                    fixedHeader: true,
                    responsive: true,
                    scrollX: true,
                    lengthChange: false,
                    autoWidth: true,
                    paging: true,
                    lengthChange: false,
                    searching: true,
                    ordering: true,
                    info: true,
                    autoWidth: true,
                    fixedColumns: {
                        left: 5
                    },
                    pageLength: 50,
                    buttons: [
                        {
                            extend: 'excel',
                            title: 'Wind Expected Vs Actual',
                            exportOptions: {
                                columns: ':visible'
                            }
                        },
                        {
                            extend: 'csv',
                            title: 'Wind Expected Vs Actual',
                            exportOptions: {
                                columns: ':visible'
                            }
                        },

                        'colvis',
                        {
                            text: '<span class="fas fa-file-excel" title="Download from DB up to six decimal"></span>',
                            className: 'btn ml-1   ',

                            action: function () {
                                exportToExcel();
                            }
                        },
                    ],
                    initComplete: function () {
                        this.api().columns().header().to$().each(function () {
                            //$(this).attr('title', 'title for ' + $(this).text())
                            if ($(this).text() == "EGA_A(%) i") {
                                $(this).attr('title', 'External Grid Breakdown, Shutdown & Load Shedding')
                            }
                            if ($(this).text() == "EGA_B(%) i") {
                                $(this).attr('title', 'External Grid Breakdown & Shutdown')
                            }
                            if ($(this).text() == "EGA_C(%) i") {
                                $(this).attr('title', 'Load Shedding')
                            }
                        })
                    }
                });
                $(".dt-buttons").addClass('btn-group flex-wrap');
                $(".dt-buttons > button").addClass('btn btn-secondary');
                $(".dataTables_filter> label >input").addClass('form-control form-control-sm');
                $(document).on("click", "div.dt-button-collection > div > button", function () {
                    if ($(this).hasClass("active")) {
                        $(this).css("background-color", "white");
                    } else {
                        $(this).css("background-color", "#31576d");
                    }
                });
                //$('#example1').wrap("<div class='scrolledTable'></div>");
                //document.getElementById("wms_comparision").style.display = 'block';
                //$('#example1').removeClass('dataTable');
            }
        });
    }

    function closeTableData() {
        document.getElementById("viewTableBtn").style.display = 'flex';
        document.getElementById("DailyGenView").style.display = 'none';
        document.getElementById("CloseViewTableBtn").style.display = 'none';
    }

    var data = [];
    function getChartData(site_id, fromDate, toDate) {

        var fromToDates = getFinancialYearDates(toDate);
        var isYearly = 0;
        console.log("from date : " + fromToDates.fromDate + " to date : " + fromToDates.toDate);
        if (fromDate == fromToDates.fromDate && toDate == fromToDates.toDate) {
            isYearly = 1;
            console.log("Yearly and monthly graph will be same.");
        }

        var expected_final = 0.0;
        var lineloss_final = 0.0;
        var target_final = 0.0;
        var lossUSMH_final = 0.0;
        var lossSMH_final = 0.0;
        var lossNC_final = 0.0;
        var lossIGBD_final = 0.0;
        var lossEGBD_final = 0.0;
        var lossLULL_final = 0.0;
        var lossPCD_final = 0.0;
        var actual_final = 0.0;
        var loadShedding = 0.0;
        //console.log("Inside getChartData function.");
        $.ajax({
            type: "GET",
            url: '@Url.Action("GetWindTMLGraphData", "WindView")' + '?site=' + site_id + '&fromDate=' + fromDate + '&toDate=' + toDate + '&isYearly=' + isYearly,
            contentType: "application/json; charset=utf-8",
            datatype: "JSON",

            success: function (result, status, xhr) {
                //console.log(result);
                //document.getElementById("loader").style.display = 'none';
                var CloseBtnStatus = "";
                var isMonthlyDataPresent = 0;
                CloseBtnStatus = document.getElementById("CloseViewTableBtn").style.display;
                //console.log("Close btn status : " + CloseBtnStatus + " type " + typeof (CloseBtnStatus));
                if (CloseBtnStatus == "flex") {
                    document.getElementById("viewTableBtn").style.display = 'none';
                }
                if (CloseBtnStatus == "none"){
                    document.getElementById("viewTableBtn").style.display = 'flex';
                }
                getChartDataYearly(site_id);

                if (result.length > 0) {
                    for (var i = 0; i < result.length; i++) {
                        //console.log("Expected : ", result[i].expected_final);
                        //console.log("LineLoss : ", result[i].lineloss_final);
                        //console.log("Target : ",result[i].target_final);
                        //console.log("USHM : ",result[i].lossUSMH_final);
                        //console.log("SMH : ",result[i].lossSMH_final);
                        //console.log("NC : ",result[i].lossNC_final);
                        //console.log("IGBD : ",result[i].lossIGBD_final);
                       //console.log("EGBD : ",result[i].lossLULL_final);
                        //console.log("LULL : ",result[i].lossPCD_final);
                        //console.log("Actual : ", result[i].actual_final);
                        //console.log("Load Shedding : ", result[i].loadShedding);

                        expected_final  += result[i].expected_final;
                        lineloss_final  += result[i].lineloss_final;
                        target_final    += result[i].target_final;
                        lossUSMH_final  += result[i].lossUSMH_final;
                        lossSMH_final   += result[i].lossSMH_final;
                        lossNC_final    += result[i].lossNC_final;
                        lossIGBD_final  += result[i].lossIGBD_final;
                        lossEGBD_final  += result[i].lossEGBD_final;
                        lossLULL_final  += result[i].lossLULL_final;
                        lossPCD_final   += result[i].lossPCD_final;
                        actual_final    += result[i].actual_final;
                        loadShedding    += result[i].loadShedding;
                        //isMonthlyDataPresent = Number(result[i].monthlyData);

                        document.getElementById("dataNotPresentDiv").style.display = "none";
                        document.getElementById("Waterfall").style.display = "flex";
                        CreateChart(target_final.toFixed(4), expected_final.toFixed(4), lossUSMH_final.toFixed(4), lossSMH_final.toFixed(4), lossNC_final.toFixed(4), lossIGBD_final.toFixed(4), lossEGBD_final.toFixed(4), lossLULL_final.toFixed(4), lossPCD_final.toFixed(4), lineloss_final.toFixed(4), actual_final.toFixed(4), loadShedding.toFixed(4));

                        //if (isMonthlyDataPresent != 100) {
                        //    document.getElementById("dataNotPresentDiv").style.display = "none";
                        //    document.getElementById("Waterfall").style.display = "flex";
                        //    CreateChart(target_final.toFixed(4), expected_final.toFixed(4), lossUSMH_final.toFixed(4), lossSMH_final.toFixed(4), lossNC_final.toFixed(4), lossIGBD_final.toFixed(4), lossEGBD_final.toFixed(4), lossLULL_final.toFixed(4), lossPCD_final.toFixed(4), lineloss_final.toFixed(4), actual_final.toFixed(4), loadShedding.toFixed(4));
                        //} else {
                        //    var division = document.getElementById("dataNotPresent");
                        //    division.innerHTML = "No Data Present for Days Between " + fromDate + " & " + toDate + " For Selected Sites.";
                        //    division.style.display = "flex";
                        //    document.getElementById("dataNotPresentDiv").style.display = "flex";
                        //    document.getElementById("Waterfall").style.display = "none";
                        //}

                        //console.log("-------------------------------------------");
                        //console.log("Expected : ", expected_final);
                        //console.log("LineLoss : ", lineloss_final);
                        //console.log("Target : ", target_final);
                        //console.log("USHM : ", lossUSMH_final);
                        //console.log("SMH : ", lossSMH_final);
                        //console.log("NC : ", lossNC_final);
                        //console.log("IGBD : ", lossIGBD_final);
                        //console.log("EGBD : ", lossEGBD_final);
                        //console.log("LULL : ", lossLULL_final);
                        //console.log("PCD : ", lossPCD_final);
                        //console.log("Actual : ", actual_final);
                        //console.log("Load Shedding : ", loadShedding);
                        //data = [
                        //    { x: 'Target', value: target_final.toFixed(1) },
                        //    { x: 'Expected', value: expected_final.toFixed(1) },
                        //    { x: 'USMH', value: lossUSMH_final.toFixed(1) },
                        //    { x: 'SMH', value: lossSMH_final.toFixed(1) },
                        //    { x: 'Other', value: lossNC_final.toFixed(1) },
                        //    { x: 'IGBD', value: lossIGBD_final.toFixed(1) },
                        //    { x: 'EGBD', value: lossEGBD_final.toFixed(1) },
                        //    { x: 'LULL', value: lossLULL_final.toFixed(1) },
                        //    { x: 'PCD', value: lossPCD_final.toFixed(1) },
                        //    { x: 'LineLoss', value: lineloss_final.toFixed(1) },
                        //    { x: 'Actual', value: actual_final.toFixed(1) },
                        //];
                    }
                }
                else {

                    // tbl += '<tr><th colspan="19" style="text-align:center">Data Not Available <th></tr>';

                    var division = document.getElementById("dataNotPresent");
                    division.innerHTML = "No Data Present for Days Between " + fromDate + " & " + toDate + " For Selected Sites.";
                    division.style.display = "flex";
                    document.getElementById("dataNotPresentDiv").style.display = "flex";
                    document.getElementById("Waterfall").style.display = "none";
                }
            }
        });


       // console.log("target : ", target_final, " Expected : ", expected_final, " USMH : ", lossUSMH_final, " SMH : ", lossSMH_final, " Other ", lossNC_final, " IGBD : " + lossIGBD_final, " EGBD : ", lossEGBD_final, " LULL : ", lossLULL_final, " PCD : ", lossPCD_final, "Lineloss : ", lineloss_final, " Actual : ", actual_final, " Load Shedding : ", loadShedding);
        //monthlychart(data);

    }

    function getChartDataYearly(site_id) {
        var expected_final = 0.0;
        var lineloss_final = 0.0;
        var target_final = 0.0;
        var lossUSMH_final = 0.0;
        var lossSMH_final = 0.0;
        var lossNC_final = 0.0;
        var lossIGBD_final = 0.0;
        var lossEGBD_final = 0.0;
        var lossLULL_final = 0.0;
        var lossPCD_final = 0.0;
        var actual_final = 0.0;
        var loadShedding = 0.0;
        //console.log("Inside getChartDataYearly function.");
        var data_Array1 = [];
        document.getElementById("loader").style.display = 'flex';
        document.getElementById("viewTableBtn").style.display = 'flex';
        var daterange = $('#daterange').val();
        var arr1 = new Array();
        arr1 = daterange.split("-");
        var today = new Date(arr1[0]);

        fyear = getFinancialYear(today);
        fdate = getFinancialYearDateStartDate(fyear);
        var fromDate = fdate.startdate;//moment(arr1[0], 'DD/MM/YYYY').format('YYYY-MM-DD');
        var toDate = moment(arr1[1], 'DD/MM/YYYY').format('YYYY-MM-DD');

        //var dateParts = fromDate.split('-');
        //var year = parseInt(dateParts[0]);
        //year -= 1;
        //var newDate = new Date(year, dateParts[1] - 1, dateParts[2]);
        //var newFromDate = newDate.toISOString().slice(0, 10);
        //console.log("Yearly Report From date : " + newFromDate + " To date : " + toDate);

       // console.log("Get Yearly Data :- from: " + fromDate + ", to date :" + toDate);
        var fromToDates = getFinancialYearDates(toDate);
        //console.log("Returned result from getFinancialYearDates function FROM : " + fromToDates.fromDate + ", TO : " + fromToDates.toDate);

        $.ajax({
            type: "GET",
            url: '@Url.Action("GetWindTMLGraphData", "WindView")' + '?site=' + site_id + '&fromDate=' + fromToDates.fromDate + '&toDate=' + fromToDates.toDate + '&isYearly=1',
            contentType: "application/json; charset=utf-8",
            datatype: "JSON",

            success: function (result, status, xhr) {
                //console.log(result);
                //document.getElementById("loader").style.display = 'none';

                if (result.length > 0) {
                    for (var i = 0; i < result.length; i++) {
                        //console.log("Expected : ", result[i].expected_final);
                       // console.log("LineLoss : ", result[i].lineloss_final);
                       /// console.log("Target : ",result[i].target_final);
                       //console.log("USHM : ",result[i].lossUSMH_final);
                        //console.log("SMH : ",result[i].lossSMH_final);
                       // console.log("NC : ",result[i].lossNC_final);
                       // console.log("IGBD : ",result[i].lossIGBD_final);
                       // console.log("EGBD : ",result[i].lossLULL_final);
                       // console.log("LULL : ",result[i].lossPCD_final);
                       // console.log("Actual : ", result[i].actual_final);
                       // console.log("Load Shedding : ", result[i].loadShedding);

                        expected_final  += result[i].expected_final;
                        lineloss_final  += result[i].lineloss_final;
                        target_final    += result[i].target_final;
                        lossUSMH_final  += result[i].lossUSMH_final;
                        lossSMH_final   += result[i].lossSMH_final;
                        lossNC_final    += result[i].lossNC_final;
                        lossIGBD_final  += result[i].lossIGBD_final;
                        lossEGBD_final  += result[i].lossEGBD_final;
                        lossLULL_final  += result[i].lossLULL_final;
                        lossPCD_final   += result[i].lossPCD_final;
                        actual_final    += result[i].actual_final;
                        loadShedding    += result[i].loadShedding;

                        CreateChartYearly(target_final.toFixed(4), expected_final.toFixed(4), lossUSMH_final.toFixed(4), lossSMH_final.toFixed(4), lossNC_final.toFixed(4), lossIGBD_final.toFixed(4), lossEGBD_final.toFixed(4), lossLULL_final.toFixed(4), lossPCD_final.toFixed(4), lineloss_final.toFixed(4), actual_final.toFixed(4), loadShedding.toFixed(4));


                        //console.log("-------------------------------------------");
                       // console.log("Expected : ", expected_final);
                        //console.log("LineLoss : ", lineloss_final);
                        //console.log("Target : ", target_final);
                        //console.log("USHM : ", lossUSMH_final);
                       // console.log("SMH : ", lossSMH_final);
                       // console.log("NC : ", lossNC_final);
                        //console.log("IGBD : ", lossIGBD_final);
                        //console.log("EGBD : ", lossEGBD_final);
                       // console.log("LULL : ", lossLULL_final);
                       // console.log("PCD : ", lossPCD_final);
                      //  console.log("Actual : ", actual_final);
                       // console.log("Load Shedding : ", loadShedding);
                        //data = [
                        //    { x: 'Target', value: target_final.toFixed(1) },
                        //    { x: 'Expected', value: expected_final.toFixed(1) },
                        //    { x: 'USMH', value: lossUSMH_final.toFixed(1) },
                        //    { x: 'SMH', value: lossSMH_final.toFixed(1) },
                        //    { x: 'Other', value: lossNC_final.toFixed(1) },
                        //    { x: 'IGBD', value: lossIGBD_final.toFixed(1) },
                        //    { x: 'EGBD', value: lossEGBD_final.toFixed(1) },
                        //    { x: 'LULL', value: lossLULL_final.toFixed(1) },
                        //    { x: 'PCD', value: lossPCD_final.toFixed(1) },
                        //    { x: 'LineLoss', value: lineloss_final.toFixed(1) },
                        //    { x: 'Actual', value: actual_final.toFixed(1) },
                        //];
                    }
                }
                else {
                    document.getElementById("loader").style.display = 'none';
                    // tbl += '<tr><th colspan="19" style="text-align:center">Data Not Available <th></tr>';
                }
            }
        });


        //console.log("target : ", target_final, " Expected : ", expected_final, " USMH : ", lossUSMH_final, " SMH : ", lossSMH_final, " Other ", lossNC_final, " IGBD : " + lossIGBD_final, " EGBD : ", lossEGBD_final, " LULL : ", lossLULL_final, " PCD : ", lossPCD_final, "Lineloss : ", lineloss_final, " Actual : ", actual_final, " Load Shedding : ", loadShedding);
        //monthlychart(data);

    }

    function CreateChart(total_target, total_expected, total_usmh, total_smh, total_oh, total_igbd, total_egbd, total_lull, total_pcd, total_lineloss, total_actual, loadShedding) {
        //console.log("Inside create chart function : Target : " + total_target + " Expected : " + total_expected + " USMH : " + total_usmh + " SMH : " + total_smh + " Other : " + total_oh + " IGBD : " + total_igbd + " EGBD : " + total_egbd + " LULL : " + total_lull + " PCD : " + total_pcd + " Linesloss : " + total_lineloss + " Actual : " + total_actual + " Load Shedding : " + loadShedding);
        Plotly.purge('Waterfall');
        let t_target = Number(total_target).toFixed(2);
        let t_expected = Number(total_expected).toFixed(2);
        let t_usmh = Number(total_usmh).toFixed(2);
        let t_smh = Number(total_smh).toFixed(2);
        let t_oh = Number(total_oh).toFixed(2);
        let t_igbd = Number(total_igbd).toFixed(2);
        let t_egbd = Number(total_egbd).toFixed(2);
        let t_lull = Number(total_lull).toFixed(2);
        let t_pcd = Number(total_pcd).toFixed(2);
        let t_lineloss = Number(total_lineloss).toFixed(2);
        let t_actual = Number(total_actual).toFixed(2);
        let t_loadShedding = Number(loadShedding).toFixed(2);



        // Percentage Value
        //let exp_percentage = ((total_expected - total_target) / total_target) * 100;
        //let usmh_percentage = (total_usmh / total_expected) * 100;
        //let smh_percentage = (total_smh / total_expected) * 100;
        //let oh_percentage = (total_oh / total_expected) * 100;
        //let igbd_percentage = (total_igbd / total_expected) * 100;
        //let egbd_percentage = (total_egbd / total_expected) * 100;
        //let loadShedding_percentage = (loadShedding / total_expected) * 100;
        //let lull_percentage = (total_lull / total_expected) * 100;
        //let pcd_percentage = (total_pcd / total_expected) * 100;
        //let line_percentage = (total_lineloss / total_expected) * 100;
        //let actul_percentage = ((total_actual - total_expected) / total_expected) * 100;

        let tar_percentage = ((total_expected - total_target) / total_target) * 100;
        let exp_percentage = 100;
        let usmh_percentage = (total_usmh / total_expected) * 100;
        let smh_percentage = (total_smh / total_expected) * 100;
        let oh_percentage = (total_oh / total_expected) * 100;
        let igbd_percentage = (total_igbd / total_expected) * 100;
        let egbd_percentage = (total_egbd / total_expected) * 100;
        let loadShedding_percentage = (loadShedding / total_expected) * 100;
        let lull_percentage = (total_lull / total_expected) * 100;
        let pcd_percentage = (total_pcd / total_expected) * 100;
        let line_percentage = (total_lineloss / total_expected) * 100;
        let actul_percentage = ((total_actual) / total_expected) * 100;

        //#86C466 : green. #77CAE7 : blue. #EE403D : red. #14a105 : dark-green.
        //#7dddff
        var columnColors = [
            "#86C466", // Target
            "#7dddff", // Expected
            "#EE403D", // USMH
            "#EE403D", // SMH
            "#EE403D", // Other
            "#EE403D", // IGBD
            "#EE403D", // EGBD
            "#86C466", // PCD
            //"#7dddff", // Lineloss
            "#7dddff"  // Actual
        ];

        let rMeasure = "relative";
        let aMeasure = "absolute";
        let pcdMeasure = "relative";
        let lineLossMeasure = "relative";

        if (Number(total_pcd) > 0) {
            //columnColors[7] = "#EE403D";
            pcdMeasure = "absolute";
        }
        if (Number(total_lineloss) > 0) {
            //columnColors[8] = "#EE403D";
            lineLossMeasure = "absolute";
        }

        var data = [
            {
                //name: "2018",
                type: "waterfall",
                orientation: "v",
                measure: [
                    "relative",
                    "absolute",
                    "relative",
                    "relative",
                    "relative",
                    "relative",
                    "relative",
                    "relative",
                    "relative",
                    //"relative",
                    "absolute"
                ],
                x: [
                    "Target",
                    "Expected",
                    "USMH",
                    "SMH",
                    "Other",
                    "IGBD",
                    "EGBD",
                    "Curtailment",
                    "PCD",
                    //"Lineloss",
                    "Actual"
                ],
                textposition: "outside",
                //textposition: "inside",
                text: [
                    t_target,
                    t_expected,
                    t_usmh,
                    t_smh,
                    t_oh,
                    t_igbd,
                    t_egbd,
                    t_loadShedding,
                    t_pcd ,
                    //t_lineloss,
                    t_actual
                ],
                y: [
                    Number(total_target),
                    Number(total_expected),
                    Number(total_usmh),
                    Number(total_smh),
                    Number(total_oh),
                    Number(total_igbd),
                    Number(total_egbd),
                    Number(loadShedding),
                    Number(total_pcd),
                    //Number(total_lineloss),
                    Number(total_actual)
                ],
                hoverData: [
                    Number(total_target),
                    Number(total_expected),
                    Number(total_usmh),
                    Number(total_smh),
                    Number(total_oh),
                    Number(total_igbd),
                    Number(total_egbd),
                    Number(loadShedding),
                    Number(total_pcd),
                    //Number(total_lineloss),
                    Number(total_actual)
                ],
                hovertemplate: [
                    '<b>Target</b><br>Value: ' + total_target + '<br> (' + tar_percentage.toFixed(2) + '% )',
                    '<b>Expected</b><br>Value: ' + total_expected + '<br> (' + exp_percentage.toFixed(2) + '% )',
                    '<b>USMH</b><br>Value: ' + total_usmh + '<br> (' + usmh_percentage.toFixed(2) + '% )',
                    '<b>SMH</b><br>Value: ' + total_smh + '<br> (' + smh_percentage.toFixed(2) + '% )',
                    '<b>Other</b><br>Value: ' + total_oh + '<br> (' + oh_percentage.toFixed(2) + '% )',
                    '<b>IGBD</b><br>Value: ' + total_igbd + '<br> (' + igbd_percentage.toFixed(2) + '% )',
                    '<b>EGBD</b><br>Value: ' + total_egbd + '<br> (' + egbd_percentage.toFixed(2) + '% )',
                    '<b>Curtailment</b><br>Value: ' + loadShedding + '<br> (' + loadShedding_percentage.toFixed(2) + '% )',
                    '<b>PCD</b><br>Value: ' + total_pcd + '<br> (' + pcd_percentage.toFixed(2) + '% )',
                    //'<b>Lineloss</b><br>Value: ' + total_lineloss + '<br> (' + line_percentage.toFixed(2) + '% )',
                    '<b>Actual</b><br>Value: ' + total_actual + '<br> (' + actul_percentage.toFixed(2) + '% )'
                ],

                    //'<b>%{x}</b><br>' +
                    ///*'Column: %{x}<br>' +*/
                    //'Value: %{y}',
                //absolute: { marker: { color: "#77CAE7" } },
                //relative: { marker: { color: "#77CAE7" } },
                totals: { marker: { color: "#86C466" } },
                increasing: { marker: { color: "#77CAE7" } },
                decreasing: { marker: { color: "#EE403D" } },

                //totals: { marker: { color: columnColors } },
                //increasing: { marker: { color: columnColors } },
                //decreasing: { marker: { color: columnColors } },
                connector: {
                    line: {
                        color: "white"
                    }
                },
            }
        ];
        layout = {
            //title: {
             //   text: "Monthly"
           // },
            xaxis: {
                type: "category",
                fixedrange: true
            },
            yaxis: {
                type: "linear",
                fixedrange: true,
                range: [0, Math.max(...data[0].y) * 1.1]
            },
            autosize: true,
            showlegend: true
        };
        Plotly.newPlot('Waterfall', data, layout);
        document.getElementById("monthTitle").style.display = "block";
        //Plotly.newPlot('Waterfall', data, layout, { staticPlot: true });

    }

    function CreateChartYearly(total_target, total_expected, total_usmh, total_smh, total_oh, total_igbd, total_egbd, total_lull, total_pcd, total_lineloss, total_actual, loadShedding) {
        //console.log("Inside create chart function : Target : " + total_target + " Expected : " + total_expected + " USMH : " + total_usmh + " SMH : " + total_smh + " Other : " + total_oh + " IGBD : " + total_igbd + " EGBD : " + total_egbd + " LULL : " + total_lull + " PCD : " + total_pcd + " Linesloss : " + total_lineloss + " Actual : " + total_actual + " Load Shedding : " + loadShedding);
        Plotly.purge('WaterfallYearly');
        let t_target = Number(total_target).toFixed(2);
        let t_expected = Number(total_expected).toFixed(2);
        let t_usmh = Number(total_usmh).toFixed(2);
        let t_smh = Number(total_smh).toFixed(2);
        let t_oh = Number(total_oh).toFixed(2);
        let t_igbd = Number(total_igbd).toFixed(2);
        let t_egbd = Number(total_egbd).toFixed(2);
        let t_lull = Number(total_lull).toFixed(2);
        let t_pcd = Number(total_pcd).toFixed(2);
        let t_lineloss = Number(total_lineloss).toFixed(2);
        let t_actual = Number(total_actual).toFixed(2);
        let t_loadShedding = Number(loadShedding).toFixed(2);


        // Percentage Value
        /*let exp_percentage = ((total_expected - total_target) / total_target) * 100;*/
        let tar_percentage = ((total_expected - total_target) / total_target) * 100;
        let exp_percentage = 100;
        let usmh_percentage = (total_usmh / total_expected) * 100;
        let smh_percentage = (total_smh / total_expected) * 100;
        let oh_percentage = (total_oh / total_expected) * 100;
        let igbd_percentage = (total_igbd / total_expected) * 100;
        let egbd_percentage = (total_egbd / total_expected) * 100;
        let loadShedding_percentage = (loadShedding / total_expected) * 100;
        let lull_percentage = (total_lull / total_expected) * 100;
        let pcd_percentage = (total_pcd / total_expected) * 100;
        let line_percentage = (total_lineloss / total_expected) * 100;
        let actul_percentage = ((total_actual) / total_expected) * 100;

        var data = [
            {
                //name: "2018",
                type: "waterfall",
                orientation: "v",
                measure: [
                    "relative",
                    "absolute",
                    "relative",
                    "relative",
                    "relative",
                    "relative",
                    "relative",
                    "relative",
                    "relative",
                    //"relative",
                    "absolute"
                ],
                x: [
                    "Target",
                    "Expected",
                    "USMH",
                    "SMH",
                    "Other",
                    "IGBD",
                    "EGBD",
                    "Curtailment",
                    "PCD",
                    //"Lineloss",
                    "Actual"
                ],
                textposition: "outside",
                //textposition: "inside",
                text: [
                    t_target,
                    t_expected,
                    t_usmh,
                    t_smh,
                    t_oh,
                    t_igbd,
                    t_egbd,
                    t_loadShedding,
                    t_pcd,
                    //t_lineloss,
                    t_actual
                ],
                y: [
                    Number(total_target),
                    Number(total_expected),
                    Number(total_usmh),
                    Number(total_smh),
                    Number(total_oh),
                    Number(total_igbd),
                    Number(total_egbd),
                    Number(loadShedding),
                    Number(total_pcd),
                    //Number(total_lineloss),
                    Number(total_actual)
                ],
                hovertemplate: [
                    '<b>Target</b><br>Value: ' + total_target + '<br> (' + tar_percentage.toFixed(2) + '% )',
                    '<b>Expected</b><br>Value: ' + total_expected + '<br> (' + exp_percentage.toFixed(2) + '% )',
                    '<b>USMH</b><br>Value: ' + total_usmh + '<br> (' + usmh_percentage.toFixed(2) + '% )',
                    '<b>SMH</b><br>Value: ' + total_smh + '<br> (' + smh_percentage.toFixed(2) + '% )',
                    '<b>Other</b><br>Value: ' + total_oh + '<br> (' + oh_percentage.toFixed(2) + '% )',
                    '<b>IGBD</b><br>Value: ' + total_igbd + '<br> (' + igbd_percentage.toFixed(2) + '% )',
                    '<b>EGBD</b><br>Value: ' + total_egbd + '<br> (' + egbd_percentage.toFixed(2) + '% )',
                    '<b>Curtailment</b><br>Value: ' + loadShedding + '<br> (' + loadShedding_percentage.toFixed(2) + '% )',
                    '<b>PCD</b><br>Value: ' + total_pcd + '<br> (' + pcd_percentage.toFixed(2) + '% )',
                    //'<b>Lineloss</b><br>Value: ' + total_lineloss + '<br> (' + line_percentage.toFixed(2) + '% )',
                    '<b>Actual</b><br>Value: ' + total_actual + '<br> (' + actul_percentage.toFixed(2) + '% )'
                ],
                //hovertemplate: '<b>%{x}</b><br>' +
                //    /*'Column: %{x}<br>' +*/
                //    'Value: %{y}',
                //absolute: { marker: { color: "#77CAE7" } },
                //relative: { marker: { color: "#77CAE7" } },
                totals: { marker: { color: "#86C466" } },
                increasing: { marker: { color: "#77CAE7" } },
                decreasing: { marker: { color: "#EE403D" } },
                connector: {
                    line: {
                        color: "white"
                    }
                },
            }
        ];
        layout = {
            //title: {
            //    text: "Yearly"
          //  },
            xaxis: {
                type: "category",
                fixedrange: true
            },
            yaxis: {
                type: "linear",
                fixedrange: true,
                range: [0, Math.max(...data[0].y) * 1.1]
            },
            autosize: true,
            showlegend: true
        };
        Plotly.newPlot('WaterfallYearly', data, layout);
        document.getElementById("yearTitle").style.display = 'block';
        document.getElementById("loader").style.display = 'none';
        //Plotly.newPlot('Waterfall', data, layout, { staticPlot: true });

    }

    function clearRecords() {
        //console.log("Inside clear onclick function.");
        var table = document.getElementById("example1");
        table.innerHTML = "";

        const dataTable = $('#example1').DataTable();

        // clear the DataTable
        dataTable.clear().draw();
    }


</script>




