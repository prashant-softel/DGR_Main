@using Newtonsoft.Json;
@using Microsoft.AspNetCore.Http;
@inject IHttpContextAccessor HttpContextAccessor
@model DGRA_V1.Models.CountryList
@{
    ViewData["Title"] = "Wind Breakdown Details";
}

@{
    string windUserSiteList = "";

    var usermodel = JsonConvert.DeserializeObject<UserAccess>(@HttpContextAccessor.HttpContext.Session.GetString("UserAccess"));

}
@for (int i = 0; i < @usermodel.access_list.Count; i++)
{

    if (@usermodel.access_list[i].page_type == 3 && @usermodel.access_list[i].site_type == 1)
    {
        windUserSiteList += @usermodel.access_list[i].identity.ToString() + ",";
    }
}



<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700&display=fallback">
<!-- Font Awesome -->
<link rel="stylesheet" href="~/Content/theme/plugins/fontawesome-free/css/all.min.css">
<!-- daterange picker -->
<link rel="stylesheet" href="~/Content/theme/plugins/daterangepicker/daterangepicker.css">
<link rel="stylesheet" href="~/Content/theme/plugins/multiple-select/dist/multiple-select.min.css" />
<!-- DataTables -->
<link rel="stylesheet" href="~/Content/theme/plugins/datatables-bs4/css/dataTables.bootstrap4.min.css">
<link rel="stylesheet" href="~/Content/theme/plugins/datatables-responsive/css/responsive.bootstrap4.min.css">
<link rel="stylesheet" href="https://cdn.datatables.net/fixedcolumns/4.3.0/css/fixedColumns.dataTables.min.css" />
<link href="~/Content/theme/plugins/datatables/fixedHeader.dataTables.min.css" rel="stylesheet" />
@*<link rel="stylesheet" href="~/Content/theme/plugins/datatables-buttons/css/buttons.bootstrap4.min.css">*@

<link href="~/Content/theme/dist/css/adminlte.css" rel="stylesheet" />
<!-- dropdown search -->
<link href="https://unpkg.com/multiple-select@1.5.2/dist/multiple-select.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js"></script>
<script src="https://unpkg.com/multiple-select@1.5.2/dist/multiple-select.min.js"></script>

<div class="content-wrapper">

    <section class="content-header">
    </section>


    <section class="content">
        <style>
            .custom-input {
                max-width: 100%;
            }
        </style>
        <div class="card">
            <div class="card-header">
                <h3 class="card-title text-center">Wind Breakdown Report</h3>
            </div>
            <div class="card-body">
                <div class="row" style="margin-top: -14px;">
                    <div class="chart col-sm-8"></div>
                    <div class="chart col-sm-4 text-right" id="customDiv">
                        <span style="margin-left: -20px; margin-top: -6px;">
                            <input type="checkbox" class="form-check-input group_by_site" id="group_by_site" name="group_by_site" value="1" style="width: 17px; height: 16px;" onclick="grouping_site()">
                        </span>
                        <span><b>&nbsp;&nbsp;&nbsp;Custom Grouping of Site</b></span>
                    </div>
                </div>
                <div class="row" id="no_group" style="display:flex">
                    <div class="col-12">
                        <div class="row mt-3">
                            <div class="col-sm-4">
                                <div class="form-group row">
                                    <label class="col-sm-3 col-form-label text-right">Date:</label>
                                    <div class="col-sm-9">
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <span class="input-group-text">
                                                    <i class="far fa-calendar-alt"></i>
                                                </span>
                                            </div>
                                            <input type="text" class="form-control custom-input" id="daterange" name="daterange">
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-sm-4">
                                <div class="form-group row">
                                    <label class="col-sm-3 col-form-label text-right">Country:</label>
                                    <div class="col-sm-9">
                                        <select class="form-control custom-input" id="country" name="country">
                                            <option value="india" selected>India</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                            <div class="col-sm-4">
                                <div class="form-group row">
                                    <label class="col-sm-3 col-form-label text-right">State:</label>
                                    <div class="col-sm-9">
                                        <select class="form-control custom-input" id="state" name="state[]" multiple onchange="GetSPV()"></select>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row mt-3">
                            <div class="col-sm-4">
                                <div class="form-group row">
                                    <label class="col-sm-3 col-form-label text-right">SPV:</label>
                                    <div class="col-sm-9">
                                        <select class="form-control custom-input" id="spv" name="spv[]" multiple onchange="GetSite()"></select>
                                    </div>
                                </div>
                            </div>
                            <div class="col-sm-4">
                                <div class="form-group row">
                                    <label class="col-sm-3 col-form-label text-right">Site:</label>
                                    <div class="col-sm-9">
                                        <select class="form-control custom-input" id="site" name="site[]" multiple onchange="GetWTG(true)"></select>
                                    </div>
                                </div>
                            </div>
                            <div class="col-sm-4">
                                <div class="form-group row">
                                    <label class="col-sm-3 col-form-label text-right">WTG:</label>
                                    <div class="col-sm-9">
                                        <select class="form-control custom-input" id="wtg" name="wtg[]" multiple></select>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row mt-3 justify-content-center">
                            <div class="col-sm-4 d-flex justify-content-center">
                                <button type="button" class="btn btn-primary" onclick="GetBrekdownReport();" style="width: 5rem; line-height: 1.3;">Search</button>
                            </div>
                        </div>

                    </div>
                </div>

                <div class="row" id="groupbysite" style="display:none">
                    <div class="col-sm-4">
                        <div class="input-group">
                            <label class="col-sm-2 col-form-label text-left">Date:</label>
                            <div class="input-group-prepend">
                                <span class="input-group-text">
                                    <i class="far fa-calendar-alt"></i>
                                </span>
                            </div>
                            <input type="text" class="form-control float-right col-sm-8" id="daterange_group" name="daterange">
                        </div>
                    </div>
                    <div class="col-sm-4">
                        <div class="form-group">
                            <div class="row">
                                <label class="col-sm-4 col-form-label text-right">Custom Group:</label>
                                <select class="form-control col-sm-8" id="cust_group" name="cust_group[]" value="" multiple></select>
                            </div>
                        </div>
                    </div>
                    <br />

                    <div class="col-sm-2 text-left">
                        <button type="button" class="btn btn-block btn-primary" onclick="GetBreakdownReportGroup();" style="margin-left: 2rem; width: 5rem; line-height: 1.3;">Search</button>
                    </div>
                </div>
                <hr>
                <div id="reports" style="overflow-x: auto;" class="reports"></div>
                <div id="loader" class="loader center" style="display: none;"></div>
            </div>
        </div>
    </section>

</div>
<script src="~/Content/theme/plugins/jquery/jquery.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js"></script>
<script src="~/Content/theme/plugins/moment/moment.min.js"></script>
<script src="~/Content/theme/plugins/daterangepicker/daterangepicker.js" defer></script>
@*<script src="~/Content/theme/plugins/tempusdominus-bootstrap-4/js/tempusdominus-bootstrap-4.min.js"></script>*@
<script src="~/Content/theme/plugins/multiple-select/dist/multiple-select.min.js" defer></script>
<script src="~/Content/theme/plugins/summernote/summernote-bs4.min.js"></script>
<script src="~/Content/theme/plugins/inputmask/jquery.inputmask.min.js"></script>
<!--Datatable -->
<!-- DataTables  & Plugins -->
<script src="~/Content/theme/plugins/datatables/jquery.dataTables.min.js"></script>
<script src="~/Content/theme/plugins/datatables/jquery.dataTables.js" defer></script>
<script src="~/Content/theme/plugins/datatables/dataTables.fixedHeader.min.js" defer></script>
<script src="https://cdn.datatables.net/fixedcolumns/4.3.0/js/dataTables.fixedColumns.min.js" defer></script>
<script src="~/Content/theme/plugins/datatables-buttons/js/dataTables.buttons.min.js" defer></script>
<script src="~/Content/theme/plugins/jszip/jszip.min.js" defer></script>
<script src="~/Content/theme/plugins/datatables-buttons/js/buttons.html5.min.js" defer></script>
<script src="~/Content/theme/plugins/pdfmake/pdfmake.min.js" defer></script>
<script src="~/Content/theme/plugins/datatables-buttons/js/buttons.colVis.min.js" defer></script>
<script src="~/Content/theme/dist/js/comman.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.5/xlsx.full.min.js"></script>
<!--<script src="~/Content/theme/plugins/datatables/dataTables.fixedHeader.min.js" defer></script>-->

<script type="text/javascript">
    var userIdFromSession = "@Html.Raw(@HttpContextAccessor.HttpContext.Session.GetString("userid"))";
    var userRoles = "@Html.Raw(@HttpContextAccessor.HttpContext.Session.GetString("role"))";
    var isAdmin = 0;
    if (userRoles == "Admin") {
        isAdmin = 1;
    }
    var fixedColumnsLeft = (isAdmin === 1) ? 5 : 3;
    const columnMap = {};
    const userColumnId = [];

    var exceldata;
    var userRole = "@Html.Raw(@HttpContextAccessor.HttpContext.Session.GetString("role"))";
    var windUserAccess = "@Html.Raw(windUserSiteList.TrimEnd(','))";


    $(document).ready(function () {
        $('#daterange').daterangepicker(
            {
                maxDate: new Date(),
                locale: {
                    format: 'DD/MM/YYYY',
                }
            });
    });
    window.onload = function () {
        console.log("User Id from session" + userIdFromSession);
        getPageColumns();
        getCutomeGroup();
        getUserGroupColumns();
        GetState();
           // GetSPV(false);
           // getSite(false);
            //GetWTG(false);

    }
    function getPageColumns() {
        $.ajax({
        type: "GET",
       // url: "/WindReport/GetSiteMaster",
          url: '@Url.Action("GetPageColumns", "Home")' + '?page_id=10',
        contentType: "application/json; charset=utf-8",
        //data: '{"countryname":"' + selcountry + '"}',
        datatype: "html",
        success: function (result, status, xhr) {
            if (result.length > 0) {
                console.log(result);
                result.forEach(item => {
                    columnMap[item.column_name] = [item.column_id, item.required];
                });
                console.log(columnMap);
                console.log(columnMap["Country"], " : ", columnMap["Country"][0], "  :  ", columnMap["Country"][1]);
            }
            else {
            }
        }
    });
    }

    function grouping_site() {
        var checkBox = document.getElementById("group_by_site");
        console.log(checkBox.checked);

        if (checkBox.checked) {
            // Show only the custom grouping fields
            document.getElementById('no_group').style.display = 'none';
            //document.getElementById('no_group_tab').style.display = 'none'; // Hide this if you don't want it visible
            document.getElementById('groupbysite').style.display = 'flex';
            //document.getElementById('reportsDailygroup').style.display = 'none';
            //document.getElementById('pr_reports').style.display = 'none';
        } else {
            // Show all other fields
            document.getElementById('no_group').style.display = 'flex';
            //document.getElementById('no_group_tab').style.display = 'flex';
            document.getElementById('groupbysite').style.display = 'none';
            //document.getElementById('reportsDailygroup').style.display = 'block';
            //document.getElementById('pr_reports').style.display = 'block';
        }
    }
    $(document).ready(function () {
        console.log("Role=>", userRole);
        if (userRole != "Admin") {
            document.getElementById("customDiv").style.display = "none";
            GetCustomGroupAccess();
        }
        $('#daterange').daterangepicker(
            {
                maxDate: new Date(),
                locale: {
                    format: 'DD/MM/YYYY',
                }
            });
        $('#daterange_group').daterangepicker(
            {
                maxDate: new Date(),
                locale: {
                    format: 'DD/MM/YYYY',
                }
            });
    });

    function getCutomeGroup()
    {
        $.ajax({
            type: "POST",
            url: '@Url.Action("GetCustomGroup", "SolarReport")?siteType=0',
            contentType: "application/json; charset=utf-8",
            datatype: "html",
            success: function (result, status, xhr)
            {
                var options = "";
                for (var k = 0; k < result.length; k++)
                {
                    options += '<option value="' + result[k].site_ids + '">' + result[k].cust_group + '</option>';
                }
                $("#cust_group").multipleSelect('destroy');
                $("#cust_group").html("").html(options);
                $('select#cust_group').multipleSelect({
                    "minimumCountSelected": 2,
                    "placeholder": "Select Group(s)",
                    filter:true
                });
            }
        });
    }

    function getUserGroupColumns() {
        $.ajax({
        type: "GET",
            // url: "/WindReport/GetSiteMaster",
            url: '@Url.Action("GetUserGroupColumns", "Home")' + '?page_id=10&userId=' + userIdFromSession,
        contentType: "application/json; charset=utf-8",
        //data: '{"countryname":"' + selcountry + '"}',
        datatype: "html",
        success: function (result, status, xhr) {
            if (result.length > 0) {
                console.log(result);
                result.forEach(item => {
                    userColumnId.push(item.column_id);
                });
                console.log(userColumnId);
            }
            else {
            }
        }
    });
    }

        function GetState() {
        $('select#country').multipleSelect({
            "placeholder": "Select country",
            filter: true
        });
            var selcountry = $('select#country option:selected').val();
             var site_ids = "@Html.Raw(windUserSiteList.TrimEnd(','))";
        $.ajax({
            type: "GET",
           // url: "/WindReport/GetStateList?countryname=" + selcountry,
            url: '@Url.Action("GetStateList", "WindReport")' + '?countryname=' + selcountry + '&sitelist=' + site_ids,
            contentType: "application/json; charset=utf-8",
            //data: '{"countryname":"' + selcountry + '"}',
            datatype: "html",
            success: function (result, status, xhr) {
                var options = "";
               // options += '<option value="">Select State</option>';
                for (var i = 0; i < result.length; i++) {
                    options += '<option value="' + result[i].state + '">' + result[i].state + '</option>';
                }
                $("#state").html(options);
                $('select#state').multipleSelect({
                    "minimumCountSelected": 2,
                    "placeholder": "Select State(s)",
                    filter:true
                });
                $('#spv').multipleSelect('destroy');
                GetSPV();
                //getSite(false);
               // GetWTG(false);
            }
        });

    }

        function GetSPV() {
            let stateData = [];
            $('select#state option:selected').each(function () {
                stateData.push("'" + $(this).val() + "'");
            });
            let statelist = stateData.join(',');
           // stateData = stateData != "" ? stateData.slice(0, -1) : stateData;
            console.log(statelist);
              var site_ids = "@Html.Raw(windUserSiteList.TrimEnd(','))";
        $.ajax({
            type: "GET",
           // url: "/WindReport/GetSPVList?state=" + val,
            url: '@Url.Action("GetSPVList", "WindReport")' + '?state=' + stateData + '&sitelist=' + site_ids,
            contentType: "application/json; charset=utf-8",
            //data: '{"state":"' + val + '"}',
            datatype: "html",
            success: function (result, status, xhr) {
                var options = "";
               // options += '<option value="">Select SPV</option>';
                for (var j = 0; j < result.length; j++) {
                    options += '<option value="' + result[j].spv + '">' + result[j].spv + '</option>';
                }
                $("#spv").html(options);
                $('#spv').multipleSelect('destroy');
                $('select#spv').multipleSelect({
                    "minimumCountSelected": 2,
                    "placeholder": "Select SPV(s)",
                    filter:true
                });
               // $('#site').multipleSelect('destroy');
                getSite(false);
            }
        });

    }
    function getSite(fliterVal) {
        var site_ids = "";
        if (fliterVal == false) {
            site_ids = "@Html.Raw(windUserSiteList.TrimEnd(','))";
        }
        let statelist = "";
        $('select#state option:selected').each(function () {
            statelist += $(this).val() + ",";
            // console.log($(this).val());

        });
        statelist = statelist != "" ? statelist.slice(0, -1) : statelist;
        let spvlist = "";
        $('select#spv option:selected').each(function () {
            spvlist += $(this).val() + ",";
        });
        spvlist = spvlist != "" ? spvlist.slice(0, -1) : spvlist;
        if (spvlist != "") {
             site_ids = "@Html.Raw(windUserSiteList.TrimEnd(','))";
        }
        $.ajax({
            type: "POST",
            url: '@Url.Action("GetSiteList", "WindReport")' + '?state=' + statelist + '&spv=' + spvlist + '&sitelist=' + site_ids,
            contentType: "application/json; charset=utf-8",
            // data: '{"state":"' + val + '"}',
            datatype: "html",
            success: function (result, status, xhr) {
                var options = "";
               // options += '<option value="">Select Site</option>';
                for (var k = 0; k < result.length; k++) {
                    options += '<option value="' + result[k].site_master_id + '">' + result[k].site + '</option>';
                }
                $("#site").html(options);
                $('#site').multipleSelect('destroy');
                $('select#site').multipleSelect({
                    "minimumCountSelected": 2,
                    "placeholder": "Select Site(s)",
                    filter:true
                });

                GetWTG(false);
               // $('#wtg').multipleSelect('destroy');
            }
        });
        }

        function GetWTG(fliterVal) {
            var site_ids = "";
            if (fliterVal == false) {
                site_ids = "@Html.Raw(windUserSiteList.TrimEnd(','))";
            }
            else {
                $('select#site option:selected').each(function () {
                    site_ids += $(this).val() + ",";
                 });
                site_ids = site_ids != "" ? site_ids.slice(0, -1) : site_ids;
            }
            $.ajax({
            type: "GET",
            //url: "/WindReport/GetWTGList?siteid=" + siteid,
            url: '@Url.Action("GetWTGList", "WindReport")' + '?siteid=' + site_ids ,
            contentType: "application/json; charset=utf-8",
            // data: '{"state":"' + val + '"}',
            datatype: "html",
            success: function (result, status, xhr) {
                var options = "";
               // options += '<option value="">Select WTG</option>';
                for (var k = 0; k < result.length; k++) {
                    options += '<option value="' + result[k].wtg + '">' + result[k].wtg + '</option>';
                }
                $("#wtg").html(options);
                $('#wtg').multipleSelect('destroy');
                $('select#wtg').multipleSelect({
                    "minimumCountSelected": 2,
                    "placeholder": "Select WTG(s)",
                    filter:true
                });
            }
        });
    }


    function exportToExcel() {

        result = exceldata;
        var columns = [
            "Date", "Country", "State", "SPV", "Site", "WTG", "BD_Type", "Start_From", "Stop_To", "Total_Stop", "Reason of Breakdown", "Action Taken"
        ];

        var rows = [];
        for (var i = 0; i < result.length; i++) {
            var row = [];
            var formattedDate = moment(result[i].date, 'YYYY/MM/DD').format('DD-MM-YYYY');
            row.push(formattedDate);
            row.push(result[i].country);
            row.push(result[i].state);
            row.push(result[i].spv);
            row.push(result[i].site);
            row.push(result[i].wtg);
            row.push(result[i].bd_type);
            row.push(toHoursAndMinutes(result[i].stop_from.totalSeconds));
            row.push(toHoursAndMinutes(result[i].stop_to.totalSeconds));
            row.push(toHoursAndMinutes(result[i].total_stop.totalSeconds));
            row.push(result[i].error_description);
            row.push(result[i].action_taken);
            rows.push(row);
        }

        var data = [columns].concat(rows);

        var ws = XLSX.utils.aoa_to_sheet(data);
        var wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, "Wind Breakdown Reports");
        var wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'binary' });

        function s2ab(s) {
            var buf = new ArrayBuffer(s.length);
            var view = new Uint8Array(buf);
            for (var i = 0; i !== s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
            return buf;
        }

        saveAs(new Blob([s2ab(wbout)], { type: "application/octet-stream" }), "Wind Breakdown Reports.xlsx");

    }



// ------------  Get Report ---------------//
    function GetBrekdownReport() {

        var daterange = $('#daterange').val();
        var arr1 = new Array();
        arr1 = daterange.split("-");
        var fromDate = moment(arr1[0], 'DD/MM/YYYY').format('YYYY-MM-DD');
        var toDate = moment(arr1[1], 'DD/MM/YYYY').format('YYYY-MM-DD');
        var country = $('select#country option:selected').val();
        let state = "";
        let spv = "";
        let site = "";//$('select#site option:selected').val();
        let wtg = "";//$('select#wtg option:selected').val();
        $('select#site option:selected').each(function () {
            site += $(this).val() + ",";
        });
        site = site != "" ? site.slice(0, -1) : site;

        console.log("site :",site);
        if (site == null || site == undefined || site == "") {
            $('select#state option:selected').each(function () {
                state += $(this).val() + ",";
            });
            state = state != "" ? state.slice(0, -1) : state;

            $('select#spv option:selected').each(function () {
                spv += $(this).val() + ",";
            });
            spv = spv != "" ? spv.slice(0, -1) : spv;

        }
        if (userRole == "User" && site == "") {
            site = windUserAccess;
        }


        $('select#wtg option:selected').each(function () {
            wtg += $(this).val() + ",";
        });
        wtg = wtg != "" ? wtg.slice(0, -1) : wtg;

        document.getElementById("loader").style.display = 'flex';

        //var wtg = $('select#wtg option:selected').val();
        $.ajax({
            type: "GET",
            //url: "/WindReport/GetWindBreakdownReport?fromDate=" + fromDate + "&toDate=" + toDate + "&country=" + country + "&state=" + state + "&spv=" + spv + "&site=" + site + "&wtg=" + wtg,
            url: '@Url.Action("GetWindBreakdownReport", "WindReport")' + '?fromDate=' + fromDate + '&toDate=' + toDate + '&country=' + country + '&state=' + state + '&spv=' + spv + '&site=' + site + '&wtg=' + wtg,
            contentType: "application/json; charset=utf-8",
            // data: '{"fromDate":"' + fromDate + '","toDate":"' + toDate + '","country":"' + country + '","state":"' + state + '","spv":"' + spv + '","site":"' + site + '","wtg":"' + wtg+'" }',
            datatype: "JSON",
            success: function (result, status, xhr) {
                //console.log(result);
                var tbl = '<table id="example1" class="table table-bordered table-striped dataTable dtr-inline" style="width: 140%;">';
                tbl += '<thead class="tbl-head"><tr>';
                if (userColumnId.includes(columnMap["Date"][0]) || columnMap["Date"][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Date</th>';
                }
                if (userColumnId.includes(columnMap["Country"][0]) || columnMap["Country"][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Country</th>';
                }
                if (userColumnId.includes(columnMap["State"][0]) || columnMap["State"][1] == 1 || isAdmin == 1) {
                    tbl += '<th>State</th>';
                }
                if (userColumnId.includes(columnMap["SPV"][0]) || columnMap["SPV"][1] == 1 || isAdmin == 1) {
                    tbl += '<th>SPV</th>';
                }
                if (userColumnId.includes(columnMap["Site"][0]) || columnMap["Site"][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Site</th>';
                }
                if (userColumnId.includes(columnMap["WTG"][0]) || columnMap["WTG"][1] == 1 || isAdmin == 1) {
                    tbl += '<th>WTG</th>';
                }
                if (userColumnId.includes(columnMap["Bd_Type"][0]) || columnMap["Bd_Type"][1] == 1 || isAdmin == 1) {
                    tbl += '<th>BD_Type</th>';
                }
                if (userColumnId.includes(columnMap["Start_From"][0]) || columnMap["Start_From"][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Start_From</th>';
                }
                if (userColumnId.includes(columnMap["Stop_To"][0]) || columnMap["Stop_To"][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Stop_To</th>';
                }
                if (userColumnId.includes(columnMap["Total_Stop"][0]) || columnMap["Total_Stop"][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Total_Stop</th>';
                }
                if (userColumnId.includes(columnMap["Reason_of_Breakdown"][0]) || columnMap["Reason_of_Breakdown"][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Reason of Breakdown</th>';
                }
                if (userColumnId.includes(columnMap["Action_Taken"][0]) || columnMap["Action_Taken"][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Action Taken</th>';
                }
                tbl += '</tr></thead>';
                console.log(result.length);
                if (result.length > 0) {
                    exceldata = result;
                    console.log("Datatable");
                    for (var i = 0; i < result.length; i++) {
                        var formattedDate = moment(result[i].date, 'YYYY/MM/DD').format('DD-MM-YYYY');
                        tbl += '<tr>';
                        if (userColumnId.includes(columnMap["Date"][0]) || columnMap["Date"][1] == 1 || isAdmin == 1) {
                            tbl += '<td class="text-left" style="text-wrap: nowrap;">' + formattedDate + '</td>';
                        }
                        if (userColumnId.includes(columnMap["Country"][0]) || columnMap["Country"][1] == 1 || isAdmin == 1) {
                            tbl += '<td class="text-left">' + result[i].country + '</td>';
                        }
                        if (userColumnId.includes(columnMap["State"][0]) || columnMap["State"][1] == 1 || isAdmin == 1) {
                            tbl += '<td class="text-left">' + result[i].state + '</td>';
                        }
                        if (userColumnId.includes(columnMap["SPV"][0]) || columnMap["SPV"][1] == 1 || isAdmin == 1) {
                            tbl += '<td class="text-left" style="text-wrap: nowrap;">' + result[i].spv + '</td>';
                        }
                        if (userColumnId.includes(columnMap["Site"][0]) || columnMap["Site"][1] == 1 || isAdmin == 1) {
                            tbl += '<td class="text-left">' + result[i].site + '</td>';
                        }
                        if (userColumnId.includes(columnMap["WTG"][0]) || columnMap["WTG"][1] == 1 || isAdmin == 1) {
                            tbl += '<td class="text-left">' + result[i].wtg + '</td>';
                        }
                        if (userColumnId.includes(columnMap["Bd_Type"][0]) || columnMap["Bd_Type"][1] == 1 || isAdmin == 1) {
                            tbl += '<td class="text-left" style="text-wrap: nowrap;">' + result[i].bd_type + '</td>';
                        }
                        if (userColumnId.includes(columnMap["Start_From"][0]) || columnMap["Start_From"][1] == 1 || isAdmin == 1) {
                            tbl += '<td class="text-right">' + toHoursAndMinutes(result[i].stop_from.totalSeconds) + '</td>';
                        }
                        if (userColumnId.includes(columnMap["Stop_To"][0]) || columnMap["Stop_To"][1] == 1 || isAdmin == 1) {
                            tbl += '<td class="text-right">' + toHoursAndMinutes(result[i].stop_to.totalSeconds) + '</td>';
                        }
                        if (userColumnId.includes(columnMap["Total_Stop"][0]) || columnMap["Total_Stop"][1] == 1 || isAdmin == 1) {
                            tbl += '<td class="text-right">' + toHoursAndMinutes(result[i].total_stop.totalSeconds) + '</td>';
                        }
                        if (userColumnId.includes(columnMap["Reason_of_Breakdown"][0]) || columnMap["Reason_of_Breakdown"][1] == 1 || isAdmin == 1) {
                            tbl += '<td class="text-left">' + result[i].error_description + '</td>';
                        }
                        if (userColumnId.includes(columnMap["Action_Taken"][0]) || columnMap["Action_Taken"][1] == 1 || isAdmin == 1) {
                            tbl += '<td class="text-left">' + result[i].action_taken + '</td>';
                        }
                        tbl += '</tr>';
                    }
                }
                else {
                    console.log("Data not available");
                   // tbl += '<tr><th colspan="12" style="text-align:center">Data Not Available <th></tr>';
                }
                tbl += '</table>';
                //$("#reports").html(tbl);
                $("#reports").html("").html(tbl);
                $.fn.DataTable.ext.pager.numbers_length = 6;
                $('#example1').DataTable({
                    dom: 'Bfrtip',
                    title: 'ImportApproval',
                    fixedHeader: true,
                    responsive: true,
                    scrollX: true,
                    lengthChange: false,
                    autoWidth: false,
                    paging: true,
                    searching: true,
                    ordering: true,
                    info: true,
                    responsive: false,
                    autoWidth: false,
                    fixedColumns: {
                        left: fixedColumnsLeft
                    },
                    pageLength: 50,
                    buttons: [
                        {
                            extend: 'excel',
                            title: 'Wind Breakdown Reports',
                            exportOptions: {
                                columns: ':visible'
                            }
                        },
                        {
                            extend: 'csv',
                            title: 'Wind Breakdown Reports',
                            exportOptions: {
                                columns: ':visible'
                            }
                        },

                        'colvis',
                        {
                            text: '<span class="fas fa-file-excel" title="Download from DB up to six decimal"></span>',
                            className: 'btn ml-1   ',

                            action: function () {
                                exportToExcel();
                            }
                        },
                    ],
                    /* "buttons": [
                         'copy', 'excel', 'csv', 'colvis'
                     ]*/
                });
                $(".dt-buttons").addClass('btn-group flex-wrap');
                $(".dt-buttons > button").addClass('btn btn-secondary');
                $(".dataTables_filter> label >input").addClass('form-control form-control-sm');
                $(document).on("click", "div.dt-button-collection > div > button", function () {
                    if ($(this).hasClass("active")) {
                        $(this).css("background-color", "white");
                    } else {
                        $(this).css("background-color", "#31576d");
                    }
                });
                //$('#example1').wrap("<div class='scrolledTable'></div>");
                document.getElementById("loader").style.display = 'none';

                //$('#example1').removeClass('dataTable');
            }
        });

    }

    function GetBreakdownReportGroup() {
        document.getElementById("loader").style.display = 'flex';
         let custom_site = "";
         $('select#cust_group option:selected').each(function () {
             custom_site += $(this).val() + ",";
         });
         custom_site = custom_site != "" ? custom_site.slice(0, -1) : custom_site;
         var daterange = $('#daterange_group').val();
         var arr1 = daterange.split("-");
         var fromDate = moment(arr1[0], 'DD/MM/YYYY').format('YYYY-MM-DD');
         var toDate = moment(arr1[1], 'DD/MM/YYYY').format('YYYY-MM-DD');
         
         $.ajax({
             type: "GET",
             url: '@Url.Action("GetWindBreakdownReportGroup", "WindReport")' + '?fromDate=' + fromDate + '&toDate=' + toDate + '&site_list=' + custom_site,
             contentType: "application/json; charset=utf-8",
             datatype: "JSON",
             success: function (result, status, xhr) {
                 var tbl = '<table id="example_wind_group" class="table table-bordered table-striped" style="width:150%">';
                 tbl += '<thead class="tbl-head"><tr>';
                 tbl += '<th>Date</th>';
                 tbl += '<th>Country</th>';
                 tbl += '<th>State</th>';
                 tbl += '<th>SPV</th>';
                 tbl += '<th>Group Name</th>';
                 tbl += '<th>WTG</th>';
                 tbl += '<th>Bd_Type</th>';
                 tbl += '<th>Start_From</th>';
                 tbl += '<th>Stop_To</th>';
                 tbl += '<th>Total_Stop</th>';
                 tbl += '<th>Reason_of_Breakdown</th>';
                 tbl += '<th>Action_Taken</th>';
                 tbl += '</tr></thead><tbody>';
         
                 if (result.length > 0) {
                     for (var i = 0; i < result.length; i++) {
                         let chielditem = result[i].item;
                         let chield_class = result[i].cust_group.replace(/\s/g, "");
                         let expand_btn = "";
                         let totalStopInSeconds = 0;
                         if (chielditem.length > 1) {
                             expand_btn = '<div class="grp-btn" id="parant_' + chield_class + '" onclick="showchield(id)" style="display:inline-block"><i class="fas fa-plus"></i></div><div class="grp-btn"    id="phide_'   + chield_class + '" onclick="hidechield(id)" style="display:none"><i class="fas fa-minus"></i></div>';
                         }
         
                         var formattedDate = moment(result[i].date, 'YYYY/MM/DD').format('DD-MM-YYYY');

                         for (var j = 0; j < chielditem.length; j++) {
                             totalStopInSeconds += chielditem[j].total_stop.totalSeconds;
                         }
         
                         var totalStopFormatted = toHoursMinutesSeconds1(totalStopInSeconds);
         
                         // Parent row with summed values
                         tbl += '<tr>';
                         tbl += '<td class="text-left">' + formattedDate + '</td>';
                         tbl += '<td class="text-left">' + result[i].country + '</td>';
                         tbl += '<td class="text-left">' + result[i].state + '</td>';
                         tbl += '<td class="text-left">' + result[i].spv + '</td>';
                         tbl += '<td class="text-left">' + expand_btn + ' ' + result[i].cust_group + '</td>';
                         tbl += '<td class="text-left">' + result[i].wtg + '</td>';
                         tbl += '<td class="text-left">' + result[i].bd_type + '</td>';
                         tbl += '<td class="text-left">' + "All" + '</td>';
                         tbl += '<td class="text-left">' + "All" + '</td>';
                         tbl += '<td class="text-left">' + totalStopFormatted + '</td>'; // Display formatted total stop
                         tbl += '<td class="text-left">' + result[i].error_description + '</td>';
                         tbl += '<td class="text-left">' + result[i].action_taken + '</td>';
                         tbl += '</tr>';
         
                         // Child rows
                         for (var j = 0; j < chielditem.length; j++) {
                             tbl += '<tr class="' + chield_class + '" style="display:none">';
                             tbl += '<td class="text-left">' + formattedDate + '</td>';
                             tbl += '<td class="text-left">' + chielditem[j].country + '</td>';
                             tbl += '<td class="text-left">' + chielditem[j].state + '</td>';
                             tbl += '<td class="text-left">' + chielditem[j].spv + '</td>';
                             tbl += '<td class="text-left">' + chielditem[j].site + '</td>';
                             tbl += '<td class="text-left">' + chielditem[j].wtg + '</td>';
                             tbl += '<td class="text-left">' + chielditem[j].bd_type + '</td>';
                             tbl += '<td class="text-left">' + toHoursAndMinutes(chielditem[j].stop_from.totalSeconds) + '</td>';
                             tbl += '<td class="text-left">' + toHoursAndMinutes(chielditem[j].stop_to.totalSeconds) + '</td>';
                             tbl += '<td class="text-left">' + toHoursAndMinutes(chielditem[j].total_stop.totalSeconds) + '</td>';
                             tbl += '<td class="text-left">' + chielditem[j].error_description + '</td>';
                             tbl += '<td class="text-left">' + chielditem[j].action_taken + '</td>';
                             tbl += '</tr>';
                         }
                     }
                 } else {
                     console.log("Data not available");
                     tbl += '<tr><td colspan="16" style="text-align:center">Data Not Available</td></tr>';
                 }
         
                 tbl += '</tbody></table>';
                 $("#reports").html(tbl);
         
                 $('#example_wind_group').DataTable({
                     dom: 'Bfrtip',
                     title: 'ImportApproval',
                     fixedHeader: true,
                     responsive: true,
                     scrollX: true,
                     lengthChange: false,
                     autoWidth: true,
                     paging: true,
                     searching: true,
                     ordering: true,
                     info: true,
                     fixedColumns: {
                         left: 5
                     },
                     "order": [[1, "asc"]],
                     pageLength: 50,
                     buttons: [
                         {
                             extend: 'excel',
                             title: 'Solar Breakdown Reports',
                             exportOptions: {
                                 columns: ':visible'
                             }
                         },
                         {
                             extend: 'csv',
                             title: 'Solar Breakdown Reports',
                             exportOptions: {
                                 columns: ':visible'
                             }
                         },
                         'colvis',
                         {
                             text: '<span class="fas fa-file-excel" title="Download from DB up to six decimal"></span>',
                             className: 'btn ml-1',
                             action: function () {
                                 exportToExcel();
                             }
                         },
                     ]
                 });
         
                 $(".dt-buttons").addClass('btn-group flex-wrap');
                 $(".dt-buttons").css("margin-bottom", "0%");
         
                 $(".dt-buttons > button").addClass('btn btn-secondary');
                 $(".dataTables_filter > label > input").addClass('form-control form-control-sm');
                 $(".dataTables_filter").css("margin-top", "-35px");
                 $(document).on("click", "div.dt-button-collection > div > button", function () {
                     if ($(this).hasClass("active")) {
                         $(this).css("background-color", "white");
                     } else {
                         $(this).css("background-color", "#31576d");
                     }
                    
                 });
                 document.getElementById("loader").style.display = 'none';
             }
         });
    }
    
    function showchield(id) {
        var cls = id.replace('parant_', '');
        $('.' + cls).show();
        $('#parant_' + cls).hide();
        $('#phide_' + cls).show();
    }
    
    function hidechield(id) {
        var cls = id.replace('phide_', '');
        $('.' + cls).hide();
        $('#parant_' + cls).show();
        $('#phide_' + cls).hide();
    }

    function toMinutes(totalSeconds) {
        if (isNaN(totalSeconds)) {
            return 'N/A';
        }
        const minutes = Math.floor(totalSeconds / 60);
        return minutes + 'm';
    }

    function toHoursMinutesSeconds1(totalSeconds) {
        if (isNaN(totalSeconds) || totalSeconds < 0) {
            return 'N/A';
        }
        const hours = Math.floor(totalSeconds / 3600);
        const minutes = Math.floor((totalSeconds % 3600) / 60);
        const seconds = totalSeconds % 60;
        return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
    }



</script>
