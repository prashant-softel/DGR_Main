#pragma checksum "G:\solarproject\Finalcode\DGR_Main - Copy\DGRA\DGRA_V1\Views\Home\ImportApproval.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "14c4d7d482f61cf88e53df32e6676c54ea38ce7c"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_ImportApproval), @"mvc.1.0.view", @"/Views/Home/ImportApproval.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "G:\solarproject\Finalcode\DGR_Main - Copy\DGRA\DGRA_V1\Views\_ViewImports.cshtml"
using DGRA_V1;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "G:\solarproject\Finalcode\DGR_Main - Copy\DGRA\DGRA_V1\Views\_ViewImports.cshtml"
using DGRA_V1.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "G:\solarproject\Finalcode\DGR_Main - Copy\DGRA\DGRA_V1\Views\Home\ImportApproval.cshtml"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "G:\solarproject\Finalcode\DGR_Main - Copy\DGRA\DGRA_V1\Views\Home\ImportApproval.cshtml"
using Microsoft.AspNetCore.Http;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"14c4d7d482f61cf88e53df32e6676c54ea38ce7c", @"/Views/Home/ImportApproval.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"aa9fc0f0a035817cf8f1fc535e299e80b45b9453", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_ImportApproval : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/fontawesome-free/css/all.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/daterangepicker/daterangepicker.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables-bs4/css/dataTables.bootstrap4.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables-responsive/css/responsive.bootstrap4.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/multiple-select/dist/multiple-select.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/dist/css/adminlte.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "0", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_8 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "2", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_9 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "1", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_10 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_11 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "-1", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_12 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/jquery/jquery.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_13 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/multiple-select/dist/multiple-select.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_14 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/moment/moment.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_15 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/inputmask/jquery.inputmask.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_16 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/daterangepicker/daterangepicker.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_17 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/bootstrap/js/bootstrap.bundle.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_18 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables/jquery.dataTables.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_19 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables/jquery.dataTables.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_20 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables-buttons/js/dataTables.buttons.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_21 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/jszip/jszip.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_22 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables-buttons/js/buttons.html5.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_23 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/pdfmake/pdfmake.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_24 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables-buttons/js/buttons.colVis.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_25 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/dist/js/comman.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 5 "G:\solarproject\Finalcode\DGR_Main - Copy\DGRA\DGRA_V1\Views\Home\ImportApproval.cshtml"
  
    ViewData["Title"] = "Import Approval";

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "G:\solarproject\Finalcode\DGR_Main - Copy\DGRA\DGRA_V1\Views\Home\ImportApproval.cshtml"
  
    string windUserSiteList = "";
    string solarUserSiteList = "";
    var usermodel = JsonConvert.DeserializeObject<UserAccess>(@HttpContextAccessor.HttpContext.Session.GetString("UserAccess"));


#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
#nullable restore
#line 15 "G:\solarproject\Finalcode\DGR_Main - Copy\DGRA\DGRA_V1\Views\Home\ImportApproval.cshtml"
  
    bool windAccess = false;
    bool solarAccess = false;



#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
#nullable restore
#line 22 "G:\solarproject\Finalcode\DGR_Main - Copy\DGRA\DGRA_V1\Views\Home\ImportApproval.cshtml"
 for (int i = 0; i < @usermodel.access_list.Count; i++)
{

    if (@usermodel.access_list[i].page_type == 3 && @usermodel.access_list[i].site_type == 1)
    {
        windUserSiteList += @usermodel.access_list[i].identity.ToString() + ",";
    }

    if (@usermodel.access_list[i].page_type == 3 && @usermodel.access_list[i].site_type == 2)
    {
        solarUserSiteList += @usermodel.access_list[i].identity.ToString() + ",";
    }
}

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n\r\n");
#nullable restore
#line 37 "G:\solarproject\Finalcode\DGR_Main - Copy\DGRA\DGRA_V1\Views\Home\ImportApproval.cshtml"
 if (@HttpContextAccessor.HttpContext.Session.GetString("role") != "Admin")
{
    var usermodel_1 = JsonConvert.DeserializeObject<UserAccess>(@HttpContextAccessor.HttpContext.Session.GetString("UserAccess"));
    for (int i = 0; i < @usermodel_1.access_list.Count; i++)
    {
        Console.WriteLine(usermodel_1.access_list);

        if (@usermodel.access_list[i].page_type == 3 && @usermodel_1.access_list[i].site_type == 2)
        {
            windAccess = true;
        }
        if (@usermodel.access_list[i].page_type == 3 && @usermodel_1.access_list[i].site_type == 1)
        {
            solarAccess = true;
        }


    }
}

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700&display=fallback\">\r\n<!-- Font Awesome -->\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "14c4d7d482f61cf88e53df32e6676c54ea38ce7c15951", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<!-- daterange picker -->\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "14c4d7d482f61cf88e53df32e6676c54ea38ce7c17096", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<!-- DataTables -->\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "14c4d7d482f61cf88e53df32e6676c54ea38ce7c18235", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "14c4d7d482f61cf88e53df32e6676c54ea38ce7c19351", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "14c4d7d482f61cf88e53df32e6676c54ea38ce7c20467", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "14c4d7d482f61cf88e53df32e6676c54ea38ce7c21582", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"

<link href=""https://unpkg.com/multiple-select@1.5.2/dist/multiple-select.min.css"" rel=""stylesheet"">
<script src=""https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js""></script>
<script src=""https://unpkg.com/multiple-select@1.5.2/dist/multiple-select.min.js""></script>
<style>
    table th {
        padding: 0.5rem !important;
        font-size: 15px !important;
    }
    table td {
        padding: 0.2rem !important;
        font-size: 15px !important;
    }
    .dataTables_filter {
        margin-top: -2.6% !important; 
    }
    select {
        width: 50%;
        height: 36px;
    }
</style>
<!-- Content Wrapper. Contains page content -->
<div class=""content-wrapper"">

    <section class=""content-header"">
        <!--<div class=""container-fluid"">
            <div class=""row mb-2"">
                <div class=""col-sm-6"">

                </div>
                <div class=""col-sm-6"">
                    <ol class=""breadcrumb float-sm-right"">
                        <li cl");
            WriteLiteral(@"ass=""breadcrumb-item""><a href=""#"">Home</a></li>
                        <li class=""breadcrumb-item active"">Import Data Approval</li>
                    </ol>
                </div>
            </div>
        </div>-->
    </section>


    <section class=""content"">


        <div class=""card"">
            <div class=""card-header"">
                <h3 class=""card-title text-center"">Import Data Approval</h3>

                <!--<div class=""card-tools"">
                    <button type=""button"" class=""btn btn-tool"" data-card-widget=""collapse"" title=""Collapse"">
                        <i class=""fas fa-minus""></i>
                    </button>
                    <button type=""button"" class=""btn btn-tool"" data-card-widget=""remove"" title=""Remove"">
                        <i class=""fas fa-times""></i>
                    </button>
                </div>-->
            </div>
            <div class=""card-body"">
                <div class=""row"">
                    <div class=""col-md-4"">
  ");
            WriteLiteral(@"                      <div class=""form-group"">
                            <div class=""row"">
                                <label class=""col-sm-4 col-form-label text-left"">Import Type : </label>
                                <select class=""form-control  col-sm-8"" id=""importType"" name=""importType""");
            BeginWriteAttribute("value", " value=\"", 4792, "\"", 4800, 0);
            EndWriteAttribute();
            WriteLiteral(" onchange=\"getSiteList()\">\r\n                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "14c4d7d482f61cf88e53df32e6676c54ea38ce7c25396", async() => {
                WriteLiteral("Select Import Type ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_7.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_7);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
#nullable restore
#line 133 "G:\solarproject\Finalcode\DGR_Main - Copy\DGRA\DGRA_V1\Views\Home\ImportApproval.cshtml"
                                     if (windAccess == true)
                                    {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "14c4d7d482f61cf88e53df32e6676c54ea38ce7c26911", async() => {
                WriteLiteral("Solar");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_8.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_8);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
#nullable restore
#line 136 "G:\solarproject\Finalcode\DGR_Main - Copy\DGRA\DGRA_V1\Views\Home\ImportApproval.cshtml"
                                    }

#line default
#line hidden
#nullable disable
#nullable restore
#line 137 "G:\solarproject\Finalcode\DGR_Main - Copy\DGRA\DGRA_V1\Views\Home\ImportApproval.cshtml"
                                     if (solarAccess == true)
                                    {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "14c4d7d482f61cf88e53df32e6676c54ea38ce7c28622", async() => {
                WriteLiteral("Wind");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_9.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_9);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
#nullable restore
#line 140 "G:\solarproject\Finalcode\DGR_Main - Copy\DGRA\DGRA_V1\Views\Home\ImportApproval.cshtml"
                                    }

#line default
#line hidden
#nullable disable
#nullable restore
#line 141 "G:\solarproject\Finalcode\DGR_Main - Copy\DGRA\DGRA_V1\Views\Home\ImportApproval.cshtml"
                                     if (@HttpContextAccessor.HttpContext.Session.GetString("role") == "Admin")
                                    {

#line default
#line hidden
#nullable disable
            WriteLiteral("                                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "14c4d7d482f61cf88e53df32e6676c54ea38ce7c30382", async() => {
                WriteLiteral("Solar");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_8.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_8);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "14c4d7d482f61cf88e53df32e6676c54ea38ce7c31581", async() => {
                WriteLiteral("Wind");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_9.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_9);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
#nullable restore
#line 145 "G:\solarproject\Finalcode\DGR_Main - Copy\DGRA\DGRA_V1\Views\Home\ImportApproval.cshtml"
                                    }

#line default
#line hidden
#nullable disable
            WriteLiteral(@"                                </select>
                            </div>
                        </div>
                    </div>
                    <div class=""col-md-4"">
                        <div class=""form-group"" id=""multple_site"" style=""display:none;"">
                            <div class=""row"" >
                                <label class=""col-sm-4 col-form-label text-right"">Site : </label>
                                <select class=""form-control  col-sm-8"" id=""site"" name=""site[]"" multiple>
                                </select>
                            </div>
                        </div>
                        <div class=""form-group""  id=""normal_site"" style=""display:block;"">
                            <div class=""row"">
                                <label class=""col-sm-4 col-form-label text-right"">Site : </label>
                                <select class=""form-control  col-sm-8"" id=""site_n"" name=""site_n"">
                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "14c4d7d482f61cf88e53df32e6676c54ea38ce7c34023", async() => {
                WriteLiteral("Please Select Site");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_10.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_10);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class=""col-md-4"">
                        <div class=""input-group row"">
                            <label class=""col-sm-3 col-form-label text-right"">Date : </label>
                            <div class=""input-group-prepend"">
                                <span class=""input-group-text"">
                                    <i class=""far fa-calendar-alt""></i>
                                </span>
                            </div>
                            <input type=""text"" class=""form-control float-right"" id=""daterange"" name=""daterange"" style=""max-width: 270px;"">
                        </div>
                        
                    </div>
                </div>
                <div class=""row"">
                    <div class=""col-md-4"">
                        <div class=""form-group"">
                            <div");
            WriteLiteral(" class=\"row\">\r\n                                <label class=\"col-sm-4 col-form-label text-left\">Status : </label>\r\n                                <select class=\"form-control  col-sm-8\" id=\"status\" name=\"status\"");
            BeginWriteAttribute("value", " value=\"", 7967, "\"", 7975, 0);
            EndWriteAttribute();
            WriteLiteral(">\r\n                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "14c4d7d482f61cf88e53df32e6676c54ea38ce7c36685", async() => {
                WriteLiteral("All");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_11.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_11);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "14c4d7d482f61cf88e53df32e6676c54ea38ce7c37880", async() => {
                WriteLiteral("Awaiting for Approval");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_7.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_7);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "14c4d7d482f61cf88e53df32e6676c54ea38ce7c39091", async() => {
                WriteLiteral("Approved");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_9.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_9);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "14c4d7d482f61cf88e53df32e6676c54ea38ce7c40289", async() => {
                WriteLiteral("Rejected");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_8.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_8);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class=""col-md-2""></div>
                    <div class=""col-md-2""><button type=""button"" class=""btn btn-block btn-primary"" onclick=""getReport()"" style="" width:5rem "" >Search</button></div>
                    <div class=""col-md-5""></div>
                </div>
                <br>
");
#nullable restore
#line 199 "G:\solarproject\Finalcode\DGR_Main - Copy\DGRA\DGRA_V1\Views\Home\ImportApproval.cshtml"
                 if (@HttpContextAccessor.HttpContext.Session.GetString("role") == "Admin")
                {
                   

#line default
#line hidden
#nullable disable
            WriteLiteral(@"            <div class=""row"" id=""approvebtn"" style=""display:none"">
                <div class=""col-md-2""><button type=""button"" id=""btndsable"" class=""btn btn-block btn-success"" onclick=""DataApproved(1)"">Approved</button></div>
                <div class=""col-md-2""><button type=""button"" class=""btn btn-block btn-danger"" onclick=""DataApproved(2)"">Reject</button></div>
                <!--<div class=""col-md-2""><button type=""button"" class=""btn btn-block btn-info"" onclick=""ExportToExcel()"">Export Selected Data</button></div>-->
                <div class=""col-md-2""></div>
            </div>
	    <div id=""loader"" class=""loader "" style=""display:none; margin-left:50%; ""></div>
");
#nullable restore
#line 209 "G:\solarproject\Finalcode\DGR_Main - Copy\DGRA\DGRA_V1\Views\Home\ImportApproval.cshtml"
                }

#line default
#line hidden
#nullable disable
            WriteLiteral(@"                <hr>
                <div id=""LogData""></div>
                
                <div id=""loader"" class=""loader  center"" style=""display:none""></div>
            </div>



        </div>
        <div class=""modal fade"" id=""modal-xl"">
            <div class=""modal-dialog modal-xl"">
                <div class=""modal-content"">
                    <div class=""modal-header"">
                        <h6 class=""modal-title text-center"" id=""title"" style=""width: 90%;"">Genereration View</h6>
                        <button type=""button"" class=""close"" data-dismiss=""modal"" aria-label=""Close"">
                            <span aria-hidden=""true"">&times;</span>
                        </button>
                    </div>
                    <div class=""modal-body"">
                        <div id=""importedData"" style=""max-height: 500px; overflow: auto;""></div>

                    </div>
                    <div class=""modal-footer justify-content-between"">
                        <butto");
            WriteLiteral(@"n type=""button"" class=""btn btn-default"" data-dismiss=""modal"">Close</button>
                    </div>
                </div>
                <!-- /.modal-content -->
            </div>
            <!-- /.modal-dialog -->
        </div>

    </section>

</div>
<!-- /.content-wrapper -->
");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "14c4d7d482f61cf88e53df32e6676c54ea38ce7c44597", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_12);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js\"></script>\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "14c4d7d482f61cf88e53df32e6676c54ea38ce7c45736", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<!--Date Range -->\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "14c4d7d482f61cf88e53df32e6676c54ea38ce7c47107", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "14c4d7d482f61cf88e53df32e6676c54ea38ce7c48148", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "14c4d7d482f61cf88e53df32e6676c54ea38ce7c49189", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "14c4d7d482f61cf88e53df32e6676c54ea38ce7c50542", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_17);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<!-- DataTables  & Plugins -->\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "14c4d7d482f61cf88e53df32e6676c54ea38ce7c51617", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "14c4d7d482f61cf88e53df32e6676c54ea38ce7c52658", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "14c4d7d482f61cf88e53df32e6676c54ea38ce7c54011", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_20);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "14c4d7d482f61cf88e53df32e6676c54ea38ce7c55360", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_21);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "14c4d7d482f61cf88e53df32e6676c54ea38ce7c56709", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_22);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "14c4d7d482f61cf88e53df32e6676c54ea38ce7c58058", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_23);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "14c4d7d482f61cf88e53df32e6676c54ea38ce7c59407", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_24);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "14c4d7d482f61cf88e53df32e6676c54ea38ce7c60756", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_25);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"

<script type=""text/javascript"">


    $(document).ready(function () {
        $('#daterange').daterangepicker(
            {
                maxDate: new Date(),
                locale: {
                    format: 'DD/MM/YYYY',
                }
            });
    });

    window.onload = function () {
");
            WriteLiteral(@"    }



    function getSiteList() {
        var importType = $('select#importType option:selected').val();
        if (importType == 2) {
            console.log(""importType"", importType);
            GetSolarSite();
            document.getElementById(""normal_site"").style.display = 'none';
            document.getElementById(""multple_site"").style.display = 'block';

        }
        else if (importType == 1) {
            document.getElementById(""normal_site"").style.display = 'none';
            document.getElementById(""multple_site"").style.display = 'block';
            GetWindSite();
            console.log(""importType"", importType);
        }
    }
    // Wind Site
    function GetWindSite() {

         var state = """";
        var spv = """";
         var site_ids = """);
#nullable restore
#line 327 "G:\solarproject\Finalcode\DGR_Main - Copy\DGRA\DGRA_V1\Views\Home\ImportApproval.cshtml"
                    Write(Html.Raw(windUserSiteList.TrimEnd(',')));

#line default
#line hidden
#nullable disable
            WriteLiteral("\";\r\n        $.ajax({\r\n            type: \"GET\",\r\n           // url: \"/WindReport/GetSiteList\",\r\n            url: \'");
#nullable restore
#line 331 "G:\solarproject\Finalcode\DGR_Main - Copy\DGRA\DGRA_V1\Views\Home\ImportApproval.cshtml"
             Write(Url.Action("GetSiteList", "WindReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?sitelist=' + site_ids,
            contentType: ""application/json; charset=utf-8"",
            //data: '{""state"":""' + val + '""}',
            datatype: ""html"",
            success: function (result, status, xhr) {
                var options = """";
                //options += '<option value="""">Select Site</option>';
                //options += '<option value=""0"">All Site</option>';
                for (var k = 0; k < result.length; k++) {
                    options += '<option value=""' + result[k].site_master_id + '"">' + result[k].site + '</option>';
                }
                $(""#site"").multipleSelect('destroy');
                $(""#site"").html(options);
                $('select#site').multipleSelect({
                    ""minimumCountSelected"": 2,
                    ""placeholder"": ""Select Wind Site(s)"",
                    filter:true
                });
            }
        });
    }
     // Solar Site
    function GetSolarSite() {
        var site_ids = """);
#nullable restore
#line 354 "G:\solarproject\Finalcode\DGR_Main - Copy\DGRA\DGRA_V1\Views\Home\ImportApproval.cshtml"
                   Write(Html.Raw(solarUserSiteList.TrimEnd(',')));

#line default
#line hidden
#nullable disable
            WriteLiteral("\";\r\n        var solar_total_mw = 0;\r\n        $.ajax({\r\n            type: \"GET\",\r\n            url: \'");
#nullable restore
#line 358 "G:\solarproject\Finalcode\DGR_Main - Copy\DGRA\DGRA_V1\Views\Home\ImportApproval.cshtml"
             Write(Url.Action("GetSolarSiteList", "Dashboard"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?sitelist=' + site_ids,
            contentType: ""application/json; charset=utf-8"",
            datatype: ""html"",
            success: function (result, status, xhr) {
               // console.log(result);
                var options = """";

                for (var i = 0; i < result.length; i++) {
                    solar_total_mw += result[i].ac_capacity;
                    options += '<option value=""' + result[i].site_master_solar_id + '"">' + result[i].site + '</option>';
                }
                $(""#site"").multipleSelect('destroy');
                $(""#site"").html(options);
                $('select#site').multipleSelect({
                   ""minimumCountSelected"": 2,
                   ""placeholder"": ""Select Solar Site(s)"",
                   filter:true
                });
            }
        });
    }
    function getReport() {
        var importType = $('select#importType option:selected').val();
        if (importType == 2) {
            getSolarReport();

");
            WriteLiteral(@"        }
        else if (importType == 1) {

            getWindReport();
        }
    }
    // WInd Import Reports
    function getWindReport() {
        let site = """";
        $('select#site option:selected').each(function () {
            site += $(this).val() + "","";

        });
        site = site != """" ? site.slice(0, -1) : site;
        if (site == """" || site == null) {
            alert(""Please select site "");
            return false;
        }
        document.getElementById(""loader"").style.display = 'flex';
        console.log(site);
        var status = $('select#status option:selected').val();
        var importType = $('select#importType option:selected').val();
        var daterange = $('#daterange').val();
        var arr1 = new Array();
        arr1 = daterange.split(""-"");
        var fromDate = moment(arr1[0], 'DD/MM/YYYY').format('YYYY-MM-DD');
        var toDate = moment(arr1[1], 'DD/MM/YYYY').format('YYYY-MM-DD');
        // var fromDate = ""2021-04-14"";
    ");
            WriteLiteral("    //var toDate = \"2021-04-20\";\r\n        $.ajax({\r\n            type: \"GET\",\r\n            url: \'");
#nullable restore
#line 415 "G:\solarproject\Finalcode\DGR_Main - Copy\DGRA\DGRA_V1\Views\Home\ImportApproval.cshtml"
             Write(Url.Action("GetImportBatches", "WindView"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?importFromDate=' + fromDate + '&importToDate=' + toDate + '&siteId=' + site + '&importType=' + importType + '&status='+status,
            contentType: ""application/json; charset=utf-8"",
            datatype: ""JSON"",
            success: function (result, status, xhr) {
                var tbl = '<table id=""example1"" class=""table table-bordered table-striped dataTable dtr-inline"">';
                tbl += '<thead class=""tbl-head""><tr>';
                tbl += '<th><input type=""checkbox"" class="""" id=""checkAllW"" onclick=""selectAll()"" style= """"></th>';
                tbl += '<th>Site</th>';
                tbl += '<th style=""width:100px"">Import Date</th>';
                tbl += '<th style=""width:100px"">Data Date</th>';
                tbl += '<th>Imported By</th>';
                tbl += '<th>Status</th>';
                tbl += '<th>Verified Date</th>';
                tbl += '<th>Verified By</th>';
                tbl += '<th>Action</th>';
                tbl += '</tr></thead>';
       ");
            WriteLiteral(@"         tbl += '<tbody>';
             
                if (result.length > 0) {
                    for (var i = 0; i < result.length; i++) {
                        var formattedDate = moment(result[i].import_date, 'YYYY/MM/DD').format('DD-MM-YYYY');
                        var formattedDate1 = moment(result[i].data_date, 'YYYY/MM/DD').format('DD-MM-YYYY');
                        var status = """";
                        var isDisable = """";
                        if (result[i].is_approved == 0) {
                            status = ""Awaiting for Approval"";
                            isDisable = """";
                        }
                        if (result[i].is_approved == 0 && result[i].imported_by == ");
#nullable restore
#line 443 "G:\solarproject\Finalcode\DGR_Main - Copy\DGRA\DGRA_V1\Views\Home\ImportApproval.cshtml"
                                                                              Write(HttpContextAccessor.HttpContext.Session.GetString("userid"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@") {
                            status = ""Awaiting for Approval"";
                            isDisable = ""disabled"";
                        }
                        if (result[i].is_approved == 1) {
                            status = ""Approved"";
                            isDisable = ""disabled"";
                        }
                        if (result[i].is_approved == 2) {
                            status = ""Rejected"";
                            isDisable = ""disabled"";
                        }
                        tbl += '<tr>';
                        tbl += '<td><input type=""checkbox"" name=""chk"" class=""form-check-input"" id=""checkapproveid_' + result[i].import_batch_id + '"" data-id=' + result[i].import_batch_id + ' style=""margin-left:0.5rem;    margin-top: -6px;"" ' + isDisable + '></td>';
                        tbl += '<td>' + result[i].site_name + '</td>';
                        tbl += '<td>' + formattedDate + '</td>';
                        tbl += '<td>' + formattedDate");
            WriteLiteral(@"1 + '</td>';
                        tbl += '<td>' + result[i].import_by_name + '</td>';
                        tbl += '<td>' + status + '</td>';
                        var approval_name = """";
                        var verified_date = """";
                        var verified_name = """";
                        if (result[i].is_approved == 1) {
                            //approval_name = """";
                            verified_name = result[i].approved_by_name;
                            if (result[i].approval_date == '0001-01-01T00:00:00' || result[i].approval_date == null) {
                                verified_date = '';
                            }
                            else {
                                verified_date = moment(result[i].approval_date, 'YYYY/MM/DD').format('DD-MM-YYYY');
                            }
                        }
                        else if (result[i].is_approved == 2) {
                            // approval_name = result[i].approved");
            WriteLiteral(@"_by_name;
                            verified_name = result[i].rejected_by_name;
                            if (result[i].rejected_date == '0001-01-01T00:00:00' || result[i].rejected_date == null) {
                                verified_date = '';
                            }
                            else {
                                verified_date = moment(result[i].rejected_date, 'YYYY/MM/DD').format('DD-MM-YYYY');
                            }
                        }
                        else {
                            verified_name = """";
                        }

                        tbl += '<td>' + verified_date + '</td>';
                        tbl += '<td>' + verified_name + '</td>';
                        tbl += '<td style=""width:250px""><div style=""width: 25%;float: left;""><a href=""#"" title="" View Generation Data"" class=""btn btn-info"" onclick=""ViewGenData(' + result[i].import_batch_id + ')""  data-toggle=""modal"" data-target=""#modal-xl"" style=""padding: 0rem 0.75");
            WriteLiteral(@"rem"">G</a></div>';
                        tbl += '<div style=""width: 25%;float: left;""><a href=""#"" title="" View Breakdown Data"" class=""btn  btn-info"" onclick=""ViewBreakdownData(' + result[i].import_batch_id + ')"" data-toggle=""modal"" data-target=""#modal-xl"" style=""padding: 0rem 0.75rem"" >B</a></div>';
                        //enter filenames paths
                       // tbl += '<div style=""width: 25%;float: left;""><a href=""C:\LogFile\\'+ result[i].log_filename +'"" title="" View Log File"" class=""btn  btn-info"" download>F</a></div>';
                       // tbl += '<div style=""width: 25%;float: left;""><a href=""C:\ImportedFile\""' + result[i].file_name + '"" title="" View Imported File"" class=""btn  btn-info"" download>L</a></div>';
                        tbl += '</td ></tr>';
                    }
                }
                else {
                    $(""input.checkAllW"").attr(""disabled"", true);
                   
                    //tbl += '<tr><th colspan=""7"" style=""text-align:center"">Dat");
            WriteLiteral(@"a Not Available <th></tr>';
                }
                tbl += '</tbody>';
                tbl += '</table>';
                $(""#LogData"").html("""").html(tbl);
                $('#example1').DataTable({
                    dom: 'Bfrtip',
                    title: 'ImportApproval',
                    responsive: false,
                    lengthChange: false,
                    autoWidth: false,
                    paging: true,
                    searching: true,
                    ordering: true,
                    info: true,
                    autoWidth: false,
                    pageLength: 50,
                    buttons: [
                        {
                            extend: 'excel',
                            title: 'Import Approval',
                            exportOptions: {
                                columns: ':visible'
                            }
                        },
                        {
                            extend: 'csv',");
            WriteLiteral(@"
                            title: 'Import Approval',
                            exportOptions: {
                                columns: ':visible'
                            }
                        },
                        'colvis'
                    ]
                    /* ""buttons"": [
                         'copy', 'excel', 'csv', 'colvis'
                     ]*/
                });//.buttons().container().appendTo('#example1_wrapper .col-md-6:eq(0)');
                $("".dt-buttons"").addClass('btn-group flex-wrap');
                $("".dt-buttons > button"").addClass('btn btn-secondary');
                $("".dataTables_filter> label >input"").addClass('form-control form-control-sm');
                $(""dataTables_filter"").css(""margin-top"", ""-35px"");
                $('#example1').removeClass('dataTable');
                document.getElementById(""loader"").style.display = 'none';
                document.getElementById(""approvebtn"").style.display = 'flex';
            }
     ");
            WriteLiteral(@"   });

    }

    let select = 0;

    function selectAll() {
        var ele = document.getElementsByName('chk');
        if (select == 0) {
            for (var i = 0; i < ele.length; i++) {
                console.log(ele[i].disable);
                if (ele[i].type == 'checkbox' && ele[i].disabled == false)
                    ele[i].checked = true;
            }
            select++;
        }
        else {
                for (var i = 0; i < ele.length; i++) {
                    if (ele[i].type == 'checkbox' && ele[i].disabled == false)
                        ele[i].checked = false;

                }
                select--;
            }       
    }
   

    // SOlar Import Report
    function getSolarReport() {
        let site = """";
        $('select#site option:selected').each(function () {
            site += $(this).val() + "","";

        });
        site = site != """" ? site.slice(0, -1) : site;
        if (site == """" || site == null) {
            alert(""");
            WriteLiteral(@"Please select site "");
            return false;
        }
        document.getElementById(""loader"").style.display = 'flex';
        var status = $('select#status option:selected').val();
        var importType = $('select#importType option:selected').val();
        var daterange = $('#daterange').val();
        var arr1 = new Array();
        arr1 = daterange.split(""-"");
        var fromDate = moment(arr1[0], 'DD/MM/YYYY').format('YYYY-MM-DD');
        var toDate = moment(arr1[1], 'DD/MM/YYYY').format('YYYY-MM-DD');

        $.ajax({
            type: ""GET"",
            url: '");
#nullable restore
#line 598 "G:\solarproject\Finalcode\DGR_Main - Copy\DGRA\DGRA_V1\Views\Home\ImportApproval.cshtml"
             Write(Url.Action("GetImportBatches", "SolarView"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?importFromDate=' + fromDate + '&importToDate=' + toDate + '&siteId=' + site + '&importType=' + importType + '&status='+status,
            contentType: ""application/json; charset=utf-8"",
            datatype: ""JSON"",
            success: function (result, status, xhr) {
                var tbl = '<table id=""example1"" class=""table table-bordered table-striped dataTable dtr-inline"">';
                tbl += '<thead class=""tbl-head""><tr>';
                tbl += '<th><input type=""checkbox"" class=""form-input"" id=""checkAllS"" onclick=""selectAllS()"" style= """"></th>';
                tbl += '<th>Site</th>';
                tbl += '<th style=""width:100px"">Import Date</th>';
                tbl += '<th style=""width:100px"">Data Date</th>';
                tbl += '<th>Imported By</th>';
                tbl += '<th>Status</th>';
                tbl += '<th>Verified Date</th>';
                tbl += '<th>Verified By</th>';
                //tbl += '<th>Rej Date</th>';
                //tbl += '<th>Rej");
            WriteLiteral(@". By</th>';
                tbl += '<th>Action</th>';
                tbl += '</tr></thead>';

                if (result.length > 0) {
                    for (var i = 0; i < result.length; i++) {
                        var formattedDate = moment(result[i].import_date, 'YYYY/MM/DD').format('DD-MM-YYYY');
                        var formattedDate1 = moment(result[i].data_date, 'YYYY/MM/DD').format('DD-MM-YYYY');
                        var status = """";
                        var isDisable = """";
                        if (result[i].is_approved == 0) {
                            status = ""Awaiting for Approval"";
                            isDisable = """";
                        }
                        if (result[i].is_approved == 0 && result[i].imported_by == ");
#nullable restore
#line 627 "G:\solarproject\Finalcode\DGR_Main - Copy\DGRA\DGRA_V1\Views\Home\ImportApproval.cshtml"
                                                                              Write(HttpContextAccessor.HttpContext.Session.GetString("userid"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@") {
                            status = ""Awaiting for Approval"";
                            isDisable = ""disabled"";
                        }
                        if (result[i].is_approved == 1) {
                            status = ""Approved"";
                            isDisable = ""disabled"";
                        }
                        if (result[i].is_approved == 2) {
                            status = ""Rejected"";
                            isDisable = ""disabled"";
                        }
                        tbl += '<tr>';
                        tbl += '<td><input type=""checkbox"" class=""form-check-input"" name=""chks"" id=""checkapproveid_' + result[i].import_batch_id + '"" data-id=' + result[i].import_batch_id + ' style =""margin-left:0.5rem;    margin-top: -6px;"" ' + isDisable + '></td>';
                        tbl += '<td>' + result[i].site_name + '</td>';
                        tbl += '<td>' + formattedDate + '</td>';
                        tbl += '<td>' + formattedDa");
            WriteLiteral(@"te1 + '</td>';
                        tbl += '<td>' + result[i].import_by_name + '</td>';
                        tbl += '<td>' + status + '</td>';
                        
                        var approval_name = """";
                        var verified_date = """";
                        var verified_name = """";
                        if (result[i].is_approved == 1) {
                            //approval_name = """";
                            verified_name = result[i].approved_by_name;
                            if (result[i].approval_date == '0001-01-01T00:00:00' || result[i].approval_date == null) {
                                verified_date = '';
                            }
                            else {
                                verified_date = moment(result[i].approval_date, 'YYYY/MM/DD').format('DD-MM-YYYY');
                            }
                        }
                        else if (result[i].is_approved == 2) {
                           // approva");
            WriteLiteral(@"l_name = result[i].approved_by_name;
                            verified_name = result[i].rejected_by_name;
                            if (result[i].rejected_date == '0001-01-01T00:00:00' || result[i].rejected_date == null) {
                                verified_date = '';
                            }
                            else {
                                verified_date = moment(result[i].rejected_date, 'YYYY/MM/DD').format('DD-MM-YYYY');
                            }
                        }
                        else {
                            verified_name = """";
                        }
                        
                       
                        /*var rejected_name = """";
                        if (result[i].rejected_by == 0) {
                            rejected_name = """";
                        }
                        else {
                            rejected_name = result[i].rejected_by_name;
                        }*/
                   ");
            WriteLiteral(@"     tbl += '<td>' + verified_date + '</td>';
                        tbl += '<td>' + verified_name + '</td>';
                       // tbl += '<td>' + formattedDate2 + '</td>';
                        //tbl += '<td>' + rejected_name + '</td>';
                        tbl += '<td style=""width:250px""><div style=""width: 25%;float: left;""><a href=""#"" title="" View Generation Data"" class=""btn btn-info"" onclick=""ViewSolarGenData(' + result[i].import_batch_id + ')""  data-toggle=""modal"" data-target=""#modal-xl"" style=""padding: 0rem 0.75rem"">G</a></div>';
                        tbl += '<div style=""width: 25%;float: left;""><a href=""#"" title="" View Breakdown Data"" class=""btn  btn-info"" onclick=""ViewSolarBreakdownData(' + result[i].import_batch_id + ')"" data-toggle=""modal"" data-target=""#modal-xl"" style=""padding: 0rem 0.75rem"" >B</a></div>';
                        tbl += '<div style=""width: 25%;float: left;""><a href=""#"" title="" View Pyranometer 1Min Data"" class=""btn  btn-info"" onclick=""ViewPY1Data(' + result[i].im");
            WriteLiteral(@"port_batch_id + ')"" data-toggle=""modal"" data-target=""#modal-xl"" style=""padding: 0rem 0.75rem"" >P1</a></div>';
                        tbl += '<div style=""width: 25%;float: left;""><a href=""#"" title="" View Pyranometer 15Min Data"" class=""btn  btn-info"" onclick=""ViewPY15Data(' + result[i].import_batch_id + ')"" data-toggle=""modal"" data-target=""#modal-xl"" style=""padding: 0rem 0.75rem"" >P15</a></div>';
                        //enter filenames paths
                       // tbl += '<div style=""width: 25%;float: left;""><a href=""C:\LogFile\\'+ result[i].log_filename +'"" title="" View Log File"" class=""btn  btn-info"" download>F</a></div>';
                       // tbl += '<div style=""width: 25%;float: left;""><a href=""C:\ImportedFile\""' + result[i].file_name + '"" title="" View Imported File"" class=""btn  btn-info"" download>L</a></div>';
                        tbl += '</td ></tr>';
                    }
                }
                else {
                    //tbl += '<tr><th colspan=""7"" style=""text-align:ce");
            WriteLiteral(@"nter"">Data Not Available <th></tr>';
                    $(""input.checkAllS"").attr(""disabled"", true);
                }
                tbl += '</table>';
                $(""#LogData"").html("""").html(tbl);
                $('#example1').DataTable({
                    dom: 'Bfrtip',
                    title: 'ImportApproval',
                    responsive: false,
                    lengthChange: false,
                    autoWidth: false,
                    paging: true,
                    searching: true,
                    ordering: true,
                    info: true,
                    autoWidth: false,
                    pageLength: 50,
                    buttons: [
                        {
                            extend: 'excel',
                            title: 'Import Approval',
                            exportOptions: {
                                columns: ':visible'
                            }
                        },
                        {
   ");
            WriteLiteral(@"                         extend: 'csv',
                            title: 'Import Approval',
                            exportOptions: {
                                columns: ':visible'
                            }
                        },
                        'colvis'
                    ]
                    /* ""buttons"": [
                         'copy', 'excel', 'csv', 'colvis'
                     ]*/
                });//.buttons().container().appendTo('#example1_wrapper .col-md-6:eq(0)');
                $("".dt-buttons"").addClass('btn-group flex-wrap');
                $("".dt-buttons > button"").addClass('btn btn-secondary');
                $("".dataTables_filter> label >input"").addClass('form-control form-control-sm');
                $(""dataTables_filter"").css(""margin-top"", ""-35px"");
                $('#example1').removeClass('dataTable');
                document.getElementById(""loader"").style.display = 'none';
                document.getElementById(""approvebtn"").style.");
            WriteLiteral(@"display = 'flex';
            }
        });

    }
    let selectS = 0;

    function selectAllS() {
        var ele = document.getElementsByName('chks');
        if (selectS == 0) {
            for (var i = 0; i < ele.length; i++) {
                console.log(ele[i].disable);
                if (ele[i].type == 'checkbox' && ele[i].disabled == false)
                    ele[i].checked = true;
            }
            selectS++;
        }
        else {
            for (var i = 0; i < ele.length; i++) {
                if (ele[i].type == 'checkbox' && ele[i].disabled == false)
                    ele[i].checked = false;

            }
            selectS--;
        }
    }


    //   Approved Data
    function DataApproved(actionType) {
        var values = '';
        //console.log(""you clicked approved or reject"")
        var a = document.getElementById(""loader"");
        console.log(a);
        console.log(a.style.display);
        a.style.display = ""flex"";

        $.");
            WriteLiteral(@"each($(""input[class='form-check-input']:checked""), function () {
            if (values == '') {
                values = $(this).attr('data-id');
            }
            else {
                values = values + "","" + $(this).attr('data-id');
            }
        });
        if (values == """") {
            alert(""Please select data"");
            return false;
        }
        var approved_by =""");
#nullable restore
#line 790 "G:\solarproject\Finalcode\DGR_Main - Copy\DGRA\DGRA_V1\Views\Home\ImportApproval.cshtml"
                     Write(HttpContextAccessor.HttpContext.Session.GetString("userid"));

#line default
#line hidden
#nullable disable
            WriteLiteral("\";\r\n        var approved_by_name = \"");
#nullable restore
#line 791 "G:\solarproject\Finalcode\DGR_Main - Copy\DGRA\DGRA_V1\Views\Home\ImportApproval.cshtml"
                           Write(HttpContextAccessor.HttpContext.Session.GetString("DisplayName"));

#line default
#line hidden
#nullable disable
            WriteLiteral("\";\r\n\r\n        var uri = \"\";\r\n        var importType = $(\'select#importType option:selected\').val();\r\n\r\n        if (importType == 1 && actionType == 1) {\r\n            var Approvestatus = 1;\r\n            uri= \'");
#nullable restore
#line 798 "G:\solarproject\Finalcode\DGR_Main - Copy\DGRA\DGRA_V1\Views\Home\ImportApproval.cshtml"
             Write(Url.Action("DataApproved", "WindView"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?data=' + values + '&approvedBy=' + approved_by + '&approvedByName=' + approved_by_name + '&status=' + Approvestatus + '&actionType=' + actionType

        }
        if (importType == 1 && actionType == 2) {
            var Rejectstatus = 2;
            uri= '");
#nullable restore
#line 803 "G:\solarproject\Finalcode\DGR_Main - Copy\DGRA\DGRA_V1\Views\Home\ImportApproval.cshtml"
             Write(Url.Action("DataReject", "WindView"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?data=' + values + '&rejectedBy=' + approved_by + '&rejectByName=' + approved_by_name + '&status=' + Rejectstatus + '&actionType=' + actionType

        }
        if (importType == 2 && actionType == 1) {
            var Approvestatus = 1;
            uri= '");
#nullable restore
#line 808 "G:\solarproject\Finalcode\DGR_Main - Copy\DGRA\DGRA_V1\Views\Home\ImportApproval.cshtml"
             Write(Url.Action("DataApproved", "SolarView"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?data=' + values + '&approvedBy=' + approved_by + '&approvedByName=' + approved_by_name + '&status=' + Approvestatus + '&actionType=' + actionType

        }
        if (importType == 2 && actionType == 2) {
            var Rejectstatus = 2;
            uri= '");
#nullable restore
#line 813 "G:\solarproject\Finalcode\DGR_Main - Copy\DGRA\DGRA_V1\Views\Home\ImportApproval.cshtml"
             Write(Url.Action("DataReject", "SolarView"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?data=' + values + '&rejectedBy=' + approved_by + '&rejectByName=' + approved_by_name + '&status=' + Rejectstatus + '&actionType=' + actionType

        }
        $("".btn-success"").attr(""disabled"", true);
        $("".btn-danger"").attr(""disabled"", true);
        $.ajax({
            type: ""POST"",
            url: uri,
            contentType: ""application/json; charset=utf-8"",
            success: function (result, status, xhr) {
                if (result > 0) {
                    if (actionType == 1) {
                        var a = document.getElementById(""loader"");
                        a.style.display = ""none"";
                        alert(""Data Approved Successfully !"");
                    }
                    if (actionType == 2) {
                        var a = document.getElementById(""loader"");
                        a.style.display = ""none"";
                        alert(""Data Rejected Successfully !"");
                    }

                    location.reload();");
            WriteLiteral(@"
                }
                else {
                    alert(""Faild Please try again !"");
                }
                $("".btn-success"").attr(""disabled"", false);
                $("".btn-danger"").attr(""disabled"", false);
            }
        });
    }
    function ViewImportFile() {

    }
    function ViewGenData(importlogId) {
        $.ajax({
            type: ""POST"",
            url: '");
#nullable restore
#line 851 "G:\solarproject\Finalcode\DGR_Main - Copy\DGRA\DGRA_V1\Views\Home\ImportApproval.cshtml"
             Write(Url.Action("GetGenerationImportData", "WindView"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?importId=' + importlogId,
            contentType: ""application/json; charset=utf-8"",
            success: function (result1, status, xhr) {
                console.log(result1);

                var tbl1 = '<table id=""example2"" class=""table-bordered table-striped  dtr-inline"" style=""width:100%"">';
                tbl1 += '<thead class=""tbl-head""><tr>';
                tbl1 += '<th style=""font-size: 12px;width:8%;"">Date</th>';
                tbl1 += '<th style=""font-size: 12px;text-align: center; "">Site</th>';
                tbl1 += '<th style=""font-size: 12px;text-align: center;"">WTG</th>';
                tbl1 += '<th style=""font-size: 12px;text-align: center;"">Wind(m/s)</th>';
                tbl1 += '<th style=""font-size: 12px;text-align: center;"">kWh</th>';
                tbl1 += '<th style=""font-size: 12px;text-align: center;"">MA(Act)</th>';
                tbl1 += '<th style=""font-size: 12px;text-align: center;"">MA(Con)</th>';
                tbl1 += '<th style=""font-size: 12px;t");
            WriteLiteral(@"ext-align: center;"">IGA</th>';
                tbl1 += '<th style=""font-size: 12px;text-align: center;"">EGA</th>';
                tbl1 += '<th style=""font-size: 12px;text-align: center;"">PLF</th>';
                tbl1 += '<th style=""font-size: 12px;text-align: center;"">Grid Hrs</th>';
                tbl1 += '<th style=""font-size: 12px;text-align: center;"">Lull Hrs</th>';
                tbl1 += '<th style=""font-size: 12px;text-align: center;"">Prod Hrs</th>';
                tbl1 += '<th style=""font-size: 12px;text-align: center;"">USMH</th>';
                tbl1 += '<th style=""font-size: 12px;text-align: center;"">SMH</th>';
                tbl1 += '<th style=""font-size: 12px;text-align: center;"">Oth Hrs</th>';
                tbl1 += '<th style=""font-size: 12px;text-align: center;"">IGBDH</th>';
                tbl1 += '<th style=""font-size: 12px;text-align: center;"">EGBDH</th>';
                tbl1 += '<th style=""font-size: 12px;text-align: center;"">Load Sh.</th>';
                tbl1 += '</t");
            WriteLiteral(@"r></thead>';

                if (result1.length > 0) {
                    console.log(result1);
                    for (var j = 0; j < result1.length; j++) {
                        //debugger;
                        //console.log(""Un Array :""+result1[j]);
                        let unsch_hrs = 0;
                        let sch_hrs = 0;
                        let other = 0;
                        let igbdh = 0;
                        let egbdh = 0;
                        let load_shedding = 0;
                        if (result1[j].unschedule_num != null) {
                            unsch_hrs = result1[j].unschedule_num;
                            //unsch_hrs =  moment.utc(result1[j].unschedule_hrs['totalSeconds'] * 1000).format('HH:mm:ss');
                        }
                        if (result1[j].schedule_num != null) {
                            //sch_hrs = moment.utc(result1[j].schedule_hrs['totalSeconds'] * 1000).format('HH:mm:ss');
                            sch_");
            WriteLiteral(@"hrs = result1[j].schedule_num;
                        }
                        if (result1[j].others_num != null) {
                            //other = moment.utc(result1[j].others['totalSeconds'] * 1000).format('HH:mm:ss');
                            other = result1[j].others_num ;
                        }
                        if (result1[j].igbdh_num != null) {
                           // igbdh = moment.utc(result1[j].igbdh['totalSeconds'] * 1000).format('HH:mm:ss');
                            igbdh = result1[j].igbdh_num ;
                        }
                        if (result1[j].egbdh_num != null) {
                            //egbdh = moment.utc(result1[j].egbdh['totalSeconds'] * 1000).format('HH:mm:ss');
                            egbdh = result1[j].egbdh_num;
                        }
                        if (result1[j].load_shedding_num != null) {
                            //load_shedding = moment.utc(result1[j].load_shedding['totalSeconds'] * 1000).format('HH:");
            WriteLiteral(@"mm:ss');
                            load_shedding = result1[j].load_shedding_num;
                        }

                        var formattedDate = moment(result1[j].date, 'YYYY/MM/DD').format('DD-MM-YYYY');
                        tbl1 += '<tr>';
                        tbl1 += '<td style=""font-size: 12px;"">' + formattedDate + '</td>';
                        tbl1 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].site_name + '</td>';
                        tbl1 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].wtg + '</td>';
                        tbl1 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].wind_speed.toFixed(2) + '</td>';
                        tbl1 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].kwh.toFixed(2) + '</td>';
                        tbl1 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].ma_actual.toFixed(2) + '</td>';
                        tbl1 += '<td style=""font-size: 12px;");
            WriteLiteral(@"text-align: center;"">' + result1[j].ma_contractual.toFixed(2) + '</td>';
                        tbl1 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].iga.toFixed(2) + '</td>';
                        tbl1 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].ega.toFixed(2) + '</td>';
                        tbl1 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].plf.toFixed(2) + '</td>';
                        tbl1 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].grid_hrs.toFixed(2) + '</td>';
                        tbl1 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].lull_hrs.toFixed(2) + '</td>';
                        tbl1 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].operating_hrs.toFixed(2) + '</td>';
                        tbl1 += '<td style=""font-size: 12px;text-align: center;"">' + unsch_hrs.toFixed(2) + '</td>';
                        tbl1 += '<td style=""font-size: 12px;text-align: ce");
            WriteLiteral(@"nter;"">' + sch_hrs.toFixed(2) + '</td>';
                        tbl1 += '<td style=""font-size: 12px;text-align: center;"">' + other.toFixed(2)+ '</td>';
                        tbl1 += '<td style=""font-size: 12px;text-align: center;"">' + igbdh.toFixed(2) + '</td>';
                        tbl1 += '<td style=""font-size: 12px;text-align: center;"">' + egbdh.toFixed(2)+ '</td>';
                        tbl1 += '<td style=""font-size: 12px;text-align: center;"">' + load_shedding.toFixed(2)+ '</td>';
                        tbl1 += '</tr>';
                        // console.log(j);
                    }
                }
                else {

                }
                tbl1 += '</table>';
                document.getElementById(""title"").innerHTML = ""Wind Generation View"";
                $(""#importedData"").html(tbl1);

            }
        });
    }
    function ViewBreakdownData(importlogId) {
        $.ajax({
            type: ""POST"",
            //url: ""/WindView/GetBrekdownImportD");
            WriteLiteral("ata?importId=\" + importlogId,\r\n             url: \'");
#nullable restore
#line 954 "G:\solarproject\Finalcode\DGR_Main - Copy\DGRA\DGRA_V1\Views\Home\ImportApproval.cshtml"
              Write(Url.Action("GetBrekdownImportData", "WindView"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?importId=' + importlogId,
            // url: ""/WindView/DataApproved"",
            contentType: ""application/json; charset=utf-8"",
            success: function (result1, status, xhr) {
                console.log(result1);

                var tbl2 = '<table id=""example2"" class=""table-bordered table-striped  dtr-inline"" style=""width:120%"">';
                tbl2 += '<thead class=""tbl-head""><tr>';
                tbl2 += '<th style=""font-size: 12px;"">Date</th>';
                tbl2 += '<th style=""font-size: 12px;text-align: center;"">Site</th>';
                tbl2 += '<th style=""font-size: 12px;text-align: center;"">WTG</th>';
                tbl2 += '<th style=""font-size: 12px;text-align: center;"">BD Type</th>';
                tbl2 += '<th style=""font-size: 12px;text-align: center;"">Start From</th>';
                tbl2 += '<th style=""font-size: 12px;text-align: center;"">Start To</th>';
                tbl2 += '<th style=""font-size: 12px;text-align: center;"">Total Stop</th>';
       ");
            WriteLiteral(@"         tbl2 += '<th style=""font-size: 12px;text-align: center;"">Reason of Breakdown</th>';
                tbl2 += '<th style=""font-size: 12px;text-align: center;"">Action Taken</th>';

                tbl2 += '</tr></thead>';

                if (result1.length > 0) {
                    console.log(result1.length);
                    for (var j = 0; j < result1.length; j++) {
                        //console.log(""Inside For Loop"");
                        var formattedDate = moment(result1[j].date, 'YYYY/MM/DD').format('DD-MM-YYYY');
                        tbl2 += '<tr>';
                        tbl2 += '<td style=""font-size: 12px;"">' + formattedDate + '</td>';
                        tbl2 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].site + '</td>';
                        tbl2 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].wtg + '</td>';
                        tbl2 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].bd_type_name + ");
            WriteLiteral(@"'</td>';
                        tbl2 += '<td style=""font-size: 12px;text-align: center;"">' + toHoursAndMinutes(result1[j].stop_from.totalSeconds) + '</td>';
                        tbl2 += '<td style=""font-size: 12px; text-align: center;"">' + toHoursAndMinutes(result1[j].stop_to.totalSeconds) + '</td>';
                        tbl2 += '<td style=""font-size: 12px;text-align: center;"">' + toHoursAndMinutes(result1[j].total_stop.totalSeconds) + '</td>';
                        tbl2 += '<td style=""font-size: 12px;"">' + result1[j].error_description + '</td>';
                        tbl2 += '<td style=""font-size: 12px;"">' + result1[j].action_taken + '</td>';
                        tbl2 += '</tr>';
                        // console.log(j);
                    }
                }
                else {

                }
                tbl2 += '</table>';
                document.getElementById(""title"").innerHTML = ""Wind Breakdown View"";
                $(""#importedData"").html(tbl2);
            ");
            WriteLiteral("}\r\n        });\r\n    }\r\n\r\n    function ViewSolarGenData(importlogId) {\r\n    $.ajax({\r\n            type: \"POST\",\r\n            url: \'");
#nullable restore
#line 1006 "G:\solarproject\Finalcode\DGR_Main - Copy\DGRA\DGRA_V1\Views\Home\ImportApproval.cshtml"
             Write(Url.Action("GetSolarGenerationImportData", "SolarView"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?importId=' + importlogId,
            contentType: ""application/json; charset=utf-8"",
            success: function (result1, status, xhr) {
                console.log(result1);

                var tbl1 = '<table id=""example2"" class=""table-bordered table-striped  dtr-inline"" style=""width:230%"">';
                tbl1 += '<thead class=""tbl-head""><tr>';
                tbl1 += '<th style=""font-size: 12px;width:5%;"">Date</th>';
                tbl1 += '<th style=""font-size: 12px;text-align: center;width:5%; "">Site</th>';
                tbl1 += '<th style=""font-size: 12px;text-align: center;"">Location Name</th>';
                tbl1 += '<th style=""font-size: 12px;text-align: center;"">GHI</th>';
                tbl1 += '<th style=""font-size: 12px;text-align: center;"">POA</th>';
                tbl1 += '<th style=""font-size: 12px;text-align: center;"">Exp kWh</th>';
                tbl1 += '<th style=""font-size: 12px;text-align: center;"">Inv kWh</th>';
                tbl1 += '<th style=""font");
            WriteLiteral(@"-size: 12px;text-align: center;"">Plant kWh</th>';
                tbl1 += '<th style=""font-size: 12px;text-align: center;"">Inv PR (%)</th>';
                tbl1 += '<th style=""font-size: 12px;text-align: center;"">Plant PR (%)</th>';
                tbl1 += '<th style=""font-size: 12px;text-align: center;"">MA (%)</th>';
                tbl1 += '<th style=""font-size: 12px;text-align: center;"">IGA (%)</th>';
                tbl1 += '<th style=""font-size: 12px;text-align: center;"">EGA (%)</th>';
                tbl1 += '<th style=""font-size: 12px;text-align: center;"">Inv Plf AC (%)</th>';
                tbl1 += '<th style=""font-size: 12px;text-align: center;"">PI</th>';
                tbl1 += '<th style=""font-size: 12px;text-align: center;"">Prod_hrs</th>';
                tbl1 += '<th style=""font-size: 12px;text-align: center;"">Lull_hrs</th>';
                tbl1 += '<th style=""font-size: 12px;text-align: center;"">USMH BD</th>';
                tbl1 += '<th style=""font-size: 12px;text-align: center;""");
            WriteLiteral(@">SMH BD</th>';
                tbl1 += '<th style=""font-size: 12px;text-align: center;"">Oth_hrs BD</th>';
                tbl1 += '<th style=""font-size: 12px;text-align: center;"">IGBDH BD</th>';
                tbl1 += '<th style=""font-size: 12px;text-align: center;"">EGBDH BD</th>';
                tbl1 += '<th style=""font-size: 12px;text-align: center;"">Load She.BD</th>';
                tbl1 += '<th style=""font-size: 12px;text-align: center;"">Total BD Hrs</th>';
                tbl1 += '<th style=""font-size: 12px;text-align: center;"">USMH</th>';
                tbl1 += '<th style=""font-size: 12px;text-align: center;"">SMH</th>';
                tbl1 += '<th style=""font-size: 12px;text-align: center;"">OH</th>';
                tbl1 += '<th style=""font-size: 12px;text-align: center;"">IGBDH</th>';
                tbl1 += '<th style=""font-size: 12px;text-align: center;"">EGBDH</th>';
                tbl1 += '<th style=""font-size: 12px;text-align: center;"">Load She.</th>';
                tbl1 += '<th ");
            WriteLiteral(@"style=""font-size: 12px;text-align: center;"">Total Losses</th>';

                tbl1 += '</tr></thead>';

                if (result1.length > 0) {
                    console.log(result1);
                    for (var j = 0; j < result1.length; j++) {
                        //debugger;
                        //console.log(""Un Array :""+result1[j]);
                        let unsch_hrs = 0;
                        let sch_hrs = 0;
                        let other = 0;
                        let igbdh = 0;
                        let egbdh = 0;
                        let load_shedding = 0;


                        var formattedDate = moment(result1[j].date, 'YYYY/MM/DD').format('DD-MM-YYYY');
                        tbl1 += '<tr>';
                        tbl1 += '<td style=""font-size: 12px;"">' + formattedDate + '</td>';
                        tbl1 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].site + '</td>';
                        tbl1 += '<td style=""font-siz");
            WriteLiteral(@"e: 12px;text-align: center;"">' + result1[j].inverter + '</td>';
                        tbl1 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].ghi.toFixed(2) + '</td>';
                        tbl1 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].poa.toFixed(2) + '</td>';
                        tbl1 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].expected_kwh.toFixed(2) + '</td>';
                        tbl1 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].inv_act.toFixed(2) + '</td>';
                        tbl1 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].plant_act.toFixed(2) + '</td>';
                        tbl1 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].inv_pr.toFixed(2) + '</td>';
                        tbl1 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].plant_pr.toFixed(2) + '</td>';
                        tbl1 += '<td style=""font-size: 12px;text-align:");
            WriteLiteral(@" center;"">' + result1[j].ma.toFixed(2) + '</td>';
                        tbl1 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].iga.toFixed(2) + '</td>';
                        tbl1 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].ega.toFixed(2) + '</td>';
                        tbl1 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].inv_plf_ac.toFixed(2) + '</td>';
                        tbl1 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].pi + '</td>';
                        tbl1 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].prod_hrs.toFixed(2)+ '</td>';
                        tbl1 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].lull_hrs_bd.toFixed(2) + '</td>';
                        tbl1 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].usmh_bd.toFixed(2)+ '</td>';
                        tbl1 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].smh_bd");
            WriteLiteral(@".toFixed(2) + '</td>';
                        tbl1 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].oh_bd.toFixed(2) + '</td>';
                        tbl1 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].igbdh_bd.toFixed(2) + '</td>';
                        tbl1 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].egbdh_bd.toFixed(2) + '</td>';
                        tbl1 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].load_shedding_bd.toFixed(2) + '</td>';
                        tbl1 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].total_bd_hrs.toFixed(2) + '</td>';
                        tbl1 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].usmh.toFixed(2) + '</td>';
                        tbl1 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].smh.toFixed(2) + '</td>';
                        tbl1 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].oh.toFix");
            WriteLiteral(@"ed(2) + '</td>';
                        tbl1 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].igbdh.toFixed(2) + '</td>';
                        tbl1 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].egbdh.toFixed(2) + '</td>';
                        tbl1 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].load_shedding.toFixed(2) + '</td>';
                        tbl1 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].total_losses.toFixed(2) + '</td>';
                        tbl1 += '</tr>';
                        // console.log(j);
                    }
                }
                else {

                }
                tbl1 += '</table>';
                $(""#importedData"").html();
                document.getElementById(""title"").innerHTML = ""Solar Generation View"";
                $(""#importedData"").html(tbl1);

            }
        });
    }
    function ViewSolarBreakdownData(importlogId) {
        $.aja");
            WriteLiteral("x({\r\n            type: \"POST\",\r\n            //url: \"/WindView/GetBrekdownImportData?importId=\" + importlogId,\r\n             url: \'");
#nullable restore
#line 1112 "G:\solarproject\Finalcode\DGR_Main - Copy\DGRA\DGRA_V1\Views\Home\ImportApproval.cshtml"
              Write(Url.Action("GetSolarBrekdownImportData", "SolarView"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?importId=' + importlogId,
            // url: ""/WindView/DataApproved"",
            contentType: ""application/json; charset=utf-8"",
            success: function (result1, status, xhr) {
                console.log(result1);

                var tbl2 = '<table id=""example2"" class=""table-bordered table-striped  dtr-inline"" style=""width:150%"">';
                tbl2 += '<thead class=""tbl-head""><tr>';
                tbl2 += '<th style=""font-size: 12px;"">Date</th>';
                tbl2 += '<th style=""font-size: 12px;text-align: center;"">Site</th>';
                tbl2 += '<th style=""font-size: 12px;text-align: center;"">ICR</th>';
                tbl2 += '<th style=""font-size: 12px;text-align: center;"">Inverter</th>';
                tbl2 += '<th style=""font-size: 12px;text-align: center;"">SMB</th>';
                tbl2 += '<th style=""font-size: 12px;text-align: center;"">String</th>';
                tbl2 += '<th style=""font-size: 12px;text-align: center;"">BD Type</th>';
                tb");
            WriteLiteral(@"l2 += '<th style=""font-size: 12px;text-align: center;"">Start From</th>';
                tbl2 += '<th style=""font-size: 12px;text-align: center;"">Start To</th>';
                tbl2 += '<th style=""font-size: 12px;text-align: center;"">Total Stop</th>';
                tbl2 += '<th style=""font-size: 12px;text-align: center;"">Ext/Int BD</th>';
                tbl2 += '<th style=""font-size: 12px;text-align: center;"">IGBD</th>';
                tbl2 += '<th style=""font-size: 12px;text-align: center;"">Remarks</th>';
                tbl2 += '<th style=""font-size: 12px;text-align: center;"">Action Taken</th>';

                tbl2 += '</tr></thead>';

                if (result1.length > 0) {
                    console.log(result1.length);
                    for (var j = 0; j < result1.length; j++) {
                        //console.log(""Inside For Loop"");
                        var formattedDate = moment(result1[j].date, 'YYYY/MM/DD').format('DD-MM-YYYY');
                        tbl2 += '<tr>';");
            WriteLiteral(@"
                        tbl2 += '<td style=""font-size: 12px;"">' + formattedDate + '</td>';
                        tbl2 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].site + '</td>';
                        tbl2 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].icr + '</td>';
                        tbl2 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].inv + '</td>';
                        tbl2 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].smb + '</td>';
                        tbl2 += '<td style=""font-size: 12px; text-align: center;"">' + result1[j].strings + '</td>';
                        tbl2 += '<td style=""font-size: 12px; text-align: center;"">' + result1[j].bd_type + '</td>';
                        tbl2 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].from_bd['hours'] + ':' + result1[j].from_bd['minutes'] + '</td>';
                        tbl2 += '<td style=""font-size: 12px;text-align: center;"">' + ");
            WriteLiteral(@"result1[j].to_bd['hours'] + ':' + result1[j].to_bd['minutes'] + '</td>';
                        tbl2 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].total_bd['hours'] + ':' + result1[j].total_bd['minutes'] + '</td>';
                        tbl2 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].ext_int_bd + '</td>';
                        tbl2 += '<td style=""font-size: 12px;"">' + result1[j].igbd + '</td>';
                        tbl2 += '<td style=""font-size: 12px;"">' + result1[j].bd_remarks + '</td>';
                        tbl2 += '<td style=""font-size: 12px;"">' + result1[j].action_taken + '</td>';
                        tbl2 += '</tr>';
                        // console.log(j);
                    }
                }
                else {

                }
                tbl2 += '</table>';
                $(""#importedData"").html();
                document.getElementById(""title"").innerHTML = ""Solar Breakdown View"";
                $(""#importedDa");
            WriteLiteral("ta\").html(tbl2);\r\n            }\r\n        });\r\n    }\r\n\r\n    function ViewPY1Data(importlogId) {\r\n        $.ajax({\r\n            type: \"POST\",\r\n            //url: \"/WindView/GetBrekdownImportData?importId=\" + importlogId,\r\n             url: \'");
#nullable restore
#line 1176 "G:\solarproject\Finalcode\DGR_Main - Copy\DGRA\DGRA_V1\Views\Home\ImportApproval.cshtml"
              Write(Url.Action("GetSolarP1ImportData", "SolarView"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?importId=' + importlogId,
            // url: ""/WindView/DataApproved"",
            contentType: ""application/json; charset=utf-8"",
            success: function (result1, status, xhr) {
                console.log(result1);

                var tbl2 = '<table id=""example2"" class=""table-bordered table-striped  dtr-inline"" style=""width:150%"">';
                tbl2 += '<thead class=""tbl-head""><tr>';
                tbl2 += '<th style=""font-size: 12px;"">Date Time</th>';
                tbl2 += '<th style=""font-size: 12px;text-align: center;"">Site</th>';
                tbl2 += '<th style=""font-size: 12px;text-align: center;"">GHI 1</th>';
                tbl2 += '<th style=""font-size: 12px;text-align: center;"">GHI 2</th>';
                tbl2 += '<th style=""font-size: 12px;text-align: center;"">POA 1</th>';
                tbl2 += '<th style=""font-size: 12px;text-align: center;"">POA 2</th>';
                tbl2 += '<th style=""font-size: 12px;text-align: center;"">POA 3</th>';
               ");
            WriteLiteral(@" tbl2 += '<th style=""font-size: 12px;text-align: center;"">POA 4</th>';
                tbl2 += '<th style=""font-size: 12px;text-align: center;"">POA 5</th>';
                tbl2 += '<th style=""font-size: 12px;text-align: center;"">POA 6</th>';
                tbl2 += '<th style=""font-size: 12px;text-align: center;"">POA 7</th>';
                tbl2 += '<th style=""font-size: 12px;text-align: center;"">AVG GHI</th>';
                tbl2 += '<th style=""font-size: 12px;text-align: center;"">AVG POA</th>';
                tbl2 += '<th style=""font-size: 12px;text-align: center;"">Amb Temp</th>';
                tbl2 += '<th style=""font-size: 12px;text-align: center;"">Mod Temp</th>';
                tbl2 += '<th style=""font-size: 12px;text-align: center;"">Weather Type</th>';

                tbl2 += '</tr></thead>';

                if (result1.length > 0) {
                    console.log(result1.length);
                    for (var j = 0; j < result1.length; j++) {
                        //console.lo");
            WriteLiteral(@"g(""Inside For Loop"");
                        var formattedDate = moment(result1[j].date_time, 'YYYY-MM-DD hh:mm:ss ').format('DD-MM-YYYY HH:mm:ss');
                        tbl2 += '<tr>';
                        tbl2 += '<td style=""font-size: 12px;"">' + formattedDate + '</td>';
                        tbl2 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].site + '</td>';
                        tbl2 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].ghi_1.toFixed(2) + '</td>';
                        tbl2 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].ghi_2.toFixed(2) + '</td>';
                        tbl2 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].poa_1.toFixed(2) + '</td>';
                        tbl2 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].poa_2.toFixed(2) + '</td>';
                        tbl2 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].poa_3.toFixed(2) + '</td>';
 ");
            WriteLiteral(@"                       tbl2 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].poa_4.toFixed(2) + '</td>';
                        tbl2 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].poa_5.toFixed(2) + '</td>';
                        tbl2 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].poa_6.toFixed(2) + '</td>';
                        tbl2 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].poa_7.toFixed(2) + '</td>';
                        tbl2 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].avg_ghi.toFixed(2) + '</td>';
                        tbl2 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].avg_poa.toFixed(2) + '</td>';
                        tbl2 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].amb_temp.toFixed(2) + '</td>';
                        tbl2 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].mod_temp.toFixed(2) + '</td>';
               ");
            WriteLiteral(@"         tbl2 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].weather_type + '</td>';
                       
                        tbl2 += '</tr>';
                        // console.log(j);
                    }
                }
                else {

                }
                tbl2 += '</table>';
                $(""#importedData"").html();
                document.getElementById(""title"").innerHTML = ""Solar Pyranometer 1Min View"";
                $(""#importedData"").html(tbl2);
            }
        });
    }
    function ViewPY15Data(importlogId) {
        $.ajax({
            type: ""POST"",
            //url: ""/WindView/GetBrekdownImportData?importId="" + importlogId,
             url: '");
#nullable restore
#line 1244 "G:\solarproject\Finalcode\DGR_Main - Copy\DGRA\DGRA_V1\Views\Home\ImportApproval.cshtml"
              Write(Url.Action("GetSolarP15ImportData", "SolarView"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?importId=' + importlogId,
            // url: ""/WindView/DataApproved"",
            contentType: ""application/json; charset=utf-8"",
            success: function (result1, status, xhr) {
                console.log(result1);

                var tbl2 = '<table id=""example2"" class=""table-bordered table-striped  dtr-inline"" style=""width:150%"">';
                tbl2 += '<thead class=""tbl-head""><tr>';
                tbl2 += '<th style=""font-size: 12px;"">Date Time</th>';
                tbl2 += '<th style=""font-size: 12px;text-align: center;"">Site</th>';
                tbl2 += '<th style=""font-size: 12px;text-align: center;"">GHI 1</th>';
                tbl2 += '<th style=""font-size: 12px;text-align: center;"">GHI 2</th>';
                tbl2 += '<th style=""font-size: 12px;text-align: center;"">POA 1</th>';
                tbl2 += '<th style=""font-size: 12px;text-align: center;"">POA 2</th>';
                tbl2 += '<th style=""font-size: 12px;text-align: center;"">POA 3</th>';
               ");
            WriteLiteral(@" tbl2 += '<th style=""font-size: 12px;text-align: center;"">POA 4</th>';
                tbl2 += '<th style=""font-size: 12px;text-align: center;"">POA 5</th>';
                tbl2 += '<th style=""font-size: 12px;text-align: center;"">POA 6</th>';
                tbl2 += '<th style=""font-size: 12px;text-align: center;"">POA 7</th>';
                tbl2 += '<th style=""font-size: 12px;text-align: center;"">AVG GHI</th>';
                tbl2 += '<th style=""font-size: 12px;text-align: center;"">AVG POA</th>';
                tbl2 += '<th style=""font-size: 12px;text-align: center;"">Amb Temp</th>';
                tbl2 += '<th style=""font-size: 12px;text-align: center;"">Mod Temp</th>';
                tbl2 += '<th style=""font-size: 12px;text-align: center;"">Weather Type</th>';

                tbl2 += '</tr></thead>';

                if (result1.length > 0) {
                    console.log(result1.length);
                    for (var j = 0; j < result1.length; j++) {
                        var formatte");
            WriteLiteral(@"dDate = moment(result1[j].date_time, 'YYYY-MM-DD hh:mm:ss ').format('DD-MM-YYYY HH:mm:ss');
                        tbl2 += '<tr>';
                        tbl2 += '<td style=""font-size: 12px;"">' + formattedDate + '</td>';
                        tbl2 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].site + '</td>';
                        tbl2 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].ghi_1.toFixed(2) + '</td>';
                        tbl2 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].ghi_2.toFixed(2) + '</td>';
                        tbl2 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].poa_1.toFixed(2) + '</td>';
                        tbl2 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].poa_2.toFixed(2) + '</td>';
                        tbl2 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].poa_3.toFixed(2) + '</td>';
                        tbl2 += '<td style=""font-size: 12px;");
            WriteLiteral(@"text-align: center;"">' + result1[j].poa_4.toFixed(2) + '</td>';
                        tbl2 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].poa_5.toFixed(2) + '</td>';
                        tbl2 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].poa_6.toFixed(2) + '</td>';
                        tbl2 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].poa_7.toFixed(2) + '</td>';
                        tbl2 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].avg_ghi.toFixed(2) + '</td>';
                        tbl2 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].avg_poa.toFixed(2) + '</td>';
                        tbl2 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].amb_temp.toFixed(2) + '</td>';
                        tbl2 += '<td style=""font-size: 12px;text-align: center;"">' + result1[j].mod_temp.toFixed(2) + '</td>';
                        tbl2 += '<td style=""font-size: 12px;text-align: ce");
            WriteLiteral(@"nter;"">' + result1[j].weather_type + '</td>';
                        tbl2 += '</tr>';
                        // console.log(j);
                    }
                }
                else {

                }
                tbl2 += '</table>';
                $(""#importedData"").html();
                document.getElementById(""title"").innerHTML = ""Solar Pyranometer 15Min View"";;
                $(""#importedData"").html(tbl2);
            }
        });
    }

    function ExportToExcel() {
        var values = '';
        $.each($(""input[class='form-check-input']:checked""), function () {
            if (values == '') {
                values = $(this).attr('data-id');
            }
            else {
                values = values + "","" + $(this).attr('data-id');
            }
        });
        console.log(values);
    }
</script>
");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public IHttpContextAccessor HttpContextAccessor { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
