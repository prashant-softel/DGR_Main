#pragma checksum "D:\Haresh\Softel\Production code\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarPRReport.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "f86581d72b11ec593ecba742a90ba7653f3aae1c"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_SolarPRReport), @"mvc.1.0.view", @"/Views/Home/SolarPRReport.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\Haresh\Softel\Production code\DGR_Main\DGRA\DGRA_V1\Views\_ViewImports.cshtml"
using DGRA_V1;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Haresh\Softel\Production code\DGR_Main\DGRA\DGRA_V1\Views\_ViewImports.cshtml"
using DGRA_V1.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "D:\Haresh\Softel\Production code\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarPRReport.cshtml"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Haresh\Softel\Production code\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarPRReport.cshtml"
using Microsoft.AspNetCore.Http;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"f86581d72b11ec593ecba742a90ba7653f3aae1c", @"/Views/Home/SolarPRReport.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"aa9fc0f0a035817cf8f1fc535e299e80b45b9453", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_SolarPRReport : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<DGRA_V1.Models.CountryList>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/fontawesome-free/css/all.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/daterangepicker/daterangepicker.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables-bs4/css/dataTables.bootstrap4.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables-responsive/css/responsive.bootstrap4.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables-buttons/css/buttons.bootstrap4.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/dist/css/adminlte.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/jquery/jquery.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_8 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/moment/moment.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_9 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/daterangepicker/daterangepicker.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_10 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/tempusdominus-bootstrap-4/js/tempusdominus-bootstrap-4.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_11 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/summernote/summernote-bs4.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_12 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables/jquery.dataTables.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_13 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables/jquery.dataTables.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_14 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables/dataTables.fixedHeader.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_15 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables-buttons/js/dataTables.buttons.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_16 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/jszip/jszip.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_17 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables-buttons/js/buttons.html5.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_18 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/pdfmake/pdfmake.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_19 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables-buttons/js/buttons.colVis.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_20 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/chart.js/Chart.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_21 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/multiple-select/dist/multiple-select.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_22 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/dist/js/comman.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
            WriteLiteral("\r\n");
#nullable restore
#line 7 "D:\Haresh\Softel\Production code\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarPRReport.cshtml"
  
    ViewData["Title"] = "Solar Performance Reports";

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\Haresh\Softel\Production code\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarPRReport.cshtml"
  

    string solarSiteList = "";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
#nullable restore
#line 15 "D:\Haresh\Softel\Production code\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarPRReport.cshtml"
 if (@HttpContextAccessor.HttpContext.Session.GetString("role") != "Admin")
{
    var usermodel = JsonConvert.DeserializeObject<UserAccess>(@HttpContextAccessor.HttpContext.Session.GetString("UserAccess"));
    for (int i = 0; i < @usermodel.access_list.Count; i++)
    {

        if (@usermodel.access_list[i].page_type == 3 && @usermodel.access_list[i].site_type == 2)
        {
            solarSiteList += @usermodel.access_list[i].identity.ToString() + ",";
        }
    }
}

#line default
#line hidden
#nullable disable
            WriteLiteral("<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700&display=fallback\">\r\n<!-- Font Awesome -->\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "f86581d72b11ec593ecba742a90ba7653f3aae1c13958", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<!-- daterange picker -->\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "f86581d72b11ec593ecba742a90ba7653f3aae1c15103", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<!-- DataTables -->\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "f86581d72b11ec593ecba742a90ba7653f3aae1c16242", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "f86581d72b11ec593ecba742a90ba7653f3aae1c17358", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<link rel=\"stylesheet\" href=\"https://cdn.datatables.net/fixedcolumns/4.3.0/css/fixedColumns.dataTables.min.css\" />\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "f86581d72b11ec593ecba742a90ba7653f3aae1c18596", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
<!-- dropdown search -->
<link href=""https://unpkg.com/multiple-select@1.5.2/dist/multiple-select.min.css"" rel=""stylesheet"">
<script src=""https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js""></script>
<script src=""https://unpkg.com/multiple-select@1.5.2/dist/multiple-select.min.js""></script>

");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "f86581d72b11ec593ecba742a90ba7653f3aae1c20021", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<style>\r\n    .tab-btn {\r\n        font-size: 0.7rem;\r\n        font-weight: bold;\r\n    }\r\n</style>\r\n<style>\r\n");
            WriteLiteral(@"    div.dataTables_scrollBody > table {
        margin-top: -33px !important;
    }
</style>
<div class=""content-wrapper"">

    <section class=""content-header"">
        <!--<div class=""container-fluid"">
            <div class=""row mb-2"">
                <div class=""col-sm-6"">

                </div>
                <div class=""col-sm-6"">
                    <ol class=""breadcrumb float-sm-right"">
                        <li class=""breadcrumb-item""><a href=""#"">Home</a></li>
                        <li class=""breadcrumb-item active"">Wind Performance Reports</li>
                    </ol>
                </div>
            </div>
        </div>-->
    </section>


    <section class=""content"">
        <div class=""card"">
            <div class=""card-header"">
                <h3 class=""card-title text-center"">Solar Performance Summary</h3>
                <!--<div class=""card-tools"">
                <button type=""button"" class=""btn btn-tool"" data-card-widget=""collapse"" title=""Collapse"">");
            WriteLiteral(@"
                <i class=""fas fa-minus""></i>
                </button>
                </div>-->
            </div>
            <div class=""card-body"">
                <div class=""row"" >
                   
                    <div class=""col-sm-3"" style="" margin-left: 15px;"">
                        <div class=""input-group "">
                            <label class=""col-sm-3.1 col-form-label text-left"">Date Range :&nbsp;&nbsp;</label>
                            <div class=""input-group-prepend"">
                                <span class=""input-group-text"">
                                    <i class=""far fa-calendar-alt""></i>
                                </span>
                            </div>
                            <input type=""text"" class=""form-control float-right col-sm-9"" id=""daterange"" name=""daterange"">
                        </div>
                    </div>
                    <div class=""col-md-3""  style=""margin-left: -13px;"">
                        <div class=""fo");
            WriteLiteral(@"rm-group"">
                            <div class=""row"">
                                <label class=""col-sm-3 col-form-label text-right"">SPV : </label>
                                <select class=""form-control  col-sm-9"" id=""spv"" name=""spv[]"" onchange=""GetSite()"" multiple>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class=""col-md-3"">
                        <div class=""form-group"">
                            <div class=""row"">
                                <label class=""col-sm-3 col-form-label text-right"">Site : </label>
                                <select class=""form-control  col-sm-9"" id=""site"" name=""site[]"" multiple>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class=""col-sm-2"">
                        <button type=""button"" class=""btn btn-block btn-pri");
            WriteLiteral(@"mary ""  onclick=""GetPRReport();"" style=""margin-left: 2rem; width: 5rem; line-height: 1.3;"">Search</button>
                    </div>
                </div>
           
            
            <div class=""col-sm-5"">
                <div class=""card-body table-responsive pad"" style=""margin-left: -4%; padding-bottom: 2px;"">
                    <div class=""btn-group btn-group-toggle"" data-toggle=""buttons"">
                        <label class=""btn bg-olive"">
                            <input type=""radio"" name=""reportType"" value=""Site"" id=""pr_b1"" autocomplete=""off"" checked> Site Wise Report
                        </label>
                        <label class=""btn bg-olive"">
                            <input type=""radio"" name=""reportType"" value=""SPV"" id=""pr_b2"" autocomplete=""off""> SPV Wise Report
                        </label>
                    </div>
                </div>
            </div>
            <div class=""col-sm-2 text-center"">

            </div>
            <div class=""col-");
            WriteLiteral(@"sm-5 text-center""></div>
       
        <hr>
        <div id=""pr_reports"" style=""overflow-x: auto;"" class=""pr_reports""></div>
        <div id=""loader"" class=""loader  center"" style=""display:none""></div>
</div>
        </div>
</div>
    </section>
</div>

");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f86581d72b11ec593ecba742a90ba7653f3aae1c25937", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_7);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js\"></script>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f86581d72b11ec593ecba742a90ba7653f3aae1c27071", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_8);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f86581d72b11ec593ecba742a90ba7653f3aae1c28111", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_9);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f86581d72b11ec593ecba742a90ba7653f3aae1c29459", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_10);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f86581d72b11ec593ecba742a90ba7653f3aae1c30504", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_11);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<!--Datatable -->\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f86581d72b11ec593ecba742a90ba7653f3aae1c31566", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_12);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f86581d72b11ec593ecba742a90ba7653f3aae1c32607", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f86581d72b11ec593ecba742a90ba7653f3aae1c33956", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<script src=\"https://cdn.datatables.net/fixedcolumns/4.3.0/js/dataTables.fixedColumns.min.js\" defer></script>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f86581d72b11ec593ecba742a90ba7653f3aae1c35420", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f86581d72b11ec593ecba742a90ba7653f3aae1c36769", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f86581d72b11ec593ecba742a90ba7653f3aae1c38118", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_17);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f86581d72b11ec593ecba742a90ba7653f3aae1c39467", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f86581d72b11ec593ecba742a90ba7653f3aae1c40816", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f86581d72b11ec593ecba742a90ba7653f3aae1c42165", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_20);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f86581d72b11ec593ecba742a90ba7653f3aae1c43206", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_21);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f86581d72b11ec593ecba742a90ba7653f3aae1c44555", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_22);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.5/xlsx.full.min.js\"></script>\r\n\r\n<script type=\"text/javascript\">\r\n     var userRole = \"");
#nullable restore
#line 179 "D:\Haresh\Softel\Production code\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarPRReport.cshtml"
                Write(Html.Raw(@HttpContextAccessor.HttpContext.Session.GetString("role")));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""";
    var exceldata1;
    var exceldata2;
    $(document).ready(function () {
        $('#daterange').daterangepicker(
            {
                maxDate: new Date(),
                locale: {
                    format: 'DD/MM/YYYY',
                }
            });
    });

    window.onload = function () {
        GetSPV();
    }
    var today = new Date();
    fyear = getFinancialYear(today);
    var Fy = fyear;
     function GetSPV() {
        let state = """";
        var site_ids = """);
#nullable restore
#line 200 "D:\Haresh\Softel\Production code\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarPRReport.cshtml"
                   Write(Html.Raw(solarSiteList.TrimEnd(',')));

#line default
#line hidden
#nullable disable
            WriteLiteral("\";\r\n        $.ajax({\r\n            type: \"GET\",\r\n            url: \'");
#nullable restore
#line 203 "D:\Haresh\Softel\Production code\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarPRReport.cshtml"
             Write(Url.Action("GetSPVList", "SolarReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?state=' + state + '&sitelist=' + site_ids,
            contentType: ""application/json; charset=utf-8"",
            datatype: ""html"",
            success: function (result, status, xhr) {
                var options = """";
                for (var j = 0; j < result.length; j++) {
                    options += '<option value=""' + result[j].spv + '"">' + result[j].spv + '</option>';
                }
                $(""#spv"").multipleSelect('destroy');
                $(""#spv"").html(options);
                $('select#spv').multipleSelect({
                    ""minimumCountSelected"": 2,
                    ""placeholder"": ""Select SPV(s)"",
                    filter:true
                });
            }
        });
        GetSite();
    }

    function GetSite() {
        let state = """";
        var site_ids = """);
#nullable restore
#line 225 "D:\Haresh\Softel\Production code\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarPRReport.cshtml"
                   Write(Html.Raw(solarSiteList.TrimEnd(',')));

#line default
#line hidden
#nullable disable
            WriteLiteral("\";\r\n\r\n        let spv = \"\";\r\n        $(\'select#spv option:selected\').each(function () {\r\n            spv += $(this).val() + \",\";\r\n        });\r\n        $.ajax({\r\n            type: \"POST\",\r\n            url: \'");
#nullable restore
#line 233 "D:\Haresh\Softel\Production code\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarPRReport.cshtml"
             Write(Url.Action("GetSiteList", "SolarReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?state=' + state + '&spv=' + spv + '&sitelist=' + site_ids,
            contentType: ""application/json; charset=utf-8"",
            datatype: ""html"",
            success: function (result, status, xhr) {
                var options = """";
                for (var k = 0; k < result.length; k++) {
                    options += '<option value=""' + result[k].site_master_solar_id + '"">' + result[k].site + '</option>';
                }
                $(""#site"").multipleSelect('destroy');
                $(""#site"").html(options);
                $('select#site').multipleSelect({
                    ""minimumCountSelected"": 2,
                    ""placeholder"": ""Select Site(s)"",
                    filter:true
                });
            }
        });
    }


    function GetPRReport() {
        var ReportType = $(""input[name='reportType']:checked"").val();
        if (ReportType == ""SPV"") {
            GetSolarPRReportSPVWise();
        }
        else {
            GetSolarPRReport");
            WriteLiteral(@"SiteWise();
        }
    }

        function ExportToExcelSPVWise() {

    console.log(exceldata1)
    result = exceldata1;

    var columns = [
         ""SPV"",""Capacity"",""Energy (in MU)  Tar"","" Energy (in MU) Exp"","" Energy (in MU) Act"","" Energy (in MU) T.var(%)"","" Energy (in MU) E.var(%)"",""Revenue (MINR)"",""GHI (kWh/m^2)  Tar"",
         ""GHI (kWh/m^2)  Act "",""GHI (kWh/m^2)  Var (%) "",""POA (kWh/m^2)  Tar"",""POA (kWh/m^2)  Act "",
       ""POA (kWh/m^2) Var (%)  "",""GHI VS POA Gain (%)  Tar "",""GHI VS POA Gain (%)  Act "",""GHI VS POA Gain(%)  Var (%)  "",""PLF (%)  Tar "",""PLF (%)  Act "",""PLF (%)  Var (%) "",""PR (%)  Tar "",""PR (%)  Act "",""PR (%)  Var (%)  "",""Temp Corr. PR (%)  Tar"",""Temp Corr. PR (%)  Act "",""Temp Corr. PR (%)  Var (%) "",""MA (%)  Tar"",""MA (%)  Act "",""MA (%)  Var (%) "",""IGA (%)  Tar"",""IGA (%)  Act "",""IGA (%)  Var (%) "",""EGA (%)  Tar"",""EGA (%)  Act "",""EGA (%)  Var (%) ""
    ];

    var rows = [];

    for (var i = 0; i < result.length; i++) {
        var row = [];
       let total_capaci");
            WriteLiteral(@"ty = 0;
                    let total_tar_kwh = 0;
                    let total_act_kwh = 0;
                    let total_expected_kwh = 0;
                    let total_minr = 0;
                    let total_capTarGhi = 0;
                    let total_tar_ghi = 0;
                    let total_act_ghi = 0;
                    let total_capTarPlf = 0;
                    let total_tar_plf = 0;
                    let total_act_plf = 0;
                    let total_capTarGain = 0;
                    let total_tar_gain = 0;
                    let total_act_gain = 0;
                    let total_capTarPoa = 0;
                    let total_tar_poa = 0;
                    let total_act_poa = 0;
                    let total_capTarPr = 0;
                    let total_tar_pr = 0;
                    let total_act_pr = 0;
                    let total_capTarMa = 0;
                    let total_tar_ma = 0;
                    let total_act_ma = 0;
                    let total_capTar");
            WriteLiteral(@"Iga = 0;
                    let total_tar_iga = 0;
                    let total_act_iga = 0;
                    let total_capTarEga = 0;
                    let total_tar_ega = 0;
                    let total_act_ega = 0;
                    let total_capActGhi = 0;
                    let total_capActPlf = 0;
                    let total_capActGain = 0;
                    let total_capActPoa = 0;
                    let total_capActPr = 0;
                    let total_capActMa = 0;
                    let total_capActIga = 0;
                    let total_capActEga = 0;

                    let total_capTarTCPr = 0;
                    let total_capActTCPr = 0;
                    let total_tar_TCpr = 0;
                    let total_act_TCpr = 0;



                        let t_var = 0;
                        let e_var = 0;
                        let minr = 0;
                        let ghi_var = 0;
                        let poa_var = 0;
                        let ga");
            WriteLiteral(@"in_tar = 0;
                        let gain_act = 0;
                        let gain_var = 0;
                        let plf_var = 0;
                        let pr_var = 0;
                        let ma_var = 0;
                        let iga_var = 0;
                        let ega_var = 0;
                        let act_prval = 0;

                        let TCPr_var = 0;

                        minr = ((result[i].act_kwh - result[i].tar_kwh) * result[i].total_tarrif);
                        if (result[i].tar_kwh != 0) {
                            t_var = ((result[i].act_kwh - result[i].tar_kwh) / result[i].tar_kwh) * 100;
                        }
                        if (result[i].expected_kwh != 0) {
                            //e_var = ((result[i].act_kwh - result[i].expected_kwh / 1000000) / (result[i].expected_kwh / 1000000)) * 100;
                            e_var = ((result[i].act_kwh - result[i].expected_kwh) / (result[i].expected_kwh)) * 100;
                    ");
            WriteLiteral(@"        if (result[i].site == ""Maragutti"") {
                                console.log(""Actual : "", result[i].act_kwh, ""Expected : "", result[i].expected_kwh, ""evar : "" + e_var);
                                //    console.log(temp_e_var);
                            }
                            //temp_e_var = temp_e_var / result[i].expected_kwh;
                            //if (result[0]) {
                            //    console.log(temp_e_var);
                            //}
                            //temp_e_var = temp_e_var * 100;
                            //if (result[0]) {
                            //    console.log(temp_e_var);
                            //}
                            //e_var = temp_e_var;
                        }
                        if (result[i].pr_expected_kwh == 0 || result[i].act_kwh == 0) {
                            act_prval = 0
                        }
                        else {
                            act_prval = (result[i].ac");
            WriteLiteral(@"t_kwh / result[i].pr_expected_kwh) * 100;
                        }
                        if (result[i].tar_ghi != 0) {
                            ghi_var = ((result[i].act_ghi - result[i].tar_ghi) / result[i].tar_ghi) * 100;
                        }
                        if (result[i].tar_poa != 0) {
                            poa_var = ((result[i].act_poa - result[i].tar_poa) / result[i].tar_poa) * 100;
                        }

                        TCPr_var = (result[i].temp_corrected_pr - result[i].tar_pr)

                        pr_var = (act_prval - result[i].tar_pr) ;
                        plf_var = (result[i].act_plf - result[i].tar_plf);
                        ma_var = (result[i].act_ma - result[i].tar_ma);
                        iga_var = (result[i].act_iga - result[i].tar_iga);
                        ega_var = (result[i].act_ega - result[i].tar_ega);


                        console.log(result[i].pr_expected_kwh, result[i].act_kwh, act_prval);
                  ");
            WriteLiteral(@"      if (result[i].tar_poa == 0 || result[i].tar_ghi == 0) {
                            gain_tar = 0;
                        } else {
                            gain_tar = (result[i].tar_poa / result[i].tar_ghi) * 100;
                        }
                        if (result[i].act_poa == 0 || result[i].act_ghi == 0) {
                            gain_act = 0;
                        } else {
                            gain_act = (result[i].act_poa / result[i].act_ghi) * 100;
                        }
                        if (gain_act == 0 || gain_tar == 0) {
                            gain_var = 0;
                        } else {
                            gain_var = (gain_act - gain_tar);
                        }



                        total_capacity += result[i].capacity;
                        total_tar_kwh += result[i].tar_kwh;
                        total_expected_kwh += Number(result[i].expected_kwh);
                        total_act_kwh += result[i].act_kwh;");
            WriteLiteral(@"
                        total_minr += minr;
                        total_tar_ghi += result[i].tar_ghi;
                        total_act_ghi += result[i].act_ghi;
                        total_tar_poa += result[i].tar_poa;
                        total_act_poa += result[i].act_poa;
                        total_tar_gain += gain_tar;
                        total_act_gain += gain_act;
                        total_tar_plf += result[i].tar_plf;
                        total_act_plf += result[i].act_plf;
                        total_tar_pr += result[i].tar_pr;
                        total_act_pr += act_prval;
                        total_tar_ma += result[i].tar_ma;
                        total_act_ma += result[i].act_ma;
                        total_tar_iga += result[i].tar_iga;
                        total_act_iga += result[i].act_iga;
                        total_tar_ega += result[i].tar_ega;
                        total_act_ega += result[i].act_ega;
                        total_ca");
            WriteLiteral(@"pTarGhi += result[i].tar_ghi * result[i].capacity;
                        total_capTarPoa += result[i].tar_poa * result[i].capacity;
                        total_capTarPlf += result[i].tar_plf * result[i].capacity;
                        total_capTarPr += result[i].tar_pr * result[i].capacity;
                        total_capTarGain += gain_tar * result[i].capacity;
                        total_capTarMa += result[i].tar_ma * result[i].capacity
                        total_capTarIga += result[i].tar_iga * result[i].capacity;
                        total_capTarEga += result[i].tar_ega * result[i].capacity;
                        total_capActGhi += result[i].act_ghi * result[i].capacity;
                        total_capActPoa += result[i].act_poa * result[i].capacity;
                        total_capActPlf += result[i].act_plf * result[i].capacity;
                        total_capActPr += act_prval * result[i].capacity;
                        total_capActGain += gain_act * result[i].capac");
            WriteLiteral(@"ity;
                        total_capActMa += result[i].act_ma * result[i].capacity;
                        total_capActIga += result[i].act_iga * result[i].capacity;
                        total_capActEga += result[i].act_ega * result[i].capacity;

                        total_tar_TCpr += result[i].tar_pr;
                        total_act_TCpr += result[i].temp_corrected_pr;
                        total_capTarTCPr += result[i].tar_pr * result[i].capacity;
                        total_capActTCPr += result[i].temp_corrected_pr * result[i].capacity;

       row.push(result[i].spv);
        row.push(result[i].capacity);
        row.push(result[i].tar_kwh);
        row.push(result[i].expected_kwh);
        row.push(result[i].act_kwh);
        row.push( t_var);
        row.push(e_var);
        row.push(minr);
        row.push( result[i].tar_ghi);
        row.push( result[i].act_ghi);
        row.push( ghi_var);
        row.push(result[i].tar_poa);
        row.push(result[i].act_poa);
");
            WriteLiteral(@"        row.push(poa_var);
        row.push( gain_tar);
        row.push(gain_act);
        row.push(gain_var);
        row.push(result[i].tar_plf);
        row.push(result[i].act_plf);
        row.push(plf_var);
        row.push(result[i].tar_pr);
        row.push(act_prval);
        row.push(pr_var);
        row.push(result[i].tar_pr);
        row.push(result[i].temp_corrected_pr);
        row.push(TCPr_var);
        row.push(result[i].tar_ma);
        row.push(result[i].act_ma);
        row.push(ma_var);
        row.push(result[i].tar_iga);
        row.push(result[i].act_iga);
        row.push(iga_var);
        row.push(result[i].tar_ega);
           row.push( result[i].act_ega);
        row.push( ega_var);
        rows.push(row);



    }

    var data = [columns].concat(rows);

    var ws = XLSX.utils.aoa_to_sheet(data);
    var wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, ""Solar PerformanceSum SPVWise"");
    var wbout = XLSX.write(wb, { bookType: ");
            WriteLiteral(@"'xlsx', type: 'binary' });

    function s2ab(s) {
        var buf = new ArrayBuffer(s.length);
        var view = new Uint8Array(buf);
        for (var i = 0; i !== s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
        return buf;
    }

    saveAs(new Blob([s2ab(wbout)], { type: ""application/octet-stream"" }), ""Solar PerformanceSum SPVWise.xlsx"");

}
    // Daily Gen Report SPV WIse
    function GetSolarPRReportSPVWise() {
        var site_ids = """);
#nullable restore
#line 505 "D:\Haresh\Softel\Production code\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarPRReport.cshtml"
                   Write(Html.Raw(solarSiteList.TrimEnd(',')));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""";
        let site = """";
        let spv = """";
        $('select#site option:selected').each(function () {
            site += $(this).val() + "","";
        });
        site = site != """" ? site.slice(0, -1) : site;

        $('select#spv option:selected').each(function () {
            spv += $(this).val() + "","";
        });
        spv = spv != """" ? spv.slice(0, -1) : spv;
        if (userRole == ""User"" && site == """") {
            site = site_ids;
        }
        var daterange = $('#daterange').val();
        var arr1 = new Array();
        arr1 = daterange.split(""-"");
        var fromDate = moment(arr1[0], 'DD/MM/YYYY').format('YYYY-MM-DD');
        var toDate = moment(arr1[1], 'DD/MM/YYYY').format('YYYY-MM-DD');
        var fyear = Fy;
        var reporthead = ""SPV Wise Report"";
        document.getElementById(""loader"").style.display = 'flex';
        $.ajax({
            type: ""GET"",

            //url: ""/SolarReport/GetSolarPRReportINVWise?fy="" + fyear + "" &fromDate="" + fromD");
            WriteLiteral("ate + \"&toDate=\" + toDate,\r\n            url: \'");
#nullable restore
#line 532 "D:\Haresh\Softel\Production code\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarPRReport.cshtml"
             Write(Url.Action("GetSolarPRReportSPVWise", "SolarReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?fy=' + fyear + '&fromDate=' + fromDate + '&toDate=' + toDate + '&sitelist=' + site+ '&spv='+spv,
            contentType: ""application/json; charset=utf-8"",

            datatype: ""JSON"",
            success: function (result, status, xhr) {
                console.log(result);
                //var tbl = '<div class=""text-center""><h5>' + reporthead + '</h5></div>';
                var tbl = '<table id=""example1""  class=""table table-bordered table-striped"" style=""width:150%"">';
                tbl += '<thead class=""tbl-head""><tr>';
                tbl += '<th rowspan=""2"">SPV</th><th rowspan=""2"">Capacity <br> (MW)</th>';
                tbl += '<th colspan=""5"" class=""text-center""> Energy (in MU)</th >';
                tbl += '<th>(±)Revenue</th><th colspan=""3"" class=""text-center"">GHI (kWh/m<sup>2</sup>)</th>';
                tbl += '<th colspan=""3"" class=""text-center"">POA (kWh/m<sup>2</sup>)</th>';
                tbl += '<th colspan=""3"" class=""text-center"">GHI Vs POA Gain (%)</th>';
    ");
            WriteLiteral(@"            tbl += '<th colspan=""3"" class=""text-center"">PLF (%)</th>';
                tbl += '<th colspan=""3"" class=""text-center"">PR (%)</th>';

                //tbl += '<th colspan=""3"" class=""text-center"">Temp Corr. PR (%)</th>';

                tbl += '<th colspan=""3"" class=""text-center"">MA (%)</th>';
                tbl += '<th colspan=""3"" class=""text-center"">IGA (%)</th>';
                tbl += '<th colspan=""3"" class=""text-center"">EGA (%)</th></tr > ';
                tbl += '<tr>';
                tbl += '<th>Tar</th>';
                tbl += '<th>Exp</th>';
                tbl += '<th>Act</th>';
                tbl += '<th>T.Var (%)</th>';
                tbl += '<th>E.Var (%)</th>';
                tbl += '<th>(MINR)</th>';
                tbl += '<th>Tar</th>';
                tbl += '<th>Act</th>';
                tbl += '<th>Var (%)</th>';
                tbl += '<th>Tar</th>';
                tbl += '<th>Act</th>';
                tbl += '<th>Var (%)</th>';
                ");
            WriteLiteral(@"tbl += '<th>Tar </th>';
                tbl += '<th>Act </th>';
                tbl += '<th>Var (%)</th>';
                tbl += '<th>Tar</th>';
                tbl += '<th>Act</th>';
                tbl += '<th>Var (%)</th>';
                tbl += '<th>Tar</th>';
                tbl += '<th>Act</th>';
                tbl += '<th>Var (%)</th>';

                //tbl += '<th>Tar</th>';
                //tbl += '<th>Act</th>';
                //tbl += '<th>Var (%)</th>';

                tbl += '<th>Tar (%)</th>';
                tbl += '<th>Act (%)</th>';
                tbl += '<th>Var (%)</th>';

                tbl += '<th>Tar</th>';
                tbl += '<th>Act</th>';
                tbl += '<th>Var (%)</th>';

                tbl += '<th>Tar</th>';
                tbl += '<th>Act</th>';
                tbl += '<th>Var (%)</th>';
                tbl += '</tr></thead>';

                if (result.length > 0) {
                      exceldata1 = result;
                   ");
            WriteLiteral(@" let total_capacity = 0;
                    let total_tar_kwh = 0;
                    let total_act_kwh = 0;
                    let total_expected_kwh = 0;
                    let total_minr = 0;
                    let total_capTarGhi = 0;
                    let total_tar_ghi = 0;
                    let total_act_ghi = 0;
                    let total_capTarPlf = 0;
                    let total_tar_plf = 0;
                    let total_act_plf = 0;
                    let total_capTarGain = 0;
                    let total_tar_gain = 0;
                    let total_act_gain = 0;
                    let total_capTarPoa = 0;
                    let total_tar_poa = 0;
                    let total_act_poa = 0;
                    let total_capTarPr = 0;
                    let total_tar_pr = 0;
                    let total_act_pr = 0;
                    let total_capTarMa = 0;
                    let total_tar_ma = 0;
                    let total_act_ma = 0;
                   ");
            WriteLiteral(@" let total_capTarIga = 0;
                    let total_tar_iga = 0;
                    let total_act_iga = 0;
                    let total_capTarEga = 0;
                    let total_tar_ega = 0;
                    let total_act_ega = 0;
                    let total_capActGhi = 0;
                    let total_capActPlf = 0;
                    let total_capActGain = 0;
                    let total_capActPoa = 0;
                    let total_capActPr = 0;
                    let total_capActMa = 0;
                    let total_capActIga = 0;
                    let total_capActEga = 0;

                    let total_capTarTCPr = 0;
                    let total_capActTCPr = 0;
                    let total_tar_TCpr = 0;
                    let total_act_TCpr = 0;


                    for (var i = 0; i < result.length; i++) {
                        let t_var = 0;
                        let e_var = 0;
                        let minr = 0;
                        let ghi_var ");
            WriteLiteral(@"= 0;
                        let poa_var = 0;
                        let gain_tar = 0;
                        let gain_act = 0;
                        let gain_var = 0;
                        let plf_var = 0;
                        let pr_var = 0;
                        let ma_var = 0;
                        let iga_var = 0;
                        let ega_var = 0;
                        let act_prval = 0;

                        let TCPr_var = 0;

                        minr = ((result[i].act_kwh.toFixed(2) - result[i].tar_kwh.toFixed(2)) * result[i].total_tarrif.toFixed(2));
                        if (result[i].tar_kwh != 0) {
                            t_var = ((result[i].act_kwh.toFixed(2) - result[i].tar_kwh.toFixed(2)) / result[i].tar_kwh.toFixed(2)) * 100;
                        }
                        if (result[i].expected_kwh != 0) {
                            //e_var = ((result[i].act_kwh - result[i].expected_kwh / 1000000) / (result[i].expected_kwh / 1000000)) * ");
            WriteLiteral(@"100;
                            e_var = ((result[i].act_kwh - result[i].expected_kwh) / (result[i].expected_kwh)) * 100;
                            if (result[i].site == ""Maragutti"") {
                                console.log(""Actual : "", result[i].act_kwh, ""Expected : "", result[i].expected_kwh, ""evar : "" + e_var);
                                //    console.log(temp_e_var);
                            }
                            //temp_e_var = temp_e_var / result[i].expected_kwh;
                            //if (result[0]) {
                            //    console.log(temp_e_var);
                            //}
                            //temp_e_var = temp_e_var * 100;
                            //if (result[0]) {
                            //    console.log(temp_e_var);
                            //}
                            //e_var = temp_e_var;
                        }
                        if (result[i].pr_expected_kwh == 0 || result[i].act_kwh == 0) {
           ");
            WriteLiteral(@"                 act_prval = 0
                        }
                        else {
                            act_prval = (result[i].act_kwh / result[i].pr_expected_kwh) * 100;
                        }
                        if (result[i].tar_ghi != 0) {
                            ghi_var = ((result[i].act_ghi.toFixed(2) - result[i].tar_ghi.toFixed(2)) / result[i].tar_ghi.toFixed(2)) * 100;
                        }
                        if (result[i].tar_poa != 0) {
                            poa_var = ((result[i].act_poa.toFixed(2) - result[i].tar_poa.toFixed(2)) / result[i].tar_poa.toFixed(2)) * 100;
                        }

                        TCPr_var = (result[i].temp_corrected_pr - result[i].tar_pr)

                        pr_var = (act_prval.toFixed(2) - result[i].tar_pr.toFixed(2)) ;
                        plf_var = (result[i].act_plf.toFixed(2) - result[i].tar_plf.toFixed(2));
                        ma_var = (result[i].act_ma.toFixed(2) - result[i].tar_ma.toFixed");
            WriteLiteral(@"(2));
                        iga_var = (result[i].act_iga.toFixed(2) - result[i].tar_iga.toFixed(2));
                        ega_var = (result[i].act_ega.toFixed(2) - result[i].tar_ega.toFixed(2));


                        console.log(result[i].pr_expected_kwh, result[i].act_kwh, act_prval);
                        if (result[i].tar_poa == 0 || result[i].tar_ghi == 0) {
                            gain_tar = 0;
                        } else {
                            gain_tar = (result[i].tar_poa.toFixed(2) / result[i].tar_ghi.toFixed(2)) * 100;
                        }
                        if (result[i].act_poa == 0 || result[i].act_ghi == 0) {
                            gain_act = 0;
                        } else {
                            gain_act = (result[i].act_poa.toFixed(2) / result[i].act_ghi.toFixed(2)) * 100;
                        }
                        if (gain_act == 0 || gain_tar == 0) {
                            gain_var = 0;
                        } el");
            WriteLiteral(@"se {
                            gain_var = (gain_act.toFixed(2) - gain_tar.toFixed(2));
                        }



                        total_capacity += result[i].capacity;
                        total_tar_kwh += result[i].tar_kwh;
                        total_expected_kwh += Number(result[i].expected_kwh);
                        total_act_kwh += result[i].act_kwh;
                        total_minr += minr;
                        total_tar_ghi += result[i].tar_ghi;
                        total_act_ghi += result[i].act_ghi;
                        total_tar_poa += result[i].tar_poa;
                        total_act_poa += result[i].act_poa;
                        total_tar_gain += gain_tar;
                        total_act_gain += gain_act;
                        total_tar_plf += result[i].tar_plf;
                        total_act_plf += result[i].act_plf;
                        total_tar_pr += result[i].tar_pr;
                        total_act_pr += act_prval;
        ");
            WriteLiteral(@"                total_tar_ma += result[i].tar_ma;
                        total_act_ma += result[i].act_ma;
                        total_tar_iga += result[i].tar_iga;
                        total_act_iga += result[i].act_iga;
                        total_tar_ega += result[i].tar_ega;
                        total_act_ega += result[i].act_ega;
                        total_capTarGhi += result[i].tar_ghi * result[i].capacity;
                        total_capTarPoa += result[i].tar_poa * result[i].capacity;
                        total_capTarPlf += result[i].tar_plf * result[i].capacity;
                        total_capTarPr += result[i].tar_pr * result[i].capacity;
                        total_capTarGain += gain_tar * result[i].capacity;
                        total_capTarMa += result[i].tar_ma * result[i].capacity
                        total_capTarIga += result[i].tar_iga * result[i].capacity;
                        total_capTarEga += result[i].tar_ega * result[i].capacity;
           ");
            WriteLiteral(@"             total_capActGhi += result[i].act_ghi * result[i].capacity;
                        total_capActPoa += result[i].act_poa * result[i].capacity;
                        total_capActPlf += result[i].act_plf * result[i].capacity;
                        total_capActPr += act_prval * result[i].capacity;
                        total_capActGain += gain_act * result[i].capacity;
                        total_capActMa += result[i].act_ma * result[i].capacity;
                        total_capActIga += result[i].act_iga * result[i].capacity;
                        total_capActEga += result[i].act_ega * result[i].capacity;

                        total_tar_TCpr += result[i].tar_pr;
                        total_act_TCpr += result[i].temp_corrected_pr;
                        total_capTarTCPr += result[i].tar_pr * result[i].capacity;
                        total_capActTCPr += result[i].temp_corrected_pr * result[i].capacity;

                        console.log(""Act_prval : "" + act_prval);
");
            WriteLiteral(@"                        tbl += '<tr>';
                        tbl += '<td class=""text-left"">' + result[i].spv + '</td>';
                        tbl += '<td class=""text-right"" >' + result[i].capacity.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].tar_kwh.toFixed(2)+ '</td>';
                        tbl += '<td class=""text-right"">' + (result[i].expected_kwh).toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">-</b></td>';
                        tbl += '<td class=""text-right"">' + result[i].act_kwh.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + t_var.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + e_var.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right""><b>-</td>';
                        tbl += '<td class=""text-right"">' + minr.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].tar_ghi.toFixed(2) ");
            WriteLiteral(@"+ '</td>';
                        tbl += '<td class=""text-right"">' + result[i].act_ghi.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + ghi_var.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].tar_poa.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].act_poa.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + poa_var.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + gain_tar.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + gain_act.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + gain_var.toFixed(2) + '</td>';

                        tbl += '<td class=""text-right"">' + result[i].tar_plf.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].act_plf.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' ");
            WriteLiteral(@"+ plf_var.toFixed(2) + '</td>';

                        tbl += '<td class=""text-right"">' + result[i].tar_pr.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + act_prval.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + pr_var.toFixed(2) + '</td>';

                        //tbl += '<td class=""text-right"">' + result[i].tar_pr.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].temp_corrected_pr.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + TCPr_var.toFixed(2) + '</td>';

                        tbl += '<td class=""text-right"">' + result[i].tar_ma.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].act_ma.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + ma_var.toFixed(2) + '</td>';

                        tbl += '<td class=""text-right"">' + result[i].tar_iga.toFixed(2) + '</td>';
          ");
            WriteLiteral(@"              tbl += '<td class=""text-right"">' + result[i].act_iga.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + iga_var.toFixed(2) + '</td>';

                        tbl += '<td class=""text-right"">' + result[i].tar_ega.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].act_ega.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + ega_var.toFixed(2) + '</td>';
                        tbl += '</tr>';
                    }
                    let avg_t_var = 0;
                    let avg_e_var = 0; //(((avg_act_kwh - avg_expected_kwh) / avg_expected_kwh) * 100);
                    let avg_tar_ghi = 0;
                    let avg_ghi_var = 0;
                    let avg_tar_plf = 0;
                    let avg_plf_var = 0;
                    let avg_tar_poa = 0;
                    let avg_poa_var = 0;
                    let avg_tar_gain = 0;
                    let avg_gain_var = 0;
     ");
            WriteLiteral(@"               let avg_tar_pr = 0;
                    let avg_pr_var = 0;
                    let avg_tar_ma = 0;
                    let avg_ma_var = 0;
                    let avg_tar_iga = 0;
                    let avg_iga_var = 0;
                    let avg_tar_ega = 0;
                    let avg_ega_var = 0;
                    let avg_act_ghi = 0
                    let avg_act_poa = 0;
                    let avg_act_plf = 0;
                    let avg_act_gain = 0;
                    let avg_act_pr = 0;
                    let avg_act_ma = 0;
                    let avg_act_iga = 0;
                    let avg_act_ega = 0;

                    let avg_tar_TCpr = 0;
                    let avg_TCpr_var = 0;

                    if (total_capacity != 0) {
                        avg_tar_ghi = total_capTarGhi / total_capacity;
                        avg_tar_plf = total_capTarPlf / total_capacity;
                        avg_tar_poa = total_capTarPoa / total_capacity;
      ");
            WriteLiteral(@"                  avg_tar_gain = total_capTarGain / total_capacity;
                        avg_tar_pr = total_capTarPr / total_capacity;
                        avg_tar_ma = total_capTarMa / total_capacity;
                        avg_tar_iga = total_capTarIga / total_capacity;
                        avg_tar_ega = total_capTarEga / total_capacity;
                        avg_act_ghi = total_capActGhi / total_capacity;
                        avg_act_plf = total_capActPlf / total_capacity;
                        avg_act_poa = total_capActPoa / total_capacity;
                        avg_act_gain = total_capActGain / total_capacity;
                        avg_act_pr = total_capActPr / total_capacity;
                        avg_act_ma = total_capActMa / total_capacity;
                        avg_act_iga = total_capActIga / total_capacity;
                        avg_act_ega = total_capActEga / total_capacity;

                        avg_tar_TCpr = total_capTarTCPr / total_capacity;
        ");
            WriteLiteral(@"                avg_act_TCpr = total_capActTCPr / total_capacity;
                    }

                    if (total_tar_kwh != 0) {
                        avg_t_var = (((total_act_kwh - total_tar_kwh) / total_tar_kwh) * 100);
                    }
                    if (total_expected_kwh != 0) {
                        avg_e_var = (((total_act_kwh - total_expected_kwh) / total_expected_kwh) * 100);
                    }
                    if (avg_tar_ghi != 0) {
                        avg_ghi_var = (((avg_act_ghi - avg_tar_ghi) / avg_tar_ghi) * 100);
                    }
                    if (avg_tar_poa != 0) {
                        avg_poa_var = (((avg_act_poa - avg_tar_poa) / avg_tar_poa) * 100);
                    }

                    avg_TCpr_var = (avg_act_TCpr - avg_tar_TCpr);

                    avg_pr_var = (avg_act_pr - avg_tar_pr);
                    avg_gain_var = (avg_act_gain - avg_tar_gain);
                    avg_plf_var = (avg_act_plf - avg_tar_plf);
  ");
            WriteLiteral(@"                  avg_ma_var = (avg_act_ma - avg_tar_ma);
                    avg_iga_var = (avg_act_iga - avg_tar_iga);
                    avg_ega_var = (avg_act_ega - avg_tar_ega);

                    tbl += '<tfoot><tr>';
                    tbl += '<th rowspan=""1""  style=""width: 10%; font-weight: bold;"">Grand Total</th>';
                    tbl += '<td class=""text-right""><b>' + total_capacity.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + total_tar_kwh.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + total_expected_kwh.toFixed(2) + '</b></td>';
                    //tbl += '<td class=""text-right"">-</b></td>';
                    tbl += '<td class=""text-right""><b>' + total_act_kwh.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_t_var.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_e_var.toFixed(2) + '</b></td>';
                    //tbl += ");
            WriteLiteral(@"'<td class=""text-right""><b>-</td>';
                    tbl += '<td class=""text-right""><b>' + total_minr.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_tar_ghi.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_act_ghi.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_ghi_var.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_tar_poa.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_act_poa.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_poa_var.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_tar_gain.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_act_gain.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_gain_var.toFixed(2) + '</b></td>';
               ");
            WriteLiteral(@"     tbl += '<td class=""text-right""><b>' + avg_tar_plf.toFixed(2) + '</b></td>';

                    tbl += '<td class=""text-right""><b>' + avg_act_plf.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_plf_var.toFixed(2) + '</b></td>';

                    tbl += '<td class=""text-right""><b>' + avg_tar_pr.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_act_pr.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_pr_var.toFixed(2) + '</b></td>';

                    //tbl += '<td class=""text-right""><b>' + avg_tar_pr.toFixed(2) + '</b></td>';
                    //tbl += '<td class=""text-right""><b>' + avg_act_TCpr.toFixed(2) + '</b></td>';
                    //tbl += '<td class=""text-right""><b>' + avg_TCpr_var.toFixed(2) + '</b></td>';

                    tbl += '<td class=""text-right""><b>' + avg_tar_ma.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + ");
            WriteLiteral(@"avg_act_ma.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_ma_var.toFixed(2) + '</b></td>';

                    tbl += '<td class=""text-right""><b>' + avg_tar_iga.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_act_iga.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_iga_var.toFixed(2) + '</b></td>';

                    tbl += '<td class=""text-right""><b>' + avg_tar_ega.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_act_ega.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_ega_var.toFixed(2) + '</b></td>';
                    tbl += '</tr></tfoot>';
                }
                else {
                    console.log(""Data not available"");

                }
                tbl += '</table>';
                $(""#pr_reports"").html(tbl);
                $.fn.DataTable.ext.pager.numbers_length = ");
            WriteLiteral(@"6;
                $('#example1').DataTable({
                    dom: 'Bfrtip',
                    fixedHeader: true,
                    responsive: true,
                    scrollX: true,
                    lengthChange: false,
                    autoWidth: true,
                    paging: true,
                    lengthChange: false,
                    searching: true,
                    ordering: true,
                    info: true,
                    autoWidth: true,
                    fixedColumns: {
                        left: 2
                    },
                    pageLength: 50,
                    buttons: [
                        {
                            extend: 'excel',
                            footer: true,
                            title: 'Solar Performance Reports SPV Wise',
                            //titleAttr: 'Export Excel',
                            ""oSelectorOpts"": { filter: 'applied', order: 'current' },
                        ");
            WriteLiteral(@"    exportOptions: {
                                columns: ':visible',
                                modifier: {
                                    page: 'all'
                                },
                                format: {
                                    header: function (data, columnIdx) {
                                        if (columnIdx == 1) {
                                            return 'Capacity (MW)';
                                        }
                                        else if (columnIdx == 2) {
                                            return 'Energy (in MU)  Tar';
                                        }
                                        else if (columnIdx == 3) {
                                            return 'Energy (in MU)  Exp';
                                        }
                                        else if (columnIdx == 4) {
                                            return 'Energy (in MU)  Act';
           ");
            WriteLiteral(@"                             }
                                        else if (columnIdx == 5) {
                                            return 'Energy (in MU)  T.Var (%)';
                                        }
                                        else if (columnIdx == 6) {
                                            return 'Energy (in MU)  E.Var (%)';
                                        }
                                        else if (columnIdx == 7) {
                                            return 'Revenue (MINR) ';
                                        }
                                        else if (columnIdx == 8) {
                                            return 'GHI (kWh/m^2)  Tar';
                                        }
                                        else if (columnIdx == 9) {
                                            return 'GHI (kWh/m^2)  Act';
                                        }
                                        else if (columnI");
            WriteLiteral(@"dx == 10) {
                                            return 'GHI (kWh/m^2)  Var (%) ';
                                        }
                                        else if (columnIdx == 11) {
                                            return 'POA (kWh/m^2)  Tar';
                                        }
                                        else if (columnIdx == 12) {
                                            return 'POA (kWh/m^2)  Act ';
                                        }
                                        else if (columnIdx == 13) {
                                            return 'POA (kWh/m^2) Var (%) ';
                                        }
                                        else if (columnIdx == 14) {
                                            return 'GHI VS POA Gain (%)  Tar';
                                        }
                                        else if (columnIdx == 15) {
                                            return 'GHI VS POA Ga");
            WriteLiteral(@"in (%)  Act ';
                                        }
                                        else if (columnIdx == 16) {
                                            return 'GHI VS POA Gain(%)  Var (%) ';
                                        }
                                        else if (columnIdx == 17) {
                                            return 'PLF (%)  Tar';
                                        }
                                        else if (columnIdx == 18) {
                                            return 'PLF (%)  Act ';
                                        }
                                        else if (columnIdx == 19) {
                                            return 'PLF (%)  Var (%) ';
                                        }
                                        else if (columnIdx == 20) {
                                            return 'PR (%)  Tar';
                                        }
                                        else");
            WriteLiteral(@" if (columnIdx == 21) {
                                            return 'PR (%)  Act ';
                                        }
                                        else if (columnIdx == 22) {
                                            return 'PR (%)  Var (%) ';
                                        }
                                        //else if (columnIdx == 23) {
                                        //    return 'Temp Corr. PR (%)  Tar';
                                        //}
                                        //else if (columnIdx == 24) {
                                        //    return 'Temp Corr. PR (%)  Act ';
                                        //}
                                        //else if (columnIdx == 25) {
                                        //    return 'Temp Corr. PR (%)  Var (%) ';
                                        //}
                                        else if (columnIdx == 23) {
                                         ");
            WriteLiteral(@"   return 'MA (%)  Tar';
                                        }
                                        else if (columnIdx == 24) {
                                            return 'MA (%)  Act ';
                                        }
                                        else if (columnIdx == 25) {
                                            return 'MA (%)  Var (%) ';
                                        }
                                        else if (columnIdx == 26) {
                                            return 'IGA (%)  Tar';
                                        }
                                        else if (columnIdx == 27) {
                                            return 'IGA (%)  Act ';
                                        }
                                        else if (columnIdx == 28) {
                                            return 'IGA (%)  Var (%) ';
                                        }
                                        else ");
            WriteLiteral(@"if (columnIdx == 29) {
                                            return 'EGA (%)  Tar';
                                        }
                                        else if (columnIdx == 30) {
                                            return 'EGA (%)  Act ';
                                        }
                                        else if (columnIdx == 31) {
                                            return 'EGA (%)  Var (%) ';
                                        }
                                        else {
                                            return data;
                                        }
                                    }
                                }
                            }
                        },

                        {
                            extend: 'csv',
                            footer: true,
                            title: 'Solar Performance Reports SPV Wise',
                            //titleAttr: 'Export Ex");
            WriteLiteral(@"cel',
                            ""oSelectorOpts"": { filter: 'applied', order: 'current' },
                            exportOptions: {
                                columns: ':visible',
                                modifier: {
                                    page: 'all'
                                },
                                format: {
                                    header: function (data, columnIdx) {
                                        if (columnIdx == 1) {
                                            return 'Capacity (MW)';
                                        }
                                        else if (columnIdx == 2) {
                                            return 'Energy (in MU)  Tar';
                                        }
                                        else if (columnIdx == 3) {
                                            return 'Energy (in MU)  Exp';
                                        }
                                    ");
            WriteLiteral(@"    else if (columnIdx == 4) {
                                            return 'Energy (in MU)  Act';
                                        }
                                        else if (columnIdx == 5) {
                                            return 'Energy (in MU)  T.Var (%)';
                                        }
                                        else if (columnIdx == 6) {
                                            return 'Energy (in MU)  E.Var (%)';
                                        }
                                        else if (columnIdx == 7) {
                                            return 'Revenue (MINR) ';
                                        }
                                        else if (columnIdx == 8) {
                                            return 'GHI (kWh/m^2)  Tar';
                                        }
                                        else if (columnIdx == 9) {
                                            return 'GHI");
            WriteLiteral(@" (kWh/m^2)  Act';
                                        }
                                        else if (columnIdx == 10) {
                                            return 'GHI (kWh/m^2)  Var (%) ';
                                        }
                                        else if (columnIdx == 11) {
                                            return 'POA (kWh/m^2)  Tar';
                                        }
                                        else if (columnIdx == 12) {
                                            return 'POA (kWh/m^2)  Act ';
                                        }
                                        else if (columnIdx == 13) {
                                            return 'POA (kWh/m^2) Var (%) ';
                                        }
                                        else if (columnIdx == 14) {
                                            return 'GHI VS POA Gain (%)  Tar';
                                        }
                ");
            WriteLiteral(@"                        else if (columnIdx == 15) {
                                            return 'GHI VS POA Gain (%)  Act ';
                                        }
                                        else if (columnIdx == 16) {
                                            return 'GHI VS POA Gain(%)  Var (%) ';
                                        }
                                        else if (columnIdx == 17) {
                                            return 'PLF (%)  Tar';
                                        }
                                        else if (columnIdx == 18) {
                                            return 'PLF (%)  Act ';
                                        }
                                        else if (columnIdx == 19) {
                                            return 'PLF (%)  Var (%) ';
                                        }
                                        else if (columnIdx == 20) {
                                    ");
            WriteLiteral(@"        return 'PR (%)  Tar';
                                        }
                                        else if (columnIdx == 21) {
                                            return 'PR (%)  Act ';
                                        }
                                        else if (columnIdx == 22) {
                                            return 'PR (%)  Var (%) ';
                                        }
                                        //else if (columnIdx == 23) {
                                        //    return 'Temp Corr. PR (%)  Tar';
                                        //}
                                        //else if (columnIdx == 24) {
                                        //    return 'Temp Corr. PR (%)  Act ';
                                        //}
                                        //else if (columnIdx == 25) {
                                        //    return 'Temp Corr. PR (%)  Var (%) ';
                                     ");
            WriteLiteral(@"   //}
                                        else if (columnIdx == 23) {
                                            return 'MA (%)  Tar';
                                        }
                                        else if (columnIdx == 24) {
                                            return 'MA (%)  Act ';
                                        }
                                        else if (columnIdx == 25) {
                                            return 'MA (%)  Var (%) ';
                                        }
                                        else if (columnIdx == 26) {
                                            return 'IGA (%)  Tar';
                                        }
                                        else if (columnIdx == 27) {
                                            return 'IGA (%)  Act ';
                                        }
                                        else if (columnIdx == 28) {
                                           ");
            WriteLiteral(@" return 'IGA (%)  Var (%) ';
                                        }
                                        else if (columnIdx == 29) {
                                            return 'EGA (%)  Tar';
                                        }
                                        else if (columnIdx == 30) {
                                            return 'EGA (%)  Act ';
                                        }
                                        else if (columnIdx == 31) {
                                            return 'EGA (%)  Var (%) ';
                                        }
                                        else {
                                            return data;
                                        }
                                    }
                                }
                            }
                        },
                        {
                            extend: 'colvis',
                            //  columns: ':not(.n");
            WriteLiteral(@"oVis)',
                            columnText: function (dt, idx, title) {
                                if (idx == 1) {
                                    return 'Capacity (MW)';
                                }
                                else if (idx == 2) {
                                    return 'Energy (in MU)  Tar';
                                }
                                else if (idx == 3) {
                                    return 'Energy (in MU)  Exp';
                                }
                                else if (idx == 4) {
                                    return 'Energy (in MU)  Act';
                                }
                                else if (idx == 5) {
                                    return 'Energy (in MU)  T.Var (%)';
                                }
                                else if (idx == 6) {
                                    return 'Energy (in MU)  E.Var (%)';
                                }
         ");
            WriteLiteral(@"                       else if (idx == 7) {
                                    return 'Revenue (MINR) ';
                                }
                                else if (idx == 8) {
                                    return 'GHI (kWh/m^2)  Tar';
                                }
                                else if (idx == 9) {
                                    return 'GHI (kWh/m^2)  Act';
                                }
                                else if (idx == 10) {
                                    return 'GHI (kWh/m^2)  Var (%) ';
                                }
                                else if (idx == 11) {
                                    return 'POA (kWh/m^2)  Tar';
                                }
                                else if (idx == 12) {
                                    return 'POA (kWh/m^2)  Act ';
                                }
                                else if (idx == 13) {
                                    return");
            WriteLiteral(@" 'POA (kWh/m^2) Var (%) ';
                                }
                                else if (idx == 14) {
                                    return 'GHI VS POA Gain (%)  Tar';
                                }
                                else if (idx == 15) {
                                    return 'GHI VS POA Gain (%)  Act ';
                                }
                                else if (idx == 16) {
                                    return 'GHI VS POA Gain(%)  Var (%) ';
                                }
                                else if (idx == 17) {
                                    return 'PLF (%)  Tar';
                                }
                                else if (idx == 18) {
                                    return 'PLF (%)  Act ';
                                }
                                else if (idx == 19) {
                                    return 'PLF (%)  Var (%) ';
                                }
              ");
            WriteLiteral(@"                  else if (idx == 20) {
                                    return 'PR (%)  Tar';
                                }
                                else if (idx == 21) {
                                    return 'PR (%)  Act ';
                                }
                                else if (idx == 22) {
                                    return 'PR (%)  Var (%) ';
                                }
                                //else if (idx == 23) {
                                //    return 'Temp Corr. PR (%)  Tar';
                                //}
                                //else if (idx == 24) {
                                //    return 'Temp Corr. PR (%)  Act ';
                                //}
                                //else if (idx == 25) {
                                //    return 'Temp Corr. PR (%)  Var (%) ';
                                //}
                                else if (idx == 23) {
                          ");
            WriteLiteral(@"          return 'MA (%)  Tar';
                                }
                                else if (idx == 24) {
                                    return 'MA (%)  Act ';
                                }
                                else if (idx == 25) {
                                    return 'MA (%)  Var (%) ';
                                }
                                else if (idx == 26) {
                                    return 'IGA (%)  Tar';
                                }
                                else if (idx == 27) {
                                    return 'IGA (%)  Act ';
                                }
                                else if (idx == 28) {
                                    return 'IGA (%)  Var (%) ';
                                }
                                else if (idx == 29) {
                                    return 'EGA (%)  Tar';
                                }
                                else if (idx =");
            WriteLiteral(@"= 30) {
                                    return 'EGA (%)  Act ';
                                }
                                else if (idx == 31) {
                                    return 'EGA (%)  Var (%) ';
                                }
                                else {
                                    return title;
                                }
                            }
                        },
                          {
                            text: '<span class=""fas fa-file-excel"" title=""Download from DB up to six decimal""></span>',
                            className: 'btn ml-1   ',

                            action: function () {
                               ExportToExcelSPVWise();
                            },
                             format: {
                                    header: function (data, columnIdx) {
                                        if (columnIdx == 1) {
                                            return 'Capa");
            WriteLiteral(@"city (MW)';
                                        }
                                        else if (columnIdx == 2) {
                                            return 'JMR Energy (in MU)  Tar';
                                        }
                                        else if (columnIdx == 3) {
                                            return 'JMR Energy (in MU)  Exp';
                                        }
                                        else if (columnIdx == 4) {
                                            return 'JMR Energy (in MU)  Act';
                                        }
                                        else if (columnIdx == 5) {
                                            return 'JMR Energy (in MU)  T.Var (%)';
                                        }
                                        else if (columnIdx == 6) {
                                            return 'JMR Energy (in MU)  E.Var (%)';
                                        }
      ");
            WriteLiteral(@"                                  else if (columnIdx == 7) {
                                            return 'Revenue (MINR) ';
                                        }
                                        else if (columnIdx == 8) {
                                            return 'Wind Speed (m/s)  Tar';
                                        }
                                        else if (columnIdx == 9) {
                                            return 'Wind Speed (m/s)  Act ';
                                        }
                                        else if (columnIdx == 10) {
                                            return 'Wind Speed (m/s)  Var (%) ';
                                        }
                                        else if (columnIdx == 11) {
                                            return 'PLF (%)  Tar';
                                        }
                                        else if (columnIdx == 12) {
                            ");
            WriteLiteral(@"                return 'PLF (%)  Act ';
                                        }
                                        else if (columnIdx == 13) {
                                            return 'PLF (%)  Var (%) ';
                                        }
                                        else if (columnIdx == 14) {
                                            return 'MA Actual (%)  Tar';
                                        }
                                        else if (columnIdx == 15) {
                                            return 'MA Actual (%)  Act ';
                                        }
                                        else if (columnIdx == 16) {
                                            return 'MA Actual (%)  Var (%) ';
                                        }
                                        else if (columnIdx == 17) {
                                            return 'IGA (%)  Tar';
                                        }
           ");
            WriteLiteral(@"                             else if (columnIdx == 18) {
                                            return 'IGA (%)  Act ';
                                        }
                                        else if (columnIdx == 19) {
                                            return 'IGA (%)  Var (%) ';
                                        }
                                        else if (columnIdx == 20) {
                                            return 'EGA (%)  Tar';
                                        }
                                        else if (columnIdx == 21) {
                                            return 'EGA (%)  Act ';
                                        }
                                        else if (columnIdx == 22) {
                                            return 'EGA (%)  Var (%) ';
                                        }
                                        else {
                                            return data;
                 ");
            WriteLiteral(@"                       }
                                    }
                                }
                        },
                    ]
                });
                $("".dt-buttons"").addClass('btn-group flex-wrap');
                $("".dt-buttons > button"").addClass('btn btn-secondary');
                $("".dataTables_filter> label >input"").addClass('form-control form-control-sm');
                //$('#example1').wrap(""<div class='scrolledTable'></div>"");
                $(document).on(""click"", ""div.dt-button-collection > div > button"", function () {
                    if ($(this).hasClass(""active"")) {
                        $(this).css(""background-color"", ""white"");
                    } else {
                        $(this).css(""background-color"", ""#31576d"");
                    }
                });
                document.getElementById(""loader"").style.display = 'none';
                //$('#example1').removeClass('dataTable');

                //document.getElement");
            WriteLiteral(@"ById(""reportsDaily"").style.display = 'block';
                ///document.getElementById(""reportsMonthly"").style.display = 'block';
                // document.getElementById(""reportsYearly"").style.display = 'block';
            }
        });

    }


       function ExportToExcelSiteWise() {

    console.log(exceldata2)
    result = exceldata2;

    var columns = [
         ""Site"",""Capacity"",""Energy (in MU)  Tar"","" Energy (in MU) Exp"","" Energy (in MU) Act"","" Energy (in MU) T.var(%)"","" Energy (in MU) E.var(%)"",""Revenue (MINR)"",""GHI (kWh/m^2)  Tar"",
         ""GHI (kWh/m^2)  Act "",""GHI (kWh/m^2)  Var (%) "",""POA (kWh/m^2)  Tar"",""POA (kWh/m^2)  Act "",
       ""POA (kWh/m^2) Var (%)  "",""GHI VS POA Gain (%)  Tar "",""GHI VS POA Gain (%)  Act "",""GHI VS POA Gain(%)  Var (%)  "",""PLF (%)  Tar "",""PLF (%)  Act "",""PLF (%)  Var (%) "",""PR (%)  Tar "",""PR (%)  Act "",""PR (%)  Var (%)  "",""Temp Corr. PR (%)  Tar"",""Temp Corr. PR (%)  Act "",""Temp Corr. PR (%)  Var (%) "",""MA (%)  Tar"",""MA (%)  Act "",""MA (%)  Var (%) """);
            WriteLiteral(@",""IGA (%)  Tar"",""IGA (%)  Act "",""IGA (%)  Var (%) "",""EGA (%)  Tar"",""EGA (%)  Act "",""EGA (%)  Var (%) ""
    ];

    var rows = [];

    for (var i = 0; i < result.length; i++) {
        var row = [];
     let total_capacity = 0;
                    let total_tar_kwh = 0;
                    let total_act_kwh = 0;
                    let total_expected_kwh = 0;
                    let total_minr = 0;
                    let total_capTarGhi = 0;
                    let total_tar_ghi = 0;
                    let total_act_ghi = 0;
                    let total_capTarPlf = 0;
                    let total_tar_plf = 0;
                    let total_act_plf = 0;
                    let total_capTarGain = 0;
                    let total_tar_gain = 0;
                    let total_act_gain = 0;
                    let total_capTarPoa = 0;
                    let total_tar_poa = 0;
                    let total_act_poa = 0;
                    let total_capTarPr = 0;
                    let to");
            WriteLiteral(@"tal_tar_pr = 0;
                    let total_act_pr = 0;
                    let total_capTarMa = 0;
                    let total_tar_ma = 0;
                    let total_act_ma = 0;
                    let total_capTarIga = 0;
                    let total_tar_iga = 0;
                    let total_act_iga = 0;
                    let total_capTarEga = 0;
                    let total_tar_ega = 0;
                    let total_act_ega = 0;
                    let total_capActGhi = 0;
                    let total_capActPlf = 0;
                    let total_capActGain = 0;
                    let total_capActPoa = 0;
                    let total_capActPr = 0;
                    let total_capActMa = 0;
                    let total_capActIga = 0;
                    let total_capActEga = 0;
                    let total_capTarTCPr = 0;
                    let total_capActTCPr = 0;
                    let total_tar_TCpr = 0;
                    let total_act_TCpr = 0;

            ");
            WriteLiteral(@"            let t_var    = 0;
                        let e_var    = 0;
                        let minr     = 0;
                        let ghi_var  = 0;
                        let poa_var  = 0;
                        let gain_tar = 0;
                        let gain_act = 0;
                        let gain_var = 0;
                        let plf_var  = 0;
                        let pr_var = 0;
                        let ma_var = 0;
                        let iga_var = 0;
                        let ega_var = 0;
                        let act_prval = 0

                        let TCPr_var = 0;
                        let actual_TempCorrectedPR = 0;

                        minr = ((result[i].act_kwh - result[i].tar_kwh) * result[i].total_tarrif);
                        if (result[i].tar_kwh != 0) {
                            t_var = ((result[i].act_kwh - result[i].tar_kwh) / result[i].tar_kwh) * 100;
                        }
                        if (result[i].expected_k");
            WriteLiteral(@"wh != 0) {
                            //e_var = ((result[i].act_kwh - result[i].expected_kwh / 1000000) / (result[i].expected_kwh / 1000000)) * 100;
                            e_var = ((result[i].act_kwh - result[i].expected_kwh) / (result[i].expected_kwh)) * 100;
                            //if (result[i].site == ""Maragutti"") {
                            //    console.log(""Actual : "", result[i].act_kwh, ""Expected : "", result[i].expected_kwh, ""evar : "" + e_var);
                            //    console.log(temp_e_var);
                            //}
                        }
                        if (result[i].pr_expected_kwh == 0 || result[i].act_kwh == 0) {
                            act_prval = 0
                        }
                        else {
                            act_prval = (result[i].act_kwh / result[i].pr_expected_kwh) * 100;
                        }
                        if (result[i].tar_ghi != 0) {
                            ghi_var = ((result[i].act_ghi -");
            WriteLiteral(@" result[i].tar_ghi) / result[i].tar_ghi) * 100;
                        }
                        if (result[i].tar_poa != 0) {
                            poa_var = ((result[i].act_poa - result[i].tar_poa) / result[i].tar_poa) * 100;
                        }

                        pr_var = (act_prval - result[i].tar_pr);
                        plf_var = (result[i].act_plf - result[i].tar_plf);
                        ma_var = (result[i].act_ma - result[i].tar_ma);
                        iga_var = (result[i].act_iga - result[i].tar_iga);
                        ega_var = (result[i].act_ega - result[i].tar_ega);

                    //actual_TempCorrectedPR = result[i].act_kwh_for_temp_corr / result[i].temp_corrected_pr;

                    //TCPr_var = (result[i].temp_corrected_pr - result[i].tar_pr)
                        TCPr_var = (result[i].temp_corrected_pr - result[i].tar_pr);

                        if (result[i].tar_poa == 0 || result[i].tar_ghi == 0) {
                      ");
            WriteLiteral(@"      gain_tar = 0;
                        } else {
                            gain_tar = (result[i].tar_poa / result[i].tar_ghi) * 100;
                        }
                        if (result[i].act_poa == 0 || result[i].act_ghi == 0) {
                            gain_act = 0;
                        } else {
                            gain_act = (result[i].act_poa / result[i].act_ghi) * 100;
                        }
                        if (gain_act == 0 || gain_tar == 0) {
                            gain_var = 0;
                        } else {
                            gain_var = ((gain_act - gain_tar)); /// gain_tar)*100;
                        }

                        console.log(result[i].pr_expected_kwh, result[i].act_kwh, act_prval);

                        total_capacity += result[i].capacity;
                        total_tar_kwh += result[i].tar_kwh;
                        total_expected_kwh += result[i].expected_kwh;
                        total_act_kwh ");
            WriteLiteral(@"+= result[i].act_kwh;
                        total_minr += minr;
                        total_tar_ghi += result[i].tar_ghi;
                        total_act_ghi += result[i].act_ghi;
                        total_tar_poa += result[i].tar_poa;
                        total_act_poa += result[i].act_poa;
                        total_tar_gain += gain_tar;
                        total_act_gain += gain_act;
                        total_tar_plf += result[i].tar_plf;
                        total_act_plf += result[i].act_plf;
                        total_tar_pr += result[i].tar_pr;
                        total_act_pr += act_prval;
                        total_tar_ma += result[i].tar_ma;
                        total_act_ma += result[i].act_ma;
                        total_tar_iga += result[i].tar_iga;
                        total_act_iga += result[i].act_iga;
                        total_tar_ega += result[i].tar_ega;
                        total_act_ega += result[i].act_ega;
           ");
            WriteLiteral(@"             total_capTarGhi += result[i].tar_ghi * result[i].capacity;
                        total_capTarPoa += result[i].tar_poa * result[i].capacity;
                        total_capTarPlf += result[i].tar_plf * result[i].capacity;
                        total_capTarPr += result[i].tar_pr * result[i].capacity;
                        total_capTarGain += gain_tar * result[i].capacity;
                        total_capTarMa += result[i].tar_ma * result[i].capacity
                        total_capTarIga += result[i].tar_iga * result[i].capacity;
                        total_capTarEga += result[i].tar_ega * result[i].capacity;
                        total_capActGhi += result[i].act_ghi * result[i].capacity;
                        total_capActPoa += result[i].act_poa * result[i].capacity;
                        total_capActPlf += result[i].act_plf * result[i].capacity;
                        total_capActPr += act_prval * result[i].capacity;
                        total_capActGain += gain_");
            WriteLiteral(@"act * result[i].capacity;
                        total_capActMa += result[i].act_ma * result[i].capacity;
                        total_capActIga += result[i].act_iga * result[i].capacity;
                        total_capActEga += result[i].act_ega * result[i].capacity;

                        total_tar_TCpr += result[i].tar_pr;
                    //total_act_TCpr += result[i].temp_corrected_pr;
                        total_act_TCpr += result[i].temp_corrected_pr;
                        total_capTarTCPr += result[i].tar_pr * result[i].capacity;
                    //total_capActTCPr += result[i].temp_corrected_pr * result[i].capacity;
                        total_capActTCPr += result[i].temp_corrected_pr * result[i].capacity;

       row.push(result[i].site);
        row.push(result[i].capacity);
        row.push(result[i].tar_kwh);
        row.push(result[i].expected_kwh);
        row.push(result[i].act_kwh);
        row.push( t_var);
        row.push(e_var);
        row.push(minr);");
            WriteLiteral(@"
        row.push( result[i].tar_ghi);
        row.push( result[i].act_ghi);
        row.push( ghi_var);
        row.push(result[i].tar_poa);
        row.push(result[i].act_poa);
        row.push(poa_var);
        row.push( gain_tar);
        row.push(gain_act);
        row.push(gain_var);
        row.push(result[i].tar_plf);
        row.push(result[i].act_plf);
        row.push(plf_var);
        row.push(result[i].tar_pr);
        row.push(act_prval);
        row.push(pr_var);
        row.push(result[i].tar_pr);
        row.push(result[i].temp_corrected_pr);
        row.push(TCPr_var);
        row.push(result[i].tar_ma);
        row.push(result[i].act_ma);
        row.push(ma_var);
        row.push(result[i].tar_iga);
        row.push(result[i].act_iga);
        row.push(iga_var);
        row.push(result[i].tar_ega);
           row.push( result[i].act_ega);
        row.push( ega_var);
        rows.push(row);



    }

    var data = [columns].concat(rows);

    var ws = XL");
            WriteLiteral(@"SX.utils.aoa_to_sheet(data);
    var wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, ""Solar PerformanceSum SiteWise"");
    var wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'binary' });

    function s2ab(s) {
        var buf = new ArrayBuffer(s.length);
        var view = new Uint8Array(buf);
        for (var i = 0; i !== s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
        return buf;
    }

    saveAs(new Blob([s2ab(wbout)], { type: ""application/octet-stream"" }), ""Solar PerformanceSum SiteWise.xlsx"");

}

    // -----------------------------------------------

    // Daily Gen Report Site WIse
    function GetSolarPRReportSiteWise() {
        var site_ids = """);
#nullable restore
#line 1654 "D:\Haresh\Softel\Production code\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarPRReport.cshtml"
                   Write(Html.Raw(solarSiteList.TrimEnd(',')));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""";
        let site = """";
        let spv = """";
        $('select#site option:selected').each(function () {
            site += $(this).val() + "","";
        });
        site = site != """" ? site.slice(0, -1) : site;

        $('select#spv option:selected').each(function () {
            spv += $(this).val() + "","";
        });
        spv = spv != """" ? spv.slice(0, -1) : spv;
        if (userRole == ""User"" && site == """") {
            site = site_ids;
        }
        var daterange = $('#daterange').val();
        var arr1 = new Array();
        arr1 = daterange.split(""-"");
        var fromDate = moment(arr1[0], 'DD/MM/YYYY').format('YYYY-MM-DD');
        var toDate = moment(arr1[1], 'DD/MM/YYYY').format('YYYY-MM-DD');
        var fyear = Fy;
        var reporthead = ""Site Wise Report"";
        document.getElementById(""loader"").style.display = 'flex';
        $.ajax({
            type: ""GET"",
           // url: ""/WindReport/GetWindPRReportSiteWise?fy="" + fyear + "" &fromDate="" + fromDat");
            WriteLiteral("e + \"&toDate=\" + toDate,\r\n            url: \'");
#nullable restore
#line 1680 "D:\Haresh\Softel\Production code\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarPRReport.cshtml"
             Write(Url.Action("GetSolarPRReportSiteWise", "SolarReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?fy=' + fyear + '&fromDate=' + fromDate + '&toDate=' + toDate + '&sitelist=' + site+'&spv='+spv,
            contentType: ""application/json; charset=utf-8"",
            datatype: ""JSON"",
            success: function (result, status, xhr) {
                console.log(result);
               // var tbl = '<div class=""text-center""><h5>' + reporthead + '</h5></div>';
                var tbl = '<table id=""example1""  class=""table table-bordered table-striped"" style=""width:150%"">';
                tbl += '<thead class=""tbl-head""><tr>';
                tbl += '<th rowspan=""2"" style=""width: 5%;"">Site</th><th rowspan=""2"">Capacity <br>(MW)</th>';
                tbl += '<th colspan=""5"" class=""text-center""> Energy (in MU)</th >';
                tbl += '<th>(±)Revenue</th><th colspan=""3"" class=""text-center"">GHI (kWh/m<sup>2</sup>)</th>';
                tbl += '<th colspan=""3"" class=""text-center"">POA (kWh/m<sup>2</sup>)</th>';
                tbl += '<th colspan=""3"" class=""text-center"">GHI Vs POA Gain ");
            WriteLiteral(@"(%)</th>';
                tbl += '<th colspan=""3"" class=""text-center"">PLF (%)</th>';
                tbl += '<th colspan=""3"" class=""text-center"">PR (%)</th>';

                //tbl += '<th colspan=""3"" class=""text-center"">Temp Corr. PR (%)</th>';

                tbl += '<th colspan=""3"" class=""text-center"">MA (%)</th>';
                tbl += '<th colspan=""3"" class=""text-center"">IGA (%)</th>';
                tbl += '<th colspan=""3"" class=""text-center"">EGA (%)</th></tr > ';

                tbl += '<tr>';
                tbl += '<th>Tar</th>';
                tbl += '<th>Exp</th>';
                tbl += '<th>Act</th>';
                tbl += '<th>T.Var (%)</th>';
                tbl += '<th>E.Var (%)</th>';

                tbl += '<th>(MINR)</th>';
                tbl += '<th>Tar</th>';
                tbl += '<th>Act</th>';
                tbl += '<th>Var (%)</th>';
                tbl += '<th>Tar</th>';
                tbl += '<th>Act</th>';
                tbl += '<th>Var (%)</th>");
            WriteLiteral(@"';
                tbl += '<th>Tar </th>';
                tbl += '<th>Act </th>';
                tbl += '<th>Var (%)</th>';
                tbl += '<th>Tar</th>';
                tbl += '<th>Act</th>';
                tbl += '<th>Var (%)</th>';
                tbl += '<th>Tar</th>';
                tbl += '<th>Act</th>';
                tbl += '<th>Var (%)</th>';

                //tbl += '<th>Tar</th>';
                //tbl += '<th>Act</th>';
                //tbl += '<th>Var (%)</th>';

                tbl += '<th>Tar</th>';
                tbl += '<th>Act</th>';
                tbl += '<th>Var (%)</th>';

                tbl += '<th>Tar</th>';
                tbl += '<th>Act</th>';
                tbl += '<th>Var (%)</th>';

                tbl += '<th>Tar</th>';
                tbl += '<th>Act</th>';
                tbl += '<th>Var (%)</th>';

                tbl += '</tr></thead>';
                console.log(result.length);
                if (result.length > 0) {
      ");
            WriteLiteral(@"              exceldata2 = result;
                    console.log(""Datatable"");
                    let total_capacity = 0;
                    let total_tar_kwh = 0;
                    let total_act_kwh = 0;
                    let total_expected_kwh = 0;
                    let total_minr = 0;
                    let total_capTarGhi = 0;
                    let total_tar_ghi = 0;
                    let total_act_ghi = 0;
                    let total_capTarPlf = 0;
                    let total_tar_plf = 0;
                    let total_act_plf = 0;
                    let total_capTarGain = 0;
                    let total_tar_gain = 0;
                    let total_act_gain = 0;
                    let total_capTarPoa = 0;
                    let total_tar_poa = 0;
                    let total_act_poa = 0;
                    let total_capTarPr = 0;
                    let total_tar_pr = 0;
                    let total_act_pr = 0;
                    let total_capTarMa = 0;
   ");
            WriteLiteral(@"                 let total_tar_ma = 0;
                    let total_act_ma = 0;
                    let total_capTarIga = 0;
                    let total_tar_iga = 0;
                    let total_act_iga = 0;
                    let total_capTarEga = 0;
                    let total_tar_ega = 0;
                    let total_act_ega = 0;
                    let total_capActGhi = 0;
                    let total_capActPlf = 0;
                    let total_capActGain = 0;
                    let total_capActPoa = 0;
                    let total_capActPr = 0;
                    let total_capActMa = 0;
                    let total_capActIga = 0;
                    let total_capActEga = 0;

                    let total_capTarTCPr = 0;
                    let total_capActTCPr = 0;
                    let total_tar_TCpr = 0;
                    let total_act_TCpr = 0;

                    for (var i = 0; i < result.length; i++) {

                        let t_var    = 0;
          ");
            WriteLiteral(@"              let e_var    = 0;
                        let minr     = 0;
                        let ghi_var  = 0;
                        let poa_var  = 0;
                        let gain_tar = 0;
                        let gain_act = 0;
                        let gain_var = 0;
                        let plf_var  = 0;
                        let pr_var = 0;
                        let ma_var = 0;
                        let iga_var = 0;
                        let ega_var = 0;
                        let act_prval = 0

                        let TCPr_var = 0;
                        let actual_TempCorrectedPR = 0;

                        minr = ((result[i].act_kwh - result[i].tar_kwh) * result[i].total_tarrif);
                        if (result[i].tar_kwh != 0) {
                            t_var = ((result[i].act_kwh - result[i].tar_kwh) / result[i].tar_kwh) * 100;
                        }
                        if (result[i].expected_kwh != 0) {
                            /");
            WriteLiteral(@"/e_var = ((result[i].act_kwh - result[i].expected_kwh / 1000000) / (result[i].expected_kwh / 1000000)) * 100;
                            e_var = ((result[i].act_kwh - result[i].expected_kwh) / (result[i].expected_kwh)) * 100;
                            //if (result[i].site == ""Maragutti"") {
                            //    console.log(""Actual : "", result[i].act_kwh, ""Expected : "", result[i].expected_kwh, ""evar : "" + e_var);
                            //    console.log(temp_e_var);
                            //}
                        }
                        if (result[i].pr_expected_kwh == 0 || result[i].act_kwh == 0) {
                            act_prval = 0
                        }
                        else {
                            act_prval = (result[i].act_kwh / result[i].pr_expected_kwh) * 100;
                        }
                        if (result[i].tar_ghi != 0) {
                            ghi_var = ((result[i].act_ghi.toFixed(2) - result[i].tar_ghi.toFixed(2))");
            WriteLiteral(@" / result[i].tar_ghi.toFixed(2)) * 100;
                        }
                        if (result[i].tar_poa != 0) {
                            poa_var = ((result[i].act_poa.toFixed(2) - result[i].tar_poa.toFixed(2)) / result[i].tar_poa.toFixed(2)) * 100;
                        }

                        pr_var = (act_prval - result[i].tar_pr);
                        plf_var = (result[i].act_plf - result[i].tar_plf);
                        ma_var = (result[i].act_ma - result[i].tar_ma);
                        iga_var = (result[i].act_iga - result[i].tar_iga);
                        ega_var = (result[i].act_ega - result[i].tar_ega);

                    //actual_TempCorrectedPR = result[i].act_kwh_for_temp_corr / result[i].temp_corrected_pr;

                    //TCPr_var = (result[i].temp_corrected_pr - result[i].tar_pr)
                        TCPr_var = (result[i].temp_corrected_pr - result[i].tar_pr);

                        if (result[i].tar_poa == 0 || result[i].tar_ghi == 0) ");
            WriteLiteral(@"{
                            gain_tar = 0;
                        } else {
                            gain_tar = (result[i].tar_poa / result[i].tar_ghi) * 100;
                        }
                        if (result[i].act_poa == 0 || result[i].act_ghi == 0) {
                            gain_act = 0;
                        } else {
                            gain_act = (result[i].act_poa / result[i].act_ghi) * 100;
                        }
                        if (gain_act == 0 || gain_tar == 0) {
                            gain_var = 0;
                        } else {
                            gain_var = ((gain_act - gain_tar)); /// gain_tar)*100;
                        }

                        console.log(result[i].pr_expected_kwh, result[i].act_kwh, act_prval);

                        total_capacity += result[i].capacity;
                        total_tar_kwh += result[i].tar_kwh;
                        total_expected_kwh += result[i].expected_kwh;
             ");
            WriteLiteral(@"           total_act_kwh += result[i].act_kwh;
                        total_minr += minr;
                        total_tar_ghi += result[i].tar_ghi;
                        total_act_ghi += result[i].act_ghi;
                        total_tar_poa += result[i].tar_poa;
                        total_act_poa += result[i].act_poa;
                        total_tar_gain += gain_tar;
                        total_act_gain += gain_act;
                        total_tar_plf += result[i].tar_plf;
                        total_act_plf += result[i].act_plf;
                        total_tar_pr += result[i].tar_pr;
                        total_act_pr += act_prval;
                        total_tar_ma += result[i].tar_ma;
                        total_act_ma += result[i].act_ma;
                        total_tar_iga += result[i].tar_iga;
                        total_act_iga += result[i].act_iga;
                        total_tar_ega += result[i].tar_ega;
                        total_act_ega += result");
            WriteLiteral(@"[i].act_ega;
                        total_capTarGhi += result[i].tar_ghi * result[i].capacity;
                        total_capTarPoa += result[i].tar_poa * result[i].capacity;
                        total_capTarPlf += result[i].tar_plf * result[i].capacity;
                        total_capTarPr += result[i].tar_pr * result[i].capacity;
                        total_capTarGain += gain_tar * result[i].capacity;
                        total_capTarMa += result[i].tar_ma * result[i].capacity
                        total_capTarIga += result[i].tar_iga * result[i].capacity;
                        total_capTarEga += result[i].tar_ega * result[i].capacity;
                        total_capActGhi += result[i].act_ghi * result[i].capacity;
                        total_capActPoa += result[i].act_poa * result[i].capacity;
                        total_capActPlf += result[i].act_plf * result[i].capacity;
                        total_capActPr += act_prval * result[i].capacity;
                        ");
            WriteLiteral(@"total_capActGain += gain_act * result[i].capacity;
                        total_capActMa += result[i].act_ma * result[i].capacity;
                        total_capActIga += result[i].act_iga * result[i].capacity;
                        total_capActEga += result[i].act_ega * result[i].capacity;

                        total_tar_TCpr += result[i].tar_pr;
                    //total_act_TCpr += result[i].temp_corrected_pr;
                        total_act_TCpr += result[i].temp_corrected_pr;
                        total_capTarTCPr += result[i].tar_pr * result[i].capacity;
                    //total_capActTCPr += result[i].temp_corrected_pr * result[i].capacity;
                        total_capActTCPr += result[i].temp_corrected_pr * result[i].capacity;

                        tbl += '<tr>';
                        tbl += '<td>' + result[i].site + '</td>';
                        tbl += '<td class=""text-right"" >' + result[i].capacity.toFixed(2) + '</td>';
                        tbl += '<t");
            WriteLiteral(@"d class=""text-right"">' + result[i].tar_kwh.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + (result[i].expected_kwh).toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">-</td>';
                        tbl += '<td class=""text-right"">' + result[i].act_kwh.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + t_var.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + e_var.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">-</td>';
                        tbl += '<td class=""text-right"">' + minr.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].tar_ghi.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].act_ghi.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + ghi_var.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + resul");
            WriteLiteral(@"t[i].tar_poa.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].act_poa.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + poa_var.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + gain_tar.toFixed(2)+'</td>';
                        tbl += '<td class=""text-right"">' + gain_act.toFixed(2)+'</td>';
                        tbl += '<td class=""text-right"">' + gain_var.toFixed(2)+'</td>';
                        tbl += '<td class=""text-right"">' + result[i].tar_plf.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].act_plf.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + plf_var.toFixed(2) + '</td>';

                        tbl += '<td class=""text-right"">' + result[i].tar_pr.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + act_prval.toFixed(2) + '</td>';
                        tbl += '<td class=""text-");
            WriteLiteral(@"right"">' + pr_var.toFixed(2) + '</td>';

                        //tbl += '<td class=""text-right"">' + result[i].tar_pr.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].temp_corrected_pr.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + TCPr_var.toFixed(2) + '</td>';

                        tbl += '<td class=""text-right"">' + result[i].tar_ma.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].act_ma.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + ma_var.toFixed(2) + '</td>';

                        tbl += '<td class=""text-right"">' + result[i].tar_iga.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].act_iga.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + iga_var.toFixed(2) + '</td>';

                        tbl += '<td class=""text-right"">' + result[i].tar_ega.toFixed(2) + '<");
            WriteLiteral(@"/td>';
                        tbl += '<td class=""text-right"">' + result[i].act_ega.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + ega_var.toFixed(2) + '</td>';

                        tbl += '</tr>';
                    }
                    let avg_t_var = 0;
                    let avg_e_var = 0;// (((avg_act_kwh - avg_expected_kwh) / avg_expected_kwh) * 100);
                    let avg_tar_ghi = 0;
                    let avg_ghi_var = 0;
                    let avg_tar_plf = 0;
                    let avg_plf_var = 0;
                    let avg_tar_poa = 0;
                    let avg_poa_var = 0;
                    let avg_tar_gain = 0;
                    let avg_gain_var = 0;
                    let avg_tar_pr = 0;
                    let avg_pr_var = 0;
                    let avg_tar_ma = 0;
                    let avg_ma_var = 0;
                    let avg_tar_iga = 0;
                    let avg_iga_var = 0;
                    let avg_t");
            WriteLiteral(@"ar_ega = 0;
                    let avg_ega_var = 0;
                    let avg_act_ghi = 0
                    let avg_act_poa = 0;
                    let avg_act_plf = 0;
                    let avg_act_gain = 0;
                    let avg_act_pr = 0;
                    let avg_act_TCpr = 0;
                    let avg_act_ma = 0;
                    let avg_act_iga = 0;
                    let avg_act_ega = 0;

                    let avg_tar_TCpr = 0;
                    let avg_TCpr_var = 0;

                    if (total_capacity != 0) {
                        avg_tar_ghi = total_capTarGhi / total_capacity;
                        avg_tar_plf = total_capTarPlf / total_capacity;
                        avg_tar_poa = total_capTarPoa / total_capacity;
                        avg_tar_gain = total_capTarGain / total_capacity;
                        avg_tar_pr = total_capTarPr / total_capacity;
                        avg_tar_ma = total_capTarMa / total_capacity;
                  ");
            WriteLiteral(@"      avg_tar_iga = total_capTarIga / total_capacity;
                        avg_tar_ega = total_capTarEga / total_capacity;
                        avg_act_ghi = total_capActGhi / total_capacity;
                        avg_act_plf = total_capActPlf / total_capacity;
                        avg_act_poa = total_capActPoa / total_capacity;
                        avg_act_gain = total_capActGain / total_capacity;
                        avg_act_pr = total_capActPr / total_capacity;
                        avg_act_ma = total_capActMa / total_capacity;
                        avg_act_iga = total_capActIga / total_capacity;
                        avg_act_ega = total_capActEga / total_capacity;

                        avg_tar_TCpr = total_capTarTCPr / total_capacity;
                        avg_act_TCpr = total_capActTCPr / total_capacity;
                    }

                    if (total_tar_kwh != 0) {
                        avg_t_var = (((total_act_kwh - total_tar_kwh) / total_tar_kwh) * 1");
            WriteLiteral(@"00);
                    }
                    if (total_expected_kwh != 0) {
                        avg_e_var = (((total_act_kwh - total_expected_kwh) / total_expected_kwh) * 100);
                    }
                    if (avg_tar_ghi != 0) {
                        avg_ghi_var = (((avg_act_ghi - avg_tar_ghi) / avg_tar_ghi) * 100);
                    }
                    if (avg_tar_poa != 0) {
                        avg_poa_var = (((avg_act_poa - avg_tar_poa) / avg_tar_poa) * 100);
                    }
                    if (avg_tar_poa != 0) {
                        avg_poa_var = (((avg_act_poa - avg_tar_poa) / avg_tar_poa) * 100);
                    }

                    avg_pr_var = (avg_act_pr.toFixed(2) - avg_tar_pr.toFixed(2));
                    avg_gain_var = (avg_act_gain.toFixed(2) - avg_tar_gain.toFixed(2));
                    avg_plf_var = (avg_act_plf.toFixed(2) - avg_tar_plf.toFixed(2));
                    avg_ma_var = (avg_act_ma.toFixed(2) - avg_tar_ma.toFix");
            WriteLiteral(@"ed(2));
                    avg_iga_var = (avg_act_iga.toFixed(2) - avg_tar_iga.toFixed(2));
                    avg_ega_var = (avg_act_ega.toFixed(2) - avg_tar_ega.toFixed(2));

                    avg_TCpr_var = (avg_act_TCpr - avg_tar_TCpr);


                    tbl += '<tfoot><tr>';
                    tbl += '<th rowspan=""1""  style=""width: 10%; font-weight: bold;"">Grand Total</th>';
                    tbl += '<td class=""text-right""><b>' + total_capacity.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + total_tar_kwh.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + total_expected_kwh.toFixed(2) + '</b></td>';
                   // tbl += '<td class=""text-right"">-</b></td>';
                    tbl += '<td class=""text-right""><b>' + total_act_kwh.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_t_var.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + a");
            WriteLiteral(@"vg_e_var.toFixed(2) + '</b></td>';
                   // tbl += '<td class=""text-right""><b>-</td>';
                    tbl += '<td class=""text-right""><b>' + total_minr.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_tar_ghi.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_act_ghi.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_ghi_var.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_tar_poa.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_act_poa.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_poa_var.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_tar_gain.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_act_gain.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-righ");
            WriteLiteral(@"t""><b>' + avg_gain_var.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_tar_plf.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_act_plf.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_plf_var.toFixed(2) + '</b></td>';

                    tbl += '<td class=""text-right""><b>' + avg_tar_pr.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_act_pr.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_pr_var.toFixed(2) + '</b></td>';

                    //tbl += '<td class=""text-right""><b>' + avg_tar_pr.toFixed(2) + '</b></td>';
                    //tbl += '<td class=""text-right""><b>' + avg_act_TCpr.toFixed(2) + '</b></td>';
                    //tbl += '<td class=""text-right""><b>' + avg_TCpr_var.toFixed(2) + '</b></td>';

                    tbl += '<td class=""text-right""><b>' + avg_tar_ma.toFixed(2) + '</b></td");
            WriteLiteral(@">';
                    tbl += '<td class=""text-right""><b>' + avg_act_ma.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_ma_var.toFixed(2) + '</b></td>';

                    tbl += '<td class=""text-right""><b>' + avg_tar_iga.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_act_iga.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_iga_var.toFixed(2) + '</b></td>';

                    tbl += '<td class=""text-right""><b>' + avg_tar_ega.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_act_ega.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_ega_var.toFixed(2) + '</b></td>';
                    tbl += '</tr></tfoot>';
                }
                else {
                    console.log(""Data not available"");

                }
                tbl += '</table>';
                $(""#pr_reports"").html(tb");
            WriteLiteral(@"l);
                $.fn.DataTable.ext.pager.numbers_length = 6;
                $('#example1').DataTable({
                    dom: 'Bfrtip',
                    fixedHeader: true,
                    responsive: true,
                    scrollX: true,
                    lengthChange: false,
                    autoWidth: true,
                    paging: true,
                    lengthChange: false,
                    searching: true,
                    ordering: true,
                    info: true,
                    autoWidth: true,
                    fixedColumns: {
                        left: 2
                    },
                    pageLength: 50,
                    buttons: [
                        {
                            extend: 'excel',
                            footer: true,
                            title: 'Solar Performance Reports Site Wise',
                            //titleAttr: 'Export Excel',
                            ""oSelectorOpts"": { ");
            WriteLiteral(@"filter: 'applied', order: 'current' },
                            exportOptions: {
                                columns: ':visible',
                                modifier: {
                                    page: 'all'
                                },
                                format: {
                                    header: function (data, columnIdx) {
                                        if (columnIdx == 1) {
                                            return 'Capacity (MW)';
                                        }
                                       else if (columnIdx == 2) {
                                            return 'Energy (in MU)  Tar';
                                        }
                                        else if (columnIdx == 3) {
                                            return 'Energy (in MU)  Exp';
                                        }
                                        else if (columnIdx == 4) {
                       ");
            WriteLiteral(@"                     return 'Energy (in MU)  Act';
                                        }
                                        else if (columnIdx == 5) {
                                            return 'Energy (in MU)  T.Var (%)';
                                        }
                                        else if (columnIdx == 6) {
                                            return 'Energy (in MU)  E.Var (%)';
                                        }
                                        else if (columnIdx == 7) {
                                            return 'Revenue (MINR) ';
                                        }
                                        else if (columnIdx == 8) {
                                            return 'GHI (kWh/m^2)  Tar';
                                        }
                                        else if (columnIdx == 9) {
                                            return 'GHI (kWh/m^2)  Act';
                                    ");
            WriteLiteral(@"    }
                                        else if (columnIdx == 10) {
                                            return 'GHI (kWh/m^2)  Var (%) ';
                                        }
                                        else if (columnIdx == 11) {
                                            return 'POA (kWh/m^2)  Tar';
                                        }
                                        else if (columnIdx == 12) {
                                            return 'POA (kWh/m^2)  Act ';
                                        }
                                        else if (columnIdx == 13) {
                                            return 'POA (kWh/m^2) Var (%) ';
                                        }
                                        else if (columnIdx == 14) {
                                            return 'GHI VS POA Gain (%)  Tar';
                                        }
                                        else if (columnIdx == 15) {
  ");
            WriteLiteral(@"                                          return 'GHI VS POA Gain (%)  Act ';
                                        }
                                        else if (columnIdx == 16) {
                                            return 'GHI VS POA Gain(%)  Var (%) ';
                                        }
                                        else if (columnIdx == 17) {
                                            return 'PLF (%)  Tar';
                                        }
                                        else if (columnIdx == 18) {
                                            return 'PLF (%)  Act ';
                                        }
                                        else if (columnIdx == 19) {
                                            return 'PLF (%)  Var (%) ';
                                        }
                                        else if (columnIdx == 20) {
                                            return 'PR (%)  Tar';
                        ");
            WriteLiteral(@"                }
                                        else if (columnIdx == 21) {
                                            return 'PR (%)  Act ';
                                        }
                                        else if (columnIdx == 22) {
                                            return 'PR (%)  Var (%) ';
                                        }
                                        //else if (columnIdx == 23) {
                                        //    return 'Temp Corr. PR (%)  Tar';
                                        //}
                                        //else if (columnIdx == 24) {
                                        //    return 'Temp Corr. PR (%)  Act ';
                                        //}
                                        //else if (columnIdx == 25) {
                                        //    return 'Temp Corr. PR (%)  Var (%) ';
                                        //}
                                        else if");
            WriteLiteral(@" (columnIdx == 23) {
                                            return 'MA (%)  Tar';
                                        }
                                        else if (columnIdx == 24) {
                                            return 'MA (%)  Act ';
                                        }
                                        else if (columnIdx == 25) {
                                            return 'MA (%)  Var (%) ';
                                        }
                                        else if (columnIdx == 26) {
                                            return 'IGA (%)  Tar';
                                        }
                                        else if (columnIdx == 27) {
                                            return 'IGA (%)  Act ';
                                        }
                                        else if (columnIdx == 28) {
                                            return 'IGA (%)  Var (%) ';
                         ");
            WriteLiteral(@"               }
                                        else if (columnIdx == 29) {
                                            return 'EGA (%)  Tar';
                                        }
                                        else if (columnIdx == 30) {
                                            return 'EGA (%)  Act ';
                                        }
                                        else if (columnIdx == 31) {
                                            return 'EGA (%)  Var (%) ';
                                        }
                                        else {
                                            return data;
                                        }
                                    }
                                }
                            }
                        },

                        {
                            extend: 'csv',
                            footer: true,
                            title: 'Solar Performance Reports ");
            WriteLiteral(@"Site Wise',
                            //titleAttr: 'Export Excel',
                            ""oSelectorOpts"": { filter: 'applied', order: 'current' },
                            exportOptions: {
                                columns: ':visible',
                                modifier: {
                                    page: 'all'
                                },
                                format: {
                                    header: function (data, columnIdx) {
                                        if (columnIdx == 1) {
                                            return 'Capacity (MW)';
                                        }
                                        else if (columnIdx == 2) {
                                            return 'Energy (in MU)  Tar';
                                        }
                                        else if (columnIdx == 3) {
                                            return 'Energy (in MU)  Exp';
               ");
            WriteLiteral(@"                         }
                                        else if (columnIdx == 4) {
                                            return 'Energy (in MU)  Act';
                                        }
                                        else if (columnIdx == 5) {
                                            return 'Energy (in MU)  T.Var (%)';
                                        }
                                        else if (columnIdx == 6) {
                                            return 'Energy (in MU)  E.Var (%)';
                                        }
                                        else if (columnIdx == 7) {
                                            return 'Revenue (MINR) ';
                                        }
                                        else if (columnIdx == 8) {
                                            return 'GHI (kWh/m^2)  Tar';
                                        }
                                        else if (columnIdx ");
            WriteLiteral(@"== 9) {
                                            return 'GHI (kWh/m^2)  Act';
                                        }
                                        else if (columnIdx == 10) {
                                            return 'GHI (kWh/m^2)  Var (%) ';
                                        }
                                        else if (columnIdx == 11) {
                                            return 'POA (kWh/m^2)  Tar';
                                        }
                                        else if (columnIdx == 12) {
                                            return 'POA (kWh/m^2)  Act ';
                                        }
                                        else if (columnIdx == 13) {
                                            return 'POA (kWh/m^2) Var (%) ';
                                        }
                                        else if (columnIdx == 14) {
                                            return 'GHI VS POA Gain (%)  Ta");
            WriteLiteral(@"r';
                                        }
                                        else if (columnIdx == 15) {
                                            return 'GHI VS POA Gain (%)  Act ';
                                        }
                                        else if (columnIdx == 16) {
                                            return 'GHI VS POA Gain(%)  Var (%) ';
                                        }
                                        else if (columnIdx == 17) {
                                            return 'PLF (%)  Tar';
                                        }
                                        else if (columnIdx == 18) {
                                            return 'PLF (%)  Act ';
                                        }
                                        else if (columnIdx == 19) {
                                            return 'PLF (%)  Var (%) ';
                                        }
                                        e");
            WriteLiteral(@"lse if (columnIdx == 20) {
                                            return 'PR (%)  Tar';
                                        }
                                        else if (columnIdx == 21) {
                                            return 'PR (%)  Act ';
                                        }
                                        else if (columnIdx == 22) {
                                            return 'PR (%)  Var (%) ';
                                        }
                                        //else if (columnIdx == 23) {
                                        //    return 'Temp Corr. PR (%)  Tar';
                                        //}
                                        //else if (columnIdx == 24) {
                                        //    return 'Temp Corr. PR (%)  Act ';
                                        //}
                                        //else if (columnIdx == 25) {
                                        //    return 'Temp");
            WriteLiteral(@" Corr. PR (%)  Var (%) ';
                                        //}
                                        else if (columnIdx == 23) {
                                            return 'MA (%)  Tar';
                                        }
                                        else if (columnIdx == 24) {
                                            return 'MA (%)  Act ';
                                        }
                                        else if (columnIdx == 25) {
                                            return 'MA (%)  Var (%) ';
                                        }
                                        else if (columnIdx == 26) {
                                            return 'IGA (%)  Tar';
                                        }
                                        else if (columnIdx == 27) {
                                            return 'IGA (%)  Act ';
                                        }
                                        else if ");
            WriteLiteral(@"(columnIdx == 28) {
                                            return 'IGA (%)  Var (%) ';
                                        }
                                        else if (columnIdx == 29) {
                                            return 'EGA (%)  Tar';
                                        }
                                        else if (columnIdx == 30) {
                                            return 'EGA (%)  Act ';
                                        }
                                        else if (columnIdx == 31) {
                                            return 'EGA (%)  Var (%) ';
                                        }
                                        else {
                                            return data;
                                        }
                                    }
                                }
                            }
                        },
                        {
                            exte");
            WriteLiteral(@"nd: 'colvis',
                            //  columns: ':not(.noVis)',
                            columnText: function (dt, idx, title) {
                                if (idx == 1) {
                                    return 'Capacity (MW)';
                                }
                                else if (idx == 2) {
                                    return 'Energy (in MU)  Tar';
                                }
                                else if (idx == 3) {
                                    return 'Energy (in MU)  Exp';
                                }
                                else if (idx == 4) {
                                    return 'Energy (in MU)  Act';
                                }
                                else if (idx == 5) {
                                    return 'Energy (in MU)  T.Var (%)';
                                }
                                else if (idx == 6) {
                                    return 'Energy (i");
            WriteLiteral(@"n MU)  E.Var (%)';
                                }
                                else if (idx == 7) {
                                    return 'Revenue (MINR) ';
                                }
                                else if (idx == 8) {
                                    return 'GHI (kWh/m^2)  Tar';
                                }
                                else if (idx == 9) {
                                    return 'GHI (kWh/m^2)  Act';
                                }
                                else if (idx == 10) {
                                    return 'GHI (kWh/m^2)  Var (%) ';
                                }
                                else if (idx == 11) {
                                    return 'POA (kWh/m^2)  Tar';
                                }
                                else if (idx == 12) {
                                    return 'POA (kWh/m^2)  Act ';
                                }
                                e");
            WriteLiteral(@"lse if (idx == 13) {
                                    return 'POA (kWh/m^2) Var (%) ';
                                }
                                else if (idx == 14) {
                                    return 'GHI VS POA Gain (%)  Tar';
                                }
                                else if (idx == 15) {
                                    return 'GHI VS POA Gain (%)  Act ';
                                }
                                else if (idx == 16) {
                                    return 'GHI VS POA Gain(%)  Var (%) ';
                                }
                                else if (idx == 17) {
                                    return 'PLF (%)  Tar';
                                }
                                else if (idx == 18) {
                                    return 'PLF (%)  Act ';
                                }
                                else if (idx == 19) {
                                    return 'PLF (%");
            WriteLiteral(@")  Var (%) ';
                                }
                                else if (idx == 20) {
                                    return 'PR (%)  Tar';
                                }
                                else if (idx == 21) {
                                    return 'PR (%)  Act ';
                                }
                                else if (idx == 22) {
                                    return 'PR (%)  Var (%) ';
                                }
                                //else if (idx == 23) {
                                //    return 'Temp Corr. PR (%)  Tar';
                                //}
                                //else if (idx == 24) {
                                //    return 'Temp Corr. PR (%)  Act ';
                                //}
                                //else if (idx == 25) {
                                //    return 'Temp Corr. PR (%)  Var (%) ';
                                //}
                 ");
            WriteLiteral(@"               else if (idx == 23) {
                                    return 'MA (%)  Tar';
                                }
                                else if (idx == 24) {
                                    return 'MA (%)  Act ';
                                }
                                else if (idx == 25) {
                                    return 'MA (%)  Var (%) ';
                                }
                                else if (idx == 26) {
                                    return 'IGA (%)  Tar';
                                }
                                else if (idx == 27) {
                                    return 'IGA (%)  Act ';
                                }
                                else if (idx == 28) {
                                    return 'IGA (%)  Var (%) ';
                                }
                                else if (idx == 29) {
                                    return 'EGA (%)  Tar';
                 ");
            WriteLiteral(@"               }
                                else if (idx == 30) {
                                    return 'EGA (%)  Act ';
                                }
                                else if (idx == 31) {
                                    return 'EGA (%)  Var (%) ';
                                }
                                else {
                                    return title;
                                }
                            }
                        },
                          {
     text: '<span class=""fas fa-file-excel"" title=""Download from DB up to six decimal""></span>',
     className: 'btn ml-1   ',

     action: function () {
        ExportToExcelSiteWise();
     },
      format: {
             header: function (data, columnIdx) {
                 if (columnIdx == 1) {
                     return 'Capacity (MW)';
                 }
                 else if (columnIdx == 2) {
                     return 'JMR Energy (in MU)  Tar';
        ");
            WriteLiteral(@"         }
                 else if (columnIdx == 3) {
                     return 'JMR Energy (in MU)  Exp';
                 }
                 else if (columnIdx == 4) {
                     return 'JMR Energy (in MU)  Act';
                 }
                 else if (columnIdx == 5) {
                     return 'JMR Energy (in MU)  T.Var (%)';
                 }
                 else if (columnIdx == 6) {
                     return 'JMR Energy (in MU)  E.Var (%)';
                 }
                 else if (columnIdx == 7) {
                     return 'Revenue (MINR) ';
                 }
                 else if (columnIdx == 8) {
                     return 'Wind Speed (m/s)  Tar';
                 }
                 else if (columnIdx == 9) {
                     return 'Wind Speed (m/s)  Act ';
                 }
                 else if (columnIdx == 10) {
                     return 'Wind Speed (m/s)  Var (%) ';
                 }
                 else if (columnIdx == ");
            WriteLiteral(@"11) {
                     return 'PLF (%)  Tar';
                 }
                 else if (columnIdx == 12) {
                     return 'PLF (%)  Act ';
                 }
                 else if (columnIdx == 13) {
                     return 'PLF (%)  Var (%) ';
                 }
                 else if (columnIdx == 14) {
                     return 'MA Actual (%)  Tar';
                 }
                 else if (columnIdx == 15) {
                     return 'MA Actual (%)  Act ';
                 }
                 else if (columnIdx == 16) {
                     return 'MA Actual (%)  Var (%) ';
                 }
                 else if (columnIdx == 17) {
                     return 'IGA (%)  Tar';
                 }
                 else if (columnIdx == 18) {
                     return 'IGA (%)  Act ';
                 }
                 else if (columnIdx == 19) {
                     return 'IGA (%)  Var (%) ';
                 }
                 else if (co");
            WriteLiteral(@"lumnIdx == 20) {
                     return 'EGA (%)  Tar';
                 }
                 else if (columnIdx == 21) {
                     return 'EGA (%)  Act ';
                 }
                 else if (columnIdx == 22) {
                     return 'EGA (%)  Var (%) ';
                 }
                 else {
                     return data;
                 }
             }
         }
 },
                    ]
                });
                $("".dt-buttons"").addClass('btn-group flex-wrap');
                $("".dt-buttons > button"").addClass('btn btn-secondary');
                $("".dataTables_filter> label >input"").addClass('form-control form-control-sm');
                $(document).on(""click"", ""div.dt-button-collection > div > button"", function () {
                    if ($(this).hasClass(""active"")) {
                        $(this).css(""background-color"", ""white"");
                    } else {
                        $(this).css(""background-color"", ""#31576d"");");
            WriteLiteral(@"
                    }
                });
                //$('#example1').wrap(""<div class='scrolledTable'></div>"");
                document.getElementById(""loader"").style.display = 'none';
               // $('#example1').removeClass('dataTable');

            }
        });
    }



</script>
");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public IHttpContextAccessor HttpContextAccessor { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<DGRA_V1.Models.CountryList> Html { get; private set; }
    }
}
#pragma warning restore 1591
