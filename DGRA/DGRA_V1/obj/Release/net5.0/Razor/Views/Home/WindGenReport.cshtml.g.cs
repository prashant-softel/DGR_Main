#pragma checksum "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindGenReport.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "51e6feab6f7e710152bd3d22f89fc5b903419154"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_WindGenReport), @"mvc.1.0.view", @"/Views/Home/WindGenReport.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\_ViewImports.cshtml"
using DGRA_V1;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\_ViewImports.cshtml"
using DGRA_V1.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindGenReport.cshtml"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindGenReport.cshtml"
using Microsoft.AspNetCore.Http;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"51e6feab6f7e710152bd3d22f89fc5b903419154", @"/Views/Home/WindGenReport.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"aa9fc0f0a035817cf8f1fc535e299e80b45b9453", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_WindGenReport : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<DGRA_V1.Models.CountryList>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/fontawesome-free/css/all.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/daterangepicker/daterangepicker.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables-bs4/css/dataTables.bootstrap4.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables-responsive/css/responsive.bootstrap4.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables-buttons/css/buttons.bootstrap4.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/multiple-select/dist/multiple-select.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/dist/css/adminlte.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_8 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "india", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_9 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_10 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "04", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_11 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "05", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_12 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "06", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_13 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "07", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_14 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "08", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_15 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "09", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_16 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "10", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_17 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "11", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_18 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "12", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_19 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "01", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_20 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "02", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_21 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "03", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_22 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/jquery/jquery.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_23 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/multiple-select/dist/multiple-select.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_24 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/moment/moment.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_25 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/inputmask/jquery.inputmask.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_26 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/daterangepicker/daterangepicker.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_27 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/tempusdominus-bootstrap-4/js/tempusdominus-bootstrap-4.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_28 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/summernote/summernote-bs4.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_29 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/bootstrap/js/bootstrap.bundle.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_30 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables/jquery.dataTables.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_31 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables/jquery.dataTables.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_32 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables/dataTables.fixedHeader.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_33 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables-buttons/js/dataTables.buttons.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_34 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/jszip/jszip.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_35 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables-buttons/js/buttons.html5.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_36 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/pdfmake/pdfmake.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_37 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables-buttons/js/buttons.colVis.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 5 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindGenReport.cshtml"
  
    ViewData["Title"] = "Wind Generation Reports";

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindGenReport.cshtml"
  
    ViewData["Title"] = "Wind Daily Load Shedding";

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindGenReport.cshtml"
  
    string windSiteList = "";

    var usermodel = JsonConvert.DeserializeObject<UserAccess>(@HttpContextAccessor.HttpContext.Session.GetString("UserAccess"));


#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindGenReport.cshtml"
 for (int i = 0; i < @usermodel.access_list.Count; i++)
{

    if (@usermodel.access_list[i].page_type == 3 && @usermodel.access_list[i].site_type == 1)
    {
        windSiteList += @usermodel.access_list[i].identity.ToString() + ",";
    }


}

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700&display=fallback\">\r\n<!-- Font Awesome -->\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "51e6feab6f7e710152bd3d22f89fc5b90341915418520", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<!-- daterange picker -->\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "51e6feab6f7e710152bd3d22f89fc5b90341915419665", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<!-- DataTables -->\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "51e6feab6f7e710152bd3d22f89fc5b90341915420804", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "51e6feab6f7e710152bd3d22f89fc5b90341915421920", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<link rel=\"stylesheet\" href=\"https://cdn.datatables.net/fixedcolumns/4.3.0/css/fixedColumns.dataTables.min.css\" />\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "51e6feab6f7e710152bd3d22f89fc5b90341915423158", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "51e6feab6f7e710152bd3d22f89fc5b90341915424274", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
<!--<link href=""~/Content/theme/plugins/datatables/fixedHeader.dataTables.min.css"" rel=""stylesheet"" />-->
<!-- dropdown search -->
<link href=""https://unpkg.com/multiple-select@1.5.2/dist/multiple-select.min.css"" rel=""stylesheet"">
<script src=""https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js""></script>
<script src=""https://unpkg.com/multiple-select@1.5.2/dist/multiple-select.min.js""></script>



");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "51e6feab6f7e710152bd3d22f89fc5b90341915425813", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_7);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
<style>
    .tab-btn {
        font-size: 0.7rem;
        font-weight: bold;
    }
</style>

<div class=""content-wrapper"">

    <section class=""content-header"">
    </section>


    <section class=""content"">
        <div class=""card"">
            <div class=""card-header"">
                <h3 class=""card-title text-center"">Wind Generation Reports</h3>
            </div>
            <div class=""card-body"" style=""padding: 0.25rem;"">
                <div class=""row"">
                    <div class=""col-12 col-sm-12"">
                        <div class=""card card-primary card-outline card-tabs"">
                            <div class=""p-0 pt-1 border-bottom-0"">
                                <!--<div class=""card-header p-0 pt-1 border-bottom-0"">-->
                                <ul class=""nav nav-tabs"" id=""custom-tabs-three-tab"" role=""tablist"">
                                    <li class=""nav-item"">
                                        <a class=""nav-link active"" id=""custom-tabs-");
            WriteLiteral(@"three-daily-tab"" data-toggle=""pill"" href=""#custom-tabs-three-daily"" role=""tab"" aria-controls=""custom-tabs-three-daily"" aria-selected=""true"">Daily Gen Report</a>
                                    </li>
                                    <li class=""nav-item"">
                                        <a class=""nav-link"" id=""custom-tabs-three-monthly-tab"" data-toggle=""pill"" href=""#custom-tabs-three-monthly"" role=""tab"" aria-controls=""custom-tabs-three-monthly"" aria-selected=""false"">Monthly Gen Report</a>
                                    </li>
                                    <li class=""nav-item"">
                                        <a class=""nav-link"" id=""custom-tabs-three-yearly-tab"" data-toggle=""pill"" href=""#custom-tabs-three-yearly"" role=""tab"" aria-controls=""custom-tabs-three-yearly"" aria-selected=""false"">Yearly Gen Report</a>
                                    </li>

                                    <div style=""float: right;width: 65%;"" id=""customDiv"">
                                ");
            WriteLiteral(@"        <div style=""float: right;"">
                                            <input type=""checkbox"" class=""form-check-input group_by_site"" id=""group_by_site"" name=""group_by_site"" value=""1"" style=""width: 17px; height: 16px;"" onclick=""grouping_site()""> <b>&nbsp;&nbsp;&nbsp;Custom Grouping of Site </b>
                                        </div>
                                    </div>

                                </ul>

                            </div>

                            <div class=""card-body"">

                                <div class=""tab-content"" id=""custom-tabs-three-tabContent"">
                                    <div class=""tab-pane fade show active"" id=""custom-tabs-three-daily"" role=""tabpanel"" aria-labelledby=""custom-tabs-three-daily-tab"">
                                        <div class=""row"" id=""daily_sec"">
                                            <div class=""col-sm-4"">
                                                <div class=""input-group "" style=""margin");
            WriteLiteral(@"-left: -14%; width: 118%;"">
                                                    <label class=""col-sm-3 col-form-label text-right"" style=""padding-left: 10%; "">Date : </label>
                                                    <div class=""input-group-prepend"">
                                                        <span class=""input-group-text"">
                                                            <i class=""far fa-calendar-alt""></i>
                                                        </span>
                                                    </div>
                                                    <input type=""text"" class=""form-control float-right col-sm-6"" id=""daterange"" name=""daterange"">
                                                </div>
                                            </div>
                                            <div class=""col-sm-4"">

                                                <div class=""form-group"">
                                                   ");
            WriteLiteral(@" <div class=""row"">
                                                        <label class=""col-sm-3 col-form-label text-right"">Country : </label>
                                                        <select class=""form-control  col-sm-8"" id=""country"" name=""country""");
            BeginWriteAttribute("value", " value=\"", 6457, "\"", 6465, 0);
            EndWriteAttribute();
            WriteLiteral(">\r\n\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "51e6feab6f7e710152bd3d22f89fc5b90341915431784", async() => {
                WriteLiteral("India");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_8.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_8);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("selected", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"


                                                        </select>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class=""col-sm-4"">
                                                <div class=""form-group"">
                                                    <div class=""row"">
                                                        <label class=""col-sm-3 col-form-label text-right"">State : </label>
                                                        <select class=""form-control  col-sm-8"" id=""state"" name=""state[]""");
            BeginWriteAttribute("value", " value=\"", 7274, "\"", 7282, 0);
            EndWriteAttribute();
            WriteLiteral(@" onchange=""GetSPV(true);"" multiple></select>
                                                    </div>
                                                </div>
                                            </div>

                                        </div>
                                        <div class=""row"" id=""daily_sec1"">
                                            <div class=""col-sm-4"">
                                                <div class=""form-group"">
                                                    <div class=""row"">
                                                        <label class=""col-sm-2 col-form-label text-right"">SPV : </label>
                                                        <select class=""form-control  col-sm-8"" id=""spv"" name=""spv[]""");
            BeginWriteAttribute("value", " value=\"", 8073, "\"", 8081, 0);
            EndWriteAttribute();
            WriteLiteral(@" onchange=""getSite(true)"" multiple></select>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class=""col-sm-4"">
                                                <div class=""form-group"">
                                                    <div class=""row"">
                                                        <label class=""col-sm-3 col-form-label text-right"">Site : </label>
                                                        <select class=""form-control  col-sm-8"" id=""site"" name=""site[]""");
            BeginWriteAttribute("value", " value=\"", 8750, "\"", 8758, 0);
            EndWriteAttribute();
            WriteLiteral(@" onchange=""GetWTG(true)"" multiple></select>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class=""col-sm-4"">
                                                <div class=""form-group"">
                                                    <div class=""row"">
                                                        <label class=""col-sm-3 col-form-label text-right"">WTG : </label>
                                                        <select class=""form-control  col-sm-8"" id=""wtg"" name=""wtg"" multiple></select>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class=""row"" id=""daily_sec2"">
                                            <div c");
            WriteLiteral(@"lass=""col-sm-5 text-left"">
                                                <div class=""table-responsive pad"">
                                                    <div class=""btn-group btn-group-toggle"" data-toggle=""buttons"">
                                                        <label class=""btn bg-olive"">
                                                            <input type=""radio"" name=""daily"" value=""WTG"" id=""daily_b1"" autocomplete=""off"" checked> WTG Wise Report
                                                        </label>
                                                        <label class=""btn bg-olive"">
                                                            <input type=""radio"" name=""daily"" value=""Site"" id=""daily_b2"" autocomplete=""off""> Site Wise Report
                                                        </label>
                                                    </div>
                                                </div>

                                            </div>
");
            WriteLiteral(@"                                            <div class=""col-sm-2 text-center"">
                                                <button type=""button"" class=""btn btn-block btn-primary"" onclick=""GetDailyGenReport();"" style=""margin-left: 4rem; width: 5rem;"">Search</button>
                                            </div>
                                            <div class=""col-sm-5 text-center""></div>
                                        </div>
                                        <!--daily Group site -->
                                        <div class=""row"" id=""daily_group"" style=""display:none"">
                                            <div class=""col-sm-4"">
                                                <div class=""input-group "" style=""margin-left: -14%; width: 118%;"">
                                                    <label class=""col-sm-3 col-form-label text-right"" style=""padding-left: 10%; "">Date : </label>
                                                    <div class=""input-gr");
            WriteLiteral(@"oup-prepend"">
                                                        <span class=""input-group-text"">
                                                            <i class=""far fa-calendar-alt""></i>
                                                        </span>
                                                    </div>
                                                    <input type=""text"" class=""form-control float-right col-sm-6"" id=""custom_daterange"" name=""custom_daterange"">
                                                </div>
                                            </div>
                                            <div class=""col-sm-4"">
                                                <div class=""form-group"">
                                                    <div class=""row"">
                                                        <label class=""col-sm-4 col-form-label text-right"">Custom Group : </label>
                                                        <select class=""form-control  ");
            WriteLiteral("col-sm-8\" id=\"cust_daily_group\" name=\"cust_daily_group[]\"");
            BeginWriteAttribute("value", " value=\"", 12912, "\"", 12920, 0);
            EndWriteAttribute();
            WriteLiteral(@" multiple></select>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class=""col-sm-2 text-center"">
                                                <button type=""button"" class=""btn btn-block btn-primary"" onclick=""GetCustomDailyGenReport();"" style="" margin-left: 4rem; width: 5rem;"">Search</button>
                                            </div>
                                        </div>
                                        <hr>
                                        <div id=""reportsDaily"" style=""overflow-x: auto;"" class=""reportsDaily""></div>
                                        <div id=""reportsDailyGroup"" style=""overflow-x: auto;"" class=""reportsDailyGroup""></div>
                                        <div id=""loaderD"" class=""loader  center"" style=""display:none""></div>
                                    </div>
          ");
            WriteLiteral(@"                          <div class=""tab-pane fade"" id=""custom-tabs-three-monthly"" role=""tabpanel"" aria-labelledby=""custom-tabs-three-monthly-tab"">
                                        <div class=""row"" id=""monthly_sec"">
                                            <div class=""col-sm-4"">
                                                <div class=""form-group"">
                                                    <div class=""row"">
                                                        <label class=""col-sm-2 col-form-label text-right"">FY : </label>
                                                        <select class=""form-control  col-sm-8"" id=""fyM"" name=""fyM""");
            BeginWriteAttribute("value", " value=\"", 14619, "\"", 14627, 0);
            EndWriteAttribute();
            WriteLiteral(">\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "51e6feab6f7e710152bd3d22f89fc5b90341915442412", async() => {
                WriteLiteral("Select Financial Year");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_9.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_9);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                                                        </select>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class=""col-sm-4"">

                                                <div class=""form-group"">
                                                    <div class=""row"">
                                                        <label class=""col-sm-3 col-form-label text-right"">Month : </label>
                                                        <select class=""form-control  col-sm-8"" id=""monthM"" name=""monthM[]""");
            BeginWriteAttribute("value", " value=\"", 15436, "\"", 15444, 0);
            EndWriteAttribute();
            WriteLiteral(" multiple>\r\n\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "51e6feab6f7e710152bd3d22f89fc5b90341915444518", async() => {
                WriteLiteral("April");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_10.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_10);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "51e6feab6f7e710152bd3d22f89fc5b90341915445739", async() => {
                WriteLiteral("May");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_11.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_11);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "51e6feab6f7e710152bd3d22f89fc5b90341915446958", async() => {
                WriteLiteral("June");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_12.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_12);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "51e6feab6f7e710152bd3d22f89fc5b90341915448178", async() => {
                WriteLiteral("July");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_13.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_13);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "51e6feab6f7e710152bd3d22f89fc5b90341915449398", async() => {
                WriteLiteral("August");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_14.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "51e6feab6f7e710152bd3d22f89fc5b90341915450620", async() => {
                WriteLiteral("September");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_15.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_15);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "51e6feab6f7e710152bd3d22f89fc5b90341915451845", async() => {
                WriteLiteral("October");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_16.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_16);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "51e6feab6f7e710152bd3d22f89fc5b90341915453068", async() => {
                WriteLiteral("November");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_17.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_17);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "51e6feab6f7e710152bd3d22f89fc5b90341915454292", async() => {
                WriteLiteral("December");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_18.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_18);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "51e6feab6f7e710152bd3d22f89fc5b90341915455516", async() => {
                WriteLiteral("January");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_19.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_19);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "51e6feab6f7e710152bd3d22f89fc5b90341915456739", async() => {
                WriteLiteral("February");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_20.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_20);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "51e6feab6f7e710152bd3d22f89fc5b90341915457963", async() => {
                WriteLiteral("March");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_21.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_21);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                                                        </select>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class=""col-sm-4"">
                                                <div class=""form-group"">
                                                    <div class=""row"">
                                                        <label class=""col-sm-3 col-form-label text-right"">Country : </label>
                                                        <select class=""form-control  col-sm-8"" id=""countryM"" name=""countryM""");
            BeginWriteAttribute("value", " value=\"", 17311, "\"", 17319, 0);
            EndWriteAttribute();
            WriteLiteral(">\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "51e6feab6f7e710152bd3d22f89fc5b90341915460044", async() => {
                WriteLiteral("India");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_8.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_8);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("selected", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                                                        </select>
                                                    </div>
                                                </div>
                                            </div>

                                        </div>
                                        <div class=""row"" id=""monthly_sec1"">
                                            <div class=""col-sm-4"">
                                                <div class=""form-group"">
                                                    <div class=""row"">
                                                        <label class=""col-sm-2 col-form-label text-right"">State : </label>
                                                        <select class=""form-control  col-sm-8"" id=""stateM"" name=""stateM""");
            BeginWriteAttribute("value", " value=\"", 18249, "\"", 18257, 0);
            EndWriteAttribute();
            WriteLiteral(@" onchange=""GetSPVM(true);"" multiple></select>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class=""col-sm-4"">

                                                <div class=""form-group"">
                                                    <div class=""row"">
                                                        <label class=""col-sm-3 col-form-label text-right"">SPV : </label>
                                                        <select class=""form-control  col-sm-8"" id=""spvM"" name=""spvM[]""");
            BeginWriteAttribute("value", " value=\"", 18928, "\"", 18936, 0);
            EndWriteAttribute();
            WriteLiteral(@" onchange=""getSiteM(true)"" multiple></select>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class=""col-sm-4"">

                                                <div class=""form-group"">
                                                    <div class=""row"">
                                                        <label class=""col-sm-3 col-form-label text-right"">Site : </label>
                                                        <select class=""form-control  col-sm-8"" id=""siteM"" name=""siteM[]""");
            BeginWriteAttribute("value", " value=\"", 19610, "\"", 19618, 0);
            EndWriteAttribute();
            WriteLiteral(@" onchange=""GetWTGM(true)"" multiple></select>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class=""row"" id=""monthly_sec2"">
                                            <div class=""col-sm-4"">
                                                <div class=""form-group"">
                                                    <div class=""row"">
                                                        <label class=""col-sm-2 col-form-label text-right"">WTG : </label>
                                                        <select class=""form-control  col-sm-8"" id=""wtgM"" name=""wtgM"" multiple></select>
                                                    </div>
                                                </div>
                                            </div>
                                            <");
            WriteLiteral(@"div class=""col-sm-1""></div>
                                            <div class=""col-sm-2"">
                                                <button type=""button"" class=""btn btn-block btn-primary"" onclick=""GetMonthlyGenReport();"" style="" margin-left: 4rem; width: 5rem;"">Search</button>
                                            </div>
                                            <div class=""col-sm-5""></div>
                                        </div>
                                        <div class=""row"" id=""monthly_sec3"">
                                            <div class=""col-sm-5"">
                                                <div class=""table-responsive pad"">
                                                    <div class=""btn-group btn-group-toggle"" data-toggle=""buttons"">
                                                        <label class=""btn bg-olive"">
                                                            <input type=""radio"" name=""monthly"" value=""WTG"" id=""monthly_b1"" auto");
            WriteLiteral(@"complete=""off"" checked> WTG Wise Report
                                                        </label>
                                                        <label class=""btn bg-olive"">
                                                            <input type=""radio"" name=""monthly"" value=""Site"" id=""monthly_b2"" autocomplete=""off""> Site Wise Report
                                                        </label>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class=""col-sm-7""></div>
                                        </div>
                                        <!-- Monthly Group by Site -->
                                        <div class=""row"" id=""monthly_group"" style=""display:none"">
                                            <div class=""col-sm-4"">
                                                <div class=""form-group"">
");
            WriteLiteral(@"                                                    <div class=""row"">
                                                        <label class=""col-sm-3 col-form-label text-right"">FY : </label>
                                                        <select class=""form-control  col-sm-8"" id=""fyM_group"" name=""fyM_group""");
            BeginWriteAttribute("value", " value=\"", 23009, "\"", 23017, 0);
            EndWriteAttribute();
            WriteLiteral(">\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "51e6feab6f7e710152bd3d22f89fc5b90341915467947", async() => {
                WriteLiteral("Select Financial Year");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_9.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_9);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                                                        </select>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class=""col-sm-4"">

                                                <div class=""form-group"">
                                                    <div class=""row"">
                                                        <label class=""col-sm-3 col-form-label text-right"">Month : </label>
                                                        <select class=""form-control  col-sm-8"" id=""monthM_group"" name=""monthM_group[]""");
            BeginWriteAttribute("value", " value=\"", 23838, "\"", 23846, 0);
            EndWriteAttribute();
            WriteLiteral(" multiple>\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "51e6feab6f7e710152bd3d22f89fc5b90341915470061", async() => {
                WriteLiteral("April");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_10.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_10);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "51e6feab6f7e710152bd3d22f89fc5b90341915471282", async() => {
                WriteLiteral("May");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_11.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_11);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "51e6feab6f7e710152bd3d22f89fc5b90341915472501", async() => {
                WriteLiteral("June");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_12.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_12);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "51e6feab6f7e710152bd3d22f89fc5b90341915473721", async() => {
                WriteLiteral("July");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_13.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_13);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "51e6feab6f7e710152bd3d22f89fc5b90341915474941", async() => {
                WriteLiteral("August");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_14.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "51e6feab6f7e710152bd3d22f89fc5b90341915476163", async() => {
                WriteLiteral("September");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_15.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_15);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "51e6feab6f7e710152bd3d22f89fc5b90341915477388", async() => {
                WriteLiteral("October");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_16.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_16);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "51e6feab6f7e710152bd3d22f89fc5b90341915478611", async() => {
                WriteLiteral("November");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_17.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_17);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "51e6feab6f7e710152bd3d22f89fc5b90341915479835", async() => {
                WriteLiteral("December");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_18.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_18);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "51e6feab6f7e710152bd3d22f89fc5b90341915481059", async() => {
                WriteLiteral("January");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_19.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_19);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "51e6feab6f7e710152bd3d22f89fc5b90341915482282", async() => {
                WriteLiteral("February");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_20.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_20);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "51e6feab6f7e710152bd3d22f89fc5b90341915483506", async() => {
                WriteLiteral("March");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_21.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_21);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                                                        </select>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class=""col-sm-4"">
                                                <div class=""form-group"">
                                                    <div class=""form-group"">
                                                        <div class=""row"">
                                                            <label class=""col-sm-3 col-form-label text-right"">Custom Group : </label>
                                                            <select class=""form-control  col-sm-8"" id=""custM_group"" name=""custM_group[]""");
            BeginWriteAttribute("value", " value=\"", 25814, "\"", 25822, 0);
            EndWriteAttribute();
            WriteLiteral(@" multiple></select>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>

                                        </div>
                                        <div class=""row"" id=""monthly_group1"" style=""display:none"">
                                            <div class=""col-sm-5""></div>
                                            <div class=""col-sm-2"">
                                                <button type=""button"" class=""btn btn-block btn-primary"" onclick=""GetCustomMonthGenReport();"" style="" margin-left: 4rem; width: 5rem;"">Search</button>
                                            </div>
                                            <div class=""col-sm-5""></div>
                                        </div>
                                        <hr>
                                        <div id=""reportsMont");
            WriteLiteral(@"hly"" style=""overflow-x: auto;"" class=""reportsMonthly""></div>
                                        <div id=""reportsMonthlyGroup"" style=""overflow-x: auto;"" class=""reportsMonthlyGroup""></div>
                                        <div id=""loaderM"" class=""loader  center"" style=""display:none""></div>
                                    </div>
                                    <div class=""tab-pane fade"" id=""custom-tabs-three-yearly"" role=""tabpanel"" aria-labelledby=""custom-tabs-three-yearly-tab"">
                                        <div class=""row"" id=""yearly_sec"">
                                            <div class=""col-sm-4"">
                                                <div class=""form-group"">
                                                    <div class=""row"">
                                                        <label class=""col-sm-2 col-form-label text-right"">FY : </label>
                                                        <select class=""form-control  col-sm-8"" id=""fyY"" name=");
            WriteLiteral("\"fyY\"");
            BeginWriteAttribute("value", " value=\"", 27876, "\"", 27884, 0);
            EndWriteAttribute();
            WriteLiteral(">\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "51e6feab6f7e710152bd3d22f89fc5b90341915488017", async() => {
                WriteLiteral("Select Financial Year");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_9.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_9);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                                                        </select>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class=""col-sm-4"">
                                                <div class=""form-group"">
                                                    <div class=""row"">
                                                        <label class=""col-sm-3 col-form-label text-right"">Country : </label>
                                                        <select class=""form-control  col-sm-8"" id=""countryY"" name=""countryY""");
            BeginWriteAttribute("value", " value=\"", 28695, "\"", 28703, 0);
            EndWriteAttribute();
            WriteLiteral(">\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "51e6feab6f7e710152bd3d22f89fc5b90341915490112", async() => {
                WriteLiteral("India");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_8.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_8);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("selected", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                                                        </select>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class=""col-sm-4"">
                                                <div class=""form-group"">
                                                    <div class=""row"">
                                                        <label class=""col-sm-2 col-form-label text-right"">State : </label>
                                                        <select class=""form-control  col-sm-8"" id=""stateY"" name=""stateY[]""");
            BeginWriteAttribute("value", " value=\"", 29508, "\"", 29516, 0);
            EndWriteAttribute();
            WriteLiteral(@" onchange=""GetSPVY(true);"" multiple></select>
                                                    </div>
                                                </div>
                                            </div>

                                        </div>
                                        <div class=""row"" id=""yearly_sec1"">
                                            <div class=""col-sm-4"">

                                                <div class=""form-group"">
                                                    <div class=""row"">
                                                        <label class=""col-sm-2 col-form-label text-right"">SPV : </label>
                                                        <select class=""form-control  col-sm-8"" id=""spvY"" name=""spvY[]""");
            BeginWriteAttribute("value", " value=\"", 30313, "\"", 30321, 0);
            EndWriteAttribute();
            WriteLiteral(@" onchange=""getSiteY(true)"" multiple></select>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class=""col-sm-4"">
                                                <div class=""form-group"">
                                                    <div class=""row"">
                                                        <label class=""col-sm-3 col-form-label text-right"">Site : </label>
                                                        <select class=""form-control  col-sm-8"" id=""siteY"" name=""siteY[]""");
            BeginWriteAttribute("value", " value=\"", 30993, "\"", 31001, 0);
            EndWriteAttribute();
            WriteLiteral(@" onchange=""GetWTGY(true)"" multiple></select>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class=""col-sm-4"">
                                                <div class=""form-group"">
                                                    <div class=""row"">
                                                        <label class=""col-sm-2 col-form-label text-right"">WTG : </label>
                                                        <select class=""form-control  col-sm-8"" id=""wtgY"" name=""wtgY"" multiple></select>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class=""row"" id=""yearly_sec2"">
                                            <d");
            WriteLiteral(@"iv class=""col-sm-5 text-left"">
                                                <div class=""table-responsive pad"">
                                                    <div class=""btn-group btn-group-toggle"" data-toggle=""buttons"">
                                                        <label class=""btn bg-olive"">
                                                            <input type=""radio"" name=""yearly"" value=""WTG"" id=""yearly_b1"" autocomplete=""off"" checked> WTG Wise Report
                                                        </label>
                                                        <label class=""btn bg-olive"">
                                                            <input type=""radio"" name=""yearly"" value=""Site"" id=""yearly_b2"" autocomplete=""off""> Site Wise Report
                                                        </label>
                                                    </div>
                                                </div>
                                            </");
            WriteLiteral(@"div>
                                            <div class=""col-sm-2 text-center"">
                                                <button type=""button"" class=""btn btn-block btn-primary"" onclick=""GetYearlyGenReport();"" style="" margin-left: 4rem; width: 5rem;"">Search</button>
                                            </div>
                                            <div class=""col-sm-5 text-center""></div>
                                        </div>
                                        <!-- Yearly Group -->
                                        <div class=""row"" id=""yearly_group"" style=""display:none"">
                                            <div class=""col-sm-4"">
                                                <div class=""form-group"">
                                                    <div class=""row"">
                                                        <label class=""col-sm-2 col-form-label text-right"">FY : </label>
                                                        <select");
            WriteLiteral(" class=\"form-control  col-sm-8\" id=\"fyY_group\" name=\"fyY_group\"");
            BeginWriteAttribute("value", " value=\"", 34137, "\"", 34145, 0);
            EndWriteAttribute();
            WriteLiteral(">\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "51e6feab6f7e710152bd3d22f89fc5b90341915497750", async() => {
                WriteLiteral("Select Financial Year");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_9.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_9);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                                                        </select>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class=""col-sm-4"">
                                                <div class=""form-group"">
                                                    <div class=""row"">
                                                        <label class=""col-sm-4 col-form-label text-right"">Custom Group : </label>
                                                        <select class=""form-control  col-sm-8"" id=""customY_group"" name=""customY_group[]""");
            BeginWriteAttribute("value", " value=\"", 34973, "\"", 34981, 0);
            EndWriteAttribute();
            BeginWriteAttribute("onchange", " onchange=\"", 34982, "\"", 34993, 0);
            EndWriteAttribute();
            WriteLiteral(@" multiple></select>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class=""col-sm-2 text-center"">
                                                <button type=""button"" class=""btn btn-block btn-primary"" onclick=""GetCustomYearlyGenReport();"" style="" margin-left: 4rem; width: 5rem;"">Search</button>
                                            </div>

                                        </div>
                                        <hr>
                                        <div id=""reportsYearly"" style=""overflow-x: auto;"" class=""reportsYearly""></div>
                                        <div id=""reportsYearlyGroup"" style=""overflow-x: auto;"" class=""reportsYearlyGroup""></div>
                                        <div id=""loaderY"" class=""loader  center"" style=""display:none""></div>
                                    </div>

 ");
            WriteLiteral(@"                               </div>
                            </div>
                            <!-- /.card -->
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </div>
");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "51e6feab6f7e710152bd3d22f89fc5b903419154101257", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_22);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js\"></script>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "51e6feab6f7e710152bd3d22f89fc5b903419154102393", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_23);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<!--Date Range -->\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "51e6feab6f7e710152bd3d22f89fc5b903419154103765", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_24);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "51e6feab6f7e710152bd3d22f89fc5b903419154104807", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_25);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "51e6feab6f7e710152bd3d22f89fc5b903419154105849", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_26);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "51e6feab6f7e710152bd3d22f89fc5b903419154107199", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_27);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "51e6feab6f7e710152bd3d22f89fc5b903419154108241", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_23);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "51e6feab6f7e710152bd3d22f89fc5b903419154109591", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_28);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "51e6feab6f7e710152bd3d22f89fc5b903419154110633", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_29);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "51e6feab6f7e710152bd3d22f89fc5b903419154111675", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_30);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "51e6feab6f7e710152bd3d22f89fc5b903419154112717", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_31);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "51e6feab6f7e710152bd3d22f89fc5b903419154114067", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_32);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<script src=\"https://cdn.datatables.net/fixedcolumns/4.3.0/js/dataTables.fixedColumns.min.js\" defer></script>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "51e6feab6f7e710152bd3d22f89fc5b903419154115532", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_33);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "51e6feab6f7e710152bd3d22f89fc5b903419154116882", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_34);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "51e6feab6f7e710152bd3d22f89fc5b903419154118232", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_35);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "51e6feab6f7e710152bd3d22f89fc5b903419154119582", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_36);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "51e6feab6f7e710152bd3d22f89fc5b903419154120932", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_37);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
<script src=""https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.5/xlsx.full.min.js""></script>
<!--<script src=""~/Content/theme/plugins/datatables/dataTables.fixedHeader.min.js"" defer></script>-->
<script type=""text/javascript"">
    var userIdFromSession = """);
#nullable restore
#line 511 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindGenReport.cshtml"
                        Write(Html.Raw(@HttpContextAccessor.HttpContext.Session.GetString("userid")));

#line default
#line hidden
#nullable disable
            WriteLiteral("\";\r\n    var userRoles = \"");
#nullable restore
#line 512 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindGenReport.cshtml"
                Write(Html.Raw(@HttpContextAccessor.HttpContext.Session.GetString("role")));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""";
    var isAdmin = 0;
    if (userRoles == ""Admin"") {
        isAdmin = 1;
    }
    const columnMap = {};
    const userColumnId = [];
    var exceldata1;
    var exceldata2;
    var exceldata3;
    var exceldata4;
    var exceldata5;
    var exceldata6;


    //-- Selection Disable Enable
    function grouping_site() {
        var checkBox = document.getElementById(""group_by_site"");
        console.log(checkBox.checked);
        if (checkBox.checked == true) {
            document.getElementById('daily_sec').style.display           = 'none';
            document.getElementById('daily_sec1').style.display          = 'none';
            document.getElementById('daily_sec2').style.display          = 'none';
            document.getElementById('monthly_sec').style.display         = 'none';
            document.getElementById('monthly_sec1').style.display        = 'none';
            document.getElementById('monthly_sec2').style.display        = 'none';
            document.getElement");
            WriteLiteral(@"ById('monthly_sec3').style.display        = 'none';
            document.getElementById('yearly_sec').style.display          = 'none';
            document.getElementById('yearly_sec1').style.display         = 'none';
            document.getElementById('yearly_sec2').style.display         = 'none';
            document.getElementById('daily_group').style.display         = 'flex';
            document.getElementById('monthly_group').style.display       = 'flex';
            document.getElementById('monthly_group1').style.display      = 'flex';
            document.getElementById('yearly_group').style.display        = 'flex';
            document.getElementById('reportsDaily').style.display        = 'none';
            document.getElementById('reportsMonthly').style.display      = 'none';
            document.getElementById('reportsYearly').style.display       = 'none';
            document.getElementById('reportsDailyGroup').style.display   = 'block';
            document.getElementById('reportsMo");
            WriteLiteral(@"nthlyGroup').style.display = 'block';
            document.getElementById('reportsYearlyGroup').style.display  = 'block';
        }
        else {
            document.getElementById('daily_sec').style.display           = 'flex';
            document.getElementById('daily_sec1').style.display          = 'flex';
            document.getElementById('daily_sec2').style.display          = 'flex';
            document.getElementById('monthly_sec').style.display         = 'flex';
            document.getElementById('monthly_sec1').style.display        = 'flex';
            document.getElementById('monthly_sec2').style.display        = 'flex';
            document.getElementById('monthly_sec3').style.display        = 'flex';
            document.getElementById('yearly_sec').style.display          = 'flex';
            document.getElementById('yearly_sec1').style.display         = 'flex';
            document.getElementById('yearly_sec2').style.display         = 'flex';
            document.getElementBy");
            WriteLiteral(@"Id('daily_group').style.display         = 'none';
            document.getElementById('monthly_group').style.display       = 'none';
            document.getElementById('monthly_group1').style.display      = 'none';
            document.getElementById('yearly_group').style.display        = 'none';
            document.getElementById('reportsDaily').style.display        = 'block';
            document.getElementById('reportsMonthly').style.display      = 'block';
            document.getElementById('reportsYearly').style.display       = 'block';
            document.getElementById('reportsDailyGroup').style.display   = 'none';
            document.getElementById('reportsMonthlyGroup').style.display = 'none';
            document.getElementById('reportsYearlyGroup').style.display  = 'none';
        }
    }
    var userRole = """);
#nullable restore
#line 576 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindGenReport.cshtml"
               Write(Html.Raw(@HttpContextAccessor.HttpContext.Session.GetString("role")));

#line default
#line hidden
#nullable disable
            WriteLiteral("\";\r\n    var windUserAccess =\"");
#nullable restore
#line 577 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindGenReport.cshtml"
                    Write(Html.Raw(windSiteList.TrimEnd(',')));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""";
    $(document).ready(function () {
        if (userRole != ""Admin"") {
            document.getElementById(""customDiv"").style.display = ""none"";
            GetCustomGroupAccess();
        }
        $('#daterange').daterangepicker(
            {
                maxDate: new Date(),
                locale: {
                    format: 'DD/MM/YYYY',
                }
            });
        $('#custom_daterange').daterangepicker(
            {
                maxDate: new Date(),
                locale: {
                    format: 'DD/MM/YYYY',
                }
            });
    });
    window.onload = function () {
        console.log(""User Id from session"" + userIdFromSession);
        getPageColumns();
        getUserGroupColumns();
        $('select#monthM').multipleSelect({
                    ""minimumCountSelected"": 2,
                    ""placeholder"": ""Select Month(s)"",
                    filter:true
        });
        $('select#monthM_group').multipleSelect({
  ");
            WriteLiteral(@"          ""minimumCountSelected"": 2,
            ""placeholder"": ""Select Month(s)"",
            filter: true
        });
        $('select#country').multipleSelect({
            ""placeholder"": ""Select country"",
            filter: true
        });
        $('select#countryY').multipleSelect({
            ""placeholder"": ""Select country"",
            filter: true
        });
        $('select#countryM').multipleSelect({
            ""placeholder"": ""Select country"",
            filter: true
        });
        var selcountry = $('select#country option:selected').val();
        var site_ids = """);
#nullable restore
#line 625 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindGenReport.cshtml"
                   Write(Html.Raw(windSiteList.TrimEnd(',')));

#line default
#line hidden
#nullable disable
            WriteLiteral("\";\r\n        $.ajax({\r\n            type: \"GET\",\r\n            url: \'");
#nullable restore
#line 628 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindGenReport.cshtml"
             Write(Url.Action("GetStateList", "WindReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?countryname=' + selcountry + '&sitelist=' + site_ids,
            contentType: ""application/json; charset=utf-8"",
            datatype: ""html"",
            success: function (result, status, xhr)
            {
                var options = """";
                for (var i = 0; i < result.length; i++)
                {
                    options += '<option value=""' + result[i].state + '"">' + result[i].state + '</option>';
                }

                $(""#state"").html(options);
                $(""#stateM"").html(options);
                $(""#stateY"").html(options);
                $('select#state').multipleSelect({
                    ""minimumCountSelected"": 2,
                    ""placeholder"": ""Select State(s)"",
                    filter:true
                });
                $('select#stateM').multipleSelect({
                    ""minimumCountSelected"": 2,
                    ""placeholder"": ""Select State(s)"",
                    filter:true
                });
          ");
            WriteLiteral(@"      $('select#stateY').multipleSelect({
                    ""minimumCountSelected"": 2,
                    ""placeholder"": ""Select State(s)"",
                    filter:true
                });
            }
        });
        getYear();
        GetSPV(false);
        GetSPVM(false);
        GetSPVY(false);
        getCutomeGroup();
    }
    function getPageColumns() {
        $.ajax({
        type: ""GET"",
       // url: ""/WindReport/GetSiteMaster"",
          url: '");
#nullable restore
#line 669 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindGenReport.cshtml"
           Write(Url.Action("GetPageColumns", "Home"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?page_id=9',
        contentType: ""application/json; charset=utf-8"",
        //data: '{""countryname"":""' + selcountry + '""}',
        datatype: ""html"",
        success: function (result, status, xhr) {
            if (result.length > 0) {
                console.log(result);
                result.forEach(item => {
                    columnMap[item.column_name] = [item.column_id, item.required];
                });
                console.log(columnMap);
                console.log(columnMap[""Country""], "" : "", columnMap[""Country""][0], ""  :  "", columnMap[""Country""][1]);
            }
            else {
            }
        }
    });
    }
    function getUserGroupColumns() {
        $.ajax({
        type: ""GET"",
            // url: ""/WindReport/GetSiteMaster"",
            url: '");
#nullable restore
#line 691 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindGenReport.cshtml"
             Write(Url.Action("GetUserGroupColumns", "Home"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?page_id=9&userId=' + userIdFromSession,
        contentType: ""application/json; charset=utf-8"",
        //data: '{""countryname"":""' + selcountry + '""}',
        datatype: ""html"",
        success: function (result, status, xhr) {
            if (result.length > 0) {
                console.log(result);
                result.forEach(item => {
                    userColumnId.push(item.column_id);
                });
                console.log(userColumnId);
            }
            else {
            }
        }
    });
    }
    function GetCustomGroupAccess()
    {
        console.log(""call function"");
        var login_id = ");
#nullable restore
#line 711 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindGenReport.cshtml"
                  Write(HttpContextAccessor.HttpContext.Session.GetString("userid"));

#line default
#line hidden
#nullable disable
            WriteLiteral(";\r\n        $.ajax({\r\n            type: \"GET\",\r\n            url: \'");
#nullable restore
#line 714 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindGenReport.cshtml"
             Write(Url.Action("GetCustomGroupAccess", "Home"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?login_id=' + login_id + '&site_type=1',
            contentType: ""application/json; charset=utf-8"",
            datatype: ""html"",
            success: function (result, status, xhr) {
                if (result.length > 0) {
                    CustomGroupOfSite = true;
                    document.getElementById(""customDiv"").style.display = ""block"";
                }
                else {
                    CustomGroupOfSite = false;
                    document.getElementById(""customDiv"").style.display = ""none"";
                }
            }
        });
    }
    
    function getYear() {
        $.ajax({
            type: ""GET"",
            url: ""/WindReport/GetFinacialYear"",
            url: '");
#nullable restore
#line 734 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindGenReport.cshtml"
             Write(Url.Action("GetFinacialYear", "WindReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
            contentType: ""application/json; charset=utf-8"",
            datatype: ""html"",
            success: function (result, status, xhr)
            {
                var options = """";
                options += '<option value="""">Select Financial Year</option>';
                for (var i = 0; i < result.length; i++)
                {
                    options += '<option value=""' + result[i].financial_year + '"">' + result[i].financial_year + '</option>';
                }
                $(""#fyM"").html(options);
                $(""#fyM_group"").html(options);
                $(""#fyY"").html(options);
                $(""#fyY_group"").html(options);
                $('select#fyM').multipleSelect({
                    ""placeholder"": ""Select month"",
                    filter: true
                });
                $('select#fyM_group').multipleSelect({
                    ""placeholder"": ""Select month"",
                    filter: true
                });
                $('select");
            WriteLiteral(@"#fyY').multipleSelect({
                    ""placeholder"": ""Select year"",
                    filter: true
                });
                $('select#fyY_group').multipleSelect({
                    ""placeholder"": ""Select year"",
                    filter: true
                });
            }
        });
    }

    function GetSPVY(fliterVal)
    {
        let state_id = """";
        let site_ids = """";
        if (fliterVal == false)
        {
            site_ids = """);
#nullable restore
#line 775 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindGenReport.cshtml"
                   Write(Html.Raw(windSiteList.TrimEnd(',')));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""";
        }
        if($('#stateY').val())
        {
            $('select#stateY option:selected').each(function ()
            {
                state_id += ""'""+$(this).val() + ""',"";
            });
            state_id = state_id != """" ? state_id.slice(0, -1) : state_id;
        }
        if (state_id != """")
        {
             site_ids = """);
#nullable restore
#line 787 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindGenReport.cshtml"
                    Write(Html.Raw(windSiteList.TrimEnd(',')));

#line default
#line hidden
#nullable disable
            WriteLiteral("\";\r\n        }\r\n        $.ajax({\r\n            type: \"GET\",\r\n            url: \'");
#nullable restore
#line 791 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindGenReport.cshtml"
             Write(Url.Action("GetSPVList", "WindReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?state=' + state_id + '&sitelist=' + site_ids,
            contentType: ""application/json; charset=utf-8"",
            datatype: ""html"",
            success: function (result, status, xhr)
            {
                var options = """";
                for (var j = 0; j < result.length; j++)
                {
                    options += '<option value=""' + result[j].spv + '"">' + result[j].spv + '</option>';
                }
                $(""#spvY"").multipleSelect('destroy');
                $(""#spvY"").html(options);
                $('select#spvY').multipleSelect({
                    ""minimumCountSelected"": 2,
                    ""placeholder"": ""Select SPV(s)"",
                    filter:true
                });
            }
        });
        getSiteY(false);
    }
    function GetSPVM(fliterVal)
    {
        let state_id = """";
        let site_ids = """";
        if (fliterVal == false)
        {
             site_ids = """);
#nullable restore
#line 818 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindGenReport.cshtml"
                    Write(Html.Raw(windSiteList.TrimEnd(',')));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""";
        }
        if($('#stateM').val())
        {
            $('select#stateM option:selected').each(function () {
                state_id += ""'"" + $(this).val() + ""',"";
            });
            state_id = state_id != """" ? state_id.slice(0, -1) : state_id;
        }
        if (state_id != """")
        {
             site_ids = """);
#nullable restore
#line 829 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindGenReport.cshtml"
                    Write(Html.Raw(windSiteList.TrimEnd(',')));

#line default
#line hidden
#nullable disable
            WriteLiteral("\";\r\n        }\r\n        $.ajax({\r\n            type: \"GET\",\r\n            url: \'");
#nullable restore
#line 833 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindGenReport.cshtml"
             Write(Url.Action("GetSPVList", "WindReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?state=' + state_id + '&sitelist=' + site_ids,
            contentType: ""application/json; charset=utf-8"",
            datatype: ""html"",
            success: function (result, status, xhr)
            {
                var options = """";
                for (var j = 0; j < result.length; j++)
                {
                    options += '<option value=""' + result[j].spv + '"">' + result[j].spv + '</option>';
                }
                $(""#spvM"").multipleSelect('destroy');
                $(""#spvM"").html(options);
                $('select#spvM').multipleSelect({
                    ""minimumCountSelected"": 2,
                    ""placeholder"": ""Select SPV(s)"",
                    filter:true
                });
            }
        });
        getSiteM(false);
    }
    function GetSPV(fliterVal)
    {
        let state_id = """";
        let site_ids = """";
        if (fliterVal == false)
        {
            site_ids = """);
#nullable restore
#line 860 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindGenReport.cshtml"
                   Write(Html.Raw(windSiteList.TrimEnd(',')));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""";
        }
        if($('#state').val())
        {
            $('select#state option:selected').each(function () {
                state_id += ""'""+$(this).val() + ""',"";
            });
            state_id = state_id != """" ? state_id.slice(0, -1) : state_id;
        }
        if (state_id != """")
        {
             site_ids = """);
#nullable restore
#line 871 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindGenReport.cshtml"
                    Write(Html.Raw(windSiteList.TrimEnd(',')));

#line default
#line hidden
#nullable disable
            WriteLiteral("\";\r\n        }\r\n        $.ajax({\r\n            type: \"GET\",\r\n            url: \'");
#nullable restore
#line 875 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindGenReport.cshtml"
             Write(Url.Action("GetSPVList", "WindReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?state=' + state_id + '&sitelist=' + site_ids,
            contentType: ""application/json; charset=utf-8"",
            datatype: ""html"",
            success: function (result, status, xhr)
            {
                var options = """";
                for (var j = 0; j < result.length; j++)
                {
                    options += '<option value=""' + result[j].spv + '"">' + result[j].spv + '</option>';
                }
                $(""#spv"").multipleSelect('destroy');
                $(""#spv"").html(options);
                $('select#spv').multipleSelect({
                    ""minimumCountSelected"": 2,
                    ""placeholder"": ""Select SPV(s)"",
                    filter:true
                });
            }
        });
        getSite(false);
    }
    function getSite(fliterVal)
    {
        var site_ids = """";
        if (fliterVal == false)
        {
            site_ids = """);
#nullable restore
#line 901 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindGenReport.cshtml"
                   Write(Html.Raw(windSiteList.TrimEnd(',')));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""";
        }
        let state_id = """";
        $('select#state option:selected').each(function () {
            state_id += $(this).val() + "","";
        });
        state_id = state_id != """" ? state_id.slice(0, -1) : state_id;

        let spv = """";
        $('select#spv option:selected').each(function () {
            spv += $(this).val() + "","";
        });
        spv = spv != """" ? spv.slice(0, -1) : spv;
        if (state_id != """" || spv != """") {
             site_ids = """);
#nullable restore
#line 915 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindGenReport.cshtml"
                    Write(Html.Raw(windSiteList.TrimEnd(',')));

#line default
#line hidden
#nullable disable
            WriteLiteral("\";\r\n        }\r\n        $.ajax({\r\n            type: \"POST\",\r\n            url: \'");
#nullable restore
#line 919 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindGenReport.cshtml"
             Write(Url.Action("GetSiteList", "WindReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?state=' + state_id + '&spv=' + spv + '&sitelist=' + site_ids,
            contentType: ""application/json; charset=utf-8"",
            datatype: ""html"",
            success: function (result, status, xhr)
            {
                var options = """";
                for (var k = 0; k < result.length; k++)
                {
                    options += '<option value=""' + result[k].site_master_id + '"">' + result[k].site + '</option>';
                }
                $(""#site"").multipleSelect('destroy');
                $(""#site"").html("""").html(options);
                $('select#site').multipleSelect({
                    ""minimumCountSelected"": 2,
                    ""placeholder"": ""Select Site(s)"",
                    filter:true
                });
            }
        });
         GetWTG(false);
    }
    function getSiteM(fliterVal)
    {
        let state_id = """";
        var site_ids = """";
        if (fliterVal == false)
        {
            site_ids = """);
#nullable restore
#line 946 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindGenReport.cshtml"
                   Write(Html.Raw(windSiteList.TrimEnd(',')));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""";
        }
         $('select#stateM option:selected').each(function () {
            state_id += $(this).val() + "","";
            //console.log($(this).val());
        });
        state_id = state_id != """" ? state_id.slice(0, -1) : state_id;
        let spv = """";
        $('select#spvM option:selected').each(function () {
            spv += $(this).val() + "","";
        });
        spv = spv != """" ? spv.slice(0, -1) : spv;
        if (state_id != """" || spv != """")
        {
             site_ids = """);
#nullable restore
#line 960 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindGenReport.cshtml"
                    Write(Html.Raw(windSiteList.TrimEnd(',')));

#line default
#line hidden
#nullable disable
            WriteLiteral("\";\r\n        }\r\n        $.ajax({\r\n            type: \"POST\",\r\n            url: \'");
#nullable restore
#line 964 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindGenReport.cshtml"
             Write(Url.Action("GetSiteList", "WindReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?state=' + state_id + '&spv=' + spv+ '&sitelist=' + site_ids,
            contentType: ""application/json; charset=utf-8"",
            datatype: ""html"",
            success: function (result, status, xhr)
            {
                var options = """";
                for (var k = 0; k < result.length; k++)
                {
                    options += '<option value=""' + result[k].site_master_id + '"">' + result[k].site + '</option>';
                }
                $(""#siteM"").multipleSelect('destroy');
                $(""#siteM"").html("""").html(options);
                $('select#siteM').multipleSelect({
                    ""minimumCountSelected"": 2,
                    ""placeholder"": ""Select Site(s)"",
                    filter:true
                });
            }
        });
         GetWTGM(false);
    }
    function getSiteY(fliterVal)
    {
        let state_id = """";
        var site_ids = """";
        if (fliterVal == false)
        {
            site_ids = """);
#nullable restore
#line 991 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindGenReport.cshtml"
                   Write(Html.Raw(windSiteList.TrimEnd(',')));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""";
        }
        $('select#stateY option:selected').each(function () {
            state_id += $(this).val() + "","";
        });
        state_id = state_id != """" ? state_id.slice(0, -1) : state_id;

        let spv = """";
        $('select#spvY option:selected').each(function () {
            spv += $(this).val() + "","";
        });
        spv = spv != """" ? spv.slice(0, -1) : spv;
        $.ajax({
            type: ""POST"",
            url: '");
#nullable restore
#line 1005 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindGenReport.cshtml"
             Write(Url.Action("GetSiteList", "WindReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?state=' + state_id + '&spv=' + spv + '&sitelist=' + site_ids,
            contentType: ""application/json; charset=utf-8"",
            datatype: ""html"",
            success: function (result, status, xhr)
            {
                var options = """";
                for (var k = 0; k < result.length; k++)
                {
                    options += '<option value=""' + result[k].site_master_id + '"">' + result[k].site + '</option>';
                }
                $(""#siteY"").multipleSelect('destroy');
                $(""#siteY"").html("""").html(options);
                $('select#siteY').multipleSelect({
                    ""minimumCountSelected"": 2,
                    ""placeholder"": ""Select Site(s)"",
                    filter:true
                });
            }
        });
        GetWTGY(false);
    }
    function GetWTG(fliterVal)
    {
        let siteid = """";
        let state = """";
        $('select#state option:selected').each(function () {
            state +=");
            WriteLiteral(@" $(this).val() + "","";

        });
        let spv = """";
        $('select#spv option:selected').each(function () {
            spv += $(this).val() + "","";
            // console.log($(this).val());

        });
        if (fliterVal == false)
        {
            siteid = """);
#nullable restore
#line 1042 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindGenReport.cshtml"
                 Write(Html.Raw(windSiteList.TrimEnd(',')));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""";
        }
        else
        {
             $('select#site option:selected').each(function () {
                 siteid += $(this).val() + "","";
                 });
                siteid = siteid != """" ? siteid.slice(0, -1) : siteid;
        }
        $.ajax({
            type: ""GET"",
            url: '");
#nullable restore
#line 1053 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindGenReport.cshtml"
             Write(Url.Action("GetWTGList", "WindReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?siteid=' + siteid+ '&state=' + state + '&spv=' + spv,
            contentType: ""application/json; charset=utf-8"",
            datatype: ""html"",
            success: function (result, status, xhr)
            {
                var options = """";
                for (var k = 0; k < result.length; k++)
                {
                    options += '<option value=""' + result[k].wtg + '"">' + result[k].wtg + '</option>';
                }
                $(""#wtg"").multipleSelect('destroy');
                $(""#wtg"").html("""").html(options);
                $('select#wtg').multipleSelect({
                    ""minimumCountSelected"": 2,
                    ""placeholder"": ""Select WTG(s)"",
                    filter:true
                });
            }
        });
    }
    function GetWTGM(fliterVal)
    {
        let siteid = """";
        let state = """";
        $('select#stateM option:selected').each(function () {
            state += $(this).val() + "","";
        });
        let sp");
            WriteLiteral("v = \"\";\r\n        $(\'select#spvM option:selected\').each(function () {\r\n            spv += $(this).val() + \",\";\r\n        });\r\n        if (fliterVal == false)\r\n        {\r\n             siteid = \"");
#nullable restore
#line 1086 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindGenReport.cshtml"
                  Write(Html.Raw(windSiteList.TrimEnd(',')));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""";
        }
        else
        {
             $('select#siteM option:selected').each(function () {
                 siteid += $(this).val() + "","";
                 });
                siteid = siteid != """" ? siteid.slice(0, -1) : siteid;
        }
        $.ajax({
            type: ""GET"",
            url: '");
#nullable restore
#line 1097 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindGenReport.cshtml"
             Write(Url.Action("GetWTGList", "WindReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?siteid=' + siteid + '&state=' + state + '&spv=' + spv,
            contentType: ""application/json; charset=utf-8"",
            datatype: ""html"",
            success: function (result, status, xhr)
            {
                var options = """";
                for (var k = 0; k < result.length; k++)
                {
                    options += '<option value=""' + result[k].wtg + '"">' + result[k].wtg + '</option>';
                }
                $(""#wtgM"").multipleSelect('destroy');
                $(""#wtgM"").html("""").html(options);
                $('select#wtgM').multipleSelect({
                    ""minimumCountSelected"": 2,
                    ""placeholder"": ""Select WTG(s)"",
                    filter:true
                });
            }
        });
    }
    function GetWTGY(fliterVal)
    {
        let siteid = """";
        let state = """";
        $('select#stateY option:selected').each(function () {
            state += $(this).val() + "","";
        });
        le");
            WriteLiteral("t spv = \"\";\r\n        $(\'select#spvY option:selected\').each(function () {\r\n            spv += $(this).val() + \",\";\r\n        });\r\n        if (fliterVal == false)\r\n        {\r\n             siteid = \"");
#nullable restore
#line 1130 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindGenReport.cshtml"
                  Write(Html.Raw(windSiteList.TrimEnd(',')));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""";
        }
        else
        {
            $('select#siteY option:selected').each(function () {
                siteid += $(this).val() + "","";
            });
                siteid = siteid != """" ? siteid.slice(0, -1) : siteid;
        }
        $.ajax({
            type: ""GET"",
            url: '");
#nullable restore
#line 1141 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindGenReport.cshtml"
             Write(Url.Action("GetWTGList", "WindReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?siteid=' + siteid + '&state=' + state + '&spv=' + spv,
            contentType: ""application/json; charset=utf-8"",
            datatype: ""html"",
            success: function (result, status, xhr)
            {
                var options = """";
                for (var k = 0; k < result.length; k++)
                {
                    options += '<option value=""' + result[k].wtg + '"">' + result[k].wtg + '</option>';
                }
                $(""#wtgY"").multipleSelect('destroy');
                $(""#wtgY"").html("""").html(options);
                $('select#wtgY').multipleSelect({
                    ""minimumCountSelected"": 2,
                    ""placeholder"": ""Select WTG(s)"",
                    filter:true
                });
            }
        });
    }
     function getCutomeGroup()
    {
        $.ajax({
            type: ""POST"",
            url: '");
#nullable restore
#line 1165 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindGenReport.cshtml"
             Write(Url.Action("GetCustomGroup", "WindReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"?siteType=2',
            contentType: ""application/json; charset=utf-8"",
            datatype: ""html"",
            success: function (result, status, xhr)
            {
                var options = """";
                for (var k = 0; k < result.length; k++)
                {
                    options += '<option value=""' + result[k].site_ids + '"">' + result[k].cust_group + '</option>';
                }
                $(""#cust_daily_group"").multipleSelect('destroy');
                $(""#cust_daily_group"").html("""").html(options);
                $('select#cust_daily_group').multipleSelect({
                    ""minimumCountSelected"": 2,
                    ""placeholder"": ""Select Group(s)"",
                    filter:true
                });
                $(""#custM_group"").multipleSelect('destroy');
                $(""#custM_group"").html("""").html(options);
                $('select#custM_group').multipleSelect({
                    ""minimumCountSelected"": 2,
                    ""plac");
            WriteLiteral(@"eholder"": ""Select Group(s)"",
                    filter: true
                });
                $(""#customY_group"").multipleSelect('destroy');
                $(""#customY_group"").html("""").html(options);
                $('select#customY_group').multipleSelect({
                    ""minimumCountSelected"": 2,
                    ""placeholder"": ""Select Group(s)"",
                    filter: true
                });
            }
        });
    }

    function GetDailyGenReport()
    {
        var ReportType = $(""input[name='daily']:checked"").val();
        if (ReportType == ""WTG"")
        {
            GetDailyGenReportWTGWise();
        }
        else
        {
            GetDailyGenReportSiteWise();
        }
    }
    // Daily Gen Report WTG WIse
    function GetDailyGenReportWTGWise()
    {
        var daterange = $('#daterange').val();
        var arr1 = new Array();
        arr1 = daterange.split(""-"");
        var fromDate = moment(arr1[0], 'DD/MM/YYYY').format('YYYY-MM-");
            WriteLiteral(@"DD');
        var toDate = moment(arr1[1], 'DD/MM/YYYY').format('YYYY-MM-DD');
        var country = $('select#country option:selected').val();
        //var state = $('select#state option:selected').val();

        let site= """";
        let spv = """";
        let wtg = """";
        let state = """";
        $('select#site option:selected').each(function () {
            site += $(this).val() + "","";
        });
        site = site != """" ? site.slice(0, -1) : site;
        if (!site)
        {
            $('select#state option:selected').each(function () {
                state +=  $(this).val() + "","";
            });
            state = state != """" ? state.slice(0, -1) : state;
            $('select#spv option:selected').each(function () {
                spv += $(this).val() + "","";
            });
            spv = spv != """" ? spv.slice(0, -1) : spv;
        }
        $('select#wtg option:selected').each(function () {
            wtg +=  $(this).val() + "","";
        });
        wtg = ");
            WriteLiteral(@"wtg != """" ? wtg.slice(0, -1) : wtg;
        if (userRole == ""User"" && site == """")
        {
            site = windUserAccess;
        }
        var reportType = ""WTG"";
        var reporthead = ""WTG Wise Report"";
        document.getElementById(""loaderD"").style.display = 'flex';
        $.ajax({
            type: ""GET"",
            url: '");
#nullable restore
#line 1255 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindGenReport.cshtml"
             Write(Url.Action("GetWindDailyGenerationReportWTGWise", "WindReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?fromDate=' + fromDate + '&toDate=' + toDate + '&country=' + country + '&state=' + state + '&spv=' + spv + '&site=' + site + '&wtg=' + wtg,
            contentType: ""application/json; charset=utf-8"",
            datatype: ""JSON"",
            success: function (result, status, xhr) {

                //var tbl = '<div class=""text-center""><h5></h5></div>';
                var tbl = '<table id=""example1""  class=""table table-bordered table-striped"" style=""width: 220%;"">';
                tbl += '<thead class=""tbl-head""><tr>';
                if (userColumnId.includes(columnMap[""Date""][0]) || columnMap[""Date""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Date</th>';
                }
                if (userColumnId.includes(columnMap[""Country""][0]) || columnMap[""Country""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Country</th>';
                }
                if (userColumnId.includes(columnMap[""State""][0]) || columnMap[""State""][1] == 1 || isAdmin == 1) {
     ");
            WriteLiteral(@"               tbl += '<th>State</th>';
                }
                if (userColumnId.includes(columnMap[""SPV""][0]) || columnMap[""SPV""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>SPV</th>';
                }
                if (userColumnId.includes(columnMap[""Site""][0]) || columnMap[""Site""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Site</th>';
                }
                if (userColumnId.includes(columnMap[""WTG""][0]) || columnMap[""WTG""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>WTG</th>';
                }
                if (userColumnId.includes(columnMap[""Wind_Ms""][0]) || columnMap[""Wind_Ms""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Wind<br>(m/s)</th>';
                }
                if (userColumnId.includes(columnMap[""Kwh""][0]) || columnMap[""Kwh""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>kWh</th>';
                }
                if (userColumnId.includes(columnMap[""PLF""][0]) || columnM");
            WriteLiteral(@"ap[""PLF""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>PLF<br>(%)</th>';
                }
                if (userColumnId.includes(columnMap[""MA_ACT""][0]) || columnMap[""MA_ACT""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>MA_ACT<br>(%)</th>';
                }
                if (userColumnId.includes(columnMap[""MA_Con""][0]) || columnMap[""MA_Con""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>MA_CON<br>(%)</th>';
                }
                if (userColumnId.includes(columnMap[""IGA""][0]) || columnMap[""IGA""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>IGA<br>(%)</th>';
                }
                if (userColumnId.includes(columnMap[""EGA_A""][0]) || columnMap[""EGA_A""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGA_A<br>(%) <span class=""information"">i<span></th>';
                }
                if (userColumnId.includes(columnMap[""EGA_B""][0]) || columnMap[""EGA_B""][1] == 1 || isAdmin == 1) {
                   ");
            WriteLiteral(@" tbl += '<th>EGA_B<br>(%) <span class=""information"">i<span></th>';
                }
                if (userColumnId.includes(columnMap[""EGA_C""][0]) || columnMap[""EGA_C""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGA_C<br>(%) <span class=""information"">i<span></th>';
                }
                if (userColumnId.includes(columnMap[""Gen_Hrs""][0]) || columnMap[""Gen_Hrs""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Gen_Hrs</th>';
                }
                if (userColumnId.includes(columnMap[""Lull_hrs""][0]) || columnMap[""Lull_hrs""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Lull_Hrs</th>';
                }
                if (userColumnId.includes(columnMap[""USMH""][0]) || columnMap[""USMH""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>USMH</th>';
                }
                if (userColumnId.includes(columnMap[""SMH""][0]) || columnMap[""SMH""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>SMH</th>';
         ");
            WriteLiteral(@"       }
                if (userColumnId.includes(columnMap[""Others""][0]) || columnMap[""Others""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Others</th>';
                }
                if (userColumnId.includes(columnMap[""IGBDH""][0]) || columnMap[""IGBDH""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>IGBDH</th>';
                }
                if (userColumnId.includes(columnMap[""EGBDH""][0]) || columnMap[""EGBDH""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGBDH</th>';
                }
                if (userColumnId.includes(columnMap[""LS""][0]) || columnMap[""LS""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>LS</th>';
                }
                if (userColumnId.includes(columnMap[""Total_BD""][0]) || columnMap[""Total_BD""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Total_BD</th>';
                }
                if (userColumnId.includes(columnMap[""USMH_Loss""][0]) || columnMap[""USMH_Loss""][1] == 1 || isAdm");
            WriteLiteral(@"in == 1) {
                    tbl += '<th>USMH_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""SMH_Loss""][0]) || columnMap[""SMH_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>SMH_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""Others_Loss""][0]) || columnMap[""Others_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Others_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""IGBDH_Loss""][0]) || columnMap[""IGBDH_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>IGBDH_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""EGBDH_Loss""][0]) || columnMap[""EGBDH_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGBDH_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""LS_Loss""][0]) || columnMap[""LS_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>LS_Loss</th>';");
            WriteLiteral(@"
                }
                if (userColumnId.includes(columnMap[""Total_Loss""][0]) || columnMap[""Total_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Total_Loss</th>';
                }
                tbl += '</tr></thead>';
                if (result.length > 0)
                {
                    exceldata1 = result;
                    var total_losses = 0;
                    var total_hourse = 0;
                    for (var i = 0; i < result.length; i++) {

                        total_losses = Math.abs(parseFloat(result[i].usmh_loss)) + Math.abs(parseFloat(result[i].smh_loss)) + Math.abs(parseFloat(result[i].others_loss)) + Math.abs(parseFloat(result[i].igbdh_loss)) + Math.abs(parseFloat(result[i].egbdh_loss)) + Math.abs(parseFloat(result[i].loadShedding_loss));
                        total_hourse = result[i].unschedule_num + result[i].schedule_num + result[i].others_num + result[i].igbdh_num + result[i].egbdh_num + result[i].load_shedding_num;
              ");
            WriteLiteral(@"          tbl += '<tr>';
                        if (userColumnId.includes(columnMap[""Date""][0]) || columnMap[""Date""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left""  style=""text-wrap: nowrap;"">' + result[i].date.split(""T"")[0].split(""-"").reverse().join(""-""); + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Country""][0]) || columnMap[""Country""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"">' + result[i].country + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""State""][0]) || columnMap[""State""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"">' + result[i].state + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""SPV""][0]) || columnMap[""SPV""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left""  style=""text-wrap: nowra");
            WriteLiteral(@"p;"">' + result[i].spv + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Site""][0]) || columnMap[""Site""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"">' + result[i].site + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""WTG""][0]) || columnMap[""WTG""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"">' + result[i].wtg + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Wind_Ms""][0]) || columnMap[""Wind_Ms""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].wind_speed.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Kwh""][0]) || columnMap[""Kwh""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].kwh.toFixed(2) + '</td>';
            ");
            WriteLiteral(@"            }
                        if (userColumnId.includes(columnMap[""PLF""][0]) || columnMap[""PLF""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].plf.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""MA_ACT""][0]) || columnMap[""MA_ACT""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ma_actual.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""MA_Con""][0]) || columnMap[""MA_Con""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ma_contractual.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""IGA""][0]) || columnMap[""IGA""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].iga.toFixed(2) + '</td>';
                       ");
            WriteLiteral(@" }
                        if (userColumnId.includes(columnMap[""EGA_A""][0]) || columnMap[""EGA_A""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ega.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGA_B""][0]) || columnMap[""EGA_B""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ega_b.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGA_C""][0]) || columnMap[""EGA_C""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ega_c.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Gen_Hrs""][0]) || columnMap[""Gen_Hrs""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].production_hrs.toFixed(2) + '</td>';
                        }
 ");
            WriteLiteral(@"                       if (userColumnId.includes(columnMap[""Lull_hrs""][0]) || columnMap[""Lull_hrs""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].lull_hrs.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""USMH""][0]) || columnMap[""USMH""][1] == 1 || isAdmin == 1) {
                            tbl += '<td  class=""text-right"">' + result[i].unschedule_num.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""SMH""][0]) || columnMap[""SMH""][1] == 1 || isAdmin == 1) {
                            tbl += '<td  class=""text-right"">' + result[i].schedule_num.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Others""][0]) || columnMap[""Others""][1] == 1 || isAdmin == 1) {
                            tbl += '<td  class=""text-right"">' + result[i].others_num.toFixed(2) + '</td>';
               ");
            WriteLiteral(@"         }
                        if (userColumnId.includes(columnMap[""IGBDH""][0]) || columnMap[""IGBDH""][1] == 1 || isAdmin == 1) {
                            tbl += '<td  class=""text-right"">' + result[i].igbdh_num.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGBDH""][0]) || columnMap[""EGBDH""][1] == 1 || isAdmin == 1) {
                            tbl += '<td  class=""text-right"">' + result[i].egbdh_num.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""LS""][0]) || columnMap[""LS""][1] == 1 || isAdmin == 1) {
                            tbl += '<td  class=""text-right"">' + result[i].load_shedding_num.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Total_BD""][0]) || columnMap[""Total_BD""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + total_hourse.toFixed(2) + '</td>';
           ");
            WriteLiteral(@"             }
                        if (userColumnId.includes(columnMap[""USMH_Loss""][0]) || columnMap[""USMH_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].usmh_loss)) * 1000000).toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""SMH_Loss""][0]) || columnMap[""SMH_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].smh_loss)) * 1000000).toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Others_Loss""][0]) || columnMap[""Others_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].others_loss)) * 1000000).toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""IGBDH_Loss""][0]) || columnMap[""IGBDH_Loss""][1] ");
            WriteLiteral(@"== 1 || isAdmin == 1) {
                            tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].igbdh_loss)) * 1000000).toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGBDH_Loss""][0]) || columnMap[""EGBDH_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].egbdh_loss)) * 1000000).toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""LS_Loss""][0]) || columnMap[""LS_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].loadShedding_loss)) * 1000000).toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Total_Loss""][0]) || columnMap[""Total_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(total_l");
            WriteLiteral(@"osses)) * 1000000).toFixed(2) + '</td>';
                        }                    
                        tbl += '</tr>';
                    }
                }
                else
                {
                    console.log(""Data not available"");

                }
                tbl += '</table>';
                $(""#reportsDaily"").html(tbl);
                $.fn.DataTable.ext.pager.numbers_length = 6;
                $('#example1').DataTable({
                    dom: 'Bfrtip',
                    title: '',
                    fixedHeader: true,
                    responsive: true,
                    scrollX: true,
                    lengthChange: false,
                    autoWidth: true,
                    paging: true,
                    searching: true,
                    ordering: true,
                    info: true,
                    fixedColumns: {
                        left: 6
                    },
                    pageLength: 50,
        ");
            WriteLiteral(@"            ""order"": [[4, ""asc""]],
                    buttons: [
                        {
                            extend: 'excel',
                            title: 'WTG Wise Daily Generation Report',
                            exportOptions: {
                                columns: ':visible',
                            }
                        },
                        {
                            extend: 'csv',
                            title: 'WTG Wise Daily Generation Report',
                            exportOptions: {
                                columns: ':visible'
                            }
                        },
                        'colvis',
                        {
                            text: '<span class=""fas fa-file-excel"" title=""Download from DB up to six decimal""></span>',
                            className: 'btn ml-1   ',
                            action: function () {
                                dailyexportToExcelwtgwise();
");
            WriteLiteral(@"                            }
                        },
                    ],
                    initComplete: function () {
                        this.api().columns().header().to$().each(function () {
                            if ($(this).text() == ""EGA_A(%) i"")
                            {
                                $(this).attr('title', 'External Grid Breakdown, Shutdown & Load Shedding')
                            }
                            if ($(this).text() == ""EGA_B(%) i"")
                            {
                                $(this).attr('title', 'External Grid Breakdown & Shutdown')
                            }
                            if ($(this).text() == ""EGA_C(%) i"")
                            {
                                $(this).attr('title', 'Load Shedding')
                            }
                        })
                    }
                });
                $("".dt-buttons"").addClass('btn-group flex-wrap');
                $(""");
            WriteLiteral(@".dt-buttons > button"").addClass('btn btn-secondary');
                $("".dataTables_filter> label >input"").addClass('form-control form-control-sm');
                $(document).on(""click"", ""div.dt-button-collection > div > button"", function () {
                    if ($(this).hasClass(""active""))
                    {
                        $(this).css(""background-color"", ""white"");
                    }
                    else
                    {
                        $(this).css(""background-color"", ""#31576d"");
                    }
                });
                document.getElementById(""loaderD"").style.display = 'none';
                //document.getElementById(""reportsDailyGroup"").style.display = 'none';
            }
        });
    }
   // -----------------------------------------------
    // Daily Gen Report Site WIse
    function GetDailyGenReportSiteWise()
    {
        var daterange = $('#daterange').val();
        var arr1 = new Array();
        arr1 = daterange.sp");
            WriteLiteral(@"lit(""-"");
        var fromDate = moment(arr1[0], 'DD/MM/YYYY').format('YYYY-MM-DD');
        var toDate = moment(arr1[1], 'DD/MM/YYYY').format('YYYY-MM-DD');
        var country = $('select#country option:selected').val();
        let state = """";
        $('select#state option:selected').each(function () {
            state += $(this).val() + "","";
        });
        state = state != """" ? state.slice(0, -1) : state;
        //console.log(""selected  states :"" + state);
        let spv = """";
        $('select#spv option:selected').each(function () {
            spv += $(this).val() + "","";
        });
        spv = spv != """" ? spv.slice(0, -1) : spv;
        let site = """";
        $('select#site option:selected').each(function () {
            site +=  $(this).val() + "","";
        });
        site = site != """" ? site.slice(0, -1) : site;
        let wtg = """";
        $('select#wtg option:selected').each(function () {
            wtg += $(this).val() + "","";
        });
        wtg = wtg !=");
            WriteLiteral(@" """" ? wtg.slice(0, -1) : wtg;
        if (userRole == ""User"" && site == """")
        {
            site = windUserAccess;
        }
        var reportType = ""WTG"";
        var reporthead = ""Site Wise Report"";
        document.getElementById(""loaderD"").style.display = 'flex';
        $.ajax({
            type: ""GET"",
            url: '");
#nullable restore
#line 1587 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindGenReport.cshtml"
             Write(Url.Action("GetWindDailyGenerationReportSiteWise", "WindReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?fromDate=' + fromDate + '&toDate=' + toDate + '&country=' + country + '&state=' + state + '&spv=' + spv + '&site=' + site + '&wtg=' + wtg + '&reportType=' + reportType,
            contentType: ""application/json; charset=utf-8"",
            datatype: ""JSON"",
            success: function (result, status, xhr) {
                //var tbl = '<div class=""text-center""><h5></h5></div>';
                var tbl = '<table id=""example1""  class=""table table-bordered table-striped"" style=""width: 220%;"">';
                tbl += '<thead class=""tbl-head""><tr>';
                if (userColumnId.includes(columnMap[""Date""][0]) || columnMap[""Date""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Date</th>';
                }
                if (userColumnId.includes(columnMap[""Country""][0]) || columnMap[""Country""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Country</th>';
                }
                if (userColumnId.includes(columnMap[""State""][0]) || columnMap[""State""][1] ==");
            WriteLiteral(@" 1 || isAdmin == 1) {
                    tbl += '<th>State</th>';
                }
                if (userColumnId.includes(columnMap[""SPV""][0]) || columnMap[""SPV""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>SPV</th>';
                }
                if (userColumnId.includes(columnMap[""Site""][0]) || columnMap[""Site""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Site</th>';
                }
                if (userColumnId.includes(columnMap[""Capacity""][0]) || columnMap[""Capacity""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Capacity<br>(MW)</th>';
                }
                if (userColumnId.includes(columnMap[""Wind_Ms""][0]) || columnMap[""Wind_Ms""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Wind<br>(m/s)</th>';
                }
                if (userColumnId.includes(columnMap[""Kwh""][0]) || columnMap[""Kwh""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>kWh</th>';
                }
                if (us");
            WriteLiteral(@"erColumnId.includes(columnMap[""PLF""][0]) || columnMap[""PLF""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>PLF<br>(%)</th>';
                }
                if (userColumnId.includes(columnMap[""MA_ACT""][0]) || columnMap[""MA_ACT""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>MA_ACT<br>(%)</th>';
                }
                if (userColumnId.includes(columnMap[""MA_Con""][0]) || columnMap[""MA_Con""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>MA_CON<br>(%)</th>';
                }
                if (userColumnId.includes(columnMap[""IGA""][0]) || columnMap[""IGA""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>IGA<br>(%)</th>';
                }
                if (userColumnId.includes(columnMap[""EGA_A""][0]) || columnMap[""EGA_A""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGA_A<br>(%) <span class=""information"">i<span></th>';
                }
                if (userColumnId.includes(columnMap[""EGA_B""][0]) || columnMap[""EGA_");
            WriteLiteral(@"B""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGA_B<br>(%) <span class=""information"">i<span></th>';
                }
                if (userColumnId.includes(columnMap[""EGA_C""][0]) || columnMap[""EGA_C""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGA_C<br>(%) <span class=""information"">i<span></th>';
                }
                if (userColumnId.includes(columnMap[""Gen_Hrs""][0]) || columnMap[""Gen_Hrs""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Gen_Hrs</th>';
                }
                if (userColumnId.includes(columnMap[""Lull_hrs""][0]) || columnMap[""Lull_hrs""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Lull_Hrs</th>';
                }
                if (userColumnId.includes(columnMap[""USMH""][0]) || columnMap[""USMH""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>USMH</th>';
                }
                if (userColumnId.includes(columnMap[""SMH""][0]) || columnMap[""SMH""][1] == 1 || isAdmin == 1) {
  ");
            WriteLiteral(@"                  tbl += '<th>SMH</th>';
                }
                if (userColumnId.includes(columnMap[""Others""][0]) || columnMap[""Others""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Others</th>';
                }
                if (userColumnId.includes(columnMap[""IGBDH""][0]) || columnMap[""IGBDH""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>IGBDH</th>';
                }
                if (userColumnId.includes(columnMap[""EGBDH""][0]) || columnMap[""EGBDH""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGBDH</th>';
                }
                if (userColumnId.includes(columnMap[""LS""][0]) || columnMap[""LS""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>LS</th>';
                }
                if (userColumnId.includes(columnMap[""Total_BD""][0]) || columnMap[""Total_BD""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Total_BD</th>';
                }
                if (userColumnId.includes(columnMap[""USMH_Lo");
            WriteLiteral(@"ss""][0]) || columnMap[""USMH_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>USMH_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""SMH_Loss""][0]) || columnMap[""SMH_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>SMH_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""Others_Loss""][0]) || columnMap[""Others_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Others_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""IGBDH_Loss""][0]) || columnMap[""IGBDH_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>IGBDH_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""EGBDH_Loss""][0]) || columnMap[""EGBDH_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGBDH_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""LS_Loss""][0]) || columnMap[""LS_Loss""][1] == 1 || isAdmin == 1)");
            WriteLiteral(@" {
                    tbl += '<th>LS_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""Total_Loss""][0]) || columnMap[""Total_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Total_Loss</th>';
                }
                //tbl += '<th>Date</th>';
                //tbl += '<th>Country</th>';
                //tbl += '<th>State</th>';
                //tbl += '<th>SPV</th>';
                //tbl += '<th>Site</th>';
                //tbl += '<th>Capacity<br>(MW)</th>';
                //tbl += '<th>Wind<br>(m/s)</th>';
                //tbl += '<th>kWh</th>';
                //tbl += '<th>PLF<br>(%)</th>';
                //tbl += '<th>MA_ACT<br>(%)</th>';
                //tbl += '<th>MA_CON<br>(%)</th>';
                //tbl += '<th>IGA<br>(%)</th>';
                //tbl += '<th>EGA_A<br>(%) <span class=""information"">i<span></th>';
                //tbl += '<th>EGA_B<br>(%) <span class=""information"">i<span></th>';
                //t");
            WriteLiteral(@"bl += '<th>EGA_C<br>(%) <span class=""information"">i<span></th>';
                //tbl += '<th>Gen_Hrs</th>';
                //tbl += '<th>Lull_Hrs</th>';
                //tbl += '<th>USMH</th>';
                //tbl += '<th>SMH</th>';
                //tbl += '<th>Others</th>';
                //tbl += '<th>IGBDH</th>';
                //tbl += '<th>EGBDH</th>';
                //tbl += '<th>LS</th>';
                //tbl += '<th>Total_BD</th>';

                //tbl += '<th>USMH_Loss</th>';
                //tbl += '<th>SMH_Loss</th>';
                //tbl += '<th>Others_Loss</th>';
                //tbl += '<th>IGBDH_Loss</th>';
                //tbl += '<th>EGBDH_Loss</th>';
                //tbl += '<th>LS_Loss</th>';
                //tbl += '<th>Total_Loss</th>';
                tbl += '</tr></thead>';
                if (result.length > 0)
                {
                    exceldata2 = result;
                    var total_losses = 0;
                    var total_hour");
            WriteLiteral(@"se = 0;
                    for (var i = 0; i < result.length; i++) {

                        //total_losses = Math.abs(parseFloat(result[i].usmh_loss)) + Math.abs(parseFloat(result[i].smh_loss)) + Math.abs(parseFloat(result[i].others_loss)) + Math.abs(parseFloat(result[i].igbdh_loss)) + Math.abs(parseFloat(result[i].egbdh_loss)) + Math.abs(parseFloat(result[i].loadShedding_loss));
                        total_losses = (parseFloat(result[i].usmh_loss)) + (parseFloat(result[i].smh_loss)) + (parseFloat(result[i].others_loss)) + (parseFloat(result[i].igbdh_loss)) + (parseFloat(result[i].egbdh_loss)) + (parseFloat(result[i].loadShedding_loss));

                        total_hourse = result[i].unschedule_num + result[i].schedule_num + result[i].others_num + result[i].igbdh_num + result[i].egbdh_num + result[i].load_shedding_num;

                        //var formattedDate = moment(result[i].date, 'YYYY/MM/DD').format('DD-MM-YYYY');
                        tbl += '<tr>';
                        if (us");
            WriteLiteral(@"erColumnId.includes(columnMap[""Date""][0]) || columnMap[""Date""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left""  style=""text-wrap: nowrap;"">' + result[i].date.split(""T"")[0].split(""-"").reverse().join(""-""); + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Country""][0]) || columnMap[""Country""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"">' + result[i].country + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""State""][0]) || columnMap[""State""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"">' + result[i].state + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""SPV""][0]) || columnMap[""SPV""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left""  style=""text-wrap: nowrap;"">' + result[i].spv + '</td>';
                      ");
            WriteLiteral(@"  }
                        if (userColumnId.includes(columnMap[""Site""][0]) || columnMap[""Site""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"">' + result[i].site + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Capacity""][0]) || columnMap[""Capacity""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].total_mw.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Wind_Ms""][0]) || columnMap[""Wind_Ms""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].wind_speed.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Kwh""][0]) || columnMap[""Kwh""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].kwh.toFixed(2) + '</td>';
                        }
              ");
            WriteLiteral(@"          if (userColumnId.includes(columnMap[""PLF""][0]) || columnMap[""PLF""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].plf.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""MA_ACT""][0]) || columnMap[""MA_ACT""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ma_actual.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""MA_Con""][0]) || columnMap[""MA_Con""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ma_contractual.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""IGA""][0]) || columnMap[""IGA""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].iga.toFixed(2) + '</td>';
                        }
                        i");
            WriteLiteral(@"f (userColumnId.includes(columnMap[""EGA_A""][0]) || columnMap[""EGA_A""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ega.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGA_B""][0]) || columnMap[""EGA_B""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ega_b.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGA_C""][0]) || columnMap[""EGA_C""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ega_c.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Gen_Hrs""][0]) || columnMap[""Gen_Hrs""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].production_hrs.toFixed(2) + '</td>';
                        }
                        if (us");
            WriteLiteral(@"erColumnId.includes(columnMap[""Lull_hrs""][0]) || columnMap[""Lull_hrs""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].lull_hrs.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""USMH""][0]) || columnMap[""USMH""][1] == 1 || isAdmin == 1) {
                            tbl += '<td  class=""text-right"">' + result[i].unschedule_num.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""SMH""][0]) || columnMap[""SMH""][1] == 1 || isAdmin == 1) {
                            tbl += '<td  class=""text-right"">' + result[i].schedule_num.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Others""][0]) || columnMap[""Others""][1] == 1 || isAdmin == 1) {
                            tbl += '<td  class=""text-right"">' + result[i].others_num.toFixed(2) + '</td>';
                        }
                 ");
            WriteLiteral(@"       if (userColumnId.includes(columnMap[""IGBDH""][0]) || columnMap[""IGBDH""][1] == 1 || isAdmin == 1) {
                            tbl += '<td  class=""text-right"">' + result[i].igbdh_num.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGBDH""][0]) || columnMap[""EGBDH""][1] == 1 || isAdmin == 1) {
                            tbl += '<td  class=""text-right"">' + result[i].egbdh_num.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""LS""][0]) || columnMap[""LS""][1] == 1 || isAdmin == 1) {
                            tbl += '<td  class=""text-right"">' + result[i].load_shedding_num.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Total_BD""][0]) || columnMap[""Total_BD""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + total_hourse.toFixed(2) + '</td>';
                        }
             ");
            WriteLiteral(@"           if (userColumnId.includes(columnMap[""USMH_Loss""][0]) || columnMap[""USMH_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].usmh_loss)) * 1000000).toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""SMH_Loss""][0]) || columnMap[""SMH_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].smh_loss)) * 1000000).toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Others_Loss""][0]) || columnMap[""Others_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].others_loss)) * 1000000).toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""IGBDH_Loss""][0]) || columnMap[""IGBDH_Loss""][1] == 1 || isAdmin == 1) {
    ");
            WriteLiteral(@"                        tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].igbdh_loss)) * 1000000).toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGBDH_Loss""][0]) || columnMap[""EGBDH_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].egbdh_loss)) * 1000000).toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""LS_Loss""][0]) || columnMap[""LS_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].loadShedding_loss)) * 1000000).toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Total_Loss""][0]) || columnMap[""Total_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(total_losses)) * 1000000).toFixed(2)");
            WriteLiteral(@" + '</td>';
                        }
                        //tbl += '<td class=""text-left""  style=""text-wrap: nowrap;"">' + result[i].date.split(""T"")[0].split(""-"").reverse().join(""-""); + '</td>';
                        //tbl += '<td class=""text-left"">' + result[i].country + '</td>';
                        //tbl += '<td class=""text-left"">' + result[i].state + '</td>';
                        //tbl += '<td class=""text-left""  style=""text-wrap: nowrap;"">' + result[i].spv + '</td>';
                        //tbl += '<td class=""text-left"">' + result[i].site + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].total_mw.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].wind_speed.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].kwh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].plf.toFixed(2) + '</td>';
                        //tbl += '<td cl");
            WriteLiteral(@"ass=""text-right"">' + result[i].ma_actual.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].ma_contractual.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].iga.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].ega.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].ega_b.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].ega_c.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].grid_hrs.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].lull_hrs.toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + result[i].unschedule_num.toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + result[i].schedule_num.toFixed(2) + '</td>';
                        //tbl +");
            WriteLiteral(@"= '<td  class=""text-right"">' + result[i].others_num.toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + result[i].igbdh_num.toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + result[i].egbdh_num.toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + result[i].load_shedding_num.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + total_hourse.toFixed(2) + '</td>';

                        //tbl += '<td  class=""text-right"">' + result[i].usmh_loss.toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + result[i].smh_loss.toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + result[i].others_loss.toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + result[i].igbdh_loss.toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + result[i].egbdh_loss.toFixed(2) + '</td>';");
            WriteLiteral(@"
                        //tbl += '<td  class=""text-right"">' + result[i].load_Shedding_loss.toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + result[i].total_loss.toFixed(2) + '</td>';
                        tbl += '<td  class=""text-right"">' + ((parseFloat(result[i].usmh_loss)*-1) * 1000000).toFixed(2) + '</td>';
                        tbl += '<td  class=""text-right"">' + ((parseFloat(result[i].smh_loss)*-1) * 1000000).toFixed(2) + '</td>';
                        tbl += '<td  class=""text-right"">' + ((parseFloat(result[i].others_loss)*-1) * 1000000).toFixed(2) + '</td>';
                        tbl += '<td  class=""text-right"">' + ((parseFloat(result[i].igbdh_loss)*-1) * 1000000).toFixed(2) + '</td>';
                        tbl += '<td  class=""text-right"">' + ((parseFloat(result[i].egbdh_loss)*-1) * 1000000).toFixed(2) + '</td>';
                        tbl += '<td  class=""text-right"">' + ((parseFloat(result[i].loadShedding_loss)*-1) * 1000000).toFixed(2) + '</td>';
");
            WriteLiteral(@"                        tbl += '<td  class=""text-right"">' + ((parseFloat(total_losses)*-1) * 1000000).toFixed(2) + '</td>';

                        //tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].usmh_loss)) * 1000000).toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].smh_loss)) * 1000000).toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].others_loss)) * 1000000).toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].igbdh_loss)) * 1000000).toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].egbdh_loss)) * 1000000).toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].loadShedding_loss)) * 1000000).toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-r");
            WriteLiteral(@"ight"">' + (Math.abs(parseFloat(total_losses)) * 1000000).toFixed(2) + '</td>';

                        tbl += '</tr>';
                        //console.log(typeof (result[i].usmh_loss));
                        //console.log(Math.abs(parseFloat(result[i].usmh_loss)));
                        //console.log(Math.abs(parseFloat(result[i].usmh_loss)).toFixed(2));
                    }
                }
                else
                {
                    console.log(""Data not available"");

                }
                tbl += '</table>';
                $(""#reportsDaily"").html(tbl);
                $.fn.DataTable.ext.pager.numbers_length = 6;
                $('#example1').DataTable({
                    dom: 'Bfrtip',
                    title: 'ImportApproval',
                    fixedHeader: true,
                    responsive: true,
                    scrollX: true,
                    lengthChange: false,
                    autoWidth: true,
                    paging: ");
            WriteLiteral(@"true,
                    searching: true,
                    ordering: true,
                    info: true,
                    fixedColumns: {
                        left: 6
                    },
                    pageLength: 50,
                    ""order"": [[4, ""asc""]],
                    buttons: [
                        {
                            extend: 'excel',
                            title: 'Site Wise Daily Generation Report',
                            exportOptions: {
                                columns: ':visible',
                               /* exportOptions: {
                                    rows: { selected: false, search: 'none', order: 'applied', page: 'all', range: '' + cnt + '' }
                                }*/
                            }
                        },
                        {
                            extend: 'csv',
                            title: 'Site Wise Daily Generation Report',
                            expo");
            WriteLiteral(@"rtOptions: {
                                columns: ':visible'
                            }
                        },
                        'colvis',
                        {
                            text: '<span class=""fas fa-file-excel"" title=""Download from DB up to six decimal""></span>',
                            className: 'btn ml-1   ',
                            action: function ()
                            {
                                dailyexportToExcelsitewise();
                            }
                        },
                    ],
                    initComplete: function () {
                        this.api().columns().header().to$().each(function () {
                            if ($(this).text() == ""EGA_A(%) i"")
                            {
                                $(this).attr('title', 'External Grid Breakdown, Shutdown & Load Shedding')
                            }
                            if ($(this).text() == ""EGA_B(%) i"")
     ");
            WriteLiteral(@"                       {
                                $(this).attr('title', 'External Grid Breakdown & Shutdown')
                            }
                            if ($(this).text() == ""EGA_C(%) i"")
                            {
                                $(this).attr('title', 'Load Shedding')
                            }
                        })
                    }
                });
                $("".dt-buttons"").addClass('btn-group flex-wrap');
                $("".dt-buttons > button"").addClass('btn btn-secondary');
                $("".dataTables_filter> label >input"").addClass('form-control form-control-sm');
                $(""dataTables_filter"").css(""margin-top"", ""-35px"");
                $(document).on(""click"", ""div.dt-button-collection > div > button"", function () {
                    if ($(this).hasClass(""active""))
                    {
                        $(this).css(""background-color"", ""white"");
                    }
                    else
       ");
            WriteLiteral(@"             {
                        $(this).css(""background-color"", ""#31576d"");
                    }
                });
                document.getElementById(""loaderD"").style.display = 'none';
                //document.getElementById(""reportsDailyGroup"").style.display = 'none';
            }
        });
    }
    // -----------------------------------Monthly ---------------------//
    function GetMonthlyGenReport()
    {
        var ReportType = $(""input[name='monthly']:checked"").val();
        if (ReportType == ""WTG"")
        {
          GetMonthlyGenReportWTGWise();
        }
        else
        {
           GetMonthlyGenReportSiteWise();
        }
    }

    // Mothly Report WTG Wise
    function GetMonthlyGenReportWTGWise()
    {
        let site  = """";
        let spv   = """";
        let wtg   = """";
        let state = """";
        $('select#siteM option:selected').each(function () {
            site += $(this).val() + "","";
        });
        site = site != """" ?");
            WriteLiteral(@" site.slice(0, -1) : site;
        if (!site)
        {
            $('select#stateM option:selected').each(function () {
                state +=  $(this).val() + "","";
            });
            state = state != """" ? state.slice(0, -1) : state;

            $('select#spvM option:selected').each(function () {
                spv += $(this).val() + "","";
            });
            spv = spv != """" ? spv.slice(0, -1) : spv;

        }

        $('select#wtgM option:selected').each(function () {
            wtg +=  $(this).val() + "","";
        });
        wtg = wtg != """" ? wtg.slice(0, -1) : wtg;

        var country = $('select#countryM option:selected').val();
        var year = $('select#fyM option:selected').val();
        if (year == """")
        {
            alert(""Please select financial year"");
            return false;
        }
        let month = """";
        $('select#monthM option:selected').each(function () {
            month+= $(this).val()+"","";
        });
        m");
            WriteLiteral(@"onth = month != """" ? month.slice(0, -1) : month;
        if (userRole == ""User"" && site == """")
        {
            site = windUserAccess;
        }
        var arr1 = new Array();
        arr1 = year.split(""-"");
        var fromDate = """";
        var reportType = ""WTG"";
        var reporthead = ""WTG Wise Report"";
        document.getElementById(""loaderM"").style.display = 'flex';
        $.ajax({
            type: ""GET"",
            url: '");
#nullable restore
#line 2038 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindGenReport.cshtml"
             Write(Url.Action("GetWindMonthlyGenerationReportWTGWise", "WindReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?fy=' + arr1[0] + '&month=' + month + '&country=' + country + '&state=' + state + '&spv=' + spv + '&site=' + site + '&wtg=' + wtg + '&reportType=' + reportType,
            contentType: ""application/json; charset=utf-8"",
            datatype: ""JSON"",
            success: function (result, status, xhr) {

                //var tbl = '<div class=""text-center""><h5></h5></div>';
                var tbl = '<table id=""example2""  class=""table table-bordered table-striped"" style=""width: 220%;"">';
                tbl += '<thead class=""tbl-head""><tr>';
                if (userColumnId.includes(columnMap[""FY""][0]) || columnMap[""FY""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>FY</th>';                    
                }
                if (userColumnId.includes(columnMap[""Month""][0]) || columnMap[""Month""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Month</th>';                    
                }
                if (userColumnId.includes(columnMap[""Country""][0]) || c");
            WriteLiteral(@"olumnMap[""Country""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Country</th>';                    
                }
                if (userColumnId.includes(columnMap[""State""][0]) || columnMap[""State""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>State</th>';                    
                }
                if (userColumnId.includes(columnMap[""SPV""][0]) || columnMap[""SPV""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>SPV</th>';                    
                }
                if (userColumnId.includes(columnMap[""Site""][0]) || columnMap[""Site""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Site</th>';                    
                }
                if (userColumnId.includes(columnMap[""WTG""][0]) || columnMap[""WTG""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>WTG</th>';                    
                }
                if (userColumnId.includes(columnMap[""Wind_Ms""][0]) || columnMap[""Wind_Ms""][1] == 1 || is");
            WriteLiteral(@"Admin == 1) {
                    tbl += '<th>Wind<br>(m/s)</th>';                    
                }
                if (userColumnId.includes(columnMap[""Kwh""][0]) || columnMap[""Kwh""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>kWh</th>';                    
                }
                if (userColumnId.includes(columnMap[""PLF""][0]) || columnMap[""PLF""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>PLF<br>(%)</th>';                    
                }
                if (userColumnId.includes(columnMap[""MA_ACT""][0]) || columnMap[""MA_ACT""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>MA_ACT<br>(%)</th>';                    
                }
                if (userColumnId.includes(columnMap[""MA_Con""][0]) || columnMap[""MA_Con""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>MA_CON<br>(%)</th>';                    
                }
                if (userColumnId.includes(columnMap[""IGA""][0]) || columnMap[""IGA""][1] == 1 || isAdmin");
            WriteLiteral(@" == 1) {
                    tbl += '<th>IGA<br>(%)</th>';
                }
                if (userColumnId.includes(columnMap[""EGA_A""][0]) || columnMap[""EGA_A""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGA_A<br>(%) <span class=""information"">i<span></th>';                    
                }
                if (userColumnId.includes(columnMap[""EGA_B""][0]) || columnMap[""EGA_B""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGA_B<br>(%) <span class=""information"">i<span></th>';                    
                }
                if (userColumnId.includes(columnMap[""EGA_C""][0]) || columnMap[""EGA_C""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGA_C<br>(%) <span class=""information"">i<span></th>';                    
                }
                if (userColumnId.includes(columnMap[""Lull_hrs""][0]) || columnMap[""Lull_hrs""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Gen_Hrs</th>';                    
                }
             ");
            WriteLiteral(@"   if (userColumnId.includes(columnMap[""Country""][0]) || columnMap[""Country""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Lull_Hrs</th>';                    
                }
                if (userColumnId.includes(columnMap[""USMH""][0]) || columnMap[""USMH""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>USMH</th>';                    
                }
                if (userColumnId.includes(columnMap[""SMH""][0]) || columnMap[""SMH""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>SMH</th>';                    
                }
                if (userColumnId.includes(columnMap[""Others""][0]) || columnMap[""Others""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Others</th>';                    
                }
                if (userColumnId.includes(columnMap[""IGBDH""][0]) || columnMap[""IGBDH""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>IGBDH</th>';                    
                }
                if (userColumnId.inc");
            WriteLiteral(@"ludes(columnMap[""EGBDH""][0]) || columnMap[""EGBDH""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGBDH</th>';                    
                }
                if (userColumnId.includes(columnMap[""LS""][0]) || columnMap[""LS""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>LS</th>';                    
                }
                if (userColumnId.includes(columnMap[""Total_BD""][0]) || columnMap[""Total_BD""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Total_BD</th>';                    
                }
                if (userColumnId.includes(columnMap[""USMH_Loss""][0]) || columnMap[""USMH_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>USMH_Loss</th>';                    
                }
                if (userColumnId.includes(columnMap[""SMH_Loss""][0]) || columnMap[""SMH_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>SMH_Loss</th>';                    
                }
                if (userColumnId.includ");
            WriteLiteral(@"es(columnMap[""Others_Loss""][0]) || columnMap[""Others_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Others_Loss</th>';                    
                }
                if (userColumnId.includes(columnMap[""IGBDH_Loss""][0]) || columnMap[""IGBDH_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>IGBDH_Loss</th>';                    
                }
                if (userColumnId.includes(columnMap[""EGBDH_Loss""][0]) || columnMap[""EGBDH_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGBDH_Loss</th>';                    
                }
                if (userColumnId.includes(columnMap[""LS_Loss""][0]) || columnMap[""LS_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>LS_Loss</th>';                    
                }
                if (userColumnId.includes(columnMap[""Total_Loss""][0]) || columnMap[""Total_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Total_Loss</th>';
                }
              ");
            WriteLiteral(@"  tbl += '</tr></thead>';
                if (result.length > 0)
                {
                    exceldata3 = result;
                    var total_losses = 0;
                    var total_hourse = 0;
                    for (var i = 0; i < result.length; i++) {

                        total_losses = Math.abs(parseFloat(result[i].usmh_loss)) + Math.abs(parseFloat(result[i].smh_loss)) + Math.abs(parseFloat(result[i].others_loss)) + Math.abs(parseFloat(result[i].igbdh_loss)) + Math.abs(parseFloat(result[i].egbdh_loss)) + Math.abs(parseFloat(result[i].loadShedding_loss));

                        //total_hourse = result[i].unschedule_num + result[i].schedule_num + result[i].others_num + result[i].igbdh_num + result[i].egbdh_num + result[i].load_shedding_num;
                        total_hourse = result[i].unschedule_hrs + result[i].schedule_hrs + result[i].others + result[i].igbdh + result[i].egbdh + result[i].load_shedding;
                        //console.log(""Total BD"", total_hourse);
 ");
            WriteLiteral(@"                       //var formattedDate = moment(result[i].date, 'YYYY/MM/DD').format('DD-MM-YYYY');
                        tbl += '<tr>';
                        if (userColumnId.includes(columnMap[""FY""][0]) || columnMap[""FY""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"" style=""text-wrap: nowrap;"">' + year + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Month""][0]) || columnMap[""Month""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"">' + result[i].month + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Country""][0]) || columnMap[""Country""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"">' + result[i].country + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""State""][0]) || columnMap[""State""][1] == 1 || isAdmin == 1) {
                    ");
            WriteLiteral(@"        tbl += '<td class=""text-left"">' + result[i].state + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""SPV""][0]) || columnMap[""SPV""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"" style=""text-wrap: nowrap;"">' + result[i].spv + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Site""][0]) || columnMap[""Site""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"">' + result[i].site + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""WTG""][0]) || columnMap[""WTG""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"">' + result[i].wtg + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Wind_Ms""][0]) || columnMap[""Wind_Ms""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + resul");
            WriteLiteral(@"t[i].wind_speed.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Kwh""][0]) || columnMap[""Kwh""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].kwh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""PLF""][0]) || columnMap[""PLF""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].plf.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""MA_ACT""][0]) || columnMap[""MA_ACT""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ma_actual.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""MA_Con""][0]) || columnMap[""MA_Con""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ma_contrac");
            WriteLiteral(@"tual.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""IGA""][0]) || columnMap[""IGA""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].iga.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGA_A""][0]) || columnMap[""EGA_A""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ega.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGA_B""][0]) || columnMap[""EGA_B""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ega_b.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGA_C""][0]) || columnMap[""EGA_C""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ega_c.toFixed(2) + '</td>");
            WriteLiteral(@"';
                        }
                        if (userColumnId.includes(columnMap[""Lull_hrs""][0]) || columnMap[""Lull_hrs""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].grid_hrs.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Country""][0]) || columnMap[""Country""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].lull_hrs.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""USMH""][0]) || columnMap[""USMH""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].unschedule_hrs.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""SMH""][0]) || columnMap[""SMH""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].schedule_hrs.toFixed(2");
            WriteLiteral(@") + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Others""][0]) || columnMap[""Others""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].others.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""IGBDH""][0]) || columnMap[""IGBDH""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].igbdh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGBDH""][0]) || columnMap[""EGBDH""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].egbdh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""LS""][0]) || columnMap[""LS""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].load_shedding.toFixed(2) + '</td>'");
            WriteLiteral(@";
                        }
                        if (userColumnId.includes(columnMap[""Total_BD""][0]) || columnMap[""Total_BD""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + total_hourse.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""USMH_Loss""][0]) || columnMap[""USMH_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + ((parseFloat(result[i].usmh_loss) * -1) * 1000000).toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""SMH_Loss""][0]) || columnMap[""SMH_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + ((parseFloat(result[i].smh_loss) * -1) * 1000000).toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Others_Loss""][0]) || columnMap[""Others_Loss""][1] == 1 || isAdmin == 1) {
                 ");
            WriteLiteral(@"           tbl += '<td class=""text-right"">' + ((parseFloat(result[i].others_loss) * -1) * 1000000).toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""IGBDH_Loss""][0]) || columnMap[""IGBDH_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + ((parseFloat(result[i].igbdh_loss) * -1) * 1000000).toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGBDH_Loss""][0]) || columnMap[""EGBDH_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + ((parseFloat(result[i].egbdh_loss) * -1) * 1000000).toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""LS_Loss""][0]) || columnMap[""LS_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + ((parseFloat(result[i].loadShedding_loss) * -1) * 1000000).toFixed(2) + '</td>';
       ");
            WriteLiteral(@"                 }
                        if (userColumnId.includes(columnMap[""Total_Loss""][0]) || columnMap[""Total_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + ((parseFloat(total_losses)*-1) * 1000000).toFixed(2) + '</td>';
                        }
                        //tbl += '<td class=""text-left""  style=""text-wrap: nowrap;"">' + year + '</td>';
                        //tbl += '<td class=""text-left"">' + result[i].month + '</td>';
                        //tbl += '<td class=""text-left"">' + result[i].country + '</td>';
                        //tbl += '<td class=""text-left"">' + result[i].state + '</td>';
                        //tbl += '<td class=""text-left""  style=""text-wrap: nowrap;"">' + result[i].spv + '</td>';
                        //tbl += '<td class=""text-left"">' + result[i].site + '</td>';
                        //tbl += '<td class=""text-left"">' + result[i].wtg + '</td>';
                        //tbl += '<td class=""text-right"">'");
            WriteLiteral(@" + result[i].wind_speed.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].kwh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].plf.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].ma_actual.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].ma_contractual.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].iga.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].ega.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].ega_b.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].ega_c.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].grid_hrs.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i");
            WriteLiteral(@"].lull_hrs.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].unschedule_hrs.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].schedule_hrs.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].others.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].igbdh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].egbdh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].load_shedding.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + total_hourse.toFixed(2) + '</td>';

                        //tbl += '<td  class=""text-right"">' + result[i].usmh_loss.toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + result[i].smh_loss.toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right""");
            WriteLiteral(@">' + result[i].others_loss.toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + result[i].igbdh_loss.toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + result[i].egbdh_loss.toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + result[i].load_Shedding_loss.toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + result[i].total_loss.toFixed(2) + '</td>';

                        // tbl += '<td  class=""text-right"">' + ((parseFloat(result[i].usmh_loss) * -1) * 1000000).toFixed(2) + '</td>';
                        // tbl += '<td  class=""text-right"">' + ((parseFloat(result[i].smh_loss) * -1) * 1000000).toFixed(2) + '</td>';
                        // tbl += '<td  class=""text-right"">' + ((parseFloat(result[i].others_loss) * -1) * 1000000).toFixed(2) + '</td>';
                        // tbl += '<td  class=""text-right"">' + ((parseFloat(result[i].igbdh_loss) * -1) * 1000000).toFixed(2) + ");
            WriteLiteral(@"'</td>';
                        // tbl += '<td  class=""text-right"">' + ((parseFloat(result[i].egbdh_loss) * -1) * 1000000).toFixed(2) + '</td>';
                        // tbl += '<td  class=""text-right"">' + ((parseFloat(result[i].loadShedding_loss) * -1) * 1000000).toFixed(2) + '</td>';
                        // tbl += '<td  class=""text-right"">' + ((parseFloat(total_losses)*-1) * 1000000).toFixed(2) + '</td>';

                        //tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].usmh_loss)) * 1000000).toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].smh_loss)) * 1000000).toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].others_loss)) * 1000000).toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].igbdh_loss)) * 1000000).toFixed(2) + '</td>';
                        //tbl += '<td  clas");
            WriteLiteral(@"s=""text-right"">' + (Math.abs(parseFloat(result[i].egbdh_loss)) * 1000000).toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].loadShedding_loss)) * 1000000).toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(total_losses)) * 1000000).toFixed(2) + '</td>';
                        tbl += '</tr>';
                    }
                }
                else
                {
                    console.log(""Data not available"");
                }
               tbl += '</table>';
                $(""#reportsMonthly"").html(tbl);
                $.fn.DataTable.ext.pager.numbers_length = 6;
                $('#example2').DataTable({
                    dom: 'Bfrtip',
                    title: 'ImportApproval',
                    fixedHeader: true,
                    responsive: true,
                    scrollX: true,
                    lengthChange: false,
                    ");
            WriteLiteral(@"autoWidth: true,
                    paging: true,
                    searching: true,
                    ordering: true,
                    info: true,
                    autoWidth: true,
                    fixedColumns: {
                        left: 7
                    },
                    pageLength: 50,
                    ""order"": [[5, ""asc""]],
                    buttons: [
                        {
                            extend: 'excel',
                            title: 'WTG Wise Monthly Generation Report',
                            exportOptions: {
                                columns: ':visible',
                            }
                        },
                        {
                            extend: 'csv',
                            title: 'WTG Wise Monthly Generation Report',
                            exportOptions: {
                                columns: ':visible'
                            }
                        },
         ");
            WriteLiteral(@"               'colvis',
                        {
                            text: '<span class=""fas fa-file-excel"" title=""Download from DB up to six decimal""></span>',
                            className: 'btn ml-1   ',

                            action: function () {
                                monthlyexportToExcelwtgwise();
                            }
                        },
                    ],
                    initComplete: function () {
                        this.api().columns().header().to$().each(function () {
                            if ($(this).text() == ""EGA_A(%) i"")
                            {
                                $(this).attr('title', 'External Grid Breakdown, Shutdown & Load Shedding')
                            }
                            if ($(this).text() == ""EGA_B(%) i"")
                            {
                                $(this).attr('title', 'External Grid Breakdown & Shutdown')
                            }
           ");
            WriteLiteral(@"                 if ($(this).text() == ""EGA_C(%) i"")
                            {
                                $(this).attr('title', 'Load Shedding')
                            }
                        })
                    }
                });
                $("".dt-buttons"").addClass('btn-group flex-wrap');
                $("".dt-buttons > button"").addClass('btn btn-secondary');
                $("".dataTables_filter> label >input"").addClass('form-control form-control-sm');
                $(document).on(""click"", ""div.dt-button-collection > div > button"", function () {
                    if ($(this).hasClass(""active""))
                    {
                        $(this).css(""background-color"", ""white"");
                    }
                    else
                    {
                        $(this).css(""background-color"", ""#31576d"");
                    }
                });
                document.getElementById(""loaderM"").style.display = 'none';
                document");
            WriteLiteral(@".getElementById(""reportsMonthlyGroup"").style.display = 'none';
            }
        });
    }
    //------------------------------------
    // Mothly Report SIte Wise
    function GetMonthlyGenReportSiteWise()
    {
        let site  = """";
        let spv   = """";
        let wtg   = """";
        let state = """";
        $('select#siteM option:selected').each(function () {
            site += $(this).val() + "","";
        });
        site = site != """" ? site.slice(0, -1) : site;
        if (!site)
        {
            $('select#stateM option:selected').each(function () {
                state +=  $(this).val() + "","";
             });
            state = state != """" ? state.slice(0, -1) : state;
            $('select#spvM option:selected').each(function () {
                spv += $(this).val() + "","";
            });
            spv = spv != """" ? spv.slice(0, -1) : spv;
        }
        $('select#wtgM option:selected').each(function () {
            wtg +=  $(this).val() + "","";
   ");
            WriteLiteral(@"       });
        wtg = wtg != """" ? wtg.slice(0, -1) : wtg;
        var country = $('select#countryM option:selected').val();
        var fyyear = $('select#fyM option:selected').val();
        if (fyyear == """")
        {
            alert(""Please select financial year"");
            return false;
        }
        let month = """";
        $('select#monthM option:selected').each(function () {
            month+= $(this).val()+"","";
        });
        month = month != """" ? month.slice(0, -1) : month;
        if (userRole == ""User"" && site == """")
        {
            site = windUserAccess;
        }
        var arr1 = new Array();
        arr1 = fyyear.split(""-"");
        var fromDate = """";
        var reportType = ""WTG"";
        var reporthead = ""WTG Wise Report"";
        var cnt = 0;
        document.getElementById(""loaderM"").style.display = 'flex';
        $.ajax({
            type: ""GET"",
            url: '");
#nullable restore
#line 2442 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindGenReport.cshtml"
             Write(Url.Action("GetWindMonthlyGenerationReportSiteWise", "WindReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?fy=' + arr1[0] + '&month=' + month + '&country=' + country + '&state=' + state + '&spv=' + spv + '&site=' + site + '&wtg=' + wtg + '&reportType=' + reportType,
            contentType: ""application/json; charset=utf-8"",
            datatype: ""JSON"",
            success: function (result, status, xhr) {

                //var tbl = '<div class=""text-center""><h5></h5></div>';
                var tbl = '<table id=""example2""  class=""table table-bordered table-striped"" style=""width: 220%;"">';
                tbl += '<thead class=""tbl-head""><tr>';
                if (userColumnId.includes(columnMap[""FY""][0]) || columnMap[""FY""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>FY</th>';
                }
                if (userColumnId.includes(columnMap[""Month""][0]) || columnMap[""Month""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Month</th>';
                }
                if (userColumnId.includes(columnMap[""Country""][0]) || columnMap[""Country""][1] == 1 || isAdmin =");
            WriteLiteral(@"= 1) {
                    tbl += '<th>Country</th>';
                }
                if (userColumnId.includes(columnMap[""State""][0]) || columnMap[""State""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>State</th>';
                }
                if (userColumnId.includes(columnMap[""SPV""][0]) || columnMap[""SPV""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>SPV</th>';
                }
                if (userColumnId.includes(columnMap[""Site""][0]) || columnMap[""Site""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Site</th>';
                }
                if (userColumnId.includes(columnMap[""Capacity""][0]) || columnMap[""Capacity""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Capacity<br>(MW)</th>';
                }
                if (userColumnId.includes(columnMap[""Wind_Ms""][0]) || columnMap[""Wind_Ms""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Wind<br>(m/s)</th>';
                }
                if (userColum");
            WriteLiteral(@"nId.includes(columnMap[""Kwh""][0]) || columnMap[""Kwh""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>kWh</th>';
                }
                if (userColumnId.includes(columnMap[""PLF""][0]) || columnMap[""PLF""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>PLF<br>(%)</th>';
                }
                if (userColumnId.includes(columnMap[""MA_ACT""][0]) || columnMap[""MA_ACT""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>MA_ACT<br>(%)</th>';
                }
                if (userColumnId.includes(columnMap[""MA_Con""][0]) || columnMap[""MA_Con""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>MA_CON<br>(%)</th>';
                }
                if (userColumnId.includes(columnMap[""IGA""][0]) || columnMap[""IGA""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>IGA<br>(%)</th>';
                }
                if (userColumnId.includes(columnMap[""EGA_A""][0]) || columnMap[""EGA_A""][1] == 1 || isAdmin == 1) {
                    tb");
            WriteLiteral(@"l += '<th>EGA_A<br>(%) <span class=""information"">i<span></th>';
                }
                if (userColumnId.includes(columnMap[""EGA_B""][0]) || columnMap[""EGA_B""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGA_B<br>(%) <span class=""information"">i<span></th>';
                }
                if (userColumnId.includes(columnMap[""EGA_C""][0]) || columnMap[""EGA_C""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGA_C<br>(%) <span class=""information"">i<span></th>';
                }
                if (userColumnId.includes(columnMap[""Lull_hrs""][0]) || columnMap[""Lull_hrs""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Gen_Hrs</th>';
                }
                if (userColumnId.includes(columnMap[""Country""][0]) || columnMap[""Country""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Lull_Hrs</th>';
                }
                if (userColumnId.includes(columnMap[""USMH""][0]) || columnMap[""USMH""][1] == 1 || isAdmin == 1) {
          ");
            WriteLiteral(@"          tbl += '<th>USMH</th>';
                }
                if (userColumnId.includes(columnMap[""SMH""][0]) || columnMap[""SMH""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>SMH</th>';
                }
                if (userColumnId.includes(columnMap[""Others""][0]) || columnMap[""Others""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Others</th>';
                }
                if (userColumnId.includes(columnMap[""IGBDH""][0]) || columnMap[""IGBDH""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>IGBDH</th>';
                }
                if (userColumnId.includes(columnMap[""EGBDH""][0]) || columnMap[""EGBDH""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGBDH</th>';
                }
                if (userColumnId.includes(columnMap[""LS""][0]) || columnMap[""LS""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>LS</th>';
                }
                if (userColumnId.includes(columnMap[""Total_BD""][0]) || columnMap[""");
            WriteLiteral(@"Total_BD""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Total_BD</th>';
                }
                if (userColumnId.includes(columnMap[""USMH_Loss""][0]) || columnMap[""USMH_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>USMH_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""SMH_Loss""][0]) || columnMap[""SMH_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>SMH_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""Others_Loss""][0]) || columnMap[""Others_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Others_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""IGBDH_Loss""][0]) || columnMap[""IGBDH_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>IGBDH_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""EGBDH_Loss""][0]) || columnMap[""EGBDH_Loss""][1] == 1 || isAdmin == 1) {
                  ");
            WriteLiteral(@"  tbl += '<th>EGBDH_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""LS_Loss""][0]) || columnMap[""LS_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>LS_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""Total_Loss""][0]) || columnMap[""Total_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Total_Loss</th>';
                }
                //tbl += '<th>FY</th>';
                //tbl += '<th>Month</th>';
                //tbl += '<th>Country</th>';
                //tbl += '<th>State</th>';
                //tbl += '<th>SPV</th>';
                //tbl += '<th>Site</th>';
                //tbl += '<th>Capacity<br>(MW)</th>';
                //tbl += '<th>Wind<br>(m/s)</th>';
                //tbl += '<th>kWh</th>';
                //tbl += '<th>PLF<br>(%)</th>';
                //tbl += '<th>MA_ACT<br>(%)</th>';
                //tbl += '<th>MA_CON<br>(%)</th>';
                //tbl += '<th");
            WriteLiteral(@">IGA<br>(%)</th>';
                //tbl += '<th>EGA_A<br>(%) <span class=""information"">i<span></th>';
                //tbl += '<th>EGA_B<br>(%) <span class=""information"">i<span></th>';
                //tbl += '<th>EGA_C<br>(%) <span class=""information"">i<span></th>';
                //tbl += '<th>Gen_Hrs</th>';
                //tbl += '<th>Lull_Hrs</th>';
                //tbl += '<th>USMH</th>';
                //tbl += '<th>SMH</th>';
                //tbl += '<th>Others</th>';
                //tbl += '<th>IGBDH</th>';
                //tbl += '<th>EGBDH</th>';
                //tbl += '<th>LS</th>';
                //tbl += '<th>Total_BD</th>';
                //tbl += '<th>USMH_Loss</th>';
                //tbl += '<th>SMH_Loss</th>';
                //tbl += '<th>Others_Loss</th>';
                //tbl += '<th>IGBDH_Loss</th>';
                //tbl += '<th>EGBDH_Loss</th>';
                //tbl += '<th>LS_Loss</th>';
                //tbl += '<th>Total_Loss</th>';
            ");
            WriteLiteral(@"    tbl += '</tr></thead>';
                if (result.length > 0)
                {
                    exceldata4 = result ;
                    var total_losses = 0;
                    var total_hourse = 0;
                    for (var i = 0; i < result.length; i++) {

                        //total_losses = Math.abs(parseFloat(result[i].usmh_loss)) + Math.abs(parseFloat(result[i].smh_loss)) + Math.abs(parseFloat(result[i].others_loss)) + Math.abs(parseFloat(result[i].igbdh_loss)) + Math.abs(parseFloat(result[i].egbdh_loss)) + Math.abs(parseFloat(result[i].loadShedding_loss));

                        //total_losses = (parseFloat(result[i].usmh_loss) * -1) + (parseFloat(result[i].smh_loss) * -1) + (parseFloat(result[i].others_loss) * -1) + (parseFloat(result[i].igbdh_loss) * -1) + (parseFloat(result[i].egbdh_loss) * -1) + (parseFloat(result[i].loadShedding_loss) * -1);
                        total_losses = (parseFloat(result[i].usmh_loss)) + (parseFloat(result[i].smh_loss)) + (parseFloat(resu");
            WriteLiteral(@"lt[i].others_loss)) + (parseFloat(result[i].igbdh_loss)) + (parseFloat(result[i].egbdh_loss)) + (parseFloat(result[i].loadShedding_loss));
                        //total_hourse = result[i].unschedule_num + result[i].schedule_num + result[i].others_num + result[i].igbdh_num + result[i].egbdh_num + result[i].load_shedding_num;
                        total_hourse = result[i].unschedule_hrs + result[i].schedule_hrs + result[i].others + result[i].igbdh + result[i].egbdh + result[i].load_shedding;
                        cnt++;
                        tbl += '<tr>';
                        if (userColumnId.includes(columnMap[""FY""][0]) || columnMap[""FY""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"" style=""text-wrap: nowrap;"">' + fyyear + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Month""][0]) || columnMap[""Month""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"">' + result[i].mon");
            WriteLiteral(@"th + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Country""][0]) || columnMap[""Country""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"">' + result[i].country + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""State""][0]) || columnMap[""State""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"">' + result[i].state + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""SPV""][0]) || columnMap[""SPV""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"" style=""text-wrap: nowrap;"">' + result[i].spv + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Site""][0]) || columnMap[""Site""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"">' + result[i].site + '</td>';
                        }");
            WriteLiteral(@"
                        if (userColumnId.includes(columnMap[""Capacity""][0]) || columnMap[""Capacity""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].total_mw.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Wind_Ms""][0]) || columnMap[""Wind_Ms""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].wind_speed.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Kwh""][0]) || columnMap[""Kwh""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].kwh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""PLF""][0]) || columnMap[""PLF""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].plf.toFixed(2) + '</td>';
                        }
        ");
            WriteLiteral(@"                if (userColumnId.includes(columnMap[""MA_ACT""][0]) || columnMap[""MA_ACT""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ma_actual.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""MA_Con""][0]) || columnMap[""MA_Con""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ma_contractual.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""IGA""][0]) || columnMap[""IGA""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].iga.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGA_A""][0]) || columnMap[""EGA_A""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ega.toFixed(2) + '</td>';
                        }
               ");
            WriteLiteral(@"         if (userColumnId.includes(columnMap[""EGA_B""][0]) || columnMap[""EGA_B""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ega_b.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGA_C""][0]) || columnMap[""EGA_C""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ega_c.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Lull_hrs""][0]) || columnMap[""Lull_hrs""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].grid_hrs.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Lull_hrs""][0]) || columnMap[""Lull_hrs""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].lull_hrs.toFixed(2) + '</td>';
                        }
             ");
            WriteLiteral(@"           if (userColumnId.includes(columnMap[""USMH""][0]) || columnMap[""USMH""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].unschedule_hrs.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""SMH""][0]) || columnMap[""SMH""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].schedule_hrs.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Others""][0]) || columnMap[""Others""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].others.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""IGBDH""][0]) || columnMap[""IGBDH""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].igbdh.toFixed(2) + '</td>';
                        }
                ");
            WriteLiteral(@"        if (userColumnId.includes(columnMap[""EGBDH""][0]) || columnMap[""EGBDH""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].egbdh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""LS""][0]) || columnMap[""LS""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].load_shedding.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Total_BD""][0]) || columnMap[""Total_BD""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + total_hourse.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""USMH_Loss""][0]) || columnMap[""USMH_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + (Math.abs(parseFloat(result[i].usmh_loss)) * 1000000).toFixed(2) + '</td>';
        ");
            WriteLiteral(@"                }
                        if (userColumnId.includes(columnMap[""SMH_Loss""][0]) || columnMap[""SMH_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + (Math.abs(parseFloat(result[i].smh_loss)) * 1000000).toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Others_Loss""][0]) || columnMap[""Others_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + (Math.abs(parseFloat(result[i].others_loss)) * 1000000).toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""IGBDH_Loss""][0]) || columnMap[""IGBDH_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + (Math.abs(parseFloat(result[i].igbdh_loss)) * 1000000).toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGBDH_Loss""][0]) || columnMap[""EGBDH_Loss""][");
            WriteLiteral(@"1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + (Math.abs(parseFloat(result[i].egbdh_loss)) * 1000000).toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""LS_Loss""][0]) || columnMap[""LS_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + (Math.abs(parseFloat(result[i].loadShedding_loss)) * 1000000).toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Total_Loss""][0]) || columnMap[""Total_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + (Math.abs(parseFloat(total_losses)) * 1000000).toFixed(2) + '</td>';
                        }
                        //tbl += '<td class=""text-left""  style=""text-wrap: nowrap;"">' + fyyear + '</td>';
                        //tbl += '<td class=""text-left"">' + result[i].month + '</td>';
                        //tbl += '<td ");
            WriteLiteral(@"class=""text-left"">' + result[i].country + '</td>';
                        //tbl += '<td class=""text-left"">' + result[i].state + '</td>';
                        //tbl += '<td class=""text-left""  style=""text-wrap: nowrap;"">' + result[i].spv + '</td>';
                        //tbl += '<td class=""text-left"">' + result[i].site + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].total_mw.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].wind_speed.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].kwh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].plf.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].ma_actual.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].ma_contractual.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + resul");
            WriteLiteral(@"t[i].iga.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].ega.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].ega_b.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].ega_c.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].grid_hrs.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].lull_hrs.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].unschedule_hrs.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].schedule_hrs.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].others.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].igbdh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].");
            WriteLiteral(@"egbdh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].load_shedding.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + total_hourse.toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].usmh_loss)) * 1000000).toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].smh_loss)) * 1000000).toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].others_loss)) * 1000000).toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].igbdh_loss)) * 1000000).toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].egbdh_loss)) * 1000000).toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i]");
            WriteLiteral(@".loadShedding_loss)) * 1000000).toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(total_losses)) * 1000000).toFixed(2) + '</td>';
                        // tbl += '<td  class=""text-right"">' + result[i].usmh_loss.toFixed(2) + '</td>';
                       // tbl += '<td  class=""text-right"">' + result[i].smh_loss.toFixed(2) + '</td>';
                       // tbl += '<td  class=""text-right"">' + result[i].others_loss.toFixed(2) + '</td>';
                       // tbl += '<td  class=""text-right"">' + result[i].igbdh_loss.toFixed(2) + '</td>';
                       // tbl += '<td  class=""text-right"">' + result[i].egbdh_loss.toFixed(2) + '</td>';
                       //tbl += '<td  class=""text-right"">' + result[i].load_Shedding_loss.toFixed(2) + '</td>';
                       //tbl += '<td  class=""text-right"">' + result[i].total_loss.toFixed(2) + '</td>';
                        tbl += '</tr>';
                    }
                }
       ");
            WriteLiteral(@"         else
                {
                    console.log(""Data not available"");

                }
                tbl += '</table>';
                $(""#reportsMonthly"").html(tbl);
                $.fn.DataTable.ext.pager.numbers_length = 6;
                $('#example2').DataTable({
                    dom: 'Bfrtip',
                    title: 'ImportApproval',
                    fixedHeader: true,
                    responsive: true,
                    scrollX: true,
                    lengthChange: false,
                    autoWidth: true,
                    paging: true,
                    searching: true,
                    ordering: true,
                    info: true,
                    autoWidth: true,
                    pageLength: 50,
                    fixedColumns: {
                        left: 7
                    },
                    ""order"": [[5, ""asc""]],
                    buttons: [
                        {
                            ex");
            WriteLiteral(@"tend: 'excel',
                            title: 'Site Wise Monthly Generation Report',
                            exportOptions: {
                                columns: ':visible',
                            }
                        },
                        {
                            extend: 'csv',
                            title: 'Site Wise Monthly Generation Report',
                            exportOptions: {
                                columns: ':visible'
                            }
                        },
                        'colvis',
                        {
                            text: '<span class=""fas fa-file-excel"" title=""Download from DB up to six decimal""></span>',
                            className: 'btn ml-1   ',
                            action: function ()
                            {
                                monthlyexportToExcelsitewise();
                            }
                        },
                    ],
    ");
            WriteLiteral(@"                initComplete: function () {
                        this.api().columns().header().to$().each(function () {
                            if ($(this).text() == ""EGA_A(%) i"")
                            {
                                $(this).attr('title', 'External Grid Breakdown, Shutdown & Load Shedding')
                            }
                            if ($(this).text() == ""EGA_B(%) i"")
                            {
                                $(this).attr('title', 'External Grid Breakdown & Shutdown')
                            }
                            if ($(this).text() == ""EGA_C(%) i"")
                            {
                                $(this).attr('title', 'Load Shedding')
                            }
                        })
                    }
                });
                $("".dt-buttons"").addClass('btn-group flex-wrap');
                $("".dt-buttons > button"").addClass('btn btn-secondary');
                $("".dataTables_f");
            WriteLiteral(@"ilter> label >input"").addClass('form-control form-control-sm');
                $(document).on(""click"", ""div.dt-button-collection > div > button"", function () {
                    if ($(this).hasClass(""active""))
                    {
                        $(this).css(""background-color"", ""white"");
                    }
                    else
                    {
                        $(this).css(""background-color"", ""#31576d"");
                    }
                });
                document.getElementById(""loaderM"").style.display = 'none';
                //document.getElementById(""reportsMonthlyGroup"").style.display = 'none';
            }
        });
    }

    // -----------------------------------Yearly ---------------------//
    function GetYearlyGenReport()
    {
        var ReportType = $(""input[name='yearly']:checked"").val();
        if (ReportType == ""WTG"")
        {
            GetYearlyGenReportWTGWise();
        }
        else
        {
            GetYearlyGen");
            WriteLiteral(@"ReportSiteWise();
        }
    }

    // Yearly WTG Wise
    function GetYearlyGenReportWTGWise()
    {
        var country = $('select#countryY option:selected').val();
        let site  = """";
        let spv   = """";
        let wtg   = """";
        let state = """";
        $('select#siteY option:selected').each(function () {
            site += $(this).val() + "","";
        });
        site = site != """" ? site.slice(0, -1) : site;
        if (!site)
        {
            $('select#stateY option:selected').each(function () {
                state += $(this).val() + "","";
            });
            state = state != """" ? state.slice(0, -1) : state;
            $('select#spvY option:selected').each(function () {
                spv += $(this).val() + "","";
            });
            spv = spv != """" ? spv.slice(0, -1) : spv;
        }
        $('select#wtgY option:selected').each(function () {
            wtg += $(this).val() + "","";
        });
        wtg = wtg != """" ? wtg.slice(0, -");
            WriteLiteral(@"1) : wtg;
        var fyyear = $('select#fyY option:selected').val();
        if (fyyear == """")
        {
            alert(""Please select financial year"");
            return false;
        }
        var arr1 = new Array();
        arr1     = fyyear.split(""-"");
        if (userRole == ""User"" && site == """")
        {
            site = windUserAccess;
        }
        var fromDate = """";
        var toDate   = """";
        if (fyyear)
        {
            fromDate = arr1[0] + '-04-01';
            toDate   = '20' + arr1[1] + '-03-31';
        }
        var reportType = ""WTG"";
        var reporthead = ""WTG Wise Report"";
        document.getElementById(""loaderY"").style.display = 'flex';
        $.ajax({
            type: ""GET"",
            url: '");
#nullable restore
#line 2884 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindGenReport.cshtml"
             Write(Url.Action("GetWindYearlyGenerationReportWTGWise", "WindReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?fromDate=' + fromDate + '&toDate=' + toDate + '&country=' + country + '&state=' + state + '&spv=' + spv + '&site=' + site + '&wtg=' + wtg + '&reportType=' + reportType,
            contentType: ""application/json; charset=utf-8"",
            datatype: ""JSON"",
            success: function (result, status, xhr) {

               // var tbl = '<div class=""text-center""><h5></h5></div>';
                var tbl = '<table id=""example3""  class=""table table-bordered table-striped"" style=""width: 220%;"">';
                tbl += '<thead class=""tbl-head""><tr>';
                if (userColumnId.includes(columnMap[""FY""][0]) || columnMap[""FY""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>FY</th>';
                }
                if (userColumnId.includes(columnMap[""Country""][0]) || columnMap[""Country""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Country</th>';
                }
                if (userColumnId.includes(columnMap[""State""][0]) || columnMap[""State""][1] == 1 |");
            WriteLiteral(@"| isAdmin == 1) {
                    tbl += '<th>State</th>';
                }
                if (userColumnId.includes(columnMap[""SPV""][0]) || columnMap[""SPV""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>SPV</th>';
                }
                if (userColumnId.includes(columnMap[""Site""][0]) || columnMap[""Site""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Site</th>';
                }
                if (userColumnId.includes(columnMap[""WTG""][0]) || columnMap[""WTG""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>WTG</th>';
                }
                if (userColumnId.includes(columnMap[""Wind_Ms""][0]) || columnMap[""Wind_Ms""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Wind<br>(m/s)</th>';
                }
                if (userColumnId.includes(columnMap[""Kwh""][0]) || columnMap[""Kwh""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>kWh</th>';
                }
                if (userColumnId.includes(columnM");
            WriteLiteral(@"ap[""PLF""][0]) || columnMap[""PLF""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>PLF<br>(%)</th>';
                }
                if (userColumnId.includes(columnMap[""MA_ACT""][0]) || columnMap[""MA_ACT""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>MA_ACT<br>(%)</th>';
                }
                if (userColumnId.includes(columnMap[""MA_Con""][0]) || columnMap[""MA_Con""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>MA_CON<br>(%)</th>';
                }
                if (userColumnId.includes(columnMap[""IGA""][0]) || columnMap[""IGA""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>IGA<br>(%)</th>';
                }
                if (userColumnId.includes(columnMap[""EGA_A""][0]) || columnMap[""EGA_A""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGA_A<br>(%) <span class=""information"">i<span></th>';
                }
                if (userColumnId.includes(columnMap[""EGA_B""][0]) || columnMap[""EGA_B""][1] == 1 || isAdmin == 1");
            WriteLiteral(@") {
                    tbl += '<th>EGA_B<br>(%) <span class=""information"">i<span></th>';
                }
                if (userColumnId.includes(columnMap[""EGA_C""][0]) || columnMap[""EGA_C""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGA_C<br>(%) <span class=""information"">i<span></th>';
                }
                if (userColumnId.includes(columnMap[""Lull_hrs""][0]) || columnMap[""Lull_hrs""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Gen_Hrs</th>';
                }
                if (userColumnId.includes(columnMap[""Country""][0]) || columnMap[""Country""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Lull_Hrs</th>';
                }
                if (userColumnId.includes(columnMap[""USMH""][0]) || columnMap[""USMH""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>USMH</th>';
                }
                if (userColumnId.includes(columnMap[""SMH""][0]) || columnMap[""SMH""][1] == 1 || isAdmin == 1) {
                    tbl += '<");
            WriteLiteral(@"th>SMH</th>';
                }
                if (userColumnId.includes(columnMap[""Others""][0]) || columnMap[""Others""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Others</th>';
                }
                if (userColumnId.includes(columnMap[""IGBDH""][0]) || columnMap[""IGBDH""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>IGBDH</th>';
                }
                if (userColumnId.includes(columnMap[""EGBDH""][0]) || columnMap[""EGBDH""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGBDH</th>';
                }
                if (userColumnId.includes(columnMap[""LS""][0]) || columnMap[""LS""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>LS</th>';
                }
                if (userColumnId.includes(columnMap[""Total_BD""][0]) || columnMap[""Total_BD""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Total_BD</th>';
                }
                if (userColumnId.includes(columnMap[""USMH_Loss""][0]) || columnMap[""USMH");
            WriteLiteral(@"_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>USMH_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""SMH_Loss""][0]) || columnMap[""SMH_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>SMH_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""Others_Loss""][0]) || columnMap[""Others_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Others_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""IGBDH_Loss""][0]) || columnMap[""IGBDH_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>IGBDH_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""EGBDH_Loss""][0]) || columnMap[""EGBDH_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGBDH_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""LS_Loss""][0]) || columnMap[""LS_Loss""][1] == 1 || isAdmin == 1) {
                    tbl");
            WriteLiteral(@" += '<th>LS_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""Total_Loss""][0]) || columnMap[""Total_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Total_Loss</th>';
                }
                //tbl += '<th>FY</th>';
                //tbl += '<th>Country</th>';
                //tbl += '<th>State</th>';
                //tbl += '<th>SPV</th>';
                //tbl += '<th>Site</th>';
                //tbl += '<th>WTG</th>';
                //tbl += '<th>Wind<br>(m/s)</th>';
                //tbl += '<th>kWh</th>';
                //tbl += '<th>PLF<br>(%)</th>';
                //tbl += '<th>MA_ACT<br>(%)</th>';
                //tbl += '<th>MA_CON<br>(%)</th>';
                //tbl += '<th>IGA<br>(%)</th>';
                //tbl += '<th>EGA_A<br>(%) <span class=""information"">i<span></th>';
                //tbl += '<th>EGA_B<br>(%) <span class=""information"">i<span></th>';
                //tbl += '<th>EGA_C<br>(%) <span class=""infor");
            WriteLiteral(@"mation"">i<span></th>';
                //tbl += '<th>Gen_Hrs</th>';
                //tbl += '<th>Lull_Hrs</th>';
                //tbl += '<th>USMH</th>';
                //tbl += '<th>SMH</th>';
                //tbl += '<th>Others</th>';
                //tbl += '<th>IGBDH</th>';
                //tbl += '<th>EGBDH</th>';
                //tbl += '<th>LS</th>';
                //tbl += '<th>Total_BD</th>';

                //tbl += '<th>USMH_Loss</th>';
                //tbl += '<th>SMH_Loss</th>';
                //tbl += '<th>Others_Loss</th>';
                //tbl += '<th>IGBDH_Loss</th>';
                //tbl += '<th>EGBDH_Loss</th>';
                //tbl += '<th>LS_Loss</th>';
                //tbl += '<th>Total_Loss</th>';
                tbl += '</tr></thead>';
                if (result.length > 0)
                {
                    exceldata5 = result;
                    var total_losses = 0;
                    var total_hourse = 0;
                    for (var i = ");
            WriteLiteral(@"0; i < result.length; i++) {

                        //total_losses = Math.abs(parseFloat(result[i].usmh_loss)) + Math.abs(parseFloat(result[i].smh_loss)) + Math.abs(parseFloat(result[i].others_loss)) + Math.abs(parseFloat(result[i].igbdh_loss)) + Math.abs(parseFloat(result[i].egbdh_loss)) + Math.abs(parseFloat(result[i].loadShedding_loss));

                        //total_losses = (parseFloat(result[i].usmh_loss) * -1) + (parseFloat(result[i].smh_loss) * -1) + (parseFloat(result[i].others_loss) * -1) + (parseFloat(result[i].igbdh_loss) * -1) + (parseFloat(result[i].egbdh_loss) * -1) + (parseFloat(result[i].loadShedding_loss) * -1);
                        total_losses = (parseFloat(result[i].usmh_loss)) + (parseFloat(result[i].smh_loss)) + (parseFloat(result[i].others_loss)) + (parseFloat(result[i].igbdh_loss)) + (parseFloat(result[i].egbdh_loss)) + (parseFloat(result[i].loadShedding_loss));
                        //total_hourse = result[i].unschedule_num + result[i].schedule_num + result[i].others_");
            WriteLiteral(@"num + result[i].igbdh_num + result[i].egbdh_num + result[i].load_shedding_num;
                        total_hourse = result[i].unschedule_hrs + result[i].schedule_hrs + result[i].others + result[i].igbdh + result[i].egbdh + result[i].load_shedding;

                       // var formattedDate = moment(result[i].date, 'YYYY/MM/DD').format('DD-MM-YYYY');
                        tbl += '<tr>';
                        if (userColumnId.includes(columnMap[""FY""][0]) || columnMap[""FY""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left""  style=""text-wrap: nowrap;"">' + fyyear + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Country""][0]) || columnMap[""Country""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"">' + result[i].country + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""State""][0]) || columnMap[""State""][1] == 1 || isAdmin == 1) {
  ");
            WriteLiteral(@"                          tbl += '<td class=""text-left"">' + result[i].state + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""SPV""][0]) || columnMap[""SPV""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"" style=""text-wrap: nowrap;"">' + result[i].spv + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Site""][0]) || columnMap[""Site""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"">' + result[i].site + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""WTG""][0]) || columnMap[""WTG""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"">' + result[i].wtg + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Wind_Ms""][0]) || columnMap[""Wind_Ms""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""tex");
            WriteLiteral(@"t-right"">' + result[i].wind_speed.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Kwh""][0]) || columnMap[""Kwh""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].kwh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""PLF""][0]) || columnMap[""PLF""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].plf.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""MA_ACT""][0]) || columnMap[""MA_ACT""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ma_actual.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""MA_Con""][0]) || columnMap[""MA_Con""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + re");
            WriteLiteral(@"sult[i].ma_contractual.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""IGA""][0]) || columnMap[""IGA""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].iga.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGA_A""][0]) || columnMap[""EGA_A""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ega.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGA_B""][0]) || columnMap[""EGA_B""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ega_b.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGA_C""][0]) || columnMap[""EGA_C""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ega_c.t");
            WriteLiteral(@"oFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Lull_hrs""][0]) || columnMap[""Lull_hrs""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].grid_hrs.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Country""][0]) || columnMap[""Country""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].lull_hrs.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""USMH""][0]) || columnMap[""USMH""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].unschedule_hrs.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""SMH""][0]) || columnMap[""SMH""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].sche");
            WriteLiteral(@"dule_hrs.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Others""][0]) || columnMap[""Others""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].others.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""IGBDH""][0]) || columnMap[""IGBDH""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].igbdh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGBDH""][0]) || columnMap[""EGBDH""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].egbdh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""LS""][0]) || columnMap[""LS""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].load_shedding.to");
            WriteLiteral(@"Fixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Total_BD""][0]) || columnMap[""Total_BD""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + total_hourse.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""USMH_Loss""][0]) || columnMap[""USMH_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + (Math.abs(parseFloat(result[i].usmh_loss)) * 1000000).toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""SMH_Loss""][0]) || columnMap[""SMH_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + (Math.abs(parseFloat(result[i].smh_loss)) * 1000000).toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Others_Loss""][0]) || columnMap[""Others_Loss""][1] == 1 || isAdmin ==");
            WriteLiteral(@" 1) {
                            tbl += '<td class=""text-right"">' + (Math.abs(parseFloat(result[i].others_loss)) * 1000000).toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""IGBDH_Loss""][0]) || columnMap[""IGBDH_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + (Math.abs(parseFloat(result[i].igbdh_loss)) * 1000000).toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGBDH_Loss""][0]) || columnMap[""EGBDH_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + (Math.abs(parseFloat(result[i].egbdh_loss)) * 1000000).toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""LS_Loss""][0]) || columnMap[""LS_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + (Math.abs(parseFloat(result[i].loadShedding_loss)) * 100");
            WriteLiteral(@"0000).toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Total_Loss""][0]) || columnMap[""Total_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + (Math.abs(parseFloat(total_losses)) * 1000000).toFixed(2) + '</td>';
                        }
                        //tbl += '<td class=""text-left""  style=""text-wrap: nowrap;"">' + fyyear  + '</td>';
                        //tbl += '<td class=""text-left"">' + result[i].country + '</td>';
                        //tbl += '<td class=""text-left"">' + result[i].state + '</td>';
                        //tbl += '<td class=""text-left""  style=""text-wrap: nowrap;"">' + result[i].spv + '</td>';
                        //tbl += '<td class=""text-left"">' + result[i].site + '</td>';
                        //tbl += '<td class=""text-left"">' + result[i].wtg + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].wind_speed.toFixed(2) + '</td>'");
            WriteLiteral(@";
                        //tbl += '<td class=""text-right"">' + result[i].kwh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].plf.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].ma_actual.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].ma_contractual.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].iga.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].ega.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].ega_b.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].ega_c.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].grid_hrs.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].lull_hrs.toFixed(2) + '</td>';
          ");
            WriteLiteral(@"              //tbl += '<td class=""text-right"">' + result[i].unschedule_hrs.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].schedule_hrs.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].others.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].igbdh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].egbdh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].load_shedding.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + total_hourse.toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].usmh_loss)) * 1000000).toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].smh_loss)) * 1000000).toFixed(2) + '</td>';
                        //tbl += '<");
            WriteLiteral(@"td  class=""text-right"">' + (Math.abs(parseFloat(result[i].others_loss)) * 1000000).toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].igbdh_loss)) * 1000000).toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].egbdh_loss)) * 1000000).toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].loadShedding_loss)) * 1000000).toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(total_losses)) * 1000000).toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + result[i].usmh_loss.toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + result[i].smh_loss.toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + result[i].others_loss.toFixed(2) + '</td>';
                        //tbl += '<td  clas");
            WriteLiteral(@"s=""text-right"">' + result[i].igbdh_loss.toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + result[i].egbdh_loss.toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + result[i].load_Shedding_loss.toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + result[i].total_loss.toFixed(2) + '</td>';
                        tbl += '</tr>';
                    }
                }
                else
                {
                    console.log(""Data not available"");
                }
                tbl += '</table>';
                $(""#reportsYearly"").html(tbl);
                $.fn.DataTable.ext.pager.numbers_length = 6;
                $('#example3').DataTable({
                    dom: 'Bfrtip',
                    title: 'ImportApproval',
                    fixedHeader: true,
                    responsive: true,
                    scrollX: true,
                    lengthChange: false,
       ");
            WriteLiteral(@"             autoWidth: true,
                    paging: true,
                    searching: true,
                    ordering: true,
                    info: true,
                    autoWidth: true,
                    fixedColumns: {
                        left: 6
                    },
                    pageLength: 50,
                    ""order"": [[4, ""asc""]],
                    buttons: [
                        {
                            extend: 'excel',
                            title: 'WTG Wise Yearly Generation Report',
                            exportOptions: {
                                columns: ':visible',
                            }
                        },
                        {
                            extend: 'csv',
                            title: 'WTG Wise Yearly Generation Report',
                            exportOptions: {
                                columns: ':visible'
                            }
                        },");
            WriteLiteral(@"
                        'colvis',
                        {

                            text: '<span class=""fas fa-file-excel"" title=""Download from DB up to six decimal""></span>',
                            className: 'btn ml-1   ',
                            action: function () {
                                yearlyexportToExcelwtgwise();
                            }
                        },
                    ],
                    initComplete: function () {
                        this.api().columns().header().to$().each(function () {
                            if ($(this).text() == ""EGA_A(%) i"")
                            {
                                $(this).attr('title', 'External Grid Breakdown, Shutdown & Load Shedding')
                            }
                            if ($(this).text() == ""EGA_B(%) i"")
                            {
                                $(this).attr('title', 'External Grid Breakdown & Shutdown')
                            }
 ");
            WriteLiteral(@"                           if ($(this).text() == ""EGA_C(%) i"")
                            {
                                $(this).attr('title', 'Load Shedding')
                            }
                        })
                    }
                });
                $("".dt-buttons"").addClass('btn-group flex-wrap');
                $("".dt-buttons > button"").addClass('btn btn-secondary');
                $("".dataTables_filter> label >input"").addClass('form-control form-control-sm');
                $(document).on(""click"", ""div.dt-button-collection > div > button"", function () {
                    if ($(this).hasClass(""active""))
                    {
                        $(this).css(""background-color"", ""white"");
                    }
                    else
                    {
                        $(this).css(""background-color"", ""#31576d"");
                    }
                });
                document.getElementById(""loaderY"").style.display = 'none';
              ");
            WriteLiteral(@"  //document.getElementById(""reportsYearlyGroup"").style.display = 'none';
            }
        });
    }

    // Yearly SIte Wise
    function GetYearlyGenReportSiteWise()
    {
        var country = $('select#countryY option:selected').val();
        let site  = """";
        let spv   = """";
        let wtg   = """";
        let state = """";
        $('select#siteY option:selected').each(function () {
            site += $(this).val() + "","";
        });
        site = site != """" ? site.slice(0, -1) : site;
        if (!site)
        {
            $('select#stateY option:selected').each(function () {
                state += $(this).val() + "","";
            });
            state = state != """" ? state.slice(0, -1) : state;
            $('select#spvY option:selected').each(function () {
                spv += $(this).val() + "","";

            });
            spv = spv != """" ? spv.slice(0, -1) : spv;
        }
        $('select#wtgY option:selected').each(function () {
            wtg +");
            WriteLiteral(@"= $(this).val() + "","";
        });
        wtg = wtg != """" ? wtg.slice(0, -1) : wtg;
        var fyyear = $('select#fyY option:selected').val();
        if (userRole == ""User"" && site == """")
        {
            site = windUserAccess;
        }
        if (fyyear == """")
        {
            alert(""Please select financial year"");
            return false;
        }
        var arr1       = new Array();
        arr1           = fyyear.split(""-"");
        var fromDate   = """";
        fromDate       = arr1[0] + '-04-01';
        toDate         = '20' + arr1[1] + '-03-31';
        var reportType = ""Site"";
        var reporthead = ""Site Wise Report"";
        document.getElementById(""loaderY"").style.display = 'flex';
        $.ajax({
            type: ""GET"",
            url: '");
#nullable restore
#line 3302 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindGenReport.cshtml"
             Write(Url.Action("GetWindYearlyGenerationReportSiteWise", "WindReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?fromDate=' + fromDate + '&toDate=' + toDate + '&country=' + country + '&state=' + state + '&spv=' + spv + '&site=' + site + '&wtg=' + wtg + '&reportType=' + reportType,
            contentType: ""application/json; charset=utf-8"",
            datatype: ""JSON"",
            success: function (result, status, xhr)
            {
                var tbl = '<table id=""example3""  class=""table table-bordered table-striped"" style=""width: 220%;"">';
                tbl += '<thead class=""tbl-head""><tr>';
                if (userColumnId.includes(columnMap[""FY""][0]) || columnMap[""FY""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>FY</th>';
                }
                if (userColumnId.includes(columnMap[""Month""][0]) || columnMap[""Month""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Month</th>';
                }
                if (userColumnId.includes(columnMap[""Country""][0]) || columnMap[""Country""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Country</th>'");
            WriteLiteral(@";
                }
                if (userColumnId.includes(columnMap[""State""][0]) || columnMap[""State""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>State</th>';
                }
                if (userColumnId.includes(columnMap[""SPV""][0]) || columnMap[""SPV""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>SPV</th>';
                }
                if (userColumnId.includes(columnMap[""Site""][0]) || columnMap[""Site""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Site</th>';
                }
                if (userColumnId.includes(columnMap[""Capacity""][0]) || columnMap[""Capacity""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Capacity<br>(MW)</th>';
                }
                if (userColumnId.includes(columnMap[""Wind_Ms""][0]) || columnMap[""Wind_Ms""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Wind<br>(m/s)</th>';
                }
                if (userColumnId.includes(columnMap[""Kwh""][0]) || columnMap[""Kwh""]");
            WriteLiteral(@"[1] == 1 || isAdmin == 1) {
                    tbl += '<th>kWh</th>';
                }
                if (userColumnId.includes(columnMap[""PLF""][0]) || columnMap[""PLF""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>PLF<br>(%)</th>';
                }
                if (userColumnId.includes(columnMap[""MA_ACT""][0]) || columnMap[""MA_ACT""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>MA_ACT<br>(%)</th>';
                }
                if (userColumnId.includes(columnMap[""MA_Con""][0]) || columnMap[""MA_Con""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>MA_CON<br>(%)</th>';
                }
                if (userColumnId.includes(columnMap[""IGA""][0]) || columnMap[""IGA""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>IGA<br>(%)</th>';
                }
                if (userColumnId.includes(columnMap[""EGA_A""][0]) || columnMap[""EGA_A""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGA_A<br>(%) <span class=""information"">i<sp");
            WriteLiteral(@"an></th>';
                }
                if (userColumnId.includes(columnMap[""EGA_B""][0]) || columnMap[""EGA_B""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGA_B<br>(%) <span class=""information"">i<span></th>';
                }
                if (userColumnId.includes(columnMap[""EGA_C""][0]) || columnMap[""EGA_C""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGA_C<br>(%) <span class=""information"">i<span></th>';
                }
                if (userColumnId.includes(columnMap[""Lull_hrs""][0]) || columnMap[""Lull_hrs""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Gen_Hrs</th>';
                }
                if (userColumnId.includes(columnMap[""Country""][0]) || columnMap[""Country""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Lull_Hrs</th>';
                }
                if (userColumnId.includes(columnMap[""USMH""][0]) || columnMap[""USMH""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>USMH</th>';
                }");
            WriteLiteral(@"
                if (userColumnId.includes(columnMap[""SMH""][0]) || columnMap[""SMH""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>SMH</th>';
                }
                if (userColumnId.includes(columnMap[""Others""][0]) || columnMap[""Others""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Others</th>';
                }
                if (userColumnId.includes(columnMap[""IGBDH""][0]) || columnMap[""IGBDH""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>IGBDH</th>';
                }
                if (userColumnId.includes(columnMap[""EGBDH""][0]) || columnMap[""EGBDH""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGBDH</th>';
                }
                if (userColumnId.includes(columnMap[""LS""][0]) || columnMap[""LS""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>LS</th>';
                }
                if (userColumnId.includes(columnMap[""Total_BD""][0]) || columnMap[""Total_BD""][1] == 1 || isAdmin == 1) {
              ");
            WriteLiteral(@"      tbl += '<th>Total_BD</th>';
                }
                if (userColumnId.includes(columnMap[""USMH_Loss""][0]) || columnMap[""USMH_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>USMH_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""SMH_Loss""][0]) || columnMap[""SMH_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>SMH_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""Others_Loss""][0]) || columnMap[""Others_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Others_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""IGBDH_Loss""][0]) || columnMap[""IGBDH_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>IGBDH_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""EGBDH_Loss""][0]) || columnMap[""EGBDH_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGBDH_Loss</th>';
                }
 ");
            WriteLiteral(@"               if (userColumnId.includes(columnMap[""LS_Loss""][0]) || columnMap[""LS_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>LS_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""Total_Loss""][0]) || columnMap[""Total_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Total_Loss</th>';
                }
                //tbl += '<th>FY</th>';
                //tbl += '<th>Country</th>';
                //tbl += '<th>State</th>';
                //tbl += '<th>SPV</th>';
                //tbl += '<th>Site</th>';
                //tbl += '<th>Capacity<br>(MW)</th>';
                //tbl += '<th>Wind<br>(m/s)</th>';
                //tbl += '<th>kWh</th>';
                //tbl += '<th>PLF<br>(%)</th>';
                //tbl += '<th>MA_ACT<br>(%)</th>';
                //tbl += '<th>MA_CON<br>(%)</th>';
                //tbl += '<th>IGA<br>(%)</th>';
                //tbl += '<th>EGA_A<br>(%) <span class=""information"">i<span><");
            WriteLiteral(@"/th>';
                //tbl += '<th>EGA_B<br>(%) <span class=""information"">i<span></th>';
                //tbl += '<th>EGA_C<br>(%) <span class=""information"">i<span></th>';
                //tbl += '<th>Gen_Hrs</th>';
                //tbl += '<th>Lull_Hrs</th>';
                //tbl += '<th>USMH</th>';
                //tbl += '<th>SMH</th>';
                //tbl += '<th>Others</th>';
                //tbl += '<th>IGBDH</th>';
                //tbl += '<th>EGBDH</th>';
                //tbl += '<th>LS</th>';
                //tbl += '<th>Total_BD</th>';
                //tbl += '<th>USMH_Loss</th>';
                //tbl += '<th>SMH_Loss</th>';
                //tbl += '<th>Others_Loss</th>';
                //tbl += '<th>IGBDH_Loss</th>';
                //tbl += '<th>EGBDH_Loss</th>';
                //tbl += '<th>LS_Loss</th>';
                //tbl += '<th>Total_Loss</th>';
                tbl += '</tr></thead>';
                var total_losses = 0;
                var total_hou");
            WriteLiteral(@"rse = 0;
                if (result.length > 0) {
                     exceldata6 = result;
                    for (var i = 0; i < result.length; i++) {
                        // var formattedDate = moment(result[i].date, 'YYYY/MM/DD').format('DD-MM-YYYY');
                        //total_losses = Math.abs(parseFloat(result[i].usmh_loss)) + Math.abs(parseFloat(result[i].smh_loss)) + Math.abs(parseFloat(result[i].others_loss)) + Math.abs(parseFloat(result[i].igbdh_loss)) + Math.abs(parseFloat(result[i].egbdh_loss)) + Math.abs(parseFloat(result[i].loadShedding_loss));

                        //total_losses = (parseFloat(result[i].usmh_loss) * -1) + (parseFloat(result[i].smh_loss) * -1) + (parseFloat(result[i].others_loss) * -1) + (parseFloat(result[i].igbdh_loss) * -1) + (parseFloat(result[i].egbdh_loss) * -1) + (parseFloat(result[i].loadShedding_loss) * -1);
                        total_losses = (parseFloat(result[i].usmh_loss)) + (parseFloat(result[i].smh_loss)) + (parseFloat(result[i].others_loss");
            WriteLiteral(@")) + (parseFloat(result[i].igbdh_loss)) + (parseFloat(result[i].egbdh_loss)) + (parseFloat(result[i].loadShedding_loss));
                        //total_hourse = result[i].unschedule_num + result[i].schedule_num + result[i].others_num + result[i].igbdh_num + result[i].egbdh_num + result[i].load_shedding_num;
                        total_hourse = result[i].unschedule_hrs + result[i].schedule_hrs + result[i].others + result[i].igbdh + result[i].egbdh + result[i].load_shedding;
                        tbl += '<tr>';
                        if (userColumnId.includes(columnMap[""FY""][0]) || columnMap[""FY""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left""  style=""text-wrap: nowrap;"">' + fyyear + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Month""][0]) || columnMap[""Month""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"">' + result[i].month + '</td>';
                        }
      ");
            WriteLiteral(@"                  if (userColumnId.includes(columnMap[""Country""][0]) || columnMap[""Country""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"">' + result[i].country + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""State""][0]) || columnMap[""State""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"">' + result[i].state + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""SPV""][0]) || columnMap[""SPV""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"" style=""text-wrap: nowrap;"">' + result[i].spv + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Site""][0]) || columnMap[""Site""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"">' + result[i].site + '</td>';
                        }
                        if (userColumnId.inclu");
            WriteLiteral(@"des(columnMap[""Capacity""][0]) || columnMap[""Capacity""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].total_mw.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Wind_Ms""][0]) || columnMap[""Wind_Ms""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].wind_speed.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Kwh""][0]) || columnMap[""Kwh""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].kwh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""PLF""][0]) || columnMap[""PLF""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].plf.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(column");
            WriteLiteral(@"Map[""MA_ACT""][0]) || columnMap[""MA_ACT""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ma_actual.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""MA_Con""][0]) || columnMap[""MA_Con""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ma_contractual.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""IGA""][0]) || columnMap[""IGA""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].iga.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGA_A""][0]) || columnMap[""EGA_A""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ega.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EG");
            WriteLiteral(@"A_B""][0]) || columnMap[""EGA_B""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ega_b.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGA_C""][0]) || columnMap[""EGA_C""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ega_c.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Lull_hrs""][0]) || columnMap[""Lull_hrs""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].grid_hrs.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Lull_hrs""][0]) || columnMap[""Lull_hrs""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].lull_hrs.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""");
            WriteLiteral(@"USMH""][0]) || columnMap[""USMH""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].unschedule_hrs.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""SMH""][0]) || columnMap[""SMH""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].schedule_hrs.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Others""][0]) || columnMap[""Others""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].others.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""IGBDH""][0]) || columnMap[""IGBDH""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].igbdh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGB");
            WriteLiteral(@"DH""][0]) || columnMap[""EGBDH""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].egbdh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""LS""][0]) || columnMap[""LS""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].load_shedding.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Total_BD""][0]) || columnMap[""Total_BD""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + total_hourse.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""USMH_Loss""][0]) || columnMap[""USMH_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + (Math.abs(parseFloat(result[i].usmh_loss)) * 1000000).toFixed(2) + '</td>';
                        }
                        if (u");
            WriteLiteral(@"serColumnId.includes(columnMap[""SMH_Loss""][0]) || columnMap[""SMH_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + (Math.abs(parseFloat(result[i].smh_loss)) * 1000000).toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Others_Loss""][0]) || columnMap[""Others_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + (Math.abs(parseFloat(result[i].others_loss)) * 1000000).toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""IGBDH_Loss""][0]) || columnMap[""IGBDH_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + (Math.abs(parseFloat(result[i].igbdh_loss)) * 1000000).toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGBDH_Loss""][0]) || columnMap[""EGBDH_Loss""][1] == 1 || isAdmin == 1) {
                    ");
            WriteLiteral(@"        tbl += '<td class=""text-right"">' + (Math.abs(parseFloat(result[i].egbdh_loss)) * 1000000).toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""LS_Loss""][0]) || columnMap[""LS_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + (Math.abs(parseFloat(result[i].loadShedding_loss)) * 1000000).toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Total_Loss""][0]) || columnMap[""Total_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + (Math.abs(parseFloat(total_losses)) * 1000000).toFixed(2) + '</td>';
                        }
                        //tbl += '<td class=""text-left""  style=""text-wrap: nowrap;"">' + fyyear + '</td>';
                        //tbl += '<td class=""text-left"">' + result[i].country + '</td>';
                        //tbl += '<td class=""text-left"">' + result[i].state + '</td>");
            WriteLiteral(@"';
                        //tbl += '<td class=""text-left""  style=""text-wrap: nowrap;"">' + result[i].spv + '</td>';
                        //tbl += '<td class=""text-left"">' + result[i].site + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].total_mw.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].wind_speed.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].kwh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].plf.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].ma_actual.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].ma_contractual.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].iga.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].ega.toFixed(2) + '</td>';
      ");
            WriteLiteral(@"                  //tbl += '<td class=""text-right"">' + result[i].ega_b.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].ega_c.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].grid_hrs.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].lull_hrs.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].unschedule_hrs.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].schedule_hrs.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].others.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].igbdh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].egbdh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].load_shedding.toFixed(2) + '</td>';");
            WriteLiteral(@"
                        //tbl += '<td class=""text-right"">' + total_hourse.toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].usmh_loss)) * 1000000).toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].smh_loss)) * 1000000).toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].others_loss)) * 1000000).toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].igbdh_loss)) * 1000000).toFixed(2) + '</td>';
                       // tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].egbdh_loss)) * 1000000).toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].loadShedding_loss)) * 1000000).toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + (Math.abs(parseFloa");
            WriteLiteral(@"t(total_losses)) * 1000000).toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + result[i].usmh_loss.toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + result[i].smh_loss.toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + result[i].others_loss.toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + result[i].igbdh_loss.toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + result[i].egbdh_loss.toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + result[i].load_Shedding_loss.toFixed(2) + '</td>';
                        //tbl += '<td  class=""text-right"">' + result[i].total_loss.toFixed(2) + '</td>';
                        tbl += '</tr>';
                    }
                }
                else
                {
                    console.log(""Data not available"");
                }
                tbl += '</");
            WriteLiteral(@"table>';
                $(""#reportsYearly"").html(tbl);
                $.fn.DataTable.ext.pager.numbers_length = 6;
                $('#example3').DataTable({
                    dom: 'Bfrtip',
                    title: 'ImportApproval',
                    fixedHeader: true,
                    responsive: true,
                    scrollX: true,
                    lengthChange: false,
                    autoWidth: true,
                    paging: true,
                    searching: true,
                    ordering: true,
                    info: true,
                    autoWidth: true,
                    fixedColumns: {
                        left: 6
                    },
                    pageLength: 50,
                    ""order"": [[4, ""asc""]],
                    buttons: [
                        {
                            extend: 'excel',
                            title: 'Site Wise Yearly Generation Report',
                            exportOptions: {
  ");
            WriteLiteral(@"                              columns: ':visible',
                            }
                        },
                        {
                            extend: 'csv',
                            title: 'Site Wise Yearly Generation Report',
                            exportOptions: {
                                columns: ':visible'
                            }
                        },
                        'colvis',
                        {
                            text: '<span class=""fas fa-file-excel"" title=""Download from DB up to six decimal""></span>',
                            className: 'btn ml-1   ',
                            action: function ()
                            {
                                yearlyexportToExcelwtgwise();
                            }
                        },
                    ],
                    initComplete: function () {
                        this.api().columns().header().to$().each(function () {
                 ");
            WriteLiteral(@"           if ($(this).text() == ""EGA_A(%) i"")
                            {
                                $(this).attr('title', 'External Grid Breakdown, Shutdown & Load Shedding')
                            }
                            if ($(this).text() == ""EGA_B(%) i"")
                            {
                                $(this).attr('title', 'External Grid Breakdown & Shutdown')
                            }
                            if ($(this).text() == ""EGA_C(%) i"")
                            {
                                $(this).attr('title', 'Load Shedding')
                            }
                        })
                    }
                });
                $("".dt-buttons"").addClass('btn-group flex-wrap');
                $("".dt-buttons > button"").addClass('btn btn-secondary');
                $("".dataTables_filter> label >input"").addClass('form-control form-control-sm');
                $(""dataTables_filter"").css(""margin-top"", ""-35px"");
         ");
            WriteLiteral(@"       $(document).on(""click"", ""div.dt-button-collection > div > button"", function () {
                    if ($(this).hasClass(""active""))
                    {
                        $(this).css(""background-color"", ""white"");
                    }
                    else
                    {
                        $(this).css(""background-color"", ""#31576d"");
                    }
                });
                document.getElementById(""loaderY"").style.display = 'none';
                //document.getElementById(""reportsYearlyGroup"").style.display = 'none';
            }
        });
    }
    function dailyexportToExcelwtgwise()
    {
        result = exceldata1;
        var columns = [
            ""Date"", ""Country"", ""State"", ""SPV"", ""Site"", ""WTG"", ""Wind"", ""kWh"", ""PLF"", ""MA_ACT"", ""MA_CON"", ""IGA"", ""EGA_A"", ""EGA_B"", ""EGA_C"", ""Gen_Hrs"", ""Lull_Hrs"", ""USMH"", ""SMH"", ""Others"",""IGBDH"", ""EGBDH"", ""LS"", ""Total_BD"", ""USMH_Loss"", ""SMH_Loss"", ""Others_Loss"", ""IGBDH_Loss"", ""EGBDH_Loss"", ""LS_Loss"", ""To");
            WriteLiteral(@"tal_Loss""
        ];
        console.log(exceldata1);
        var rows = [];
        var total_losses = 0;
        var total_hourse = 0;
        for (var i = 0; i < result.length; i++)
        {
            var row = [];
            //total_losses = Math.abs(parseFloat(result[i].usmh_loss)) + Math.abs(parseFloat(result[i].smh_loss)) + Math.abs(parseFloat(result[i].others_loss)) + Math.abs(parseFloat(result[i].igbdh_loss)) + Math.abs(parseFloat(result[i].egbdh_loss)) + Math.abs(parseFloat(result[i].loadShedding_loss));
            //total_losses = (parseFloat(result[i].usmh_loss) * -1) + (parseFloat(result[i].smh_loss) * -1) + (parseFloat(result[i].others_loss) * -1) + (parseFloat(result[i].igbdh_loss) * -1) + (parseFloat(result[i].egbdh_loss) * -1) + (parseFloat(result[i].loadShedding_loss) * -1);
            total_losses = (parseFloat(result[i].usmh_loss)) + (parseFloat(result[i].smh_loss)) + (parseFloat(result[i].others_loss)) + (parseFloat(result[i].igbdh_loss)) + (parseFloat(result[i].egbdh_los");
            WriteLiteral(@"s)) + (parseFloat(result[i].loadShedding_loss));
            total_hourse = result[i].unschedule_num + result[i].schedule_num + result[i].others_num + result[i].igbdh_num + result[i].egbdh_num + result[i].load_shedding_num;

            row.push(result[i].date.split(""T"")[0].split(""-"").reverse().join(""-""));
            row.push(result[i].country);
            row.push(result[i].state);
            row.push(result[i].spv);
            row.push(result[i].site);
            row.push(result[i].wtg);
            row.push(result[i].wind_speed);
            row.push(result[i].kwh);
            row.push(result[i].plf);
            row.push(result[i].ma_actual);
            row.push(result[i].ma_contractual);
            row.push(result[i].iga);
            row.push(result[i].ega);
            row.push(result[i].ega_b);
            row.push(result[i].ega_c);
            //row.push(result[i].plf);
            row.push(result[i].grid_hrs);
            row.push(result[i].lull_hrs);
            //row.p");
            WriteLiteral(@"ush(result[i].production_hrs);
            row.push(result[i].unschedule_num);
            row.push(result[i].schedule_num);
            row.push(result[i].others_num);
            row.push(result[i].igbdh_num);
            row.push(result[i].egbdh_num);
            row.push(result[i].load_shedding_num);
            row.push(total_hourse);
            //row.push(result[i].load_shedding_num);
            row.push(Math.abs(parseFloat(result[i].usmh_loss)*-1) * 1000000);
            row.push(Math.abs(parseFloat(result[i].smh_loss)*-1) * 1000000);
            row.push(Math.abs(parseFloat(result[i].others_loss)*-1) * 1000000);
            row.push(Math.abs(parseFloat(result[i].igbdh_loss)*-1) * 1000000);
            row.push(Math.abs(parseFloat(result[i].egbdh_loss)*-1) * 1000000);
            row.push(Math.abs(parseFloat(result[i].loadShedding_loss)*-1) * 1000000);
            row.push(Math.abs(parseFloat(total_losses)*-1) * 1000000);
            rows.push(row);
        }
        var data = [col");
            WriteLiteral(@"umns].concat(rows);
        var ws = XLSX.utils.aoa_to_sheet(data);
        var wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, ""WTGWise Daily Gen Report"");
        var wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'binary' });
        function s2ab(s) {
            var buf = new ArrayBuffer(s.length);
            var view = new Uint8Array(buf);
            for (var i = 0; i !== s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
            return buf;
        }
        saveAs(new Blob([s2ab(wbout)], { type: ""application/octet-stream"" }), ""WTGWise Daily Gen Report.xlsx"");
    }


    function dailyexportToExcelsitewise()
    {
        result = exceldata2;
        var columns = [
            ""Date"", ""Country"", ""State"", ""SPV"", ""Site"", ""Capacity"", ""Wind"", ""kWh"", ""PLF"", ""MA_ACT"", ""MA_CON"", ""IGA"", ""EGA_A"", ""EGA_B"", ""EGA_C"", ""Gen_Hrs"", ""Lull_Hrs"", ""USMH"", ""SMH"", ""Others"",
            ""IGBDH"", ""EGBDH"", ""LS"", ""Total_BD"", ""USMH_Loss"", ""SMH_Loss"", ""Others_Loss"", ""IGBDH_Loss");
            WriteLiteral(@""", ""EGBDH_Loss"", ""LS_Loss"", ""Total_Loss""
        ];
        //console.log(result);
        var rows = [];
        var total_losses = 0;
        var total_hourse = 0;
        for (var i = 0; i < result.length; i++)
        {
            var row = [];
            //total_losses = Math.abs(parseFloat(result[i].usmh_loss)) + Math.abs(parseFloat(result[i].smh_loss)) + Math.abs(parseFloat(result[i].others_loss)) + Math.abs(parseFloat(result[i].igbdh_loss)) + Math.abs(parseFloat(result[i].egbdh_loss)) + Math.abs(parseFloat(result[i].loadShedding_loss));
            //total_losses = (parseFloat(result[i].usmh_loss) * -1) + (parseFloat(result[i].smh_loss) * -1) + (parseFloat(result[i].others_loss) * -1) + (parseFloat(result[i].igbdh_loss) * -1) + (parseFloat(result[i].egbdh_loss) * -1) + (parseFloat(result[i].loadShedding_loss) * -1);
            total_losses = (parseFloat(result[i].usmh_loss)) + (parseFloat(result[i].smh_loss)) + (parseFloat(result[i].others_loss)) + (parseFloat(result[i].igbdh_loss)) + (p");
            WriteLiteral(@"arseFloat(result[i].egbdh_loss)) + (parseFloat(result[i].loadShedding_loss));
            total_hourse = result[i].unschedule_num + result[i].schedule_num + result[i].others_num + result[i].igbdh_num + result[i].egbdh_num + result[i].load_shedding_num;
            row.push(result[i].date.split(""T"")[0].split(""-"").reverse().join(""-""));
            row.push(result[i].country);
            row.push(result[i].state);
            row.push(result[i].spv);
            row.push(result[i].site);
            row.push(result[i].total_mw);
            row.push(result[i].wind_speed);
            row.push(result[i].kwh);
            row.push(result[i].plf);
            row.push(result[i].ma_actual);
            row.push(result[i].ma_contractual);
            row.push(result[i].iga);
            row.push(result[i].ega);
            row.push(result[i].ega_b);
            row.push(result[i].ega_c);
            //row.push(result[i].plf);
            row.push(result[i].grid_hrs);
            row.push(result[i]");
            WriteLiteral(@".lull_hrs);
            //row.push(result[i].production_hrs);
            row.push(result[i].unschedule_num);
            row.push(result[i].schedule_num);
            row.push(result[i].others_num);
            row.push(result[i].igbdh_num);
            row.push(result[i].egbdh_num);
            row.push(result[i].load_shedding_num);
            row.push(total_hourse);
            //row.push(result[i].load_shedding_num);
            row.push(Math.abs(parseFloat(result[i].usmh_loss)*-1) * 1000000);
            row.push(Math.abs(parseFloat(result[i].smh_loss)*-1) * 1000000);
            row.push(Math.abs(parseFloat(result[i].others_loss)*-1) * 1000000);
            row.push(Math.abs(parseFloat(result[i].igbdh_loss)*-1) * 1000000);
            row.push(Math.abs(parseFloat(result[i].egbdh_loss)*-1) * 1000000);
            row.push(Math.abs(parseFloat(result[i].loadShedding_loss)*-1) * 1000000);
            row.push(Math.abs(parseFloat(total_losses)*-1) * 1000000);
            rows.push(row);
  ");
            WriteLiteral(@"      }
        var data = [columns].concat(rows);
        var ws = XLSX.utils.aoa_to_sheet(data);
        var wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, ""SiteWise Daily GenReport"");
        var wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'binary' });
        function s2ab(s)
        {
            var buf = new ArrayBuffer(s.length);
            var view = new Uint8Array(buf);
            for (var i = 0; i !== s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
            return buf;
        }
        saveAs(new Blob([s2ab(wbout)], { type: ""application/octet-stream"" }), ""SiteWise Daily GenReport.xlsx"");
}
   function monthlyexportToExcelwtgwise() {
        var year = $('select#fyM option:selected').val();
        result = exceldata3;
        var columns = [
            ""FY"",""Month"", ""Country"", ""State"", ""SPV"", ""Site"", ""WTG"", ""Wind"", ""kWh"", ""PLF"", ""MA_ACT"", ""MA_CON"", ""IGA"", ""EGA_A"", ""EGA_B"", ""EGA_C"", ""Gen_Hrs"", ""Lull_Hrs"", ""USMH"", ""SMH"", ""Others"",
           ");
            WriteLiteral(@" ""IGBDH"", ""EGBDH"", ""LS"", ""Total_BD"", ""USMH_Loss"", ""SMH_Loss"", 'Others_Loss', ""IGBDH_Loss"", ""EGBDH_Loss"", ""LS_Loss"", 'Total_Loss'
        ];
        var rows = [];
        var total_losses = 0;
        var total_hourse = 0;
       for (var i = 0; i < result.length; i++)
       {
            var row = [];
            //total_losses = Math.abs(parseFloat(result[i].usmh_loss)) + Math.abs(parseFloat(result[i].smh_loss)) + Math.abs(parseFloat(result[i].others_loss)) + Math.abs(parseFloat(result[i].igbdh_loss)) + Math.abs(parseFloat(result[i].egbdh_loss)) + Math.abs(parseFloat(result[i].loadShedding_loss));
           //total_losses = (parseFloat(result[i].usmh_loss) * -1) + (parseFloat(result[i].smh_loss) * -1) + (parseFloat(result[i].others_loss) * -1) + (parseFloat(result[i].igbdh_loss) * -1) + (parseFloat(result[i].egbdh_loss) * -1) + (parseFloat(result[i].loadShedding_loss) * -1);
           total_losses = (parseFloat(result[i].usmh_loss)) + (parseFloat(result[i].smh_loss)) + (parseFloat(result[i].oth");
            WriteLiteral(@"ers_loss)) + (parseFloat(result[i].igbdh_loss)) + (parseFloat(result[i].egbdh_loss)) + (parseFloat(result[i].loadShedding_loss));
           total_hourse = result[i].unschedule_hrs + result[i].schedule_hrs + result[i].others + result[i].igbdh + result[i].egbdh + result[i].load_shedding;
            row.push(year);
            row.push(result[i].month);
            row.push(result[i].country);
            row.push(result[i].state);
            row.push(result[i].spv);
            row.push(result[i].site);
            row.push(result[i].wtg);
            row.push(result[i].wind_speed);
            row.push(result[i].kwh);
            row.push(result[i].plf);
            row.push(result[i].ma_actual);
            row.push(result[i].ma_contractual);
            row.push(result[i].iga);
            row.push(result[i].ega);
            row.push(result[i].ega_b);
            row.push(result[i].ega_c);
            //row.push(result[i].plf);
            row.push(result[i].grid_hrs);
            row");
            WriteLiteral(@".push(result[i].lull_hrs);
            //row.push(result[i].production_hrs);
            row.push(result[i].unschedule_num);
            row.push(result[i].schedule_num);
            row.push(result[i].others_num);
            row.push(result[i].igbdh_num);
            row.push(result[i].egbdh_num);
            row.push(result[i].load_shedding_num);
            row.push(total_hourse);
            //row.push(result[i].load_shedding_num);
           row.push(Math.abs(parseFloat(result[i].usmh_loss)*-1) * 1000000);
           row.push(Math.abs(parseFloat(result[i].smh_loss)*-1) * 1000000);
           row.push(Math.abs(parseFloat(result[i].others_loss)*-1) * 1000000);
           row.push(Math.abs(parseFloat(result[i].igbdh_loss)*-1) * 1000000);
           row.push(Math.abs(parseFloat(result[i].egbdh_loss)*-1) * 1000000);
           row.push(Math.abs(parseFloat(result[i].loadShedding_loss)*-1) * 1000000);
           row.push(Math.abs(parseFloat(total_losses)*-1) * 1000000);
           rows.push(ro");
            WriteLiteral(@"w);
       }
       var data = [columns].concat(rows);
       var ws = XLSX.utils.aoa_to_sheet(data);
       var wb = XLSX.utils.book_new();
       XLSX.utils.book_append_sheet(wb, ws, ""WTGWise Monthly GenReport"");
       var wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'binary' });
       function s2ab(s) {
            var buf = new ArrayBuffer(s.length);
            var view = new Uint8Array(buf);
            for (var i = 0; i !== s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
            return buf;
       }
       saveAs(new Blob([s2ab(wbout)], { type: ""application/octet-stream"" }), ""WTGWise Monthly GenReport.xlsx"");
    }
    function monthlyexportToExcelsitewise()
    {
        var year = $('select#fyM option:selected').val();
        result = exceldata4;
        var columns = [
            ""Date"", ""Country"", ""State"", ""SPV"", ""Site"", ""Capacity"", ""Wind"", ""kWh"", ""PLF"", ""MA_ACT"", ""MA_CON"", ""IGA"", ""EGA_A"", ""EGA_B"", ""EGA_C"", ""Gen_Hrs"", ""Lull_Hrs"", ""USMH"", ""SMH"", ""Others"",
          ");
            WriteLiteral(@"  ""IGBDH"", ""EGBDH"", ""LS"", ""Total_BD"", ""USMH_Loss"", ""SMH_Loss"", 'Others_Loss', ""IGBDH_Loss"", ""EGBDH_Loss"", ""LS_Loss"", 'Total_Loss'
        ];
        var rows = [];
        var total_losses = 0;
        var total_hourse = 0;
        for (var i = 0; i < result.length; i++)
        {
            var row = [];
            //total_losses = Math.abs(parseFloat(result[i].usmh_loss)) + Math.abs(parseFloat(result[i].smh_loss)) + Math.abs(parseFloat(result[i].others_loss)) + Math.abs(parseFloat(result[i].igbdh_loss)) + Math.abs(parseFloat(result[i].egbdh_loss)) + Math.abs(parseFloat(result[i].loadShedding_loss));
            //total_losses = (parseFloat(result[i].usmh_loss) * -1) + (parseFloat(result[i].smh_loss) * -1) + (parseFloat(result[i].others_loss) * -1) + (parseFloat(result[i].igbdh_loss) * -1) + (parseFloat(result[i].egbdh_loss) * -1) + (parseFloat(result[i].loadShedding_loss) * -1);
            total_losses = (parseFloat(result[i].usmh_loss)) + (parseFloat(result[i].smh_loss)) + (parseFloat(result[i");
            WriteLiteral(@"].others_loss)) + (parseFloat(result[i].igbdh_loss)) + (parseFloat(result[i].egbdh_loss)) + (parseFloat(result[i].loadShedding_loss));
            total_hourse = result[i].unschedule_hrs + result[i].schedule_hrs + result[i].others + result[i].igbdh + result[i].egbdh + result[i].load_shedding;

            row.push(year);
            row.push(result[i].month);
            row.push(result[i].country);
            row.push(result[i].state);
            row.push(result[i].spv);
            row.push(result[i].site);
            row.push(result[i].total_mw);
            row.push(result[i].wind_speed);
            row.push(result[i].kwh);
            row.push(result[i].plf);
            row.push(result[i].ma_actual);
            row.push(result[i].ma_contractual);
            row.push(result[i].iga);
            row.push(result[i].ega);
            row.push(result[i].ega_b);
            row.push(result[i].ega_c);
            //row.push(result[i].plf);
            row.push(result[i].grid_hrs);
  ");
            WriteLiteral(@"          row.push(result[i].lull_hrs);
            //row.push(result[i].production_hrs);
            row.push(result[i].unschedule_num);
            row.push(result[i].schedule_num);
            row.push(result[i].others_num);
            row.push(result[i].igbdh_num);
            row.push(result[i].egbdh_num);
            row.push(result[i].load_shedding_num);
            row.push(total_hourse);
            //row.push(result[i].load_shedding_num);
            row.push(Math.abs(parseFloat(result[i].usmh_loss)*-1) * 1000000);
            row.push(Math.abs(parseFloat(result[i].smh_loss)*-1) * 1000000);
            row.push(Math.abs(parseFloat(result[i].others_loss)*-1) * 1000000);
            row.push(Math.abs(parseFloat(result[i].igbdh_loss)*-1) * 1000000);
            row.push(Math.abs(parseFloat(result[i].egbdh_loss)*-1) * 1000000);
            row.push(Math.abs(parseFloat(result[i].loadShedding_loss)*-1) * 1000000);
            row.push(Math.abs(parseFloat(total_losses)*-1) * 1000000);
   ");
            WriteLiteral(@"         rows.push(row);
        }
        var data = [columns].concat(rows);
        var ws = XLSX.utils.aoa_to_sheet(data);
        var wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, ""SiteWise Monthly Gen Report"");
        var wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'binary' });
        function s2ab(s)
        {
            var buf = new ArrayBuffer(s.length);
            var view = new Uint8Array(buf);
            for (var i = 0; i !== s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
            return buf;
        }
        saveAs(new Blob([s2ab(wbout)], { type: ""application/octet-stream"" }), ""SiteWise Monthly GenReport.xlsx"");
    }

    function yearlyexportToExcelwtgwise() {
        var fyyear = $('select#fyY option:selected').val();
        result = exceldata5;
        var columns = [
            ""Date"", ""Country"", ""State"", ""SPV"", ""Site"", ""WTG"", ""Wind"", ""kWh"", ""PLF"", ""MA_ACT"", ""MA_CON"", ""IGA"", ""EGA_A"", ""EGA_B"", ""EGA_C"", ""Gen_Hrs"", ""Lull_Hrs"", ""U");
            WriteLiteral(@"SMH"", ""SMH"", ""Others"",
            ""IGBDH"", ""EGBDH"", ""LS"", ""Total_BD"", ""USMH_Loss"", ""SMH_Loss"", 'Others_Loss', ""IGBDH_Loss"", ""EGBDH_Loss"", ""LS_Loss"", 'Total_Loss'
        ];
        var rows = [];
        var total_losses = 0;
        var total_hourse = 0;
        for (var i = 0; i < result.length; i++)
        {
            var row = [];
            //total_losses = Math.abs(parseFloat(result[i].usmh_loss)) + Math.abs(parseFloat(result[i].smh_loss)) + Math.abs(parseFloat(result[i].others_loss)) + Math.abs(parseFloat(result[i].igbdh_loss)) + Math.abs(parseFloat(result[i].egbdh_loss)) + Math.abs(parseFloat(result[i].loadShedding_loss));

            //total_losses = (parseFloat(result[i].usmh_loss) * -1) + (parseFloat(result[i].smh_loss) * -1) + (parseFloat(result[i].others_loss) * -1) + (parseFloat(result[i].igbdh_loss) * -1) + (parseFloat(result[i].egbdh_loss) * -1) + (parseFloat(result[i].loadShedding_loss) * -1);
            total_losses = (parseFloat(result[i].usmh_loss)) + (parseFloat(result[");
            WriteLiteral(@"i].smh_loss)) + (parseFloat(result[i].others_loss)) + (parseFloat(result[i].igbdh_loss)) + (parseFloat(result[i].egbdh_loss)) + (parseFloat(result[i].loadShedding_loss));
            total_hourse = result[i].unschedule_hrs + result[i].schedule_hrs + result[i].others + result[i].igbdh + result[i].egbdh + result[i].load_shedding;
            row.push(fyyear);
            //row.push(result[i].month);
            row.push(result[i].country);
            row.push(result[i].state);
            row.push(result[i].spv);
            row.push(result[i].site);
            row.push(result[i].wtg);
            row.push(result[i].wind_speed);
            row.push(result[i].kwh);
            row.push(result[i].plf);
            row.push(result[i].ma_actual);
            row.push(result[i].ma_contractual);
            row.push(result[i].iga);
            row.push(result[i].ega);
            row.push(result[i].ega_b);
            row.push(result[i].ega_c);
            //row.push(result[i].plf);
            ");
            WriteLiteral(@"row.push(result[i].grid_hrs);
            row.push(result[i].lull_hrs);
            //row.push(result[i].production_hrs);
            row.push(result[i].unschedule_num);
            row.push(result[i].schedule_num);
            row.push(result[i].others_num);
            row.push(result[i].igbdh_num);
            row.push(result[i].egbdh_num);
            row.push(result[i].load_shedding_num);
            row.push(total_hourse);
            //row.push(result[i].load_shedding_num);
            row.push(Math.abs(parseFloat(result[i].usmh_loss)*-1) * 1000000);
            row.push(Math.abs(parseFloat(result[i].smh_loss)*-1) * 1000000);
            row.push(Math.abs(parseFloat(result[i].others_loss)*-1) * 1000000);
            row.push(Math.abs(parseFloat(result[i].igbdh_loss)*-1) * 1000000);
            row.push(Math.abs(parseFloat(result[i].egbdh_loss)*-1) * 1000000);
            row.push(Math.abs(parseFloat(result[i].loadShedding_loss)*-1) * 1000000);
            row.push(Math.abs(parseFloat(t");
            WriteLiteral(@"otal_losses)*-1) * 1000000);
            rows.push(row);
        }
        var data = [columns].concat(rows);
        var ws = XLSX.utils.aoa_to_sheet(data);
        var wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, ""WTGWise Yearly GenReport"");
        var wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'binary' });

        function s2ab(s) {
            var buf = new ArrayBuffer(s.length);
            var view = new Uint8Array(buf);
            for (var i = 0; i !== s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
            return buf;
        }
        saveAs(new Blob([s2ab(wbout)], { type: ""application/octet-stream"" }), ""WTGWise  Yearly GenReport.xlsx"");
    }

    function yearlyexportToExcelsitewise() {
        var fyyear  = $('select#fyM option:selected').val();
        result      = exceldata6;
        var columns = [
            ""Date"", ""Country"", ""State"", ""SPV"", ""Site"", ""Capacity"", ""Wind"", ""kWh"", ""PLF"", ""MA_ACT"", ""MA_CON"", ""IGA"", ""EGA_A"", ""EGA_B"", ");
            WriteLiteral(@"""EGA_C"", ""Gen_Hrs"", ""Lull_Hrs"", ""USMH"", ""SMH"", ""Others"",
            ""IGBDH"", ""EGBDH"", ""LS"", ""Total_BD"", ""USMH_Loss"", ""SMH_Loss"", 'Others_Loss', ""IGBDH_Loss"", ""EGBDH_Loss"", ""LS_Loss"", 'Total_Loss'
        ];
        var rows = [];
        var total_losses = 0;
        var total_hourse = 0;
        for (var i = 0; i < result.length; i++)
        {
            var row = [];
            //total_losses = Math.abs(parseFloat(result[i].usmh_loss)) + Math.abs(parseFloat(result[i].smh_loss)) + Math.abs(parseFloat(result[i].others_loss)) + Math.abs(parseFloat(result[i].igbdh_loss)) + Math.abs(parseFloat(result[i].egbdh_loss)) + Math.abs(parseFloat(result[i].loadShedding_loss));
            //total_losses = (parseFloat(result[i].usmh_loss) * -1) + (parseFloat(result[i].smh_loss) * -1) + (parseFloat(result[i].others_loss) * -1) + (parseFloat(result[i].igbdh_loss) * -1) + (parseFloat(result[i].egbdh_loss) * -1) + (parseFloat(result[i].loadShedding_loss) * -1);
            total_losses = (parseFloat(result[i].u");
            WriteLiteral(@"smh_loss)) + (parseFloat(result[i].smh_loss)) + (parseFloat(result[i].others_loss)) + (parseFloat(result[i].igbdh_loss)) + (parseFloat(result[i].egbdh_loss)) + (parseFloat(result[i].loadShedding_loss));
            total_hourse = result[i].unschedule_hrs + result[i].schedule_hrs + result[i].others + result[i].igbdh + result[i].egbdh + result[i].load_shedding;
            row.push(fyyear);
            //row.push(result[i].month);
            row.push(result[i].country);
            row.push(result[i].state);
            row.push(result[i].spv);
            row.push(result[i].site);
            row.push(result[i].total_mw);
            row.push(result[i].wind_speed);
            row.push(result[i].kwh);
            row.push(result[i].plf);
            row.push(result[i].ma_actual);
            row.push(result[i].ma_contractual);
            row.push(result[i].iga);
            row.push(result[i].ega);
            row.push(result[i].ega_b);
            row.push(result[i].ega_c);
            //r");
            WriteLiteral(@"ow.push(result[i].plf);
            row.push(result[i].grid_hrs);
            row.push(result[i].lull_hrs);
            //row.push(result[i].production_hrs);
            row.push(result[i].unschedule_num);
            row.push(result[i].schedule_num);
            row.push(result[i].others_num);
            row.push(result[i].igbdh_num);
            row.push(result[i].egbdh_num);
            row.push(result[i].load_shedding_num);
            row.push(total_hourse);
            //row.push(result[i].load_shedding_num);
            row.push(Math.abs(parseFloat(result[i].usmh_loss)*-1) * 1000000);
            row.push(Math.abs(parseFloat(result[i].smh_loss)*-1) * 1000000);
            row.push(Math.abs(parseFloat(result[i].others_loss)*-1) * 1000000);
            row.push(Math.abs(parseFloat(result[i].igbdh_loss)*-1) * 1000000);
            row.push(Math.abs(parseFloat(result[i].egbdh_loss)*-1) * 1000000);
            row.push(Math.abs(parseFloat(result[i].loadShedding_loss)*-1) * 1000000);
     ");
            WriteLiteral(@"       row.push(Math.abs(parseFloat(total_losses)*-1) * 1000000);
            rows.push(row);
        }

        var data = [columns].concat(rows);
        var ws = XLSX.utils.aoa_to_sheet(data);
        var wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, ""SiteWise Yearly GenReport"");
        var wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'binary' });

        function s2ab(s) {
            var buf = new ArrayBuffer(s.length);
            var view = new Uint8Array(buf);
            for (var i = 0; i !== s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
            return buf;
        }
        saveAs(new Blob([s2ab(wbout)], { type: ""application/octet-stream"" }), ""SiteWise Yearly GenReport.xlsx"");
    }
    function GetCustomDailyGenReport()
    {
        var daterange = $('#custom_daterange').val();
        var arr1 = new Array();
        arr1 = daterange.split(""-"");
        var fromDate = moment(arr1[0], 'DD/MM/YYYY').format('YYYY-MM-DD');
        var toD");
            WriteLiteral(@"ate = moment(arr1[1], 'DD/MM/YYYY').format('YYYY-MM-DD');
        let site_list = """";
        $('select#cust_daily_group option:selected').each(function () {
            site_list += $(this).val() + "","";
        });
        site_list = site_list != """" ? site_list.slice(0, -1) : site_list;
        document.getElementById(""loaderD"").style.display = 'flex';
        var reportType = ""Site"";
        var reporthead = ""Site Wise Report"";
        $.ajax({
            type: ""GET"",
            url: '");
#nullable restore
#line 4104 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindGenReport.cshtml"
             Write(Url.Action("GetCustomeWindDaily", "WindReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?fromDate=' + fromDate + '&toDate=' + toDate + '&site_list=' + site_list,
            contentType: ""application/json; charset=utf-8"",
            datatype: ""JSON"",
            success: function (result, status, xhr)
            {
                var tbl = '<table id=""example_daily_group""  class=""table table-bordered table-striped"" style=""width:220%"">';
                tbl += '<thead class=""tbl-head""><tr>';
                tbl += '<th>Date</th>';
                tbl += '<th>Country</th>';
                tbl += '<th>State</th>';
                tbl += '<th>Group Name</th>';
                //tbl += '<th>Site</th>';
                tbl += '<th>Capacity<br>(MW)</th>';
                tbl += '<th>Wind<br>(m/s)</th>';
                tbl += '<th>kWh</th>';
                tbl += '<th>PLF<br>(%)</th>';
                tbl += '<th>MA_ACT<br>(%)</th>';
                tbl += '<th>MA_CON<br>(%)</th>';
                tbl += '<th>IGA<br>(%)</th>';
                tbl += '<th>EGA_A<br>(%) <span c");
            WriteLiteral(@"lass=""information"">i<span></th>';
                tbl += '<th>EGA_B<br>(%) <span class=""information"">i<span></th>';
                tbl += '<th>EGA_C<br>(%) <span class=""information"">i<span></th>';
                tbl += '<th>Gen_Hrs</th>';
                tbl += '<th>Lull_Hrs</th>';
                tbl += '<th>USMH</th>';
                tbl += '<th>SMH</th>';
                tbl += '<th>Others</th>';
                tbl += '<th>IGBDH</th>';
                tbl += '<th>EGBDH</th>';
                tbl += '<th>LS</th>';
                tbl += '<th>Total_BD</th>';
                tbl += '<th>USMH_Loss</th>';
                tbl += '<th>SMH_Loss</th>';
                tbl += '<th>Others_Loss</th>';
                tbl += '<th>IGBDH_Loss</th>';
                tbl += '<th>EGBDH_Loss</th>';
                tbl += '<th>LS_Loss</th>';
                tbl += '<th>Total_Loss</th>';
                tbl += '</tr></thead>';
                if (result.length > 0)
                {
                  ");
            WriteLiteral(@"  var total_losses = 0;
                    var total_hourse = 0;
                    for (var i = 0; i < result.length; i++)
                    {
                        total_losses = Math.abs(parseFloat(result[i].usmh_loss)) + Math.abs(parseFloat(result[i].smh_loss)) + Math.abs(parseFloat(result[i].others_loss)) + Math.abs(parseFloat(result[i].igbdh_loss)) + Math.abs(parseFloat(result[i].egbdh_loss)) + Math.abs(parseFloat(result[i].loadShedding_loss));
                        total_hourse = result[i].unschedule_num + result[i].schedule_num + result[i].others_num + result[i].igbdh_num + result[i].egbdh_num + result[i].load_shedding_num;
                        let chielditem = result[i].item;
                        let total_wind_speed = 0;
                        let total_plf        = 0;
                        let total_ma_act     = 0;
                        let total_ma_con     = 0;
                        let total_iga        = 0;
                        let total_ega_a      = 0;
      ");
            WriteLiteral(@"                  let total_ega_b      = 0;
                        let total_ega_c      = 0;
                        let total_capacity   = 0;
                        let avg_wind_speed   = 0;
                        let avg_plf          = 0;
                        let avg_ma_act       = 0;
                        let avg_ma_con       = 0;
                        let avg_iga          = 0;
                        let avg_ega_a        = 0;
                        let avg_ega_b        = 0;
                        let avg_ega_c        = 0;
                        for (var k = 0; k < chielditem.length; k++) {
                            total_capacity   += chielditem[k].total_mw;
                            total_wind_speed += chielditem[k].wind_speed * chielditem[k].total_mw;
                            total_plf        += chielditem[k].plf * chielditem[k].total_mw;
                            total_ma_act     += chielditem[k].ma_actual * chielditem[k].total_mw;
                            total");
            WriteLiteral(@"_ma_con     += chielditem[k].ma_contractual * chielditem[k].total_mw;
                            total_iga        += chielditem[k].iga * chielditem[k].total_mw;
                            total_ega_a      += chielditem[k].ega * chielditem[k].total_mw;
                            total_ega_b      += chielditem[k].ega_b * chielditem[k].total_mw;
                            total_ega_c      += chielditem[k].ega_c * chielditem[k].total_mw;
                        }
                        if (total_capacity != 0) {
                            avg_wind_speed = total_wind_speed / total_capacity;
                            avg_plf        = total_plf / total_capacity;
                            avg_ma_act     = total_ma_act / total_capacity;
                            avg_ma_con     = total_ma_con / total_capacity;
                            avg_iga        = total_iga / total_capacity;
                            avg_ega_a      = total_ega_a / total_capacity;
                            avg_ega_b  ");
            WriteLiteral(@"    = total_ega_b / total_capacity;
                            avg_ega_c      = total_ega_c / total_capacity;
                        }
                        let chield_class = result[i].cust_group.replace(/\s/g, """");
                        tbl += '<tr>';
                        let expand_btn = """";
                        if (chielditem.length > 1) {
                            expand_btn = '<div class=""grp-btn"" id = ""parant_' + chield_class + '"" onclick = ""showchield(id)"" style = ""display:inline-block"" > <i class=""fas fa-plus""></i></div ><div class=""grp-btn"" id=""phide_' + chield_class + '"" onclick=""hidechield(id)"" style=""display:none""><i class=""fas fa-minus""></i></div>';

                        }
                        //tbl += '<tr>';
                        tbl += '<td class=""text-left""  style=""text-wrap: nowrap;"">' + result[i].date.split(""T"")[0].split(""-"").reverse().join(""-""); + '</td>';
                        tbl += '<td class=""text-left"">' + result[i].country + '</td>';
            ");
            WriteLiteral(@"            tbl += '<td class=""text-left"">' + result[i].state + '</td>';
                        //tbl += '<td class=""text-left""  style=""text-wrap: nowrap;"">' + result[i].spv + '</td>';
                        tbl += '<td class=""text-left"" style=""text-wrap: nowrap;"">' + expand_btn + '<b>&nbsp;&nbsp;' + result[i].cust_group + '</b></td>';
                        tbl += '<td class=""text-right"">' + result[i].total_mw.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_wind_speed.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].kwh.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_plf.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_ma_act.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_ma_con.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_iga.toFixed(2) + '</td>';
                     ");
            WriteLiteral(@"   tbl += '<td class=""text-right"">' + avg_ega_a.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_ega_b.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_ega_c.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].grid_hrs.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].lull_hrs.toFixed(2) + '</td>';
                        tbl += '<td  class=""text-right"">' + result[i].unschedule_num.toFixed(2) + '</td>';
                        tbl += '<td  class=""text-right"">' + result[i].schedule_num.toFixed(2) + '</td>';
                        tbl += '<td  class=""text-right"">' + result[i].others_num.toFixed(2) + '</td>';
                        tbl += '<td  class=""text-right"">' + result[i].igbdh_num.toFixed(2) + '</td>';
                        tbl += '<td  class=""text-right"">' + result[i].egbdh_num.toFixed(2) + '</td>';
                        tbl += '<td  class=");
            WriteLiteral(@"""text-right"">' + result[i].load_shedding_num.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">'  + total_hourse.toFixed(2) + '</td>';
                        tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].usmh_loss)) * 1000000).toFixed(2) + '</td>';
                        tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].smh_loss)) * 1000000).toFixed(2) + '</td>';
                        tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].others_loss)) * 1000000).toFixed(2) + '</td>';
                        tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].igbdh_loss)) * 1000000).toFixed(2) + '</td>';
                        tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].egbdh_loss)) * 1000000).toFixed(2) + '</td>';
                        tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].loadShedding_loss)) * 1000000).toFixed(2) + '</td>';
                        tbl");
            WriteLiteral(@" += '<td  class=""text-right"">' + (Math.abs(parseFloat(total_losses)) * 1000000).toFixed(2) + '</td>';
                        tbl += '</tr>';

                        var total_losses_chield = 0;
                        var total_hourse_chield = 0;
                        for (var j = 0; j < chielditem.length; j++)
                        {
                            total_losses_chield = Math.abs(parseFloat(chielditem[j].usmh_loss)) + Math.abs(parseFloat(chielditem[j].smh_loss)) + Math.abs(parseFloat(chielditem[j].others_loss)) + Math.abs(parseFloat(chielditem[j].igbdh_loss)) + Math.abs(parseFloat(chielditem[j].egbdh_loss)) + Math.abs(parseFloat(chielditem[j].loadShedding_loss));
                            total_hourse_chield = chielditem[j].unschedule_num + chielditem[j].schedule_num + chielditem[j].others_num + chielditem[j].igbdh_num + chielditem[j].egbdh_num + chielditem[j].load_shedding_num;
                            tbl += '<tr  class=""' + chield_class +'"" style=""display:none"">';
        ");
            WriteLiteral(@"                    tbl += '<td class=""text-left""  style=""text-wrap: nowrap;"">' + chielditem[j].date.split(""T"")[0].split(""-"").reverse().join(""-""); + '</td>';
                            tbl += '<td class=""text-left"">' + chielditem[j].country + '</td>';
                            tbl += '<td class=""text-left"">' + chielditem[j].state + '</td>';
                            //tbl += '<td class=""text-left""  style=""text-wrap: nowrap;"">' + result[i].spv + '</td>';
                            tbl += '<td class=""text-left"" style=""padding-left: 1rem !important;"">' + chielditem[j].site + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].total_mw.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].wind_speed.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].kwh.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].plf.toFixed(2) + '</td>'");
            WriteLiteral(@";
                            tbl += '<td class=""text-right"">' + chielditem[j].ma_actual.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].ma_contractual.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].iga.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].ega.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].ega_b.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].ega_c.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].grid_hrs.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].lull_hrs.toFixed(2) + '</td>';
                            tbl += '<td  class=""text-right"">' + chielditem[j].unschedule_num.toFixed(2) + '</td>';
                            tbl += '<td  c");
            WriteLiteral(@"lass=""text-right"">' + chielditem[j].schedule_num.toFixed(2) + '</td>';
                            tbl += '<td  class=""text-right"">' + chielditem[j].others_num.toFixed(2) + '</td>';
                            tbl += '<td  class=""text-right"">' + chielditem[j].igbdh_num.toFixed(2) + '</td>';
                            tbl += '<td  class=""text-right"">' + chielditem[j].egbdh_num.toFixed(2) + '</td>';
                            tbl += '<td  class=""text-right"">' + chielditem[j].load_shedding_num.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + total_hourse_chield.toFixed(2) + '</td>';
                            tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(chielditem[j].usmh_loss)) * 1000000).toFixed(2) + '</td>';
                            tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(chielditem[j].smh_loss)) * 1000000).toFixed(2) + '</td>';
                            tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(chielditem[j].other");
            WriteLiteral(@"s_loss)) * 1000000).toFixed(2) + '</td>';
                            tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(chielditem[j].igbdh_loss)) * 1000000).toFixed(2) + '</td>';
                            tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(chielditem[j].egbdh_loss)) * 1000000).toFixed(2) + '</td>';
                            tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(chielditem[j].loadShedding_loss)) * 1000000).toFixed(2) + '</td>';
                            tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(total_losses_chield)) * 1000000).toFixed(2) + '</td>';
                            tbl += '</tr>';
                        }
                    }
                }
                else
                {
                    console.log(""Data not available"");
                }
                tbl += '</table>';
                //document.getElementById(""reportsDaily"").style.display = 'none';
               // document.getElementById(""rep");
            WriteLiteral(@"ortsDailyGroup"").style.display = 'block';
                document.getElementById(""loaderD"").style.display = 'none';
                //$(""#reportsDailyGroup"").html(tbl);
                $(""#reportsDailyGroup"").html("""");
                $(""#reportsDailyGroup"").html(tbl);
                $('#example_daily_group').DataTable({
                    dom: 'Bfrtip',
                    searching: false,
                    paging: false,
                    ordering: false,
                    info: true,
                    fixedHeader: true,
                    responsive: true,
                    scrollX: true,
                    lengthChange: false,
                    autoWidth: true,
                    fixedColumns: {
                        left: 2
                    },
                    rowGroup: {
                        dataSrc: 0,
                    },
                    pageLength: 50,
                    ""order"": [[4, ""asc""]],
                    buttons: [
               ");
            WriteLiteral(@"         {
                            extend: 'excel',
                            title: 'Solar Monthly Generation Reports Group By Site',
                            exportOptions: {
                                columns: ':visible'
                            }
                        },
                        {
                            extend: 'csv',
                            title: 'Solar Monthly Generation Reports Group By Site',
                            exportOptions: {
                                columns: ':visible'
                            }
                        },
                        'colvis',
                        //{
                            //text: '<span class=""fas fa-file-excel"" title=""Download from DB up to six decimal""></span>',
                            //className: 'btn ml-1   ',
                            //action: function () {
                            //   YearlyexportToExcelGenReportSiteWise();
                            //}
   ");
            WriteLiteral(@"                     //},
                    ],
                    initComplete: function ()
                    {
                        this.api().columns().header().to$().each(function ()
                        {

                            if ($(this).text() == ""EGA_A(%) i"")
                            {
                                $(this).attr('title', 'External Grid Breakdown, Shutdown & Load Shedding')
                            }
                            if ($(this).text() == ""EGA_B(%) i"")
                            {
                                $(this).attr('title', 'External Grid Breakdown & Shutdown')
                            }
                            if ($(this).text() == ""EGA_C(%) i"")
                            {
                                $(this).attr('title', 'Load Shedding')
                            }
                        })
                    }
                });
                $("".dt-buttons"").addClass('btn-group flex-wrap');
   ");
            WriteLiteral(@"             $("".dt-buttons"").css(""margin-bottom"",""0%"");
                $("".dt-buttons > button"").addClass('btn btn-secondary');
                $("".dataTables_filter> label >input"").addClass('form-control form-control-sm');
                //$(""dataTables_filter"").css(""margin-top"", ""-35px"");
                $(document).on(""click"", ""div.dt-button-collection > div > button"", function () {
                    if ($(this).hasClass(""active"")) {
                        $(this).css(""background-color"", ""white"");
                    }
                    else {
                        $(this).css(""background-color"", ""#31576d"");
                    }
                });
                document.getElementById(""loaderD"").style.display = 'none';
            }
        });
    }
    function GetCustomMonthGenReport()
    {
        let site_list = """";
        $('select#custM_group option:selected').each(function () {
            site_list += $(this).val() + "","";
        });
        site_list = site_l");
            WriteLiteral(@"ist != """" ? site_list.slice(0, -1) : site_list;

        var fyyear = $('select#fyM_group option:selected').val();
        if (fyyear == """") {
            alert(""Please select financial year"");
            return false;
        }
        let month = """";
        $('select#monthM_group option:selected').each(function () {
            month+= $(this).val()+"","";
        });
        month = month != """" ? month.slice(0, -1) : month;
        document.getElementById(""loaderM"").style.display = 'flex';
        var arr1 = new Array();
        arr1 = fyyear.split(""-"");
        var fromDate = """";
        var reportType = ""Site"";
        var reporthead = ""Site Wise Report"";
        var cnt = 0;
        $.ajax({
            type: ""GET"",
            url: '");
#nullable restore
#line 4391 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindGenReport.cshtml"
             Write(Url.Action("GetCustomeWindMonthly", "WindReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?fy=' + arr1[0] + '&month=' + month + '&site_list=' + site_list,
            contentType: ""application/json; charset=utf-8"",
            datatype: ""JSON"",
            success: function (result, status, xhr)
            {

                var tbl = '<table id=""example_monthly_group""  class=""table table-bordered table-striped"" style=""width: 220%;"">';
                tbl += '<thead class=""tbl-head""><tr>';
                tbl += '<th>FY</th>';
                tbl += '<th>Month</th>';
                tbl += '<th>Country</th>';
                tbl += '<th>State</th>';
                //tbl += '<th>SPV</th>';
                tbl += '<th>Group Name</th>';
                tbl += '<th>Capacity<br>(MW)</th>';
                tbl += '<th>Wind<br>(m/s)</th>';
                tbl += '<th>kWh</th>';
                tbl += '<th>PLF<br>(%)</th>';
                tbl += '<th>MA_ACT<br>(%)</th>';
                tbl += '<th>MA_CON<br>(%)</th>';
                tbl += '<th>IGA<br>(%)</th>';
            ");
            WriteLiteral(@"    tbl += '<th>EGA_A<br>(%) <span class=""information"">i<span></th>';
                tbl += '<th>EGA_B<br>(%) <span class=""information"">i<span></th>';
                tbl += '<th>EGA_C<br>(%) <span class=""information"">i<span></th>';
                tbl += '<th>Gen_Hrs</th>';
                tbl += '<th>Lull_Hrs</th>';
                tbl += '<th>USMH</th>';
                tbl += '<th>SMH</th>';
                tbl += '<th>Others</th>';
                tbl += '<th>IGBDH</th>';
                tbl += '<th>EGBDH</th>';
                tbl += '<th>LS</th>';
                tbl += '<th>Total_BD</th>';
                tbl += '<th>USMH_Loss</th>';
                tbl += '<th>SMH_Loss</th>';
                tbl += '<th>Others_Loss</th>';
                tbl += '<th>IGBDH_Loss</th>';
                tbl += '<th>EGBDH_Loss</th>';
                tbl += '<th>LS_Loss</th>';
                tbl += '<th>Total_Loss</th>';
                tbl += '</tr></thead>';
                if (result.length > 0)
 ");
            WriteLiteral(@"               {
                    var total_losses = 0;
                    var total_hourse = 0;
                    for (var i = 0; i < result.length; i++)
                    {
                        total_losses = Math.abs(parseFloat(result[i].usmh_loss)) + Math.abs(parseFloat(result[i].smh_loss)) + Math.abs(parseFloat(result[i].others_loss)) + Math.abs(parseFloat(result[i].igbdh_loss)) + Math.abs(parseFloat(result[i].egbdh_loss)) + Math.abs(parseFloat(result[i].loadShedding_loss));
                        total_hourse = result[i].unschedule_hrs + result[i].schedule_hrs + result[i].others + result[i].igbdh + result[i].egbdh + result[i].load_shedding;

                        let chielditem       = result[i].item;
                        let total_wind_speed = 0;
                        let total_plf        = 0;
                        let total_ma_act     = 0;
                        let total_ma_con     = 0;
                        let total_iga        = 0;
                        let t");
            WriteLiteral(@"otal_ega_a      = 0;
                        let total_ega_b      = 0;
                        let total_ega_c      = 0;
                        let total_capacity   = 0;
                        let avg_wind_speed   = 0;
                        let avg_plf          = 0;
                        let avg_ma_act       = 0;
                        let avg_ma_con       = 0;
                        let avg_iga          = 0;
                        let avg_ega_a        = 0;
                        let avg_ega_b        = 0;
                        let avg_ega_c        = 0;
                        for (var k = 0; k < chielditem.length; k++)
                        {
                            total_capacity   += chielditem[k].total_mw;
                            total_wind_speed += chielditem[k].wind_speed * chielditem[k].total_mw;
                            total_plf        += chielditem[k].plf * chielditem[k].total_mw;
                            total_ma_act     += chielditem[k].ma_actual * chiel");
            WriteLiteral(@"ditem[k].total_mw;
                            total_ma_con     += chielditem[k].ma_contractual * chielditem[k].total_mw;
                            total_iga        += chielditem[k].iga * chielditem[k].total_mw;
                            total_ega_a      += chielditem[k].ega * chielditem[k].total_mw;
                            total_ega_b      += chielditem[k].ega_b * chielditem[k].total_mw;
                            total_ega_c      += chielditem[k].ega_c * chielditem[k].total_mw;

                        }
                        if (total_capacity != 0) {
                            avg_wind_speed = total_wind_speed / total_capacity;
                            avg_plf        = total_plf / total_capacity;
                            avg_ma_act     = total_ma_act / total_capacity;
                            avg_ma_con     = total_ma_con / total_capacity;
                            avg_iga        = total_iga / total_capacity;
                            avg_ega_a      = total_ega_a / t");
            WriteLiteral(@"otal_capacity;
                            avg_ega_b      = total_ega_b / total_capacity;
                            avg_ega_c      = total_ega_c / total_capacity;
                        }

                        let chield_class = result[i].cust_group.replace(/\s/g, """");
                        let expand_btn = """";
                        if (chielditem.length > 1) {
                            expand_btn = '<div class=""grp-btn"" id = ""parantM_' + chield_class + '"" onclick = ""showchieldMonthly(id)"" style = ""display:inline-block"" > <i class=""fas fa-plus""></i></div ><div class=""grp-btn"" id=""phideM_' + chield_class + '"" onclick=""hidechieldMonthly(id)"" style=""display:none""><i class=""fas fa-minus""></i></div>';

                        }
                        tbl += '<tr>';
                        tbl += '<td class=""text-left""  style=""text-wrap: nowrap;"">' + fyyear + '</td>';
                        tbl += '<td class=""text-left"">' + result[i].month + '</td>';
                        tbl += '<td c");
            WriteLiteral(@"lass=""text-left"">' + result[i].country + '</td>';
                        tbl += '<td class=""text-left"">' + result[i].state + '</td>';
                        //tbl += '<td class=""text-left""  style=""text-wrap: nowrap;"">' + result[i].spv + '</td>';
                        tbl += '<td class=""text-left"" style=""text-wrap: nowrap;"""">' + expand_btn + '<b>&nbsp;&nbsp;' + result[i].cust_group + '</b></td>';
                        tbl += '<td class=""text-right"">' + result[i].total_mw.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_wind_speed.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_plf.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].plf.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_ma_act.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_ma_con.toFixed(2) + '</td>';
                        tbl += '<td class=""text");
            WriteLiteral(@"-right"">' + avg_iga.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_ega_a.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_ega_b.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_ega_c.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].grid_hrs.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].lull_hrs.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].unschedule_hrs.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].schedule_hrs.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].others.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].igbdh.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].egbdh.toFixed(2) + '</td>");
            WriteLiteral(@"';
                        tbl += '<td class=""text-right"">' + result[i].load_shedding.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + total_hourse.toFixed(2) + '</td>';
                        tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].usmh_loss)) * 1000000).toFixed(2) + '</td>';
                        tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].smh_loss)) * 1000000).toFixed(2) + '</td>';
                        tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].others_loss)) * 1000000).toFixed(2) + '</td>';
                        tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].igbdh_loss)) * 1000000).toFixed(2) + '</td>';
                        tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].egbdh_loss)) * 1000000).toFixed(2) + '</td>';
                        tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].loadShedding_loss)) * 1000000).toFixed(2");
            WriteLiteral(@") + '</td>';
                        tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(total_losses)) * 1000000).toFixed(2) + '</td>';
                        tbl += '</tr>';
                        for (var j = 0; j < chielditem.length; j++)
                        {
                            total_losses_chield = Math.abs(parseFloat(chielditem[j].usmh_loss)) + Math.abs(parseFloat(chielditem[j].smh_loss)) + Math.abs(parseFloat(chielditem[j].others_loss)) + Math.abs(parseFloat(chielditem[j].igbdh_loss)) + Math.abs(parseFloat(chielditem[j].egbdh_loss)) + Math.abs(parseFloat(chielditem[j].loadShedding_loss));
                            total_hourse_chield = chielditem[j].unschedule_hrs + chielditem[j].schedule_hrs + chielditem[j].others + chielditem[j].igbdh + chielditem[j].egbdh + chielditem[j].load_shedding;
                            tbl += '<tr class=""' + chield_class +'"" style=""display:none"">';
                            tbl += '<td class=""text-left""  style=""text-wrap: nowrap;"">' + fyye");
            WriteLiteral(@"ar + '</td>';
                            tbl += '<td class=""text-left"">' + chielditem[j].month + '</td>';
                            tbl += '<td class=""text-left"">' + chielditem[j].country + '</td>';
                            tbl += '<td class=""text-left"">' + chielditem[j].state + '</td>';
                            //tbl += '<td class=""text-left""  style=""text-wrap: nowrap;"">' + result[i].spv + '</td>';
                            tbl += '<td class=""text-left""  style=""padding-left: 1rem !important;"">' + chielditem[j].site + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].total_mw.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].wind_speed.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].kwh.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].plf.toFixed(2) + '</td>';
                            tbl += '<td class=");
            WriteLiteral(@"""text-right"">' + chielditem[j].ma_actual.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].ma_contractual.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].iga.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].ega.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].ega_b.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].ega_c.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].grid_hrs.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].lull_hrs.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].unschedule_hrs.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].schedule_hrs.to");
            WriteLiteral(@"Fixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].others.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].igbdh.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].egbdh.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].load_shedding.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + total_hourse_chield.toFixed(2) + '</td>';
                            tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(chielditem[j].usmh_loss)) * 1000000).toFixed(2) + '</td>';
                            tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(chielditem[j].smh_loss)) * 1000000).toFixed(2) + '</td>';
                            tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(chielditem[j].others_loss)) * 1000000).toFixed(2) + '</td>';
                            ");
            WriteLiteral(@"tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(chielditem[j].igbdh_loss)) * 1000000).toFixed(2) + '</td>';
                            tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(chielditem[j].egbdh_loss)) * 1000000).toFixed(2) + '</td>';
                            tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(chielditem[j].loadShedding_loss)) * 1000000).toFixed(2) + '</td>';
                            tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(total_losses_chield)) * 1000000).toFixed(2) + '</td>';
                            tbl += '</tr>';
                        }

                    }
                }
                else
                {
                    console.log(""Data not available"");
                }
                tbl += '</table>';
                //document.getElementById(""reportsMonthly"").style.display = 'none';
                //document.getElementById(""reportsMonthlyGroup"").style.display = 'block';
                //$(""#");
            WriteLiteral(@"reportsMonthlyGroup"").html(tbl);
                $(""#reportsMonthlyGroup"").html("""");
                $(""#reportsMonthlyGroup"").html(tbl);
                $('#example_monthly_group').DataTable({
                    dom: 'Bfrtip',
                    searching: false,
                    paging: false,
                    ordering: false,
                    info: true,
                    fixedHeader: true,
                    responsive: true,
                    scrollX: true,
                    lengthChange: false,
                    autoWidth: true,
                    fixedColumns: {
                        left: 2
                    },
                    rowGroup: {
                        dataSrc: 0,
                    },
                    pageLength: 50,
                    ""order"": [[5, ""asc""]],
                    buttons: [
                        {
                            extend: 'excel',
                            title: 'Solar Monthly Generation Reports Group ");
            WriteLiteral(@"By Site',
                            exportOptions: {
                                columns: ':visible',
                                rows: { selected: false, search: 'none', order: 'applied', page: 'all', range: ''+cnt+''}
                            }
                        },
                        {
                            extend: 'csv',
                            title: 'Solar Monthly Generation Reports Group By Site',
                            exportOptions: {
                                columns: ':visible'
                            }
                        },
                        'colvis',
                        //{
                           // text: '<span class=""fas fa-file-excel"" title=""Download from DB up to six decimal""></span>',
                            //className: 'btn ml-1   ',
                           // action: function () {
                               // MonthlyexportToExcelGenReportSiteWise();
                           // }
          ");
            WriteLiteral(@"              //},
                    ],
                    initComplete: function ()
                    {
                        this.api().columns().header().to$().each(function ()
                        {
                            if ($(this).text() == ""EGA_A(%) i"")
                            {
                                $(this).attr('title', 'External Grid Breakdown, Shutdown & Load Shedding')
                            }
                            if ($(this).text() == ""EGA_B(%) i"")
                            {
                                $(this).attr('title', 'External Grid Breakdown & Shutdown')
                            }
                            if ($(this).text() == ""EGA_C(%) i"")
                            {
                                $(this).attr('title', 'Load Shedding')
                            }
                        })
                    }
                });
                $("".dt-buttons"").addClass('btn-group flex-wrap');
            ");
            WriteLiteral(@"    $("".dt-buttons"").css(""margin-bottom"", ""0%"");
                $("".dt-buttons > button"").addClass('btn btn-secondary');
                $("".dataTables_filter> label >input"").addClass('form-control form-control-sm');
                //$(""dataTables_filter"").css(""margin-top"", ""-35px"");
                $(document).on(""click"", ""div.dt-button-collection > div > button"", function ()
                {
                    if ($(this).hasClass(""active""))
                    {
                        $(this).css(""background-color"", ""white"");
                    }
                    else
                    {
                        $(this).css(""background-color"", ""#31576d"");
                    }
                });
                document.getElementById(""loaderM"").style.display = 'none';
            }
        });

    }
    function GetCustomYearlyGenReport()
    {
        let site_list = """";
        $('select#customY_group option:selected').each(function () {
            site_list += $(thi");
            WriteLiteral(@"s).val() + "","";
        });
        site_list = site_list != """" ? site_list.slice(0, -1) : site_list;
        var fyyear = $('select#fyY_group option:selected').val();
        if (fyyear == """") {
            alert(""Please select financial year"");
            return false;
        }
        document.getElementById(""loaderY"").style.display = 'flex';
        var arr1 = new Array();
        arr1 = fyyear.split(""-"");
        var fromDate = """";
        fromDate = arr1[0] + '-04-01';
        toDate = '20' + arr1[1] + '-03-31';
        var reportType = ""Site"";
        var reporthead = ""Site Wise Report"";
        $.ajax({
            type: ""GET"",
            url: '");
#nullable restore
#line 4681 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindGenReport.cshtml"
             Write(Url.Action("GetCustomeWindYearly", "WindReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?fromDate=' + fromDate + '&toDate=' + toDate + '&site_list=' + site_list,
            contentType: ""application/json; charset=utf-8"",
            datatype: ""JSON"",
            success: function (result, status, xhr)
            {
                var tbl = '<table id=""example_yearly_group""  class=""table table-bordered table-striped"" style=""width: 220%;"">';
                tbl += '<thead class=""tbl-head""><tr>';
                tbl += '<th>FY</th>';
                tbl += '<th>Country</th>';
                tbl += '<th>State</th>';
               // tbl += '<th>SPV</th>';
                tbl += '<th>Group Name</th>';
                tbl += '<th>Capacity<br>(MW)</th>';
                tbl += '<th>Wind<br>(m/s)</th>';
                tbl += '<th>kWh</th>';
                tbl += '<th>PLF<br>(%)</th>';
                tbl += '<th>MA_ACT<br>(%)</th>';
                tbl += '<th>MA_CON<br>(%)</th>';
                tbl += '<th>IGA<br>(%)</th>';
                tbl += '<th>EGA_A<br>(%) <span c");
            WriteLiteral(@"lass=""information"">i<span></th>';
                tbl += '<th>EGA_B<br>(%) <span class=""information"">i<span></th>';
                tbl += '<th>EGA_C<br>(%) <span class=""information"">i<span></th>';
                tbl += '<th>Gen_Hrs</th>';
                tbl += '<th>Lull_Hrs</th>';
                tbl += '<th>USMH</th>';
                tbl += '<th>SMH</th>';
                tbl += '<th>Others</th>';
                tbl += '<th>IGBDH</th>';
                tbl += '<th>EGBDH</th>';
                tbl += '<th>LS</th>';
                tbl += '<th>Total_BD</th>';
                tbl += '<th>USMH_Loss</th>';
                tbl += '<th>SMH_Loss</th>';
                tbl += '<th>Others_Loss</th>';
                tbl += '<th>IGBDH_Loss</th>';
                tbl += '<th>EGBDH_Loss</th>';
                tbl += '<th>LS_Loss</th>';
                tbl += '<th>Total_Loss</th>';
                tbl += '</tr></thead>';

                if (result.length > 0)
                {
                ");
            WriteLiteral(@"    var total_losses = 0;
                    var total_hourse = 0;
                    for (var i = 0; i < result.length; i++)
                    {
                        total_losses = Math.abs(parseFloat(result[i].usmh_loss)) + Math.abs(parseFloat(result[i].smh_loss)) + Math.abs(parseFloat(result[i].others_loss)) + Math.abs(parseFloat(result[i].igbdh_loss)) + Math.abs(parseFloat(result[i].egbdh_loss)) + Math.abs(parseFloat(result[i].loadShedding_loss));
                        total_hourse = result[i].unschedule_hrs + result[i].schedule_hrs + result[i].others + result[i].igbdh + result[i].egbdh + result[i].load_shedding;
                        let chielditem       = result[i].item;
                        let total_wind_speed = 0;
                        let total_plf        = 0;
                        let total_ma_act     = 0;
                        let total_ma_con     = 0;
                        let total_iga        = 0;
                        let total_ega_a      = 0;
              ");
            WriteLiteral(@"          let total_ega_b      = 0;
                        let total_ega_c      = 0;
                        let total_capacity   = 0;
                        let avg_wind_speed   = 0;
                        let avg_plf          = 0;
                        let avg_ma_act       = 0;
                        let avg_ma_con       = 0;
                        let avg_iga          = 0;
                        let avg_ega_a        = 0;
                        let avg_ega_b        = 0;
                        let avg_ega_c        = 0;
                        for (var k = 0; k < chielditem.length; k++) {
                            total_capacity   += chielditem[k].total_mw;
                            total_wind_speed += chielditem[k].wind_speed * chielditem[k].total_mw;
                            total_plf        += chielditem[k].plf * chielditem[k].total_mw;
                            total_ma_act     += chielditem[k].ma_actual * chielditem[k].total_mw;
                            total_ma_con ");
            WriteLiteral(@"    += chielditem[k].ma_contractual * chielditem[k].total_mw;
                            total_iga        += chielditem[k].iga * chielditem[k].total_mw;
                            total_ega_a      += chielditem[k].ega * chielditem[k].total_mw;
                            total_ega_b      += chielditem[k].ega_b * chielditem[k].total_mw;
                            total_ega_c      += chielditem[k].ega_c * chielditem[k].total_mw;

                        }
                        if (total_capacity != 0) {
                            avg_wind_speed = total_wind_speed / total_capacity;
                            avg_plf        = total_plf / total_capacity;
                            avg_ma_act     = total_ma_act / total_capacity;
                            avg_ma_con     = total_ma_con / total_capacity;
                            avg_iga        = total_iga / total_capacity;
                            avg_ega_a      = total_ega_a / total_capacity;
                            avg_ega_b      = ");
            WriteLiteral(@"total_ega_b / total_capacity;
                            avg_ega_c      = total_ega_c / total_capacity;
                        }
                        let chield_class = result[i].cust_group.replace(/\s/g, """");
                        let expand_btn = """";
                        if (chielditem.length > 1) {
                            expand_btn = '<div class=""grp-btn"" id = ""parantY_' + chield_class + '"" onclick = ""showchieldYearly(id)"" style = ""display:inline-block"" > <i class=""fas fa-plus""></i></div ><div class=""grp-btn"" id=""phideY_' + chield_class + '"" onclick=""hidechieldYearly(id)"" style=""display:none""><i class=""fas fa-minus""></i></div>';

                        }
                        tbl += '<tr>';
                        tbl += '<td class=""text-left""  style=""text-wrap: nowrap;"">' + fyyear + '</td>';
                        tbl += '<td class=""text-left"">' + result[i].country + '</td>';
                        tbl += '<td class=""text-left"">' + result[i].state + '</td>';
              ");
            WriteLiteral(@"          tbl += '<td class=""text-left"" style=""text-wrap: nowrap;"">' + expand_btn + '<b>&nbsp;&nbsp;' + result[i].cust_group + '</b></td>';
                        tbl += '<td class=""text-right"">' + result[i].total_mw.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_wind_speed.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].kwh.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_plf.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_ma_act.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_ma_con.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_iga.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_ega_a.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_ega_b.toFixed(2) + '</td>';
                        tbl += '<td cla");
            WriteLiteral(@"ss=""text-right"">' + avg_ega_c.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].grid_hrs.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].lull_hrs.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].unschedule_hrs.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].schedule_hrs.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].others.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].igbdh.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].egbdh.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].load_shedding.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + total_hourse.toFixed(2) + '</td>';
                        tbl += '<td  class=""text-right"">' + (");
            WriteLiteral(@"Math.abs(parseFloat(result[i].usmh_loss)) * 1000000).toFixed(2) + '</td>';
                        tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].smh_loss)) * 1000000).toFixed(2) + '</td>';
                        tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].others_loss)) * 1000000).toFixed(2) + '</td>';
                        tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].igbdh_loss)) * 1000000).toFixed(2) + '</td>';
                        tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].egbdh_loss)) * 1000000).toFixed(2) + '</td>';
                        tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(result[i].loadShedding_loss)) * 1000000).toFixed(2) + '</td>';
                        tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(total_losses)) * 1000000).toFixed(2) + '</td>';
                        tbl += '</tr>';

                        var total_losses_chield = 0;
                        v");
            WriteLiteral(@"ar total_hourse_chield = 0;
                        for (var j = 0; j < chielditem.length; j++)
                        {
                            total_losses_chield = Math.abs(parseFloat(chielditem[j].usmh_loss)) + Math.abs(parseFloat(chielditem[j].smh_loss)) + Math.abs(parseFloat(chielditem[j].others_loss)) + Math.abs(parseFloat(chielditem[j].igbdh_loss)) + Math.abs(parseFloat(chielditem[j].egbdh_loss)) + Math.abs(parseFloat(chielditem[j].loadShedding_loss));
                            total_hourse_chield = chielditem[j].unschedule_hrs + chielditem[j].schedule_hrs + chielditem[j].others + chielditem[j].igbdh + chielditem[j].egbdh + chielditem[j].load_shedding;
                            tbl += '<tr class=""' + chield_class +'"" style=""display:none"">';
                            tbl += '<td class=""text-left""  style=""text-wrap: nowrap;"">' + fyyear + '</td>';
                            tbl += '<td class=""text-left"">' + chielditem[j].country + '</td>';
                            tbl += '<td class");
            WriteLiteral(@"=""text-left"">' + chielditem[j].state + '</td>';
                            tbl += '<td class=""text-left""  style=""padding-left: 1rem !important;text-wrap: nowrap;"""">' + chielditem[j].site + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].total_mw.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].wind_speed.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].kwh.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].plf.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].ma_actual.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].ma_contractual.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].iga.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chi");
            WriteLiteral(@"elditem[j].ega.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].ega_b.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].ega_c.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].grid_hrs.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].lull_hrs.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].unschedule_hrs.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].schedule_hrs.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].others.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].igbdh.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].egbdh.toFixed(2) + '</td>';
         ");
            WriteLiteral(@"                   tbl += '<td class=""text-right"">' + chielditem[j].load_shedding.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + total_hourse_chield.toFixed(2) + '</td>';
                            tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(chielditem[j].usmh_loss)) * 1000000).toFixed(2) + '</td>';
                            tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(chielditem[j].smh_loss)) * 1000000).toFixed(2) + '</td>';
                            tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(chielditem[j].others_loss)) * 1000000).toFixed(2) + '</td>';
                            tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(chielditem[j].igbdh_loss)) * 1000000).toFixed(2) + '</td>';
                            tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(chielditem[j].egbdh_loss)) * 1000000).toFixed(2) + '</td>';
                            tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(");
            WriteLiteral(@"chielditem[j].loadShedding_loss)) * 1000000).toFixed(2) + '</td>';
                            tbl += '<td  class=""text-right"">' + (Math.abs(parseFloat(total_losses_chield)) * 1000000).toFixed(2) + '</td>';
                            tbl += '</tr>';

                        }
                    }
                }
                else
                {
                    console.log(""Data not available"");
                }
                tbl += '</table>';
                //$(""#reportsYearlyGroup"").html(tbl);
                 //document.getElementById(""reportsYearly"").style.display = 'none';
               // document.getElementById(""reportsYearlyGroup"").style.display = 'block';
                $(""#reportsYearlyGroup"").html("""");
                $(""#reportsYearlyGroup"").html(tbl);
                    $('#example_yearly_group').DataTable({
                    dom: 'Bfrtip',
                    searching: false,
                    paging: false,
                    ordering: false,
   ");
            WriteLiteral(@"                 info: true,
                    fixedHeader: true,
                    responsive: true,
                    scrollX: true,
                    lengthChange: false,
                    autoWidth: true,
                    fixedColumns: {
                        left: 2
                    },
                    rowGroup: {
                        dataSrc: 0,
                    },
                    pageLength: 50,
                    ""order"": [[4, ""asc""]],
                    buttons: [
                        {
                            extend: 'excel',
                            title: 'Solar Yearly Generation Reports Group By Site',
                            exportOptions: {
                                columns: ':visible'
                            }
                        },
                        {
                            extend: 'csv',
                            title: 'Solar Yearly Generation Reports Group By Site',
                          ");
            WriteLiteral(@"  exportOptions: {
                                columns: ':visible'
                            }
                        },
                        'colvis',
                        //{
                            //text: '<span class=""fas fa-file-excel"" title=""Download from DB up to six decimal""></span>',
                           // className: 'btn ml-1   ',
                            //action: function () {
                             //   YearlyexportToExcelGenReportSiteWise();
                           // }
                        //},
                    ],
                    initComplete: function ()
                    {
                        this.api().columns().header().to$().each(function ()
                        {
                            if ($(this).text() == ""EGA_A(%) i"")
                            {
                                $(this).attr('title', 'External Grid Breakdown, Shutdown & Load Shedding')
                            }
                       ");
            WriteLiteral(@"     if ($(this).text() == ""EGA_B(%) i"")
                            {
                                $(this).attr('title', 'External Grid Breakdown & Shutdown')
                            }
                            if ($(this).text() == ""EGA_C(%) i"")
                            {
                                $(this).attr('title', 'Load Shedding')
                            }
                        })
                    }
                });
                $("".dt-buttons"").addClass('btn-group flex-wrap');
                $("".dt-buttons"").css(""margin-bottom"", ""0%"");
                $("".dt-buttons > button"").addClass('btn btn-secondary');
                $("".dataTables_filter> label >input"").addClass('form-control form-control-sm');
                //$(""dataTables_filter"").css(""margin-top"", ""-35px"");
                $(document).on(""click"", ""div.dt-button-collection > div > button"", function () {
                    if ($(this).hasClass(""active""))
                    {
            ");
            WriteLiteral(@"            $(this).css(""background-color"", ""white"");
                    }
                    else
                    {
                        $(this).css(""background-color"", ""#31576d"");
                    }
                });
                document.getElementById(""loaderY"").style.display = 'none';
            }
        });
    }
    function showchield(id) {
        let iden = id.split(""_"");
        let elements = document.getElementsByClassName(iden[1]);
        for (let i = 0; i < elements.length; i++) {
            elements[i].style.display = ""table-row"";
        }
        document.getElementById(id).style.display = ""none"";
        document.getElementById(""phide_"" + iden[1]).style.display = ""inline-block"";

    }
    function hidechield(id) {
        let iden = id.split(""_"");
        let elements = document.getElementsByClassName(iden[1]);
        for (let i = 0; i < elements.length; i++) {
            elements[i].style.display = ""none"";
        }
        document.getEle");
            WriteLiteral(@"mentById(id).style.display = ""none"";
        document.getElementById(""parant_"" + iden[1]).style.display = ""inline-block"";
    }
    //-------Monthly------//
    function showchieldMonthly(id) {
        let iden = id.split(""_"");
        let elements = document.getElementsByClassName(iden[1]);
        for (let i = 0; i < elements.length; i++) {
            elements[i].style.display = ""table-row"";
        }
        document.getElementById(id).style.display = ""none"";
        document.getElementById(""phideM_"" + iden[1]).style.display = ""inline-block"";

    }
    function hidechieldMonthly(id) {
        let iden = id.split(""_"");
        let elements = document.getElementsByClassName(iden[1]);
        for (let i = 0; i < elements.length; i++) {
            elements[i].style.display = ""none"";
        }
        document.getElementById(id).style.display = ""none"";
        document.getElementById(""parantM_"" + iden[1]).style.display = ""inline-block"";
    }

    //-------Yearly------//
    function");
            WriteLiteral(@" showchieldYearly(id) {
        let iden = id.split(""_"");
        let elements = document.getElementsByClassName(iden[1]);
        for (let i = 0; i < elements.length; i++) {
            elements[i].style.display = ""table-row"";
        }
        document.getElementById(id).style.display = ""none"";
        document.getElementById(""phideY_"" + iden[1]).style.display = ""inline-block"";

    }
    function hidechieldYearly(id) {
        let iden = id.split(""_"");
        let elements = document.getElementsByClassName(iden[1]);
        for (let i = 0; i < elements.length; i++) {
            elements[i].style.display = ""none"";
        }
        document.getElementById(id).style.display = ""none"";
        document.getElementById(""parantY_"" + iden[1]).style.display = ""inline-block"";
    }
</script>
");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public IHttpContextAccessor HttpContextAccessor { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<DGRA_V1.Models.CountryList> Html { get; private set; }
    }
}
#pragma warning restore 1591
