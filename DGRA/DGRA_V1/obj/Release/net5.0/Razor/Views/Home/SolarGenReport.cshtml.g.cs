#pragma checksum "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarGenReport.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_SolarGenReport), @"mvc.1.0.view", @"/Views/Home/SolarGenReport.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\_ViewImports.cshtml"
using DGRA_V1;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\_ViewImports.cshtml"
using DGRA_V1.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarGenReport.cshtml"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarGenReport.cshtml"
using Microsoft.AspNetCore.Http;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"ed6fe1ac47d8a46f7a3933e3271923190bb0f03f", @"/Views/Home/SolarGenReport.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"aa9fc0f0a035817cf8f1fc535e299e80b45b9453", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_SolarGenReport : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<DGRA_V1.Models.CountryList>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/fontawesome-free/css/all.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/daterangepicker/daterangepicker.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables-bs4/css/dataTables.bootstrap4.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables-responsive/css/responsive.bootstrap4.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables-buttons/css/buttons.bootstrap4.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/multiple-select/dist/multiple-select.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/dist/css/adminlte.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_8 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "india", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_9 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_10 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "04", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_11 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "05", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_12 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "06", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_13 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "07", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_14 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "08", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_15 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "09", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_16 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "10", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_17 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "11", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_18 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "12", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_19 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "01", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_20 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "02", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_21 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "03", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_22 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/jquery/jquery.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_23 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/multiple-select/dist/multiple-select.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_24 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/moment/moment.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_25 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/inputmask/jquery.inputmask.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_26 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/daterangepicker/daterangepicker.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_27 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/tempusdominus-bootstrap-4/js/tempusdominus-bootstrap-4.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_28 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/summernote/summernote-bs4.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_29 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/bootstrap/js/bootstrap.bundle.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_30 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables/jquery.dataTables.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_31 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables/jquery.dataTables.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_32 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables/dataTables.fixedHeader.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_33 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables-buttons/js/dataTables.buttons.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_34 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/jszip/jszip.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_35 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables-buttons/js/buttons.html5.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_36 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/pdfmake/pdfmake.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_37 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables-buttons/js/buttons.colVis.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 5 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarGenReport.cshtml"
  
    ViewData["Title"] = "Solar Generation Reports";

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarGenReport.cshtml"
  
    ViewData["Title"] = "Wind Daily Load Shedding";

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarGenReport.cshtml"
  
    string solarSiteList = "";

    var usermodel = JsonConvert.DeserializeObject<UserAccess>(@HttpContextAccessor.HttpContext.Session.GetString("UserAccess"));


#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarGenReport.cshtml"
 for (int i = 0; i < @usermodel.access_list.Count; i++)
{

    if (@usermodel.access_list[i].page_type == 3 && @usermodel.access_list[i].site_type == 2)
    {
        solarSiteList += @usermodel.access_list[i].identity.ToString() + ",";
    }


}

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<link rel=""stylesheet"" href=""/path/to/cdn/bootstrap.min.css"" />
<script src=""/path/to/cdn/jquery.min.js""></script>
<script src=""/path/to/cdn/bootstrap.min.js""></script>
<link rel=""stylesheet"" href=""https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700&display=fallback"">
<!-- Font Awesome -->
");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f18709", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<!-- daterange picker -->\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f19854", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<!-- DataTables set -->\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f20997", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f22113", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<link rel=\"stylesheet\" href=\"https://cdn.datatables.net/fixedcolumns/4.3.0/css/fixedColumns.dataTables.min.css\" />\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f23351", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f24467", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f25590", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_7);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
<style>
    .tab-btn {
        font-size: 0.7rem;
        font-weight: bold;
    }
</style>

<div class=""content-wrapper"">

    <section class=""content-header"">
    </section>


    <section class=""content"">
        <div class=""card"">
            <div class=""card-header"">
                <h3 class=""card-title text-center"">Solar Generation Reports</h3>


            </div>
            <div class=""card-body"">
                <div class=""row"">
                    <div class=""col-12 col-sm-12"">
                        <div class=""card card-primary card-outline card-tabs"">
                            <div class=""p-0 pt-1 border-bottom-0"">
                                <!--<div class=""card-header p-0 pt-1 border-bottom-0"">-->
                                <ul class=""nav nav-tabs"" id=""custom-tabs-three-tab"" role=""tablist"">
                                    <li class=""nav-item"">
                                        <a class=""nav-link active"" id=""custom-tabs-three-daily-tab"" data");
            WriteLiteral(@"-toggle=""pill"" href=""#custom-tabs-three-daily"" role=""tab"" aria-controls=""custom-tabs-three-daily"" aria-selected=""true"">Daily Gen Report</a>
                                    </li>
                                    <li class=""nav-item"">
                                        <a class=""nav-link"" id=""custom-tabs-three-monthly-tab"" data-toggle=""pill"" href=""#custom-tabs-three-monthly"" role=""tab"" aria-controls=""custom-tabs-three-monthly"" aria-selected=""false"">Monthly Gen Report</a>
                                    </li>
                                    <li class=""nav-item"">
                                        <a class=""nav-link"" id=""custom-tabs-three-yearly-tab"" data-toggle=""pill"" href=""#custom-tabs-three-yearly"" role=""tab"" aria-controls=""custom-tabs-three-yearly"" aria-selected=""false"">Yearly Gen Report</a>
                                    </li>

                                    <div style=""float: right;width: 65%;"" id=""customDiv"">
                                        <div style=""f");
            WriteLiteral(@"loat: right;"">
                                            <input type=""checkbox"" class=""form-check-input group_by_site"" id=""group_by_site"" name=""group_by_site"" value=""1"" style=""width: 17px; height: 16px;"" onclick=""grouping_site()""> <b>&nbsp;&nbsp;&nbsp;Custom Grouping of Site </b>
                                        </div> 
                                    </div>

                                </ul>
                                <div>
                                
                                
                            </div>

                            <div class=""card-body"">
                                <div class=""tab-content"" id=""custom-tabs-three-tabContent"">
                                    <div class=""tab-pane fade show active"" id=""custom-tabs-three-daily"" role=""tabpanel"" aria-labelledby=""custom-tabs-three-daily-tab"">
                                        <div class=""row"" id=""daily_sec"">
                                            <div class=""col-sm-4"">
    ");
            WriteLiteral(@"                                            <div class=""input-group "" style=""margin-left: -14%; width: 118%;"">
                                                    <label class=""col-sm-3 col-form-label text-right"" style=""padding-left: 10%; "">Date : </label>
                                                    <div class=""input-group-prepend"">
                                                        <span class=""input-group-text"">
                                                            <i class=""far fa-calendar-alt""></i>
                                                        </span>
                                                    </div>
                                                    <input type=""text"" class=""form-control float-right col-sm-6"" id=""daterange"" name=""daterange"">
                                                </div>
                                            </div>
                                            <div class=""col-sm-4"">

                                          ");
            WriteLiteral(@"      <div class=""form-group"">
                                                    <div class=""row"">
                                                        <label class=""col-sm-3 col-form-label text-right"">Country : </label>
                                                        <select class=""form-control  col-sm-8"" id=""country"" name=""country""");
            BeginWriteAttribute("value", " value=\"", 6310, "\"", 6318, 0);
            EndWriteAttribute();
            WriteLiteral(">\r\n\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f31642", async() => {
                WriteLiteral("India");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_8.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_8);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("selected", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"


                                                        </select>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class=""col-sm-4"">
                                                <div class=""form-group"">
                                                    <div class=""row"">
                                                        <label class=""col-sm-3 col-form-label text-right"">State : </label>
                                                        <select class=""form-control  col-sm-8"" id=""state"" name=""state[]""");
            BeginWriteAttribute("value", " value=\"", 7127, "\"", 7135, 0);
            EndWriteAttribute();
            WriteLiteral(@" onchange=""GetSPV();"" multiple></select>
                                                    </div>
                                                </div>
                                            </div>

                                        </div>
                                        <div class=""row"" id=""daily_sec1"">
                                            <div class=""col-sm-4"">
                                                <div class=""form-group"">
                                                    <div class=""row"">
                                                        <label class=""col-sm-2 col-form-label text-right"">SPV : </label>
                                                        <select class=""form-control  col-sm-8"" id=""spv"" name=""spv[]""");
            BeginWriteAttribute("value", " value=\"", 7922, "\"", 7930, 0);
            EndWriteAttribute();
            WriteLiteral(@" onchange=""GetSite()"" multiple></select>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class=""col-sm-4"">

                                                <div class=""form-group"">
                                                    <div class=""row"">
                                                        <label class=""col-sm-3 col-form-label text-right"">Site : </label>
                                                        <select class=""form-control  col-sm-8"" id=""site"" name=""site[]""");
            BeginWriteAttribute("value", " value=\"", 8597, "\"", 8605, 0);
            EndWriteAttribute();
            WriteLiteral(@" onchange=""GetInverter(true)"" multiple></select>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class=""col-sm-4"">

                                                <div class=""form-group"">
                                                    <div class=""row"">
                                                        <label class=""col-sm-3 col-form-label text-right"">Inverter : </label>
                                                        <select class=""form-control  col-sm-8"" id=""inv"" name=""inv[]"" multiple></select>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class=""row"" id=""daily_sec2"">
                                    ");
            WriteLiteral(@"        <div class=""col-sm-5 text-left"">
                                                <div class=""table-responsive pad"">
                                                    <div class=""btn-group btn-group-toggle"" data-toggle=""buttons"">
                                                        <label class=""btn bg-olive"">
                                                            <input type=""radio"" name=""daily"" value=""WTG"" id=""daily_b1"" autocomplete=""off"" checked> Inverter Wise Report
                                                        </label>
                                                        <label class=""btn bg-olive"">
                                                            <input type=""radio"" name=""daily"" value=""Site"" id=""daily_b2"" autocomplete=""off""> Site Wise Report
                                                        </label>
                                                    </div>
                                                </div>

                                 ");
            WriteLiteral(@"           </div>
                                            <div class=""col-sm-2 text-center"">
                                                <button type=""button"" class=""btn btn-block btn-primary"" onclick=""GetDailyGenReport();"" style="" margin-left: 4rem; width: 5rem;"">Search</button>
                                            </div>
                                            <div class=""col-sm-5 text-center""></div>
                                        </div>
                                        <!--daily Group site -->
                                        <div class=""row"" id=""daily_group"" style=""display:none"">
                                            <div class=""col-sm-4"">
                                                <div class=""input-group "" style=""margin-left: -14%; width: 118%;"">
                                                    <label class=""col-sm-3 col-form-label text-right"" style=""padding-left: 10%; "">Date : </label>
                                                    ");
            WriteLiteral(@"<div class=""input-group-prepend"">
                                                        <span class=""input-group-text"">
                                                            <i class=""far fa-calendar-alt""></i>
                                                        </span>
                                                    </div>
                                                    <input type=""text"" class=""form-control float-right col-sm-6"" id=""custom_daterange"" name=""custom_daterange"">
                                                </div>
                                            </div>
                                            <div class=""col-sm-4"">
                                                <div class=""form-group"">
                                                    <div class=""row"">
                                                        <label class=""col-sm-4 col-form-label text-right"">Custom Group : </label>
                                                        <select c");
            WriteLiteral("lass=\"form-control  col-sm-8\" id=\"cust_daily_group\" name=\"cust_daily_group[]\"");
            BeginWriteAttribute("value", " value=\"", 12779, "\"", 12787, 0);
            EndWriteAttribute();
            WriteLiteral(@" multiple></select>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class=""col-sm-2 text-center"">
                                                <button type=""button"" class=""btn btn-block btn-primary"" onclick=""GetCustomDailyGenReport();"" style="" margin-left: 4rem; width: 5rem;"">Search</button>
                                            </div>
                                        </div>
                                        <hr>
                                        <div id=""reportsDaily"" style=""overflow-x: auto;"" class=""reportsDaily""></div>
                                        <div id=""reportsDailyGroup"" style=""overflow-x: auto;"" class=""reportsDailyGroup""></div>
                                        <div id=""loaderD"" class=""loader  center"" style=""display:none""></div>


                                    </div>
      ");
            WriteLiteral(@"                              <div class=""tab-pane fade"" id=""custom-tabs-three-monthly"" role=""tabpanel"" aria-labelledby=""custom-tabs-three-monthly-tab"">
                                        <div class=""row"" id=""monthly_sec"">
                                            <div class=""col-sm-4"">
                                                <div class=""form-group"">
                                                    <div class=""row"">
                                                        <label class=""col-sm-3 col-form-label text-right"">FY : </label>
                                                        <select class=""form-control  col-sm-8"" id=""fyM"" name=""fyM""");
            BeginWriteAttribute("value", " value=\"", 14490, "\"", 14498, 0);
            EndWriteAttribute();
            WriteLiteral(">\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f42288", async() => {
                WriteLiteral("Select Financial Year");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_9.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_9);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                                                        </select>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class=""col-sm-4"">

                                                <div class=""form-group"">
                                                    <div class=""row"">
                                                        <label class=""col-sm-3 col-form-label text-right"">Month : </label>
                                                        <select class=""form-control  col-sm-8"" id=""monthM"" name=""monthM[]""");
            BeginWriteAttribute("value", " value=\"", 15307, "\"", 15315, 0);
            EndWriteAttribute();
            WriteLiteral(" multiple>\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f44390", async() => {
                WriteLiteral("April");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_10.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_10);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f45611", async() => {
                WriteLiteral("May");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_11.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_11);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f46830", async() => {
                WriteLiteral("June");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_12.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_12);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f48050", async() => {
                WriteLiteral("July");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_13.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_13);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f49270", async() => {
                WriteLiteral("August");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_14.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f50492", async() => {
                WriteLiteral("September");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_15.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_15);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f51717", async() => {
                WriteLiteral("October");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_16.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_16);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f52940", async() => {
                WriteLiteral("November");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_17.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_17);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f54164", async() => {
                WriteLiteral("December");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_18.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_18);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f55388", async() => {
                WriteLiteral("January");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_19.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_19);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f56611", async() => {
                WriteLiteral("February");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_20.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_20);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f57835", async() => {
                WriteLiteral("March");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_21.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_21);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                                                        </select>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class=""col-sm-4"">
                                                <div class=""form-group"">
                                                    <div class=""row"">
                                                        <label class=""col-sm-3 col-form-label text-right"">Country : </label>
                                                        <select class=""form-control  col-sm-8"" id=""countryM"" name=""countryM""");
            BeginWriteAttribute("value", " value=\"", 17180, "\"", 17188, 0);
            EndWriteAttribute();
            WriteLiteral(">\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f59916", async() => {
                WriteLiteral("India");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_8.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_8);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("selected", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                                                        </select>
                                                    </div>
                                                </div>
                                            </div>

                                        </div>
                                        <div class=""row"" id=""monthly_sec1"">
                                            <div class=""col-sm-4"">
                                                <div class=""form-group"">
                                                    <div class=""row"">
                                                        <label class=""col-sm-3 col-form-label text-right"">State : </label>
                                                        <select class=""form-control  col-sm-8"" id=""stateM"" name=""stateM[]""");
            BeginWriteAttribute("value", " value=\"", 18120, "\"", 18128, 0);
            EndWriteAttribute();
            WriteLiteral(@" onchange=""GetSPVM();"" multiple></select>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class=""col-sm-4"">

                                                <div class=""form-group"">
                                                    <div class=""row"">
                                                        <label class=""col-sm-3 col-form-label text-right"">SPV : </label>
                                                        <select class=""form-control  col-sm-8"" id=""spvM"" name=""spvM[]""");
            BeginWriteAttribute("value", " value=\"", 18795, "\"", 18803, 0);
            EndWriteAttribute();
            WriteLiteral(@" onchange=""GetSiteM()"" multiple></select>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class=""col-sm-4"">

                                                <div class=""form-group"">
                                                    <div class=""row"">
                                                        <label class=""col-sm-3 col-form-label text-right"">Site : </label>
                                                        <select class=""form-control  col-sm-8"" id=""siteM"" name=""siteM[]""");
            BeginWriteAttribute("value", " value=\"", 19473, "\"", 19481, 0);
            EndWriteAttribute();
            WriteLiteral(@" onchange=""GetInverterM(true)"" multiple></select>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        <div class=""row"" id=""monthly_sec2"">
                                            <div class=""col-sm-4"">
                                                <div class=""form-group"">
                                                    <div class=""row"">
                                                        <label class=""col-sm-3 col-form-label text-right"">Inverter : </label>
                                                        <select class=""form-control  col-sm-8"" id=""invM"" name=""invM[]"" multiple></select>
                                                    </div>
                                                </div>
                                            </div>
                               ");
            WriteLiteral(@"             <div class=""col-sm-1""></div>
                                            <div class=""col-sm-2"">
                                                <button type=""button"" class=""btn btn-block btn-primary"" onclick=""GetMonthlyGenReport();"" style="" margin-right: 4rem; width: 5rem;"">Search</button>
                                            </div>
                                            <div class=""col-sm-5""></div>
                                        </div>
                                        <div class=""row"" id=""monthly_sec3"">
                                            <div class=""col-sm-5"">
                                                <div class=""table-responsive pad"">
                                                    <div class=""btn-group btn-group-toggle"" data-toggle=""buttons"">
                                                        <label class=""btn bg-olive"">
                                                            <input type=""radio"" name=""monthly"" value=""WTG"" id=""m");
            WriteLiteral(@"onthly_b1"" autocomplete=""off"" checked> Inverter Wise Report
                                                        </label>
                                                        <label class=""btn bg-olive"">
                                                            <input type=""radio"" name=""monthly"" value=""Site"" id=""monthly_b2"" autocomplete=""off""> Site Wise Report
                                                        </label>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class=""col-sm-7""></div>
                                        </div>
                                        <!-- Monthly Group by Site -->
                                        <div class=""row"" id=""monthly_group"" style=""display:none"">
                                            <div class=""col-sm-4"">
                                                <div c");
            WriteLiteral(@"lass=""form-group"">
                                                    <div class=""row"">
                                                        <label class=""col-sm-3 col-form-label text-right"">FY : </label>
                                                        <select class=""form-control  col-sm-8"" id=""fyM_group"" name=""fyM_group""");
            BeginWriteAttribute("value", " value=\"", 22892, "\"", 22900, 0);
            EndWriteAttribute();
            WriteLiteral(">\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f67833", async() => {
                WriteLiteral("Select Financial Year");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_9.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_9);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                                                        </select>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class=""col-sm-4"">

                                                <div class=""form-group"">
                                                    <div class=""row"">
                                                        <label class=""col-sm-3 col-form-label text-right"">Month : </label>
                                                        <select class=""form-control  col-sm-8"" id=""monthM_group"" name=""monthM_group[]""");
            BeginWriteAttribute("value", " value=\"", 23721, "\"", 23729, 0);
            EndWriteAttribute();
            WriteLiteral(" multiple>\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f69947", async() => {
                WriteLiteral("April");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_10.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_10);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f71168", async() => {
                WriteLiteral("May");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_11.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_11);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f72387", async() => {
                WriteLiteral("June");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_12.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_12);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f73607", async() => {
                WriteLiteral("July");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_13.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_13);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f74827", async() => {
                WriteLiteral("August");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_14.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f76049", async() => {
                WriteLiteral("September");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_15.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_15);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f77274", async() => {
                WriteLiteral("October");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_16.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_16);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f78497", async() => {
                WriteLiteral("November");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_17.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_17);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f79721", async() => {
                WriteLiteral("December");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_18.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_18);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f80945", async() => {
                WriteLiteral("January");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_19.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_19);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f82168", async() => {
                WriteLiteral("February");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_20.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_20);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f83392", async() => {
                WriteLiteral("March");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_21.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_21);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                                                        </select>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class=""col-sm-4"">
                                                <div class=""form-group"">
                                                    <div class=""form-group"">
                                                        <div class=""row"">
                                                            <label class=""col-sm-3 col-form-label text-right"">Custom Group : </label>
                                                            <select class=""form-control  col-sm-8"" id=""custM_group"" name=""custM_group[]""");
            BeginWriteAttribute("value", " value=\"", 25697, "\"", 25705, 0);
            EndWriteAttribute();
            WriteLiteral(@" multiple></select>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>

                                        </div>
                                        <div class=""row"" id=""monthly_group1"" style=""display:none"">
                                            <div class=""col-sm-5""></div>
                                            <div class=""col-sm-2"">
                                                <button type=""button"" class=""btn btn-block btn-primary"" onclick=""GetCustomMonthGenReport();"" style="" margin-left: 4rem; width: 5rem;"">Search</button>
                                            </div>
                                            <div class=""col-sm-5""></div>
                                        </div>
                                        <hr>
                                        <div id=""reportsMont");
            WriteLiteral(@"hly"" style=""overflow-x: auto;"" class=""reportsMonthly""></div>
                                        <div id=""reportsMonthlyGroup"" style=""overflow-x: auto;"" class=""reportsMonthlyGroup""></div>
                                        <div id=""loaderM"" class=""loader  center"" style=""display:none""></div>
                                    </div>
                                    <div class=""tab-pane fade"" id=""custom-tabs-three-yearly"" role=""tabpanel"" aria-labelledby=""custom-tabs-three-yearly-tab"">
                                        <div class=""row"" id=""yearly_sec"">
                                            <div class=""col-sm-4"">
                                                <div class=""form-group"">
                                                    <div class=""row"">
                                                        <label class=""col-sm-2 col-form-label text-right"">FY : </label>
                                                        <select class=""form-control  col-sm-8"" id=""fyY"" name=");
            WriteLiteral("\"fyY\"");
            BeginWriteAttribute("value", " value=\"", 27759, "\"", 27767, 0);
            EndWriteAttribute();
            WriteLiteral(">\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f87903", async() => {
                WriteLiteral("Select Financial Year");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_9.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_9);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                                                        </select>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class=""col-sm-4"">
                                                <div class=""form-group"">
                                                    <div class=""row"">
                                                        <label class=""col-sm-3 col-form-label text-right"">Country : </label>
                                                        <select class=""form-control  col-sm-8"" id=""countryY"" name=""countryY""");
            BeginWriteAttribute("value", " value=\"", 28578, "\"", 28586, 0);
            EndWriteAttribute();
            WriteLiteral(">\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f89998", async() => {
                WriteLiteral("India");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_8.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_8);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("selected", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                                                        </select>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class=""col-sm-4"">
                                                <div class=""form-group"">
                                                    <div class=""row"">
                                                        <label class=""col-sm-3 col-form-label text-right"">State : </label>
                                                        <select class=""form-control  col-sm-8"" id=""stateY"" name=""stateY[]""");
            BeginWriteAttribute("value", " value=\"", 29391, "\"", 29399, 0);
            EndWriteAttribute();
            WriteLiteral(@" onchange=""GetSPVY();"" multiple></select>
                                                    </div>
                                                </div>
                                            </div>

                                        </div>
                                        <div class=""row"" id=""yearly_sec1"">
                                            <div class=""col-sm-4"">

                                                <div class=""form-group"">
                                                    <div class=""row"">
                                                        <label class=""col-sm-2 col-form-label text-right"">SPV : </label>
                                                        <select class=""form-control  col-sm-8"" id=""spvY"" name=""spvY[]""");
            BeginWriteAttribute("value", " value=\"", 30192, "\"", 30200, 0);
            EndWriteAttribute();
            WriteLiteral(@" onchange=""GetSiteY()"" multiple></select>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class=""col-sm-4"">
                                                <div class=""form-group"">
                                                    <div class=""row"">
                                                        <label class=""col-sm-3 col-form-label text-right"">Site : </label>
                                                        <select class=""form-control  col-sm-8"" id=""siteY"" name=""siteY[]""");
            BeginWriteAttribute("value", " value=\"", 30868, "\"", 30876, 0);
            EndWriteAttribute();
            WriteLiteral(@" onchange=""GetInverterY(true)"" multiple></select>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class=""col-sm-4"">
                                                <div class=""form-group"">
                                                    <div class=""row"">
                                                        <label class=""col-sm-3 col-form-label text-right"">Inverter : </label>
                                                        <select class=""form-control  col-sm-8"" id=""invY"" name=""invY[]"" multiple></select>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        <div class=""row"" id=""yearly_sec2"">
                                ");
            WriteLiteral(@"            <div class=""col-sm-5 text-left"">
                                                <div class=""table-responsive pad"">
                                                    <div class=""btn-group btn-group-toggle"" data-toggle=""buttons"">
                                                        <label class=""btn bg-olive"">
                                                            <input type=""radio"" name=""yearly"" value=""WTG"" id=""yearly_b1"" autocomplete=""off"" checked> Inverter Wise Report
                                                        </label>
                                                        <label class=""btn bg-olive"">
                                                            <input type=""radio"" name=""yearly"" value=""Site"" id=""yearly_b2"" autocomplete=""off""> Site Wise Report
                                                        </label>
                                                    </div>
                                                </div>
                           ");
            WriteLiteral(@"                 </div>
                                            <div class=""col-sm-2 text-center"">
                                                <button type=""button"" class=""btn btn-block btn-primary"" onclick=""GetYearlyGenReport();"" style=""margin-left: 4rem; width: 5rem;"">Search</button>
                                            </div>
                                            <div class=""col-sm-5 text-center""></div>
                                        </div>
                                        <!-- Yearly Group -->
                                        <div class=""row"" id=""yearly_group"" style=""display:none"">
                                            <div class=""col-sm-4"">
                                                <div class=""form-group"">
                                                    <div class=""row"">
                                                        <label class=""col-sm-2 col-form-label text-right"">FY : </label>
                                             ");
            WriteLiteral("           <select class=\"form-control  col-sm-8\" id=\"fyY_group\" name=\"fyY_group\"");
            BeginWriteAttribute("value", " value=\"", 34030, "\"", 34038, 0);
            EndWriteAttribute();
            WriteLiteral(">\r\n                                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f97646", async() => {
                WriteLiteral("Select Financial Year");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_9.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_9);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                                                        </select>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class=""col-sm-4"">
                                                <div class=""form-group"">
                                                    <div class=""row"">
                                                        <label class=""col-sm-4 col-form-label text-right"">Custom Group : </label>
                                                        <select class=""form-control  col-sm-8"" id=""customY_group"" name=""customY_group[]""");
            BeginWriteAttribute("value", " value=\"", 34866, "\"", 34874, 0);
            EndWriteAttribute();
            BeginWriteAttribute("onchange", " onchange=\"", 34875, "\"", 34886, 0);
            EndWriteAttribute();
            WriteLiteral(@" multiple></select>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class=""col-sm-2 text-center"">
                                                <button type=""button"" class=""btn btn-block btn-primary"" onclick=""GetCustomYearlyGenReport();"" style="" margin-left: 4rem; width: 5rem;"">Search</button>
                                            </div>

                                        </div>
                                        <hr>
                                        <div id=""reportsYearly"" style=""overflow-x: auto;"" class=""reportsYearly""></div>
                                        <div id=""reportsYearlyGroup"" style=""overflow-x: auto;"" class=""reportsYearlyGroup""></div>
                                        <div id=""loaderY"" class=""loader  center"" style=""display:none""></div>
                                    </div>

 ");
            WriteLiteral(@"                                   </div>
                            </div>
                            <!-- /.card -->
                        </div>
                    </div>

                    <!-- <div id=""reportsDaily"" style=""overflow-x: auto;"" class=""reportsDaily""></div>
                                        <div id=""reportsMonthly"" style=""overflow-x: auto;"" class=""reportsMonthly""></div>
                                        <div id=""reportsYearly"" style=""overflow-x: auto; "" class=""reportsYearly""></div>
                    -->

                </div>

                <!--<div class=""card-footer"">
                    Footer
                </div>-->

            </div>


    </section>

</div>
");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f101656", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_22);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js\"></script>\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f102796", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_23);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<!--Date Range -->\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f104168", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_24);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f105210", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_25);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f106252", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_26);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f107602", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_27);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f108648", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_23);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f110002", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_28);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f111044", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_29);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f112094", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_30);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f113136", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_31);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f114486", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_32);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<script src=\"https://cdn.datatables.net/fixedcolumns/4.3.0/js/dataTables.fixedColumns.min.js\" defer></script>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f115951", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_33);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f117301", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_34);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f118651", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_35);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f120001", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_36);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ed6fe1ac47d8a46f7a3933e3271923190bb0f03f121351", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_37);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
<script src=""https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.5/xlsx.full.min.js""></script>
<!--<script src=""~/Content/theme/plugins/datatables/dataTables.fixedHeader.min.js"" defer></script>-->
<script type=""text/javascript"">
    var userIdFromSession = """);
#nullable restore
#line 535 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarGenReport.cshtml"
                        Write(Html.Raw(@HttpContextAccessor.HttpContext.Session.GetString("userid")));

#line default
#line hidden
#nullable disable
            WriteLiteral("\";\r\n    var userRoles = \"");
#nullable restore
#line 536 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarGenReport.cshtml"
                Write(Html.Raw(@HttpContextAccessor.HttpContext.Session.GetString("role")));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""";
    var isAdmin = 0;
    if (userRoles == ""Admin"") {
        isAdmin = 1;
    }

    const columnMap = {};
    const userColumnId = [];

    var exceldata1;
    var exceldata2;
    var exceldata3;
    var exceldata4;
    var exceldata5;
    var exceldata6;

    //-- Selection Disable Enable
    function grouping_site() {
        var checkBox = document.getElementById(""group_by_site"");
        console.log(checkBox.checked);
        if (checkBox.checked == true) {
            document.getElementById('daily_sec').style.display           = 'none';
            document.getElementById('daily_sec1').style.display          = 'none';
            document.getElementById('daily_sec2').style.display          = 'none';
            document.getElementById('monthly_sec').style.display         = 'none';
            document.getElementById('monthly_sec1').style.display        = 'none';
            document.getElementById('monthly_sec2').style.display        = 'none';
            document.getEleme");
            WriteLiteral(@"ntById('monthly_sec3').style.display        = 'none';
            document.getElementById('yearly_sec').style.display          = 'none';
            document.getElementById('yearly_sec1').style.display         = 'none';
            document.getElementById('yearly_sec2').style.display         = 'none';
            document.getElementById('daily_group').style.display         = 'flex';
            document.getElementById('monthly_group').style.display       = 'flex';
            document.getElementById('monthly_group1').style.display      = 'flex';
            document.getElementById('yearly_group').style.display        = 'flex';
            document.getElementById('reportsDaily').style.display        = 'none';
            document.getElementById('reportsMonthly').style.display      = 'none';
            document.getElementById('reportsYearly').style.display       = 'none';
            document.getElementById('reportsDailyGroup').style.display   = 'block';
            document.getElementById('reports");
            WriteLiteral(@"MonthlyGroup').style.display = 'block';
            document.getElementById('reportsYearlyGroup').style.display  = 'block';
        }
        else {
            document.getElementById('daily_sec').style.display           = 'flex';
            document.getElementById('daily_sec1').style.display          = 'flex';
            document.getElementById('daily_sec2').style.display          = 'flex';
            document.getElementById('monthly_sec').style.display         = 'flex';
            document.getElementById('monthly_sec1').style.display        = 'flex';
            document.getElementById('monthly_sec2').style.display        = 'flex';
            document.getElementById('monthly_sec3').style.display        = 'flex';
            document.getElementById('yearly_sec').style.display          = 'flex';
            document.getElementById('yearly_sec1').style.display         = 'flex';
            document.getElementById('yearly_sec2').style.display         = 'flex';
            document.getElement");
            WriteLiteral(@"ById('daily_group').style.display         = 'none';
            document.getElementById('monthly_group').style.display       = 'none';
            document.getElementById('monthly_group1').style.display      = 'none';
            document.getElementById('yearly_group').style.display        = 'none';
            document.getElementById('reportsDaily').style.display        = 'block';
            document.getElementById('reportsMonthly').style.display      = 'block';
            document.getElementById('reportsYearly').style.display       = 'block';
            document.getElementById('reportsDailyGroup').style.display   = 'none';
            document.getElementById('reportsMonthlyGroup').style.display = 'none';
            document.getElementById('reportsYearlyGroup').style.display  = 'none';
        }
    }

 var userRole = """);
#nullable restore
#line 602 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarGenReport.cshtml"
            Write(Html.Raw(@HttpContextAccessor.HttpContext.Session.GetString("role")));

#line default
#line hidden
#nullable disable
            WriteLiteral("\";\r\n var solarUserAccess =\"");
#nullable restore
#line 603 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarGenReport.cshtml"
                  Write(Html.Raw(solarSiteList.TrimEnd(',')));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""";
    $(document).ready(function () {
        if (userRole != ""Admin"") {
            document.getElementById(""customDiv"").style.display = ""none"";
            GetCustomGroupAccess();
        }
        $('#daterange').daterangepicker(
            {
                maxDate: new Date(),
                locale: {
                    format: 'DD/MM/YYYY',
                }
            });

    $('#custom_daterange').daterangepicker(
        {
            maxDate: new Date(),
            locale: {
                format: 'DD/MM/YYYY',
            }
        });
    });
    window.onload = function () {
        console.log(""User Id from session"" + userIdFromSession);
        getPageColumns();
        getUserGroupColumns();

        $('select#monthM').multipleSelect({
                    ""minimumCountSelected"": 2,
                    ""placeholder"": ""Select Month(s)"",
                    filter: true
        });
        $('select#monthM_group').multipleSelect({
            ""minimumCount");
            WriteLiteral(@"Selected"": 2,
            ""placeholder"": ""Select Month(s)"",
            filter: true
        });
        $('select#country').multipleSelect({
            ""placeholder"": ""Select country"",
            filter: true
        });
        $('select#countryY').multipleSelect({
            ""placeholder"": ""Select country"",
            filter: true
        });
        $('select#countryM').multipleSelect({
            ""placeholder"": ""Select country"",
            filter: true
        });
        var site_ids = """);
#nullable restore
#line 652 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarGenReport.cshtml"
                   Write(Html.Raw(solarSiteList.TrimEnd(',')));

#line default
#line hidden
#nullable disable
            WriteLiteral("\";\r\n        var selcountry = $(\'select#country option:selected\').val();\r\n        $.ajax({\r\n            type: \"GET\",\r\n           // url: \"/WindReport/GetStateList?countryname=\" + selcountry,\r\n            url: \'");
#nullable restore
#line 657 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarGenReport.cshtml"
             Write(Url.Action("GetStateList", "SolarReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?countryname=' + selcountry + '&sitelist=' + site_ids,
            contentType: ""application/json; charset=utf-8"",
            //data: '{""countryname"":""' + selcountry + '""}',
            datatype: ""html"",
            success: function (result, status, xhr) {
                var options = """";
                for (var i = 0; i < result.length; i++) {
                    options += '<option value=""' + result[i].state + '"">' + result[i].state + '</option>';
                }


                $(""#state"").html(options);
                $(""#stateM"").html(options);
                $(""#stateY"").html(options);
                $('select#state').multipleSelect({
                    ""minimumCountSelected"": 2,
                    ""placeholder"": ""Select State(s)"",
                    filter:true
                });
                $('select#stateM').multipleSelect({
                    ""minimumCountSelected"": 2,
                    ""placeholder"": ""Select State(s)"",
                    filter:true");
            WriteLiteral(@"
                });
                $('select#stateY').multipleSelect({
                    ""minimumCountSelected"": 2,
                    ""placeholder"": ""Select State(s)"",
                    filter:true
                });
            }
        });
        getYear();
        GetSPV();
        GetSPVM();
        GetSPVY();
        getCutomeGroup();
    }

    function GetCustomGroupAccess()
    {
        console.log(""call function"");
        var login_id = ");
#nullable restore
#line 698 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarGenReport.cshtml"
                  Write(HttpContextAccessor.HttpContext.Session.GetString("userid"));

#line default
#line hidden
#nullable disable
            WriteLiteral(";\r\n        $.ajax({\r\n            type: \"GET\",\r\n            url: \'");
#nullable restore
#line 701 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarGenReport.cshtml"
             Write(Url.Action("GetCustomGroupAccess", "Home"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?login_id=' + login_id + '&site_type=2',
            contentType: ""application/json; charset=utf-8"",
            datatype: ""html"",
            success: function (result, status, xhr) {
                if (result.length > 0) {
                    CustomGroupOfSite = true;
                    document.getElementById(""customDiv"").style.display = ""block"";
                }
                else {
                    CustomGroupOfSite = false;
                    document.getElementById(""customDiv"").style.display = ""none"";
                }
            }
        });
    }
    function getPageColumns() {
        $.ajax({
        type: ""GET"",
       // url: ""/WindReport/GetSiteMaster"",
          url: '");
#nullable restore
#line 720 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarGenReport.cshtml"
           Write(Url.Action("GetPageColumns", "Home"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?page_id=24',
        contentType: ""application/json; charset=utf-8"",
        //data: '{""countryname"":""' + selcountry + '""}',
        datatype: ""html"",
        success: function (result, status, xhr) {
            if (result.length > 0) {
                console.log(result);
                result.forEach(item => {
                    columnMap[item.column_name] = [item.column_id, item.required];
                });
                console.log(columnMap);
                console.log(columnMap[""Country""], "" : "", columnMap[""Country""][0], ""  :  "", columnMap[""Country""][1]);
            }
            else {
            }
        }
    });
    }
    function getUserGroupColumns() {
        $.ajax({
        type: ""GET"",
            // url: ""/WindReport/GetSiteMaster"",
            url: '");
#nullable restore
#line 742 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarGenReport.cshtml"
             Write(Url.Action("GetUserGroupColumns", "Home"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?page_id=24&userId=' + userIdFromSession,
        contentType: ""application/json; charset=utf-8"",
        //data: '{""countryname"":""' + selcountry + '""}',
        datatype: ""html"",
        success: function (result, status, xhr) {
            if (result.length > 0) {
                console.log(result);
                result.forEach(item => {
                    userColumnId.push(item.column_id);
                });
                console.log(userColumnId);
            }
            else {
            }
        }
    });
    }
    function getYear() {
    $.ajax({
        type: ""GET"",
        url: ""/WindReport/GetFinacialYear"",
        url: '");
#nullable restore
#line 763 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarGenReport.cshtml"
         Write(Url.Action("GetFinacialYear", "WindReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
        contentType: ""application/json; charset=utf-8"",
        //data: '{""countryname"":""' + selcountry + '""}',
        datatype: ""html"",
        success: function (result, status, xhr) {
            var options = """";
            options += '<option value="""">Select Financial Year</option>';
            for (var i = 0; i < result.length; i++) {
                options += '<option value=""' + result[i].financial_year + '"">' + result[i].financial_year + '</option>';
            }
            $(""#fyM"").html(options);
            $(""#fyM_group"").html(options);
            $(""#fyY"").html(options);
            $(""#fyY_group"").html(options);
            $('select#fyM').multipleSelect({
                ""placeholder"": ""Select month"",
                filter: true
            });
            $('select#fyM_group').multipleSelect({
                ""placeholder"": ""Select month"",
                filter: true
            });
            $('select#fyY').multipleSelect({
                ""placeholder"": """);
            WriteLiteral(@"Select year"",
                filter: true
            });
            $('select#fyY_group').multipleSelect({
                ""placeholder"": ""Select year"",
                filter: true
            });

        }
    });
    }
    function GetSPVY() {
         let state_id = """";
        if($('#stateY').val())
        {
            //alert(""StateM"");

            $('select#stateY option:selected').each(function () {
                state_id += ""'"" + $(this).val() + ""',"";

            });
            state_id = state_id != """" ? state_id.slice(0, -1) : state_id;
        }
         var site_ids = """);
#nullable restore
#line 809 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarGenReport.cshtml"
                    Write(Html.Raw(solarSiteList.TrimEnd(',')));

#line default
#line hidden
#nullable disable
            WriteLiteral("\";\r\n        $.ajax({\r\n            type: \"GET\",\r\n            ///url: \"/WindReport/GetSPVList?state=\" + val,\r\n\r\n            url: \'");
#nullable restore
#line 814 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarGenReport.cshtml"
             Write(Url.Action("GetSPVList", "SolarReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?state=' + state_id + '&sitelist=' + site_ids,
            contentType: ""application/json; charset=utf-8"",
            //data: '{""state"":""' + val + '""}',
            datatype: ""html"",
            success: function (result, status, xhr) {
               var options = """";
                for (var j = 0; j < result.length; j++) {
                    options += '<option value=""' + result[j].spv + '"">' + result[j].spv + '</option>';
                }
                $(""#spvY"").multipleSelect('destroy');
                $(""#spvY"").html(options);
                $('select#spvY').multipleSelect({
                    ""minimumCountSelected"": 2,
                    ""placeholder"": ""Select SPV(s)"",
                    filter:true
                });
            }
        });
        GetSiteY();
    }
    function GetSPVM() {
        let state_id = """";
        if($('#stateM').val())
        {
            $('select#stateM option:selected').each(function () {
                state_id += ""'"" + $(");
            WriteLiteral("this).val() + \"\',\";\r\n\r\n                 console.log($(this).val());\r\n\r\n            });\r\n            state_id = state_id != \"\" ? state_id.slice(0, -1) : state_id;\r\n\r\n        }\r\n         var site_ids = \"");
#nullable restore
#line 847 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarGenReport.cshtml"
                    Write(Html.Raw(solarSiteList.TrimEnd(',')));

#line default
#line hidden
#nullable disable
            WriteLiteral("\";\r\n        $.ajax({\r\n            type: \"GET\",\r\n            ///url: \"/WindReport/GetSPVList?state=\" + val,\r\n\r\n            url: \'");
#nullable restore
#line 852 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarGenReport.cshtml"
             Write(Url.Action("GetSPVList", "SolarReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?state=' + state_id + '&sitelist=' + site_ids,
            contentType: ""application/json; charset=utf-8"",
            //data: '{""state"":""' + val + '""}',
            datatype: ""html"",
            success: function (result, status, xhr) {

                var options = """";
                for (var j = 0; j < result.length; j++) {
                    options += '<option value=""' + result[j].spv + '"">' + result[j].spv + '</option>';
                }
                $(""#spvM"").multipleSelect('destroy');
                $(""#spvM"").html(options);
                $('select#spvM').multipleSelect({
                    ""minimumCountSelected"": 2,
                    ""placeholder"": ""Select SPV(s)"",
                    filter:true
                });
            }
        });
        GetSiteM();
    }
    function GetSPV() {
        let state_id = """";
        if($('#state').val())
        {

            $('select#state option:selected').each(function () {
                state_id += ""'""+$(");
            WriteLiteral("this).val() + \"\',\";\r\n             });\r\n            state_id = state_id != \"\" ? state_id.slice(0, -1) : state_id;\r\n\r\n        }\r\n         var site_ids = \"");
#nullable restore
#line 884 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarGenReport.cshtml"
                    Write(Html.Raw(solarSiteList.TrimEnd(',')));

#line default
#line hidden
#nullable disable
            WriteLiteral("\";\r\n        $.ajax({\r\n            type: \"GET\",\r\n            ///url: \"/WindReport/GetSPVList?state=\" + val,\r\n            url: \'");
#nullable restore
#line 888 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarGenReport.cshtml"
             Write(Url.Action("GetSPVList", "SolarReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?state=' + state_id + '&sitelist=' + site_ids,
            contentType: ""application/json; charset=utf-8"",
            //data: '{""state"":""' + val + '""}',
            datatype: ""html"",
            success: function (result, status, xhr) {

                var options = """";
                for (var j = 0; j < result.length; j++) {
                    options += '<option value=""' + result[j].spv + '"">' + result[j].spv + '</option>';
                }
                $(""#spv"").multipleSelect('destroy');

                $(""#spv"").html(options);
                $('select#spv').multipleSelect({
                    ""minimumCountSelected"": 2,
                    ""placeholder"": ""Select SPV(s)"",
                    filter:true
                });


            }
        });
        GetSite();
    }
    function GetSite() {
        //var state = $('select#state option:selected').val();
        //var spv = $('select#spv option:selected').val();
        let state_id = """";

        $('sele");
            WriteLiteral(@"ct#state option:selected').each(function () {
            state_id += $(this).val() + "","";

        });
        state_id = state_id != """" ? state_id.slice(0, -1) : state_id;


        let spv = """";

        $('select#spv option:selected').each(function () {
            spv += $(this).val() + "","";

        });
        spv = spv != """" ? spv.slice(0, -1) : spv;
        var site_ids = """);
#nullable restore
#line 931 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarGenReport.cshtml"
                   Write(Html.Raw(solarSiteList.TrimEnd(',')));

#line default
#line hidden
#nullable disable
            WriteLiteral("\";\r\n        $.ajax({\r\n            type: \"POST\",\r\n            //url: \"/WindReport/GetSiteList?state=\" + state + \"&spv=\" + spv,\r\n\r\n            url: \'");
#nullable restore
#line 936 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarGenReport.cshtml"
             Write(Url.Action("GetSiteList", "SolarReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?state=' + state_id + '&spv=' + spv + '&sitelist=' + site_ids,
            contentType: ""application/json; charset=utf-8"",
            // data: '{""state"":""' + val + '""}',
            datatype: ""html"",
            success: function (result, status, xhr) {
                var options = """";

                for (var k = 0; k < result.length; k++) {

                    options += '<option value=""' + result[k].site_master_solar_id + '"">' + result[k].site + '</option>';

                }
                $(""#site"").multipleSelect('destroy');
                $(""#site"").html("""").html(options);
                $('select#site').multipleSelect({
                    ""minimumCountSelected"": 2,
                    ""placeholder"": ""Select Site(s)"",
                    filter:true
                });
            }
        });
         GetInverter(false);
    }
    function GetSiteM() {
        let state_id = """";

        $('select#stateM option:selected').each(function () {
            state_i");
            WriteLiteral(@"d += $(this).val() + "","";

        });
        state_id = state_id != """" ? state_id.slice(0, -1) : state_id;


        let spv = """";

        $('select#spvM option:selected').each(function () {
            spv += $(this).val() + "","";

        });
        spv = spv != """" ? spv.slice(0, -1) : spv;
        var site_ids = """);
#nullable restore
#line 976 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarGenReport.cshtml"
                   Write(Html.Raw(solarSiteList.TrimEnd(',')));

#line default
#line hidden
#nullable disable
            WriteLiteral("\";\r\n\r\n        $.ajax({\r\n            type: \"POST\",\r\n            //url: \"/WindReport/GetSiteList?state=\" + state + \"&spv=\" + spv,\r\n\r\n            url: \'");
#nullable restore
#line 982 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarGenReport.cshtml"
             Write(Url.Action("GetSiteList", "SolarReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?state=' + state_id + '&spv=' + spv + '&sitelist=' + site_ids,
            contentType: ""application/json; charset=utf-8"",
            // data: '{""state"":""' + val + '""}',
            datatype: ""html"",
            success: function (result, status, xhr) {
                var options = """";

                for (var k = 0; k < result.length; k++) {

                    options += '<option value=""' + result[k].site_master_solar_id + '"">' + result[k].site + '</option>';

                }
                $(""#siteM"").multipleSelect('destroy');
                $(""#siteM"").html("""").html(options);
                $('select#siteM').multipleSelect({
                    ""minimumCountSelected"": 2,
                    ""placeholder"": ""Select Site(s)"",
                    filter:true
                });
            }
        });
         GetInverterM(false);
    }
     function GetSiteY() {
       let state_id = """";

        $('select#stateY option:selected').each(function () {
            sta");
            WriteLiteral(@"te_id += $(this).val() + "","";

        });
        state_id = state_id != """" ? state_id.slice(0, -1) : state_id;


        let spv = """";

        $('select#spvY option:selected').each(function () {
            spv += $(this).val() + "","";

        });
        spv = spv != """" ? spv.slice(0, -1) : spv;
         var site_ids = """);
#nullable restore
#line 1022 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarGenReport.cshtml"
                    Write(Html.Raw(solarSiteList.TrimEnd(',')));

#line default
#line hidden
#nullable disable
            WriteLiteral("\";\r\n\r\n        $.ajax({\r\n            type: \"POST\",\r\n            //url: \"/WindReport/GetSiteList?state=\" + state + \"&spv=\" + spv,\r\n\r\n            url: \'");
#nullable restore
#line 1028 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarGenReport.cshtml"
             Write(Url.Action("GetSiteList", "SolarReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?state=' + state_id + '&spv=' + spv + '&sitelist=' + site_ids,
            contentType: ""application/json; charset=utf-8"",
            // data: '{""state"":""' + val + '""}',
            datatype: ""html"",
            success: function (result, status, xhr) {
                var options = """";

                for (var k = 0; k < result.length; k++) {

                    options += '<option value=""' + result[k].site_master_solar_id + '"">' + result[k].site + '</option>';

                }
                $(""#siteY"").multipleSelect('destroy');
                $(""#siteY"").html("""").html(options);
                $('select#siteY').multipleSelect({
                    ""minimumCountSelected"": 2,
                    ""placeholder"": ""Select Site(s)"",
                    filter:true
                });
            }
        });
         GetInverterY(false);
    }
    function GetInverter(fliterVal) {
        let state = """";
        $('select#state option:selected').each(function () {
         ");
            WriteLiteral(@"   state += $(this).val() + "","";

        });

        let spv = """";
        $('select#spv option:selected').each(function () {
            spv += $(this).val() + "","";
           // console.log($(this).val());

        });

        let site = """";
        if (fliterVal == false) {
            site = """);
#nullable restore
#line 1067 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarGenReport.cshtml"
               Write(Html.Raw(solarSiteList.TrimEnd(',')));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""";
        }
        else {
            $('select#site option:selected').each(function () {
                site += $(this).val() + "","";
                //console.log($(this).val());

            });
        }


        $.ajax({
            type: ""GET"",

            url: '");
#nullable restore
#line 1081 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarGenReport.cshtml"
             Write(Url.Action("GetInvList", "SolarReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?siteid=' + site + '&state=' + state + '&spv=' + spv,
            contentType: ""application/json; charset=utf-8"",
            datatype: ""html"",
            success: function (result, status, xhr) {
               // console.log(result);
                var options = """";
                for (var k = result.length-1; k >=0 ; k--) {
                    options += '<option value=""' + result[k].icr_inv + '"">' + result[k].icr_inv + '</option>';
                }
                $(""#inv"").multipleSelect('destroy');
                $(""#inv"").html(options);
                $('select#inv').multipleSelect({
                    ""minimumCountSelected"": 2,
                    ""placeholder"": ""Select Inverter(s)"",
                    filter:true
                });
            }
        });
    }

    function GetInverterM(fliterVal) {
        let state = """";
        $('select#stateM option:selected').each(function () {
            state += $(this).val() + "","";

        });

        let spv = ");
            WriteLiteral("\"\";\r\n        $(\'select#spvM option:selected\').each(function () {\r\n            spv += $(this).val() + \",\";\r\n           // console.log($(this).val());\r\n\r\n        });\r\n\r\n        let site = \"\";\r\n        if (fliterVal == false) {\r\n            site = \"");
#nullable restore
#line 1117 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarGenReport.cshtml"
               Write(Html.Raw(solarSiteList.TrimEnd(',')));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""";
        }
        else {
            $('select#siteM option:selected').each(function () {
                site += $(this).val() + "","";
                //console.log($(this).val());

            });
        }

        $.ajax({
            type: ""GET"",

            url: '");
#nullable restore
#line 1130 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarGenReport.cshtml"
             Write(Url.Action("GetInvList", "SolarReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?siteid=' + site + '&state=' + state + '&spv=' + spv,
            contentType: ""application/json; charset=utf-8"",
            datatype: ""html"",
            success: function (result, status, xhr) {
               // console.log(result);
                var options = """";
                for (var k = result.length-1; k >=0 ; k--) {
                    options += '<option value=""' + result[k].icr_inv + '"">' + result[k].icr_inv + '</option>';
                }
                $(""#invM"").multipleSelect('destroy');
                $(""#invM"").html(options);
                $('select#invM').multipleSelect({
                    ""minimumCountSelected"": 2,
                    ""placeholder"": ""Select Inverter(s)"",
                    filter:true
                });
            }
        });
    }
    function GetInverterY(fliterVal) {
       let state = """";
        $('select#stateY option:selected').each(function () {
            state += $(this).val() + "","";

        });
        console.log(");
            WriteLiteral(@"state);
        let spv = """";
        $('select#spvY option:selected').each(function () {
            spv += $(this).val() + "","";
           // console.log($(this).val());

        });

        let site = """";
        if (fliterVal == false) {
            site = """);
#nullable restore
#line 1165 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarGenReport.cshtml"
               Write(Html.Raw(solarSiteList.TrimEnd(',')));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""";
        }
        else {
            $('select#siteY option:selected').each(function () {
                site += $(this).val() + "","";
                //console.log($(this).val());

            });
        }

        $.ajax({
            type: ""GET"",

            url: '");
#nullable restore
#line 1178 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarGenReport.cshtml"
             Write(Url.Action("GetInvList", "SolarReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?siteid=' + site + '&state=' + state + '&spv=' + spv,
            contentType: ""application/json; charset=utf-8"",
            datatype: ""html"",
            success: function (result, status, xhr) {
               // console.log(result);
                var options = """";
                for (var k = result.length-1; k >=0 ; k--) {
                    options += '<option value=""' + result[k].icr_inv + '"">' + result[k].icr_inv + '</option>';
                }
                $(""#invY"").multipleSelect('destroy');
                $(""#invY"").html(options);
                $('select#invY').multipleSelect({
                    ""minimumCountSelected"": 2,
                    ""placeholder"": ""Select Inverter(s)"",
                    filter:true
                });
            }
        });
    }
    function getCutomeGroup()
    {
        $.ajax({
            type: ""POST"",
            url: '");
#nullable restore
#line 1201 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarGenReport.cshtml"
             Write(Url.Action("GetCustomGroup", "SolarReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"?siteType=1',
            contentType: ""application/json; charset=utf-8"",
            datatype: ""html"",
            success: function (result, status, xhr)
            {
                var options = """";
                for (var k = 0; k < result.length; k++)
                {
                    options += '<option value=""' + result[k].site_ids + '"">' + result[k].cust_group + '</option>';
                }
                $(""#cust_daily_group"").multipleSelect('destroy');
                $(""#cust_daily_group"").html("""").html(options);
                $('select#cust_daily_group').multipleSelect({
                    ""minimumCountSelected"": 2,
                    ""placeholder"": ""Select Group(s)"",
                    filter:true
                });
                $(""#custM_group"").multipleSelect('destroy');
                $(""#custM_group"").html("""").html(options);
                $('select#custM_group').multipleSelect({
                    ""minimumCountSelected"": 2,
                    ""plac");
            WriteLiteral(@"eholder"": ""Select Group(s)"",
                    filter: true
                });
                $(""#customY_group"").multipleSelect('destroy');
                $(""#customY_group"").html("""").html(options);
                $('select#customY_group').multipleSelect({
                    ""minimumCountSelected"": 2,
                    ""placeholder"": ""Select Group(s)"",
                    filter: true
                });
            }
        });
    }

    function GetDailyGenReport() {

        var ReportType = $(""input[name='daily']:checked"").val();
        if (ReportType == ""WTG"") {
            GetDailyGenReportInverterWise();
        }
        else {
            GetDailyGenReportSiteWise();
        }
    }
    // Daily Gen Report WTG WIse
    function GetDailyGenReportInverterWise() {
        var daterange = $('#daterange').val();
        var arr1 = new Array();
        arr1 = daterange.split(""-"");
        var fromDate = moment(arr1[0], 'DD/MM/YYYY').format('YYYY-MM-DD');
        v");
            WriteLiteral(@"ar toDate = moment(arr1[1], 'DD/MM/YYYY').format('YYYY-MM-DD');
        var country = $('select#country option:selected').val();
        //var state = $('select#state option:selected').val();

        let site= """";
        let spv = """";
        let inv = """";
        let state = """";

        $('select#site option:selected').each(function () {
            site += $(this).val() + "","";
            //console.log($(this).val());
        });
        site = site != """" ? site.slice(0, -1) : site;

        if(!site){
            $('select#state option:selected').each(function () {
                state +=  $(this).val() + "","";
             //   console.log($(this).val());
            });
            state = state != """" ? state.slice(0, -1) : state;
           // console.log(state);
            //var spv = $('select#spv option:selected').val();

            $('select#spv option:selected').each(function () {
                spv += $(this).val() + "","";
              //  console.log($(this).val())");
            WriteLiteral(@";
            });
            spv = spv != """" ? spv.slice(0, -1) : spv;

        }
        if (userRole == ""User"" && site == """") {
            site = solarUserAccess;
        }

        document.getElementById(""loaderD"").style.display = 'flex';
        $('select#inv option:selected').each(function () {
            inv += $(this).val() + "","";
            //console.log($(this).val());

        });

        var reportType = ""INV"";
        var reporthead = ""Inverter Wise Report"";
        $.ajax({
            type: ""GET"",
            url: '");
#nullable restore
#line 1298 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarGenReport.cshtml"
             Write(Url.Action("GetSolarDailyGenerationReportWTGWise", "SolarReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?fromDate=' + fromDate + '&toDate=' + toDate + '&country=' + country + '&state=' + state + '&spv=' + spv + '&site=' + site + '&inv=' + inv,
            //url: ""/WindReport/GetWindDailyGenerationReportWTGWise?fromDate="" + fromDate + ""&toDate="" + toDate + ""&country="" + country + ""&state="" + state + ""&spv="" + spv + ""&site="" + site + ""&wtg="" + wtg,
            contentType: ""application/json; charset=utf-8"",

            datatype: ""JSON"",
            success: function (result, status, xhr) {
                console.log(result);

               // var tbl = '<div class=""text-center""><h5></h5></div>';
                var tbl = '<table id=""example1""  class=""table table-bordered table-striped"" style=""width:285%"">';
                tbl += '<thead class=""tbl-head""><tr>';
                if (userColumnId.includes(columnMap[""Date""][0]) || columnMap[""Date""][1] == 1 || isAdmin == 1) {
                    tbl += '<th >Date</th>';
                }
                if (userColumnId.includes(columnMap[""Countr");
            WriteLiteral(@"y""][0]) || columnMap[""Country""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Country</th>';
                }
                if (userColumnId.includes(columnMap[""State""][0]) || columnMap[""State""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>State</th>';
                }
                if (userColumnId.includes(columnMap[""SPV""][0]) || columnMap[""SPV""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>SPV</th>';
                }
                if (userColumnId.includes(columnMap[""Site""][0]) || columnMap[""Site""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Site</th>';
                }
                if (userColumnId.includes(columnMap[""Inverter""][0]) || columnMap[""Inverter""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Inverter</th>';
                }
                if (userColumnId.includes(columnMap[""DC_Capacity""][0]) || columnMap[""DC_Capacity""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>DC_Capacity<br>(kW");
            WriteLiteral(@"p)</th>';
                }
                if (userColumnId.includes(columnMap[""AC_Capacity""][0]) || columnMap[""AC_Capacity""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>AC_Capacity<br>(kW)</th>';
                }
                if (userColumnId.includes(columnMap[""GHI""][0]) || columnMap[""GHI""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>GHI</th>';
                }
                if (userColumnId.includes(columnMap[""POA""][0]) || columnMap[""POA""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>POA</th>';
                }
                if (userColumnId.includes(columnMap[""Expected_Kwh""][0]) || columnMap[""Expected_Kwh""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Expected_kwh</th>';
                }
                if (userColumnId.includes(columnMap[""INV_Kwh""][0]) || columnMap[""INV_Kwh""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>INV_kWh</th>';
                }
                if (userColumnId.includes(columnMap[""");
            WriteLiteral(@"Plant_Kwh""][0]) || columnMap[""Plant_Kwh""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Plant_kWh</th>';
                }
                if (userColumnId.includes(columnMap[""INV_PR""][0]) || columnMap[""INV_PR""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>INV_PR</th>';
                }
                if (userColumnId.includes(columnMap[""Plant_PR""][0]) || columnMap[""Plant_PR""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Plant_PR</th>';
                }
                if (userColumnId.includes(columnMap[""INV_PLF""][0]) || columnMap[""INV_PLF""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>INV_PLF<br>(%)</th>';
                }
                if (userColumnId.includes(columnMap[""Plant_PLF""][0]) || columnMap[""Plant_PLF""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Plant_PLF<br>(%)</th>';
                }
                if (userColumnId.includes(columnMap[""MA_ACT""][0]) || columnMap[""MA_ACT""][1] == 1 || isAdmin == 1) {
    ");
            WriteLiteral(@"                tbl += '<th>MA_ACT<br>(%)</th>';
                }
                if (userColumnId.includes(columnMap[""IGA""][0]) || columnMap[""IGA""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>IGA<br>(%)</th>';
                }
                if (userColumnId.includes(columnMap[""EGA_A""][0]) || columnMap[""EGA_A""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGA_A<br>(%) <span class=""information"">i<span></th>';
                }
                if (userColumnId.includes(columnMap[""EGA_B""][0]) || columnMap[""EGA_B""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGA_B<br>(%) <span class=""information"">i<span></th>';
                }
                if (userColumnId.includes(columnMap[""EGA_C""][0]) || columnMap[""EGA_C""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGA_C<br>(%) <span class=""information"">i<span></th>';
                }
                if (userColumnId.includes(columnMap[""Gen_Hrs""][0]) || columnMap[""Gen_Hrs""][1] == 1 || isAdmin =");
            WriteLiteral(@"= 1) {
                    tbl += '<th>Gen_Hrs</th>';
                }
                if (userColumnId.includes(columnMap[""USMH""][0]) || columnMap[""USMH""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>USMH</th>';
                }
                if (userColumnId.includes(columnMap[""SMH""][0]) || columnMap[""SMH""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>SMH</th>';
                }
                if (userColumnId.includes(columnMap[""OH""][0]) || columnMap[""OH""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>OH</th>';
                }
                if (userColumnId.includes(columnMap[""IGBD""][0]) || columnMap[""IGBD""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>IGBD</th>';
                }
                if (userColumnId.includes(columnMap[""EGBD""][0]) || columnMap[""EGBD""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGBD</th>';
                }
                if (userColumnId.includes(columnMap[""LS""][0]) || columnMa");
            WriteLiteral(@"p[""LS""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>LS</th>';
                }
                if (userColumnId.includes(columnMap[""Total_BD""][0]) || columnMap[""Total_BD""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Total_BD</th>';
                }
                if (userColumnId.includes(columnMap[""USMH_Loss""][0]) || columnMap[""USMH_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>USMH_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""SMH_Loss""][0]) || columnMap[""SMH_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>SMH_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""OH_Loss""][0]) || columnMap[""OH_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>OH_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""IGBD_Loss""][0]) || columnMap[""IGBD_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>IGBD_Loss</th>'");
            WriteLiteral(@";
                }
                if (userColumnId.includes(columnMap[""EGBD_Loss""][0]) || columnMap[""EGBD_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGBD_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""LS_Loss""][0]) || columnMap[""LS_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>LS_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""LULL_Loss""][0]) || columnMap[""LULL_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>LULL_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""Total_Loss""][0]) || columnMap[""Total_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Total_Loss</th>';
                }                
                //tbl += '<th>MA_CON<br>(%)</th>';
                
                tbl += '</tr></thead>';
                $(""#reportsDaily"").html(tbl);

                if (result.length > 0) {
                   ");
            WriteLiteral(@"  exceldata1 = result;
                    console.log(""Datatable"");

                    const table = document.getElementById(""example1"");

                    for (var i = 0; i < result.length; i++) {

                        var Expected_value = 0.00;
                        if (result[i].expected_kwh < 0) {
                            Expected_value = 0.00;
                        }
                        else {
                            Expected_value = result[i].expected_kwh.toFixed(2);
                        }

                        var formattedDate = moment(result[i].date, 'YYYY/MM/DD').format('DD-MM-YYYY');
                        tbl += '<tr>';
                        if (userColumnId.includes(columnMap[""Date""][0]) || columnMap[""Date""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"" style=""text-wrap: nowrap;"">' + formattedDate + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Country""][0]");
            WriteLiteral(@") || columnMap[""Country""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"">' + result[i].country + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""State""][0]) || columnMap[""State""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"">' + result[i].state + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""SPV""][0]) || columnMap[""SPV""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"" style=""text-wrap: nowrap;"">' + result[i].spv + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Site""][0]) || columnMap[""Site""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"" style=""text-wrap: nowrap;"">' + result[i].site + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Inverter""][0]) || columnM");
            WriteLiteral(@"ap[""Inverter""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"" style=""text-wrap: nowrap;"">' + result[i].inverter + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""DC_Capacity""][0]) || columnMap[""DC_Capacity""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].dc_capacity.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""AC_Capacity""][0]) || columnMap[""AC_Capacity""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ac_capacity.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""GHI""][0]) || columnMap[""GHI""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ghi.toFixed(2) + '</td>';
                        }
                        if (userColumnId.include");
            WriteLiteral(@"s(columnMap[""POA""][0]) || columnMap[""POA""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].poa.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Expected_Kwh""][0]) || columnMap[""Expected_Kwh""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + Expected_value + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""INV_Kwh""][0]) || columnMap[""INV_Kwh""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].inv_kwh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Plant_Kwh""][0]) || columnMap[""Plant_Kwh""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].plant_kwh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(");
            WriteLiteral(@"columnMap[""INV_PR""][0]) || columnMap[""INV_PR""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].inv_pr.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Plant_PR""][0]) || columnMap[""Plant_PR""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].plant_pr.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""INV_PLF""][0]) || columnMap[""INV_PLF""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].inv_plf.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Plant_PLF""][0]) || columnMap[""Plant_PLF""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].plant_plf.toFixed(2) + '</td>';
                        }
                        if (userColu");
            WriteLiteral(@"mnId.includes(columnMap[""MA_ACT""][0]) || columnMap[""MA_ACT""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ma_actual.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""IGA""][0]) || columnMap[""IGA""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].iga.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGA_A""][0]) || columnMap[""EGA_A""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ega.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGA_B""][0]) || columnMap[""EGA_B""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ega_b.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(colu");
            WriteLiteral(@"mnMap[""EGA_C""][0]) || columnMap[""EGA_C""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ega_c.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Gen_Hrs""][0]) || columnMap[""Gen_Hrs""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].prod_hrs.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""USMH""][0]) || columnMap[""USMH""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].usmh_bs.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""SMH""][0]) || columnMap[""SMH""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].smh_bd.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""OH""][");
            WriteLiteral(@"0]) || columnMap[""OH""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].oh_bd.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""IGBD""][0]) || columnMap[""IGBD""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].igbdh_bd.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGBD""][0]) || columnMap[""EGBD""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].egbdh_bd.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""LS""][0]) || columnMap[""LS""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].load_shedding_bd.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Total_BD""][0]) || co");
            WriteLiteral(@"lumnMap[""Total_BD""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].total_bd_hrs.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""USMH_Loss""][0]) || columnMap[""USMH_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].usmh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""SMH_Loss""][0]) || columnMap[""SMH_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].smh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""OH_Loss""][0]) || columnMap[""OH_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].oh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""IGBD_Loss""]");
            WriteLiteral(@"[0]) || columnMap[""IGBD_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].igbdh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGBD_Loss""][0]) || columnMap[""EGBD_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].egbdh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""LS_Loss""][0]) || columnMap[""LS_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].load_shedding.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""LULL_Loss""][0]) || columnMap[""LULL_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].lull_hrs.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes");
            WriteLiteral(@"(columnMap[""Total_Loss""][0]) || columnMap[""Total_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].total_losses.toFixed(2) + '</td>';
                        }
                        
                        tbl += '</tr>';
                       // const row = document.createElement(""tr"");

                        //const cell = document.createElement(""td"");
                        //cell.textContent = formattedDate;
                        //row.appendChild(cell);

                       // const cell2 = document.createElement(""td"");
                        //cell2.textContent = result[i].country;
                       // row.appendChild(cell2);

                        //const cell3 = document.createElement(""td"");
                        //cell3.textContent = result[i].state;
                        //row.appendChild(cell3);

                        //const cell4 = document.createElement(""td"");
                        //cell4.te");
            WriteLiteral(@"xtContent = result[i].spv;
                        //row.appendChild(cell4);

                       // const cell5 = document.createElement(""td"");
                        //cell5.textContent = result[i].site;
                        //row.appendChild(cell5);

                        //const cell6 = document.createElement(""td"");
                        //cell6.textContent = result[i].inverter;
                        //row.appendChild(cell6);

                       // const cell7 = document.createElement(""td"");
                       // cell7.textContent = result[i].dc_capacity.toFixed(2);
                        //row.appendChild(cell7);

                        //const cell8 = document.createElement(""td"");
                        //cell8.textContent = result[i].ac_capacity.toFixed(2);
                        //row.appendChild(cell8);

                        //const cell39 = document.createElement(""td"");
                        //cell39.textContent = result[i].ghi.toFixed(2);
         ");
            WriteLiteral(@"              // row.appendChild(cell39);


                       // const cell9 = document.createElement(""td"");
                        //cell9.textContent = result[i].poa.toFixed(2);
                       // row.appendChild(cell9);

                       // const cell10 = document.createElement(""td"");
                        //cell10.textContent = result[i].expected_kwh.toFixed(2);
                        //row.appendChild(cell10);

                       // const cell11 = document.createElement(""td"");
                        //cell11.textContent = result[i].inv_kwh.toFixed(2);
                       //row.appendChild(cell11);

                        //const cell12 = document.createElement(""td"");
                        //cell12.textContent = result[i].plant_kwh.toFixed(2);
                       // row.appendChild(cell12);

                        //const cell13 = document.createElement(""td"");
                        //cell13.textContent = result[i].inv_pr.toFixed(2);
             ");
            WriteLiteral(@"           //row.appendChild(cell13);

                       // const cell14 = document.createElement(""td"");
                        //cell14.textContent = result[i].plant_pr.toFixed(2);
                        //row.appendChild(cell14);

                        //const cell15 = document.createElement(""td"");
                        //cell15.textContent = result[i].inv_plf.toFixed(2);
                       // row.appendChild(cell15);

                        //const cell16 = document.createElement(""td"");
                        //cell16.textContent = result[i].plant_plf.toFixed(2);
                       // row.appendChild(cell16);

                        //const cell17 = document.createElement(""td"");
                       // cell17.textContent = result[i].ma_actual.toFixed(2);
                       // row.appendChild(cell17);

                        //const cell18 = document.createElement(""td""); not use
                       // cell18.textContent = result[i].ma_contractual.toFixed(2)");
            WriteLiteral(@";
                        //row.appendChild(cell18);

                        //const cell19 = document.createElement(""td"");
                       // cell19.textContent = result[i].iga.toFixed(2);
                        //row.appendChild(cell19);

                       // const cell20 = document.createElement(""td"");
                        //cell20.textContent = result[i].ega.toFixed(2);
                       // row.appendChild(cell20);

                       // const cell21 = document.createElement(""td"");
                       // cell21.textContent = result[i].ega_b.toFixed(2);
                        //row.appendChild(cell21);

                       // const cell22 = document.createElement(""td"");
                        //cell22.textContent = result[i].ega_c.toFixed(2);
                        //row.appendChild(cell22);

                        //const cell23 = document.createElement(""td"");
                        //cell23.textContent = result[i].prod_hrs.toFixed(2);
            ");
            WriteLiteral(@"            //row.appendChild(cell23);

                        //const cell24 = document.createElement(""td"");
                        //cell24.textContent = result[i].usmh_bs.toFixed(2);
                        //row.appendChild(cell24);

                        //const cell25 = document.createElement(""td"");
                        //cell25.textContent = result[i].smh_bd.toFixed(2);
                        //row.appendChild(cell25);

                        //const cell26 = document.createElement(""td"");
                        //cell26.textContent = result[i].oh_bd.toFixed(2);
                       // row.appendChild(cell26);

                        //const cell27 = document.createElement(""td"");
                       // cell27.textContent = result[i].igbdh_bd.toFixed(2);
                       // row.appendChild(cell27);

                        //const cell28 = document.createElement(""td"");
                       // cell28.textContent = result[i].egbdh_bd.toFixed(2);
                 ");
            WriteLiteral(@"       //row.appendChild(cell28);

                       // const cell29 = document.createElement(""td"");
                       // cell29.textContent = result[i].load_shedding_bd;
                       // row.appendChild(cell29);

                       // const cell30 = document.createElement(""td"");
                        //cell30.textContent = result[i].total_bd_hrs.toFixed(2);
                       // row.appendChild(cell30);

                       // const cell31 = document.createElement(""td"");
                       // cell31.textContent = result[i].usmh.toFixed(2);
                       // row.appendChild(cell31);

                        //const cell32 = document.createElement(""td"");
                        //cell32.textContent = result[i].smh.toFixed(2);
                        //row.appendChild(cell32);

                       // const cell33 = document.createElement(""td"");
                       // cell33.textContent = result[i].oh.toFixed(2);
                       // row.");
            WriteLiteral(@"appendChild(cell33);

                       // const cell34 = document.createElement(""td"");
                       // cell34.textContent = result[i].igbdh.toFixed(2);
                      //  row.appendChild(cell34);

                       // const cell35 = document.createElement(""td"");
                       // cell35.textContent = result[i].egbdh.toFixed(2);
                       // row.appendChild(cell35);

                        //const cell36 = document.createElement(""td"");
                       //cell36.textContent = result[i].load_shedding.toFixed(2);
                        //row.appendChild(cell36);

                       //const cell37 = document.createElement(""td"");
                        //cell37.textContent = result[i].lull_hrs.toFixed(2);
                       // row.appendChild(cell37);

                      //  const cell38 = document.createElement(""td"");
                       /// cell38.textContent = result[i].total_losses.toFixed(2);
                      //  r");
            WriteLiteral(@"ow.appendChild(cell38);



                        //table.appendChild(row);

                       // if (i == (result.length - 1)) {
                           // console.log(""last obj no.:"" + i);
                           // console.log(""last obj :"" + JSON.stringify(result[i]))
                            //    ;
                       // }

                    }
                }
                else {
                    console.log(""Data not available"");

                }

                tbl += '</table>';
               $(""#reportsDaily"").html(tbl);

              // const parentElement = document.getElementById(""reportsDaily"");
               // var tbl += '</table>';
              //  parentElement.innerHTML += tbl; // Append the new HTML content


                    $('#example1').DataTable({
                        dom: 'Bfrtip',
                        title: 'ImportApproval',
                       fixedHeader: true,
                        responsive: true,
 ");
            WriteLiteral(@"                       scrollX: true,
                        lengthChange: false,
                        autoWidth: true,
                        paging: true,
                        searching: true,
                        ordering: true,
                        info: true,
                        autoWidth: true,
                        fixedColumns: {
                            left: 8
                        },
                        pageLength: 50,
                        ""order"": [[4, ""asc""]],
                        buttons: [
                            {
                                extend: 'excel',
                                title: 'Solar Daily Generation Reports Inverter Wise',
                                exportOptions: {
                                    columns: ':visible'
                                }
                            },
                            {
                                extend: 'csv',
                                title: 'Sol");
            WriteLiteral(@"ar Daily Generation Reports Inverter Wise',
                                exportOptions: {
                                    columns: ':visible'
                                }
                            },
                        'colvis',
                        {
                            text: '<span class=""fas fa-file-excel"" title=""Download from DB up to six decimal""></span>',
                            className: 'btn ml-1   ',

                            action: function () {
                                DailyexportToExcelGenReportInverterWise();
                            }
                        },
                        ],
                        initComplete: function () {
                            this.api().columns().header().to$().each(function () {
                                //$(this).attr('title', 'title for ' + $(this).text())
                                if ($(this).text() == ""EGA_A(%) i"") {
                                    $(this).attr('title");
            WriteLiteral(@"', 'External Grid Breakdown, Shutdown & Load Shedding')
                                }
                                if ($(this).text() == ""EGA_B(%) i"") {
                                    $(this).attr('title', 'External Grid Breakdown & Shutdown')
                                }
                                if ($(this).text() == ""EGA_C(%) i"") {
                                    $(this).attr('title', 'Load Shedding')
                                }
                            })
                        }
                        /* ""buttons"": [
                             'copy', 'excel', 'csv', 'colvis'
                         ]*/
                    });

                $("".dt-buttons"").addClass('btn-group flex-wrap');
                $("".dt-buttons > button"").addClass('btn btn-secondary');
                $("".dataTables_filter> label >input"").addClass('form-control form-control-sm');
                $(""dataTables_filter"").css(""margin-top"", ""-35px"");
                $(doc");
            WriteLiteral(@"ument).on(""click"", ""div.dt-button-collection > div > button"", function () {
                    if ($(this).hasClass(""active"")) {
                        $(this).css(""background-color"", ""white"");
                    } else {
                        $(this).css(""background-color"", ""#31576d"");
                    }
                });
                //$('#example1').removeClass('dataTable');
                //$('#example1').wrap(""<div class='scrolledTable'></div>"");
                document.getElementById(""loaderD"").style.display = 'none';
            }
        });


    }
   // -----------------------------------------------

    // Daily Gen Report Site WIse
    function GetDailyGenReportSiteWise() {
        var daterange = $('#daterange').val();
        var arr1 = new Array();
        arr1 = daterange.split(""-"");
        var fromDate = moment(arr1[0], 'DD/MM/YYYY').format('YYYY-MM-DD');
        var toDate = moment(arr1[1], 'DD/MM/YYYY').format('YYYY-MM-DD');
        var country = $('");
            WriteLiteral(@"select#country option:selected').val();
        //var state = $('select#state option:selected').val();
        let site = """";
        let spv = """";
        let inv = """";
        let state = """";

        $('select#site option:selected').each(function () {
            site += $(this).val() + "","";
            //console.log($(this).val());
        });
        site = site != """" ? site.slice(0, -1) : site;

        if (!site) {
            $('select#state option:selected').each(function () {
                state += $(this).val() + "","";

            });
            state = state != """" ? state.slice(0, -1) : state;

            $('select#spv option:selected').each(function () {
                spv += $(this).val() + "","";
                //  console.log($(this).val());
            });
            spv = spv != """" ? spv.slice(0, -1) : spv;

        }
        if (userRole == ""User"" && site == """") {
            site = solarUserAccess;
        }

        document.getElementById(""loaderD"").st");
            WriteLiteral(@"yle.display = 'flex';
        $('select#inv option:selected').each(function () {
            inv += $(this).val() + "","";

        });
        var reportType = ""Site"";
        var reporthead = ""Site Wise Report"";
        $.ajax({
            type: ""GET"",
            url: '");
#nullable restore
#line 1876 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarGenReport.cshtml"
             Write(Url.Action("GetSolarDailyGenerationReportSiteWise", "SolarReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?fromDate=' + fromDate + '&toDate=' + toDate + '&country=' + country + '&state=' + state + '&spv=' + spv + '&site=' + site + '&inv=' + inv + '&reportType=' + reportType,
            //url: ""/WindReport/GetWindDailyGenerationReportSiteWise?fromDate="" + fromDate + ""&toDate="" + toDate + ""&country="" + country + ""&state="" + state + ""&spv="" + spv + ""&site="" + site + ""&wtg="" + wtg + ""&reportType="" + reportType,
            contentType: ""application/json; charset=utf-8"",

            datatype: ""JSON"",
            success: function (result, status, xhr) {

               // var tbl = '<div class=""text-center""><h5></h5></div>';
               var  tbl = '<table id=""example1""  class=""table table-bordered table-striped"" style=""width:285%"">';
                tbl += '<thead class=""tbl-head""><tr>';
               // tbl += '<th >Year</th>';
               // tbl += '<th >Month</th>';
                if (userColumnId.includes(columnMap[""Date""][0]) || columnMap[""Date""][1] == 1 || isAdmin == 1) {
            ");
            WriteLiteral(@"        tbl += '<th >Date</th>';
                }
                if (userColumnId.includes(columnMap[""Country""][0]) || columnMap[""Country""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Country</th>';
                }
                if (userColumnId.includes(columnMap[""State""][0]) || columnMap[""State""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>State</th>';
                }
                if (userColumnId.includes(columnMap[""SPV""][0]) || columnMap[""SPV""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>SPV</th>';
                }
                if (userColumnId.includes(columnMap[""Site""][0]) || columnMap[""Site""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Site</th>';
                }
                if (userColumnId.includes(columnMap[""Inverter""][0]) || columnMap[""Inverter""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Inverter</th>';
                }
                if (userColumnId.includes(columnMap[""DC_Capacity""");
            WriteLiteral(@"][0]) || columnMap[""DC_Capacity""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>DC_Capacity<br>(kWp)</th>';
                }
                if (userColumnId.includes(columnMap[""AC_Capacity""][0]) || columnMap[""AC_Capacity""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>AC_Capacity<br>(kW)</th>';
                }
                if (userColumnId.includes(columnMap[""GHI""][0]) || columnMap[""GHI""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>GHI</th>';
                }
                if (userColumnId.includes(columnMap[""POA""][0]) || columnMap[""POA""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>POA</th>';
                }
                if (userColumnId.includes(columnMap[""Expected_Kwh""][0]) || columnMap[""Expected_Kwh""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Expected_kwh</th>';
                }
                if (userColumnId.includes(columnMap[""INV_Kwh""][0]) || columnMap[""INV_Kwh""][1] == 1 || isAdmin == 1) {
        ");
            WriteLiteral(@"            tbl += '<th>INV_kWh</th>';
                }
                if (userColumnId.includes(columnMap[""Plant_Kwh""][0]) || columnMap[""Plant_Kwh""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Plant_kWh</th>';
                }
                if (userColumnId.includes(columnMap[""INV_PR""][0]) || columnMap[""INV_PR""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>INV_PR</th>';
                }
                if (userColumnId.includes(columnMap[""Plant_PR""][0]) || columnMap[""Plant_PR""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Plant_PR</th>';
                }
                if (userColumnId.includes(columnMap[""INV_PLF""][0]) || columnMap[""INV_PLF""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>INV_PLF<br>(%)</th>';
                }
                if (userColumnId.includes(columnMap[""Plant_PLF""][0]) || columnMap[""Plant_PLF""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Plant_PLF<br>(%)</th>';
                }
         ");
            WriteLiteral(@"       if (userColumnId.includes(columnMap[""MA_ACT""][0]) || columnMap[""MA_ACT""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>MA_ACT<br>(%)</th>';
                }
                if (userColumnId.includes(columnMap[""IGA""][0]) || columnMap[""IGA""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>IGA<br>(%)</th>';
                }
                if (userColumnId.includes(columnMap[""EGA_A""][0]) || columnMap[""EGA_A""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGA_A<br>(%) <span class=""information"">i<span></th>';
                }
                if (userColumnId.includes(columnMap[""EGA_B""][0]) || columnMap[""EGA_B""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGA_B<br>(%) <span class=""information"">i<span></th>';
                }
                if (userColumnId.includes(columnMap[""EGA_C""][0]) || columnMap[""EGA_C""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGA_C<br>(%) <span class=""information"">i<span></th>';
                }");
            WriteLiteral(@"
                if (userColumnId.includes(columnMap[""Gen_Hrs""][0]) || columnMap[""Gen_Hrs""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Gen_Hrs</th>';
                }
                if (userColumnId.includes(columnMap[""USMH""][0]) || columnMap[""USMH""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>USMH</th>';
                }
                if (userColumnId.includes(columnMap[""SMH""][0]) || columnMap[""SMH""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>SMH</th>';
                }
                if (userColumnId.includes(columnMap[""OH""][0]) || columnMap[""OH""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>OH</th>';
                }
                if (userColumnId.includes(columnMap[""IGBD""][0]) || columnMap[""IGBD""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>IGBD</th>';
                }
                if (userColumnId.includes(columnMap[""EGBD""][0]) || columnMap[""EGBD""][1] == 1 || isAdmin == 1) {
                    tbl +");
            WriteLiteral(@"= '<th>EGBD</th>';
                }
                if (userColumnId.includes(columnMap[""LS""][0]) || columnMap[""LS""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>LS</th>';
                }
                if (userColumnId.includes(columnMap[""Total_BD""][0]) || columnMap[""Total_BD""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Total_BD</th>';
                }
                if (userColumnId.includes(columnMap[""USMH_Loss""][0]) || columnMap[""USMH_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>USMH_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""SMH_Loss""][0]) || columnMap[""SMH_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>SMH_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""OH_Loss""][0]) || columnMap[""OH_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>OH_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""IGBD_");
            WriteLiteral(@"Loss""][0]) || columnMap[""IGBD_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>IGBD_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""EGBD_Loss""][0]) || columnMap[""EGBD_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGBD_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""LS_Loss""][0]) || columnMap[""LS_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>LS_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""LULL_Loss""][0]) || columnMap[""LULL_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>LULL_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""Total_Loss""][0]) || columnMap[""Total_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Total_Loss</th>';
                }
                tbl += '</tr></thead>';

                if (result.length > 0) {
                     exceldata2 = result");
            WriteLiteral(@";
                    for (var i = 0; i < result.length; i++) {
                        var formattedDate = moment(result[i].date, 'YYYY/MM/DD').format('DD-MM-YYYY');
                        let totalFinal = result[i].total_losses + result[i].tracker_losses;
                        tbl += '<tr>';
                        //tbl += '<td class=""text-left"">' + result[i].year + '</td>';
                       // tbl += '<td class=""text-left"">' + result[i].month + '</td>';
                        if (userColumnId.includes(columnMap[""Date""][0]) || columnMap[""Date""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"" style=""text-wrap: nowrap;"">' + formattedDate + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Country""][0]) || columnMap[""Country""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"">' + result[i].country + '</td>';
                        }
                        if (userColum");
            WriteLiteral(@"nId.includes(columnMap[""State""][0]) || columnMap[""State""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"">' + result[i].state + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""SPV""][0]) || columnMap[""SPV""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"" style=""text-wrap: nowrap;"">' + result[i].spv + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Site""][0]) || columnMap[""Site""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"" style=""text-wrap: nowrap;"">' + result[i].site + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Inverter""][0]) || columnMap[""Inverter""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"" style=""text-wrap: nowrap;"">' + result[i].inverter + '</td>';
                        }
                    ");
            WriteLiteral(@"    if (userColumnId.includes(columnMap[""DC_Capacity""][0]) || columnMap[""DC_Capacity""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].dc_capacity.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""AC_Capacity""][0]) || columnMap[""AC_Capacity""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ac_capacity.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""GHI""][0]) || columnMap[""GHI""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ghi.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""POA""][0]) || columnMap[""POA""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].poa.toFixed(2) + '</td>';
                        }
            ");
            WriteLiteral(@"            if (userColumnId.includes(columnMap[""Expected_Kwh""][0]) || columnMap[""Expected_Kwh""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + Expected_value + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""INV_Kwh""][0]) || columnMap[""INV_Kwh""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].inv_kwh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Plant_Kwh""][0]) || columnMap[""Plant_Kwh""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].plant_kwh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""INV_PR""][0]) || columnMap[""INV_PR""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].inv_pr.toFixed(2) + '</td>';
                        }
     ");
            WriteLiteral(@"                   if (userColumnId.includes(columnMap[""Plant_PR""][0]) || columnMap[""Plant_PR""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].plant_pr.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""INV_PLF""][0]) || columnMap[""INV_PLF""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].inv_plf.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Plant_PLF""][0]) || columnMap[""Plant_PLF""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].plant_plf.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""MA_ACT""][0]) || columnMap[""MA_ACT""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ma_actual.toFixed(2) + '</td>';
               ");
            WriteLiteral(@"         }
                        if (userColumnId.includes(columnMap[""IGA""][0]) || columnMap[""IGA""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].iga.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGA_A""][0]) || columnMap[""EGA_A""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ega.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGA_B""][0]) || columnMap[""EGA_B""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ega_b.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGA_C""][0]) || columnMap[""EGA_C""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ega_c.toFixed(2) + '</td>';
                        }
            ");
            WriteLiteral(@"            if (userColumnId.includes(columnMap[""Gen_Hrs""][0]) || columnMap[""Gen_Hrs""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].prod_hrs.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""USMH""][0]) || columnMap[""USMH""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].usmh_bs.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""SMH""][0]) || columnMap[""SMH""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].smh_bd.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""OH""][0]) || columnMap[""OH""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].oh_bd.toFixed(2) + '</td>';
                        }
                        if (us");
            WriteLiteral(@"erColumnId.includes(columnMap[""IGBD""][0]) || columnMap[""IGBD""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].igbdh_bd.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGBD""][0]) || columnMap[""EGBD""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].egbdh_bd.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""LS""][0]) || columnMap[""LS""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].load_shedding_bd.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Total_BD""][0]) || columnMap[""Total_BD""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].total_bd_hrs.toFixed(2) + '</td>';
                        }
                        if");
            WriteLiteral(@" (userColumnId.includes(columnMap[""USMH_Loss""][0]) || columnMap[""USMH_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].usmh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""SMH_Loss""][0]) || columnMap[""SMH_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].smh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""OH_Loss""][0]) || columnMap[""OH_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].oh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""IGBD_Loss""][0]) || columnMap[""IGBD_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].igbdh.toFixed(2) + '</td>';
                        }
                      ");
            WriteLiteral(@"  if (userColumnId.includes(columnMap[""EGBD_Loss""][0]) || columnMap[""EGBD_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].egbdh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""LS_Loss""][0]) || columnMap[""LS_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].load_shedding.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""LULL_Loss""][0]) || columnMap[""LULL_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].lull_hrs.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Total_Loss""][0]) || columnMap[""Total_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + totalFinal.toFixed(2) + '</td>';
                        }
  ");
            WriteLiteral(@"                      //tbl += '<td class=""text-left"" style=""text-wrap: nowrap;"">' + formattedDate + '</td>';
                        //tbl += '<td class=""text-left"">' + result[i].site + '</td>';

                        //tbl += '<td class=""text-left"">' + result[i].country + '</td>';
                        //tbl += '<td class=""text-left"">' + result[i].state + '</td>';
                        //tbl += '<td class=""text-left"" style=""text-wrap: nowrap;"">' + result[i].spv + '</td>';

                        //tbl += '<td class=""text-right"">' + result[i].dc_capacity.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].ac_capacity.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].ghi.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].poa.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].expected_kwh.toFixed(2) + '</td>';
                ");
            WriteLiteral(@"        //tbl += '<td class=""text-right"">' + result[i].inv_kwh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].plant_kwh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].inv_pr.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].plant_pr.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].inv_plf.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].plant_plf.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].ma_actual.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].iga.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].ega.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].ega_b.toFixed(2) + '</td>';
                        ");
            WriteLiteral(@"//tbl += '<td class=""text-right"">' + result[i].ega_c.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].prod_hrs.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].lull_hrs_bd.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].usmh_bs.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].smh_bd.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].oh_bd.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].igbdh_bd.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].egbdh_bd.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].load_shedding_bd.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].total_bd_hrs.toFixed(2) + '</td>';

          ");
            WriteLiteral(@"              //tbl += '<td class=""text-right"">' + result[i].usmh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].smh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].oh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].igbdh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].egbdh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].load_shedding.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].lull_hrs.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].tracker_losses.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + totalFinal.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + moment.utc(result[i].unschedule_hrs['totalSeconds'] * 1000).form");
            WriteLiteral(@"at('HH:mm:ss') + '</td>';
                        //tbl += '<td class=""text-right"">' + moment.utc(result[i].schedule_hrs['totalSeconds'] * 1000).format('HH:mm:ss') + '</td>';
                        //tbl += '<td class=""text-right"">' + moment.utc(result[i].others['totalSeconds'] * 1000).format('HH:mm:ss') + '</td>';
                        //tbl += '<td class=""text-right"">' + moment.utc(result[i].igbdh['totalSeconds'] * 1000).format('HH:mm:ss') + '</td>';
                        //tbl += '<td class=""text-right"">' + moment.utc(result[i].egbdh['totalSeconds'] * 1000).format('HH:mm:ss') + '</td>';
                        //tbl += '<td class=""text-right"">' + moment.utc(result[i].load_shedding['totalSeconds'] * 1000).format('HH:mm:ss') + '</td>';


                        tbl += '</tr>';
                    }
                }
                else {
                    console.log(""Data not available"");

                }
                tbl += '</table>';
                $(""#reportsDaily"").html(tb");
            WriteLiteral(@"l);
                $('#example1').DataTable({
                    dom: 'Bfrtip',
                    title: 'ImportApproval',
                    fixedHeader: true,
                    responsive: true,
                    scrollX: true,
                    lengthChange: false,
                    autoWidth: true,
                    paging: true,
                    searching: true,
                    ordering: true,
                    info: true,
                    autoWidth: true,
                    fixedColumns: {
                        left: 7
                    },
                    pageLength: 50,
                    ""order"": [[1, ""asc""]],
                    buttons: [
                        {
                            extend: 'excel',
                            title: 'Solar Daily Generation Reports Site Wise',
                            exportOptions: {
                                columns: ':visible'
                            }
                        },");
            WriteLiteral(@"
                        {
                            extend: 'csv',
                            title: 'Solar Daily Generation Reports Site Wise',
                            exportOptions: {
                                columns: ':visible'
                            }
                        },
                        'colvis',
                        {
                            text: '<span class=""fas fa-file-excel"" title=""Download from DB up to six decimal""></span>',
                            className: 'btn ml-1   ',

                            action: function () {
                                DailyexportToExcelGenReportSiteWise();
                            }
                        },
                    ],
                    initComplete: function () {
                        this.api().columns().header().to$().each(function () {
                            //$(this).attr('title', 'title for ' + $(this).text())
                            if ($(this).text() == ""EGA_");
            WriteLiteral(@"A(%) i"") {
                                $(this).attr('title', 'External Grid Breakdown, Shutdown & Load Shedding')
                            }
                            if ($(this).text() == ""EGA_B(%) i"") {
                                $(this).attr('title', 'External Grid Breakdown & Shutdown')
                            }
                            if ($(this).text() == ""EGA_C(%) i"") {
                                $(this).attr('title', 'Load Shedding')
                            }
                        })
                    }
                    /* ""buttons"": [
                         'copy', 'excel', 'csv', 'colvis'
                     ]*/
                });
                $("".dt-buttons"").addClass('btn-group flex-wrap');
                $("".dt-buttons > button"").addClass('btn btn-secondary');
                $("".dataTables_filter> label >input"").addClass('form-control form-control-sm');
                $(""dataTables_filter"").css(""margin-top"", ""-35px"");
            ");
            WriteLiteral(@"    $(document).on(""click"", ""div.dt-button-collection > div > button"", function () {
                    if ($(this).hasClass(""active"")) {
                        $(this).css(""background-color"", ""white"");
                    } else {
                        $(this).css(""background-color"", ""#31576d"");
                    }
                });
                //$('#example1').removeClass('dataTable');
                //$('#example1').wrap(""<div class='scrolledTable'></div>"");
                document.getElementById(""loaderD"").style.display = 'none';
            }
        });
    }


   // -----------------------------------Monthly ---------------------//
    function GetMonthlyGenReport() {

       var ReportType = $(""input[name='monthly']:checked"").val();
        if (ReportType == ""WTG"") {
           //alert(""WTG"");
            GetMonthlyGenReportInverterWise();
        }
        else {
            //alert(""SIte"");
            GetMonthlyGenReportSiteWise();
        }
    }

    // ");
            WriteLiteral(@"Mothly Report WTG Wise
    function GetMonthlyGenReportInverterWise() {

        let site= """";
        let spv = """";
        let inv = """";
        let state = """";

        $('select#siteM option:selected').each(function () {
            site += $(this).val() + "","";
        });
        site = site != """" ? site.slice(0, -1) : site;

        if(!site){
            $('select#stateM option:selected').each(function () {
                state +=  $(this).val() + "","";

            });
            state = state != """" ? state.slice(0, -1) : state;

            $('select#spvM option:selected').each(function () {
                spv += $(this).val() + "","";

            });
            spv = spv != """" ? spv.slice(0, -1) : spv;

        }
        if (userRole == ""User"" && site == """") {
            site = solarUserAccess;
        }

        $('select#invM option:selected').each(function () {
            inv +=  $(this).val() + "","";

        });
        inv = inv != """" ? inv.slice(0, -1) : ");
            WriteLiteral(@"inv;

        var country = $('select#countryM option:selected').val();
        var year = $('select#fyM option:selected').val();
        //var month = $('select#monthM option:selected').val();
        if (year == """") {
            alert(""Please select financial year"");
            return false;
        }


        let month = """";
        $('select#monthM option:selected').each(function () {
            //monthArray.push($(this).val());
            //console.log($(this).val());
            month+= $(this).val()+"","";
        });
        month = month != """" ? month.slice(0, -1) : month;

        var arr1 = new Array();
        arr1 = year.split(""-"");
        var fromDate = """";
        /*monthArray.forEach((mon)=>{
            if(year && month){
                if (month >= '04' || month >= 04) {
                    fromDate += arr1[0] + '-' + mon + '-01,';
                }
                else
                {
                    fromDate += '20' + arr1[1] + '-' + mon + '-01,';
 ");
            WriteLiteral(@"               }
            }
        }) */
        document.getElementById(""loaderM"").style.display = 'flex';
        var reportType = ""INV"";
        var reporthead = ""Inverter Wise Report"";
        $.ajax({
            type: ""GET"",
            url: '");
#nullable restore
#line 2352 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarGenReport.cshtml"
             Write(Url.Action("GetSolarMonthlyGenerationReportInvWise", "SolarReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?fy=' + arr1[0] + '&month=' + month + '&country=' + country + '&state=' + state + '&spv=' + spv + '&site=' + site + '&inverter=' + inv + '&reportType=' + reportType,
           //url: ""/WindReport/GetWindMonthlyGenerationReportWTGWise?fromDate="" + fromDate + ""&month="" + month + ""&country="" + country + ""&state="" + state + ""&spv="" + spv + ""&site="" + site + ""&wtg="" + wtg + ""&reportType="" + reportType,
            contentType: ""application/json; charset=utf-8"",

            datatype: ""JSON"",
            success: function (result, status, xhr) {
                console.log(result);

                //var tbl = '<div class=""text-center""><h5></h5></div>';
               var  tbl = '<table id=""example2""  class=""table table-bordered table-striped"" style=""width:285%"">';
                tbl += '<thead class=""tbl-head""><tr>';
                if (userColumnId.includes(columnMap[""FY""][0]) || columnMap[""FY""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>FY</th>';
                }
           ");
            WriteLiteral(@"     if (userColumnId.includes(columnMap[""Month""][0]) || columnMap[""Month""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Month</th>';
                }
                if (userColumnId.includes(columnMap[""Country""][0]) || columnMap[""Country""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Country</th>';
                }
                if (userColumnId.includes(columnMap[""State""][0]) || columnMap[""State""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>State</th>';
                }
                if (userColumnId.includes(columnMap[""SPV""][0]) || columnMap[""SPV""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>SPV</th>';
                }
                if (userColumnId.includes(columnMap[""Site""][0]) || columnMap[""Site""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Site</th>';
                }
                if (userColumnId.includes(columnMap[""Inverter""][0]) || columnMap[""Inverter""][1] == 1 || isAdmin == 1) {
                 ");
            WriteLiteral(@"   tbl += '<th>Inverter</th>';
                }
                if (userColumnId.includes(columnMap[""DC_Capacity""][0]) || columnMap[""DC_Capacity""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>DC_Capacity<br>(kWp)</th>';
                }
                if (userColumnId.includes(columnMap[""AC_Capacity""][0]) || columnMap[""AC_Capacity""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>AC_Capacity<br>(kW)</th>';
                }
                if (userColumnId.includes(columnMap[""GHI""][0]) || columnMap[""GHI""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>GHI</th>';
                }
                if (userColumnId.includes(columnMap[""POA""][0]) || columnMap[""POA""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>POA</th>';
                }
                if (userColumnId.includes(columnMap[""Expected_Kwh""][0]) || columnMap[""Expected_Kwh""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Expected_kwh</th>';
                }
           ");
            WriteLiteral(@"     if (userColumnId.includes(columnMap[""INV_Kwh""][0]) || columnMap[""INV_Kwh""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>INV_kWh</th>';
                }
                if (userColumnId.includes(columnMap[""Plant_Kwh""][0]) || columnMap[""Plant_Kwh""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Plant_kWh</th>';
                }
                if (userColumnId.includes(columnMap[""INV_PR""][0]) || columnMap[""INV_PR""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>INV_PR</th>';
                }
                if (userColumnId.includes(columnMap[""Plant_PR""][0]) || columnMap[""Plant_PR""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Plant_PR</th>';
                }
                if (userColumnId.includes(columnMap[""INV_PLF""][0]) || columnMap[""INV_PLF""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>INV_PLF<br>(%)</th>';
                }
                if (userColumnId.includes(columnMap[""Plant_PLF""][0]) || columnMap[""Plant_PLF");
            WriteLiteral(@"""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Plant_PLF<br>(%)</th>';
                }
                if (userColumnId.includes(columnMap[""MA_ACT""][0]) || columnMap[""MA_ACT""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>MA_ACT<br>(%)</th>';
                }
                if (userColumnId.includes(columnMap[""IGA""][0]) || columnMap[""IGA""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>IGA<br>(%)</th>';
                }
                if (userColumnId.includes(columnMap[""EGA_A""][0]) || columnMap[""EGA_A""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGA_A<br>(%) <span class=""information"">i<span></th>';
                }
                if (userColumnId.includes(columnMap[""EGA_B""][0]) || columnMap[""EGA_B""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGA_B<br>(%) <span class=""information"">i<span></th>';
                }
                if (userColumnId.includes(columnMap[""EGA_C""][0]) || columnMap[""EGA_C""][1] == 1 || isAdmi");
            WriteLiteral(@"n == 1) {
                    tbl += '<th>EGA_C<br>(%) <span class=""information"">i<span></th>';
                }
                if (userColumnId.includes(columnMap[""Gen_Hrs""][0]) || columnMap[""Gen_Hrs""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Gen_Hrs</th>';
                }
                if (userColumnId.includes(columnMap[""USMH""][0]) || columnMap[""USMH""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>USMH</th>';
                }
                if (userColumnId.includes(columnMap[""SMH""][0]) || columnMap[""SMH""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>SMH</th>';
                }
                if (userColumnId.includes(columnMap[""OH""][0]) || columnMap[""OH""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>OH</th>';
                }
                if (userColumnId.includes(columnMap[""IGBD""][0]) || columnMap[""IGBD""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>IGBD</th>';
                }
                if (us");
            WriteLiteral(@"erColumnId.includes(columnMap[""EGBD""][0]) || columnMap[""EGBD""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGBD</th>';
                }
                if (userColumnId.includes(columnMap[""LS""][0]) || columnMap[""LS""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>LS</th>';
                }
                if (userColumnId.includes(columnMap[""Total_BD""][0]) || columnMap[""Total_BD""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Total_BD</th>';
                }
                if (userColumnId.includes(columnMap[""USMH_Loss""][0]) || columnMap[""USMH_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>USMH_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""SMH_Loss""][0]) || columnMap[""SMH_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>SMH_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""OH_Loss""][0]) || columnMap[""OH_Loss""][1] == 1 || isAdmin == 1) {
         ");
            WriteLiteral(@"           tbl += '<th>OH_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""IGBD_Loss""][0]) || columnMap[""IGBD_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>IGBD_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""EGBD_Loss""][0]) || columnMap[""EGBD_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGBD_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""LS_Loss""][0]) || columnMap[""LS_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>LS_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""LULL_Loss""][0]) || columnMap[""LULL_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>LULL_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""Total_Loss""][0]) || columnMap[""Total_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Total_Loss</th>';
                }
         ");
            WriteLiteral(@"       //tbl += '<th>FY</th>';
                //tbl += '<th>Month</th>';
                //tbl += '<th>Country</th>';
                //tbl += '<th>State</th>';
                //tbl += '<th>SPV</th>';
                //tbl += '<th>Site</th>';
                //tbl += '<th>Inverter</th>';
                //tbl += '<th>DC_Capacity<br>(kWp)</th>';
                //tbl += '<th>AC_Capacity<br>(kW)</th>';
                //tbl += '<th>GHI</th>';
                //tbl += '<th>POA</th>';
                //tbl += '<th>Expected_kwh</th>';
                //tbl += '<th>INV_kWh</th>';
                //tbl += '<th>Plant_kWh</th>';
                //tbl += '<th>INV_PR</th>';
                //tbl += '<th>Plant_PR</th>';
                //tbl += '<th>INV_PLF<br>(%)</th>';
                //tbl += '<th>Plant_PLF<br>(%)</th>';
                //tbl += '<th>MA_ACT<br>(%)</th>';
                ////tbl += '<th>MA_CON<br>(%)</th>';
                //tbl += '<th>IGA<br>(%)</th>';
                //tbl += ");
            WriteLiteral(@"'<th>EGA_A<br>(%) <span class=""information"">i<span></th>';
                //tbl += '<th>EGA_B<br>(%) <span class=""information"">i<span></th>';
                //tbl += '<th>EGA_C<br>(%) <span class=""information"">i<span></th>';
                //tbl += '<th>Gen_Hrs</th>';
                //tbl += '<th>Lull_Hrs</th>';

                //tbl += '<th>USMH</th>';
                //tbl += '<th>SMH</th>';
                //tbl += '<th>OH</th>';
                //tbl += '<th>IGBD</th>';
                //tbl += '<th>EGBD</th>';
                //tbl += '<th>LS</th>';
                //tbl += '<th>Total_BD</th>';


                //tbl += '<th>USMH_Loss</th>';
                //tbl += '<th>SMH_Loss</th>';
                //tbl += '<th>OH_Loss</th>';
                //tbl += '<th>IGBD_Loss</th>';
                //tbl += '<th>EGBD_Loss</th>';
                //tbl += '<th>LS_Loss</th>';
                //tbl += '<th>LULL_Loss</th>';
                //tbl += '<th>Total_Loss</th>';
               ");
            WriteLiteral(@" tbl += '</tr></thead>';
                console.log(result.length);
                if (result.length > 0) {
                    exceldata3 = result;
                    console.log(""Datatable"");
                    for (var i = 0; i < result.length; i++) {
                        //var formattedDate = moment(result[i].date, 'YYYY/MM/DD').format('DD-MM-YYYY');

                        tbl += '<tr>';
                        if (userColumnId.includes(columnMap[""FY""][0]) || columnMap[""FY""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"" style=""text-wrap: nowrap;"">' + year + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Month""][0]) || columnMap[""Month""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"">' + result[i].month + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Country""][0]) || columnMap[""Country""][1] == 1 || isAdmin == ");
            WriteLiteral(@"1) {
                            tbl += '<td class=""text-left"">' + result[i].country + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""State""][0]) || columnMap[""State""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"">' + result[i].state + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""SPV""][0]) || columnMap[""SPV""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"" style=""text-wrap: nowrap;"">' + result[i].spv + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Site""][0]) || columnMap[""Site""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"" style=""text-wrap: nowrap;"">' + result[i].site + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Inverter""][0]) || columnMap[""Inverter""][1] == 1 || isAdmin == 1) {
     ");
            WriteLiteral(@"                       tbl += '<td class=""text-left"" style=""text-wrap: nowrap;"">' + result[i].inverter + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""DC_Capacity""][0]) || columnMap[""DC_Capacity""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].dc_capacity.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""AC_Capacity""][0]) || columnMap[""AC_Capacity""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ac_capacity.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""GHI""][0]) || columnMap[""GHI""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ghi.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""POA""][0]) || columnMap[""POA""][1] ==");
            WriteLiteral(@" 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].poa.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Expected_Kwh""][0]) || columnMap[""Expected_Kwh""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].expected_kwh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""INV_Kwh""][0]) || columnMap[""INV_Kwh""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].inv_kwh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Plant_Kwh""][0]) || columnMap[""Plant_Kwh""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].plant_kwh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""INV_PR""][0]) || co");
            WriteLiteral(@"lumnMap[""INV_PR""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].inv_pr.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Plant_PR""][0]) || columnMap[""Plant_PR""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].plant_pr.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""INV_PLF""][0]) || columnMap[""INV_PLF""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].inv_plf.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Plant_PLF""][0]) || columnMap[""Plant_PLF""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].plant_plf.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""MA_A");
            WriteLiteral(@"CT""][0]) || columnMap[""MA_ACT""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ma_actual.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""IGA""][0]) || columnMap[""IGA""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].iga.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGA_A""][0]) || columnMap[""EGA_A""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ega.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGA_B""][0]) || columnMap[""EGA_B""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ega_b.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGA_C""][0]) || columnM");
            WriteLiteral(@"ap[""EGA_C""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ega_c.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Gen_Hrs""][0]) || columnMap[""Gen_Hrs""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].gen_hrs.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""USMH""][0]) || columnMap[""USMH""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].usmh_bs.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""SMH""][0]) || columnMap[""SMH""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].smh_bd.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""OH""][0]) || columnMap[""OH""][1] == 1");
            WriteLiteral(@" || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].oh_bd.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""IGBD""][0]) || columnMap[""IGBD""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].igbdh_bd.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGBD""][0]) || columnMap[""EGBD""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].egbdh_bd.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""LS""][0]) || columnMap[""LS""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].load_shedding_bd.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Total_BD""][0]) || columnMap[""Total_BD""][1] == 1 ||");
            WriteLiteral(@" isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].total_bd_hrs.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""USMH_Loss""][0]) || columnMap[""USMH_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].usmh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""SMH_Loss""][0]) || columnMap[""SMH_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].smh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""OH_Loss""][0]) || columnMap[""OH_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].oh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""IGBD_Loss""][0]) || columnMap[""IGBD_Loss""]");
            WriteLiteral(@"[1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].igbdh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGBD_Loss""][0]) || columnMap[""EGBD_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].egbdh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""LS_Loss""][0]) || columnMap[""LS_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].load_shedding.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""LULL_Loss""][0]) || columnMap[""LULL_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].lull_hrs.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Total_Loss""][0]) |");
            WriteLiteral(@"| columnMap[""Total_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].total_losses.toFixed() + '</td>';
                        }
                        //tbl += '<td class=""text-left"" style=""text-wrap: nowrap;"">' + year + '</td>';
                        //tbl += '<td class=""text-left"">' + result[i].month + '</td>';
                        //tbl += '<td class=""text-left"">' + result[i].country + '</td>';
                        //tbl += '<td class=""text-left"">' + result[i].state + '</td>';
                        //tbl += '<td class=""text-left"" style=""text-wrap: nowrap;"">' + result[i].spv + '</td>';
                        //tbl += '<td class=""text-left"">' + result[i].site + '</td>';
                        //tbl += '<td class=""text-left"" style=""text-wrap: nowrap;"">' + result[i].inverter + '</td>';
                        //tbl += '<td class=""text-left"">' + result[i].dc_capacity.toFixed(2) + '</td>';
                        //tbl += '<td clas");
            WriteLiteral(@"s=""text-left"">' + result[i].ac_capacity.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].ghi.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].poa.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].expected_kwh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].inv_kwh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].plant_kwh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].inv_pr.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].plant_pr.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].inv_plf.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].plant_plf.toFixed(2) + '</td>';
                        //tbl += '<td clas");
            WriteLiteral(@"s=""text-right"">' + result[i].ma_actual.toFixed(2) + '</td>';
                        ////tbl += '<td class=""text-right"">' + result[i].ma_contractual.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].iga.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].ega.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].ega_b.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].ega_c.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].gen_hrs.toFixed(2) + '</td>';

                        //tbl += '<td class=""text-right"">' + result[i].lull_hrs_bd.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].usmh_bs.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].smh_bd.toFixed(2) + '</td>';
                        //tbl += '<td clas");
            WriteLiteral(@"s=""text-right"">' + result[i].oh_bd.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].igbdh_bd.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].egbdh_bd.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].load_shedding_bd.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].total_bd_hrs.toFixed(2) + '</td>';

                        //tbl += '<td class=""text-right"">' + result[i].usmh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].smh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].oh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].igbdh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].egbdh.toFixed(2) + '</td>';
                        //tbl += '<td class=""t");
            WriteLiteral(@"ext-right"">' + result[i].load_shedding.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].lull_hrs.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].total_losses.toFixed(2) + '</td>';

                        //tbl += '<td class=""text-right"">' + moment.utc(result[i].unschedule_hrs['totalSeconds'] * 1000).format('HH:mm:ss') + '</td>';
                        //tbl += '<td class=""text-right"">' + moment.utc(result[i].schedule_hrs['totalSeconds'] * 1000).format('HH:mm:ss') + '</td>';
                        //tbl += '<td class=""text-right"">' + moment.utc(result[i].others['totalSeconds'] * 1000).format('HH:mm:ss') + '</td>';
                        //tbl += '<td class=""text-right"">' + moment.utc(result[i].igbdh['totalSeconds'] * 1000).format('HH:mm:ss') + '</td>';
                        //tbl += '<td class=""text-right"">' + moment.utc(result[i].egbdh['totalSeconds'] * 1000).format('HH:mm:ss') + '</td>';
                  ");
            WriteLiteral(@"      //tbl += '<td class=""text-right"">' + moment.utc(result[i].load_shedding['totalSeconds'] * 1000).format('HH:mm:ss') + '</td>';


                        //tbl += '<td class=""text-right"">' + result[i].usmh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].smh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].oh.toFixed() + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].igbdh.toFixed() + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].egbdh.toFixed() + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].load_shedding.toFixed() + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].total_losses.toFixed() + '</td>';


                        tbl += '</tr>';
                    }
                }
                else {
                    console.log(""Data not available"");
                ");
            WriteLiteral(@"    // tbl += '<tr><th colspan=""12"" style=""text-align:center"">Data Not Available <th></tr>';
                }
               tbl += '</table>';
                $(""#reportsMonthly"").html(tbl);
                $('#example2').DataTable({
                    dom: 'Bfrtip',
                    title: 'ImportApproval',
                    fixedHeader: true,
                    responsive: true,
                    scrollX: true,
                    lengthChange: false,
                    autoWidth: true,
                    paging: true,
                    searching: true,
                    ordering: true,
                    info: true,
                    autoWidth: true,
                    pageLength: 50,
                    fixedColumns: {
                        left: 9
                    },
                    ""order"": [[5, ""asc""]],
                    buttons: [
                        {
                            extend: 'excel',
                            title: 'Solar Mon");
            WriteLiteral(@"thly Generation Reports Inverter Wise',
                            exportOptions: {
                                columns: ':visible'
                            }
                        },
                        {
                            extend: 'csv',
                            title: 'Solar Monthly Generation Reports Inverter Wise',
                            exportOptions: {
                                columns: ':visible'
                            }
                        },
                        'colvis',
                        {
                            text: '<span class=""fas fa-file-excel"" title=""Download from DB up to six decimal""></span>',
                            className: 'btn ml-1   ',

                            action: function () {
                                MonthlyexportToExcelGenReportInverterWise();
                            }
                        },
                    ],
                    initComplete: function () {
         ");
            WriteLiteral(@"               this.api().columns().header().to$().each(function () {
                            //$(this).attr('title', 'title for ' + $(this).text())
                            if ($(this).text() == ""EGA_A(%) i"") {
                                $(this).attr('title', 'External Grid Breakdown, Shutdown & Load Shedding')
                            }
                            if ($(this).text() == ""EGA_B(%) i"") {
                                $(this).attr('title', 'External Grid Breakdown & Shutdown')
                            }
                            if ($(this).text() == ""EGA_C(%) i"") {
                                $(this).attr('title', 'Load Shedding')
                            }
                        })
                    }
                    /* ""buttons"": [
                         'copy', 'excel', 'csv', 'colvis'
                     ]*/
                });
                $("".dt-buttons"").addClass('btn-group flex-wrap');
                $("".dt-buttons > button"")");
            WriteLiteral(@".addClass('btn btn-secondary');
                $("".dataTables_filter> label >input"").addClass('form-control form-control-sm');
                $(""dataTables_filter"").css(""margin-top"", ""-35px"");
                $(document).on(""click"", ""div.dt-button-collection > div > button"", function () {
                    if ($(this).hasClass(""active"")) {
                        $(this).css(""background-color"", ""white"");
                    } else {
                        $(this).css(""background-color"", ""#31576d"");
                    }
                });
                //$('#example2').removeClass('dataTable');
                //$('#example2').wrap(""<div class='scrolledTable'></div>"");
                document.getElementById(""loaderM"").style.display = 'none';
            }
        });

    }
    //------------------------------------
    // Mothly Report SIte Wise
    function GetMonthlyGenReportSiteWise() {
        let site= """";
        let spv = """";
        let inv = """";
        let state = """"");
            WriteLiteral(@";

        $('select#siteM option:selected').each(function () {
            site += $(this).val() + "","";
        });
        site = site != """" ? site.slice(0, -1) : site;
        console.log('Site: '+site);

        if(!site){
            $('select#stateM option:selected').each(function () {
                state +=  $(this).val() + "","";
             //   console.log($(this).val());
            });
            state = state != """" ? state.slice(0, -1) : state;

            $('select#spvM option:selected').each(function () {
                spv += $(this).val() + "","";
              //  console.log($(this).val());
            });
            spv = spv != """" ? spv.slice(0, -1) : spv;

        }
        if (userRole == ""User"" && site == """") {
            site = solarUserAccess;
        }


        $('select#invM option:selected').each(function () {
            inv += $(this).val() + "","";
            //console.log($(this).val());
        });
        inv = inv != """" ? inv.slice(0, -1) ");
            WriteLiteral(@": inv;





        var country = $('select#countryM option:selected').val();
        var fyyear = $('select#fyM option:selected').val();
        if (fyyear == """") {
            alert(""Please select financial year"");
            return false;
        }
        let month = """";
        $('select#monthM option:selected').each(function () {

            month+= $(this).val()+"","";
        });
        month = month != """" ? month.slice(0, -1) : month;
        document.getElementById(""loaderM"").style.display = 'flex';
        var arr1 = new Array();
        arr1 = fyyear.split(""-"");
        var fromDate = """";
        var reportType = ""Site"";
        var reporthead = ""Site Wise Report"";
        var cnt = 0;
        $.ajax({
            type: ""GET"",
            url: '");
#nullable restore
#line 2863 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarGenReport.cshtml"
             Write(Url.Action("GetSolarMonthlyGenerationReportSiteWise", "SolarReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?fy=' + arr1[0] + '&month=' + month + '&country=' + country + '&state=' + state + '&spv=' + spv + '&site=' + site + '&inverter=' + inv + '&reportType=' + reportType,
           // url: ""/WindReport/GetWindMonthlyGenerationReportSiteWise?fromDate="" + fromDate + ""&month="" + month + ""&country="" + country + ""&state="" + state + ""&spv="" + spv + ""&site="" + site + ""&wtg="" + wtg + ""&reportType="" + reportType,
            contentType: ""application/json; charset=utf-8"",

            datatype: ""JSON"",
            success: function (result, status, xhr) {
                console.log(result);

                //var tbl = '<div class=""text-center""><h5>' + reporthead + '</h5></div>';

               // var tbl = '<div class=""text-center""><h5></h5></div>';
              var   tbl = '<table id=""example2""  class=""table table-bordered table-striped"" style=""width:285%"">';
                tbl += '<thead class=""tbl-head""><tr>';
                if (userColumnId.includes(columnMap[""FY""][0]) || columnMap[""FY""][1] == ");
            WriteLiteral(@"1 || isAdmin == 1) {
                    tbl += '<th>FY</th>';
                }
                if (userColumnId.includes(columnMap[""Month""][0]) || columnMap[""Month""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Month</th>';
                }
                if (userColumnId.includes(columnMap[""Country""][0]) || columnMap[""Country""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Country</th>';
                }
                if (userColumnId.includes(columnMap[""State""][0]) || columnMap[""State""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>State</th>';
                }
                if (userColumnId.includes(columnMap[""SPV""][0]) || columnMap[""SPV""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>SPV</th>';
                }
                if (userColumnId.includes(columnMap[""Site""][0]) || columnMap[""Site""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Site</th>';
                }
                if (userColumnId.includes(c");
            WriteLiteral(@"olumnMap[""Inverter""][0]) || columnMap[""Inverter""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Inverter</th>';
                }
                if (userColumnId.includes(columnMap[""DC_Capacity""][0]) || columnMap[""DC_Capacity""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>DC_Capacity<br>(MW)</th>';
                }
                if (userColumnId.includes(columnMap[""AC_Capacity""][0]) || columnMap[""AC_Capacity""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>AC_Capacity<br>(MW)</th>';
                }
                if (userColumnId.includes(columnMap[""GHI""][0]) || columnMap[""GHI""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>GHI</th>';
                }
                if (userColumnId.includes(columnMap[""POA""][0]) || columnMap[""POA""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>POA</th>';
                }
                if (userColumnId.includes(columnMap[""Expected_Kwh""][0]) || columnMap[""Expected_Kwh""][1] == 1 || isAdmi");
            WriteLiteral(@"n == 1) {
                    tbl += '<th>Expected_kwh</th>';
                }
                if (userColumnId.includes(columnMap[""INV_Kwh""][0]) || columnMap[""INV_Kwh""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>INV_kWh</th>';
                }
                if (userColumnId.includes(columnMap[""Plant_Kwh""][0]) || columnMap[""Plant_Kwh""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Plant_kWh</th>';
                }
                if (userColumnId.includes(columnMap[""INV_PR""][0]) || columnMap[""INV_PR""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>INV_PR</th>';
                }
                if (userColumnId.includes(columnMap[""Plant_PR""][0]) || columnMap[""Plant_PR""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Plant_PR</th>';
                }
                if (userColumnId.includes(columnMap[""INV_PLF""][0]) || columnMap[""INV_PLF""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>INV_PLF<br>(%)</th>';
                }");
            WriteLiteral(@"
                if (userColumnId.includes(columnMap[""Plant_PLF""][0]) || columnMap[""Plant_PLF""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Plant_PLF<br>(%)</th>';
                }
                if (userColumnId.includes(columnMap[""MA_ACT""][0]) || columnMap[""MA_ACT""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>MA_ACT<br>(%)</th>';
                }
                if (userColumnId.includes(columnMap[""IGA""][0]) || columnMap[""IGA""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>IGA<br>(%)</th>';
                }
                if (userColumnId.includes(columnMap[""EGA_A""][0]) || columnMap[""EGA_A""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGA_A<br>(%) <span class=""information"">i<span></th>';
                }
                if (userColumnId.includes(columnMap[""EGA_B""][0]) || columnMap[""EGA_B""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGA_B<br>(%) <span class=""information"">i<span></th>';
                }
          ");
            WriteLiteral(@"      if (userColumnId.includes(columnMap[""EGA_C""][0]) || columnMap[""EGA_C""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGA_C<br>(%) <span class=""information"">i<span></th>';
                }
                if (userColumnId.includes(columnMap[""Gen_Hrs""][0]) || columnMap[""Gen_Hrs""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Gen_Hrs</th>';
                }
                if (userColumnId.includes(columnMap[""USMH""][0]) || columnMap[""USMH""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>USMH</th>';
                }
                if (userColumnId.includes(columnMap[""SMH""][0]) || columnMap[""SMH""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>SMH</th>';
                }
                if (userColumnId.includes(columnMap[""OH""][0]) || columnMap[""OH""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>OH</th>';
                }
                if (userColumnId.includes(columnMap[""IGBD""][0]) || columnMap[""IGBD""][1] == 1 || isAdmin =");
            WriteLiteral(@"= 1) {
                    tbl += '<th>IGBD</th>';
                }
                if (userColumnId.includes(columnMap[""EGBD""][0]) || columnMap[""EGBD""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGBD</th>';
                }
                if (userColumnId.includes(columnMap[""LS""][0]) || columnMap[""LS""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>LS</th>';
                }
                if (userColumnId.includes(columnMap[""Total_BD""][0]) || columnMap[""Total_BD""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Total_BD</th>';
                }
                if (userColumnId.includes(columnMap[""USMH_Loss""][0]) || columnMap[""USMH_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>USMH_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""SMH_Loss""][0]) || columnMap[""SMH_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>SMH_Loss</th>';
                }
                if (userColumnId.i");
            WriteLiteral(@"ncludes(columnMap[""OH_Loss""][0]) || columnMap[""OH_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>OH_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""IGBD_Loss""][0]) || columnMap[""IGBD_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>IGBD_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""EGBD_Loss""][0]) || columnMap[""EGBD_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGBD_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""LS_Loss""][0]) || columnMap[""LS_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>LS_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""LULL_Loss""][0]) || columnMap[""LULL_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>LULL_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""Total_Loss""][0]) || columnMap[""Total_Loss""][1] == 1 || is");
            WriteLiteral(@"Admin == 1) {
                    tbl += '<th>Total_Loss</th>';
                }
                //tbl += '<th>FY</th>';
                //tbl += '<th>Month</th>';
                //tbl += '<th>Country</th>';
                //tbl += '<th>State</th>';
                //tbl += '<th>SPV</th>';
                //tbl += '<th>Site</th>';
                //tbl += '<th>DC_Capacity<br>(MW)</th>';
                //tbl += '<th>AC_Capacity<br>(MW)</th>';
                //tbl += '<th>GHI</th>';
                //tbl += '<th>POA</th>';
                //tbl += '<th>Expected_kwh</th>';
                //tbl += '<th>INV_kWh</th>';
                //tbl += '<th>Plant_kWh</th>';
                //tbl += '<th>INV_PR</th>';
                //tbl += '<th>Plant_PR</th>';
                //tbl += '<th>INV_PLF<br>(%)</th>';
                //tbl += '<th>Plant_PLF<br>(%)</th>';
                //tbl += '<th>MA_ACT<br>(%)</th>';
                ////tbl += '<th>MA_CON<br>(%)</th>';
                //tbl += '<t");
            WriteLiteral(@"h>IGA<br>(%)</th>';
                //tbl += '<th>EGA_A<br>(%) <span class=""information"">i<span></th>';
                //tbl += '<th>EGA_B<br>(%) <span class=""information"">i<span></th>';
                //tbl += '<th>EGA_C<br>(%) <span class=""information"">i<span></th>';
                //tbl += '<th>Gen_Hrs</th>';
                //tbl += '<th>Lull_Hrs</th>';
                //tbl += '<th>USMH</th>';
                //tbl += '<th>SMH</th>';
                //tbl += '<th>OH</th>';
                //tbl += '<th>IGBD</th>';
                //tbl += '<th>EGBD</th>';
                //tbl += '<th>LS</th>';
                //tbl += '<th>Total_BD</th>';


                //tbl += '<th>USMH_Loss</th>';
                //tbl += '<th>SMH_Loss</th>';
                //tbl += '<th>OH_Loss</th>';
                //tbl += '<th>IGBD_Loss</th>';
                //tbl += '<th>EGBD_Loss</th>';
                //tbl += '<th>LS_Loss</th>';
                //tbl += '<th>LULL_Loss</th>';
                //tb");
            WriteLiteral(@"l += '<th>Tracker_Loss</th>';
                //tbl += '<th>Total_Loss</th>';
                tbl += '</tr></thead>';
                console.log(result.length);
                if (result.length > 0) {
                    exceldata4 = result;
                    console.log(""Datatable"");
                    for (var i = 0; i < result.length; i++) {
                        cnt++;
                        //var formattedDate = moment(result[i].date, 'YYYY/MM/DD').format('DD-MM-YYYY');
                        let totalFinal = result[i].total_losses + result[i].tracker_losses;
                        tbl += '<tr>';
                        if (userColumnId.includes(columnMap[""FY""][0]) || columnMap[""FY""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"" style=""text-wrap: nowrap;"">' + fyyear + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Month""][0]) || columnMap[""Month""][1] == 1 || isAdmin == 1) {
                  ");
            WriteLiteral(@"          tbl += '<td class=""text-left"">' + result[i].month + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Country""][0]) || columnMap[""Country""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"">' + result[i].country + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""State""][0]) || columnMap[""State""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"">' + result[i].state + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""SPV""][0]) || columnMap[""SPV""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"" style=""text-wrap: nowrap;"">' + result[i].spv + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Site""][0]) || columnMap[""Site""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left""");
            WriteLiteral(@" style=""text-wrap: nowrap;"">' + result[i].site + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Inverter""][0]) || columnMap[""Inverter""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"" style=""text-wrap: nowrap;"">' + result[i].inverter + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""DC_Capacity""][0]) || columnMap[""DC_Capacity""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].dc_capacity.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""AC_Capacity""][0]) || columnMap[""AC_Capacity""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ac_capacity.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""GHI""][0]) || columnMap[""GHI""][1] == 1 || isAdmin == 1) {
   ");
            WriteLiteral(@"                         tbl += '<td class=""text-right"">' + result[i].ghi.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""POA""][0]) || columnMap[""POA""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].poa.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Expected_Kwh""][0]) || columnMap[""Expected_Kwh""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].expected_kwh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""INV_Kwh""][0]) || columnMap[""INV_Kwh""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].inv_kwh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Plant_Kwh""][0]) || columnMap[""Plant_Kwh""][1] == 1 || isAdmin =");
            WriteLiteral(@"= 1) {
                            tbl += '<td class=""text-right"">' + result[i].plant_kwh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""INV_PR""][0]) || columnMap[""INV_PR""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].inv_pr.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Plant_PR""][0]) || columnMap[""Plant_PR""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].plant_pr.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""INV_PLF""][0]) || columnMap[""INV_PLF""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].inv_plf.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Plant_PLF""][0]) || columnMap[""Plant_PLF""][1] == ");
            WriteLiteral(@"1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].plant_plf.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""MA_ACT""][0]) || columnMap[""MA_ACT""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ma_actual.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""IGA""][0]) || columnMap[""IGA""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].iga.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGA_A""][0]) || columnMap[""EGA_A""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ega.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGA_B""][0]) || columnMap[""EGA_B""][1] == 1 || isAdmin =");
            WriteLiteral(@"= 1) {
                            tbl += '<td class=""text-right"">' + result[i].ega_b.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGA_C""][0]) || columnMap[""EGA_C""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ega_c.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Gen_Hrs""][0]) || columnMap[""Gen_Hrs""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].prod_hrs.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""USMH""][0]) || columnMap[""USMH""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].usmh_bs.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""SMH""][0]) || columnMap[""SMH""][1] == 1 || isAdmin == 1) {
     ");
            WriteLiteral(@"                       tbl += '<td class=""text-right"">' + result[i].smh_bd.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""OH""][0]) || columnMap[""OH""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].oh_bd.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""IGBD""][0]) || columnMap[""IGBD""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].igbdh_bd.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGBD""][0]) || columnMap[""EGBD""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].egbdh_bd.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""LS""][0]) || columnMap[""LS""][1] == 1 || isAdmin == 1) {
                            tb");
            WriteLiteral(@"l += '<td class=""text-right"">' + result[i].load_shedding_bd.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Total_BD""][0]) || columnMap[""Total_BD""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].total_bd_hrs.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""USMH_Loss""][0]) || columnMap[""USMH_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].usmh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""SMH_Loss""][0]) || columnMap[""SMH_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].smh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""OH_Loss""][0]) || columnMap[""OH_Loss""][1] == 1 || isAdmin == 1) {
       ");
            WriteLiteral(@"                     tbl += '<td class=""text-right"">' + result[i].oh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""IGBD_Loss""][0]) || columnMap[""IGBD_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].igbdh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGBD_Loss""][0]) || columnMap[""EGBD_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].egbdh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""LS_Loss""][0]) || columnMap[""LS_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].load_shedding.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""LULL_Loss""][0]) || columnMap[""LULL_Loss""][1] == 1 || isAdmin");
            WriteLiteral(@" == 1) {
                            tbl += '<td class=""text-right"">' + result[i].lull_hrs.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Total_Loss""][0]) || columnMap[""Total_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + totalFinal.toFixed(2) + '</td>';
                        }
                        //tbl += '<td class=""text-left"" style=""text-wrap: nowrap;"">' + fyyear + '</td>';
                        //tbl += '<td class=""text-left"">' + result[i].month + '</td>';
                        //tbl += '<td class=""text-left"">' + result[i].country + '</td>';
                        //tbl += '<td class=""text-left"">' + result[i].state + '</td>';
                        //tbl += '<td class=""text-left""  style=""text-wrap: nowrap;"">' + result[i].spv + '</td>';
                        //tbl += '<td class=""text-left"">' + result[i].site + '</td>';
                        //tbl += '<td class=""text-le");
            WriteLiteral(@"ft"">' + result[i].dc_capacity.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-left"">' + result[i].ac_capacity.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].ghi.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].poa.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].expected_kwh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].inv_kwh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].plant_kwh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].inv_pr.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].plant_pr.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].inv_plf.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-r");
            WriteLiteral(@"ight"">' + result[i].plant_plf.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].ma_actual.toFixed(2) + '</td>';
                        ////tbl += '<td class=""text-right"">' + result[i].ma_contractual.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].iga.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].ega.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].ega_b.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].ega_c.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].prod_hrs.toFixed(2) + '</td>';

                        //tbl += '<td class=""text-right"">' + result[i].lull_hrs_bd.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].usmh_bs.toFixed(2) + '</td>';
                        //tbl += '<td class=""te");
            WriteLiteral(@"xt-right"">' + result[i].smh_bd.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].oh_bd.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].igbdh_bd.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].egbdh_bd.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].load_shedding_bd.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].total_bd_hrs.toFixed(2) + '</td>';


                        ////tbl += '<td class=""text-right"">' + moment.utc(result[i].unschedule_hrs['totalSeconds'] * 1000).format('HH:mm:ss') + '</td>';
                        ////tbl += '<td class=""text-right"">' + moment.utc(result[i].schedule_hrs['totalSeconds'] * 1000).format('HH:mm:ss') + '</td>';
                        ////tbl += '<td class=""text-right"">' + moment.utc(result[i].others['totalSeconds'] * 1000).format('HH:mm:ss') + ");
            WriteLiteral(@"'</td>';
                        ////tbl += '<td class=""text-right"">' + moment.utc(result[i].igbdh['totalSeconds'] * 1000).format('HH:mm:ss') + '</td>';
                        ////tbl += '<td class=""text-right"">' + moment.utc(result[i].egbdh['totalSeconds'] * 1000).format('HH:mm:ss') + '</td>';
                        ////tbl += '<td class=""text-right"">' + moment.utc(result[i].load_shedding['totalSeconds'] * 1000).format('HH:mm:ss') + '</td>';


                        //tbl += '<td class=""text-right"">' + result[i].usmh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].smh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].oh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].igbdh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].egbdh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].lo");
            WriteLiteral(@"ad_shedding.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].lull_hrs.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].tracker_losses.toFixed(2)+ '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].total_losses.toFixed(2) + '</td>';

                        tbl += '</tr>';
                    }
                }
                else {
                    console.log(""Data not available"");

                }
                console.log(""rows""+cnt+"""");
                tbl += '</table>';
                $(""#reportsMonthly"").html(tbl);
                $('#example2').DataTable({
                    dom: 'Bfrtip',
                    title: 'ImportApproval',
                    fixedHeader: true,
                    responsive: true,
                    scrollX: true,
                    lengthChange: false,
                    autoWidth: true,
                    paging: true,");
            WriteLiteral(@"
                    searching: true,
                    ordering: true,
                    info: true,
                    autoWidth: true,
                    fixedColumns: {
                        left: 8
                    },
                    pageLength: 50,
                    ""order"": [[5, ""asc""]],
                    buttons: [
                        {
                            extend: 'excel',
                            title: 'Solar Monthly Generation Reports Site Wise',
                            exportOptions: {
                                columns: ':visible',
                                rows: { selected: false, search: 'none', order: 'applied', page: 'all', range: ''+cnt+''}
                            }
                        },
                        {
                            extend: 'csv',
                            title: 'Solar Monthly Generation Reports Site Wise',
                            exportOptions: {
                                co");
            WriteLiteral(@"lumns: ':visible'
                            }
                        },
                        'colvis',
                        {
                            text: '<span class=""fas fa-file-excel"" title=""Download from DB up to six decimal""></span>',
                            className: 'btn ml-1   ',

                            action: function () {
                                MonthlyexportToExcelGenReportSiteWise();
                            }
                        },
                    ],
                    initComplete: function () {
                        this.api().columns().header().to$().each(function () {
                            //$(this).attr('title', 'title for ' + $(this).text())
                            if ($(this).text() == ""EGA_A(%) i"") {
                                $(this).attr('title', 'External Grid Breakdown, Shutdown & Load Shedding')
                            }
                            if ($(this).text() == ""EGA_B(%) i"") {
            ");
            WriteLiteral(@"                    $(this).attr('title', 'External Grid Breakdown & Shutdown')
                            }
                            if ($(this).text() == ""EGA_C(%) i"") {
                                $(this).attr('title', 'Load Shedding')
                            }
                        })
                    }
                    /* ""buttons"": [
                         'copy', 'excel', 'csv', 'colvis'
                     ]*/
                });
                $("".dt-buttons"").addClass('btn-group flex-wrap');
                $("".dt-buttons > button"").addClass('btn btn-secondary');
                $("".dataTables_filter> label >input"").addClass('form-control form-control-sm');
                $(""dataTables_filter"").css(""margin-top"", ""-35px"");
                $(document).on(""click"", ""div.dt-button-collection > div > button"", function () {
                    if ($(this).hasClass(""active"")) {
                        $(this).css(""background-color"", ""white"");
                    } ");
            WriteLiteral(@"else {
                        $(this).css(""background-color"", ""#31576d"");
                    }
                });
                //$('#example2').removeClass('dataTable');
                //$('#example2').wrap(""<div class='scrolledTable'></div>"");
                document.getElementById(""loaderM"").style.display = 'none';
            }
        });

    }

    // -----------------------------------Yearly ---------------------//
    function GetYearlyGenReport() {
        document.getElementById(""loaderY"").style.display = 'flex';
        var ReportType = $(""input[name='yearly']:checked"").val();
        if (ReportType == ""WTG"") {
            //alert(""WTG"");
            GetYearlyGenReportInverterWise();
        }
        else {
            //alert(""SIte"");
            GetYearlyGenReportSiteWise();
        }
    }

    // Yearly WTG Wise

    function GetYearlyGenReportInverterWise() {
        var country = $('select#countryY option:selected').val();
        let site = """";
       ");
            WriteLiteral(@" let spv = """";
        let inverter = """";
        let state = """";

        $('select#siteY option:selected').each(function () {
            site += $(this).val() + "","";
        });
        site = site != """" ? site.slice(0, -1) : site;

        if (!site) {
            $('select#stateY option:selected').each(function () {
                state += $(this).val() + "","";
                //   console.log($(this).val());
            });
            state = state != """" ? state.slice(0, -1) : state;
            // console.log(state);
            //var spv = $('select#spv option:selected').val();

            $('select#spvY option:selected').each(function () {
                spv += $(this).val() + "","";
                //  console.log($(this).val());
            });
            spv = spv != """" ? spv.slice(0, -1) : spv;

        }
        if (userRole == ""User"" && site == """") {
            site = solarUserAccess;
        }

        $('select#invY option:selected').each(function () {
       ");
            WriteLiteral(@"     inverter += $(this).val() + "","";
            //console.log($(this).val());
        });
        inverter = inverter != """" ? inverter.slice(0, -1) : inverter;

        var fyyear = $('select#fyY option:selected').val();
        if (fyyear == """") {
            alert(""Please select financial year"");
            return false;
        }
        //var month = $('select#monthM option:selected').val();
        var arr1 = new Array();
        arr1 = fyyear.split(""-"");

        document.getElementById(""loaderY"").style.display = 'flex';
        var fromDate = """";
        var toDate = """";
        if (fyyear) {
            fromDate = arr1[0] + '-04-01';
            toDate = '20' + arr1[1] + '-03-31';
        }

       // alert(fromDate);
      //  alert(toDate);
        var reportType = ""INV"";
        var reporthead = ""Inverter Wise Report"";
        $.ajax({
            type: ""GET"",
            url: '");
#nullable restore
#line 3384 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarGenReport.cshtml"
             Write(Url.Action("GetSolarYearlyGenerationReportWTGWise", "SolarReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?fromDate=' + fromDate + '&toDate=' + toDate + '&country=' + country + '&state=' + state + '&spv=' + spv + '&site=' + site + '&inverter=' + inverter + '&reportType=' + reportType,
            //url: ""/WindReport/GetWindYearlyGenerationReportWTGWise?fromDate="" + fromDate + ""&toDate="" + toDate + ""&country="" + country + ""&state="" + state + ""&spv="" + spv + ""&site="" + site + ""&wtg="" + wtg + ""&reportType="" + reportType,
            contentType: ""application/json; charset=utf-8"",

            datatype: ""JSON"",
            success: function (result, status, xhr) {

              //  var tbl = '<div class=""text-center""><h5></h5></div>';
               var  tbl = '<table id=""example3""  class=""table table-bordered table-striped"" style=""width:285%"">';
                tbl += '<thead class=""tbl-head""><tr>';
                if (userColumnId.includes(columnMap[""FY""][0]) || columnMap[""FY""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>FY</th>';
                }
                if (userColumnId.");
            WriteLiteral(@"includes(columnMap[""Country""][0]) || columnMap[""Country""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Country</th>';
                }
                if (userColumnId.includes(columnMap[""State""][0]) || columnMap[""State""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>State</th>';
                }
                if (userColumnId.includes(columnMap[""SPV""][0]) || columnMap[""SPV""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>SPV</th>';
                }
                if (userColumnId.includes(columnMap[""Site""][0]) || columnMap[""Site""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Site</th>';
                }
                if (userColumnId.includes(columnMap[""Inverter""][0]) || columnMap[""Inverter""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Inverter</th>';
                }
                if (userColumnId.includes(columnMap[""DC_Capacity""][0]) || columnMap[""DC_Capacity""][1] == 1 || isAdmin == 1) {
                    tbl ");
            WriteLiteral(@"+= '<th>DC_Capacity<br>(kWp)</th>';
                }
                if (userColumnId.includes(columnMap[""AC_Capacity""][0]) || columnMap[""AC_Capacity""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>AC_Capacity<br>(kW)</th>';
                }
                if (userColumnId.includes(columnMap[""GHI""][0]) || columnMap[""GHI""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>GHI</th>';
                }
                if (userColumnId.includes(columnMap[""POA""][0]) || columnMap[""POA""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>POA</th>';
                }
                if (userColumnId.includes(columnMap[""Expected_Kwh""][0]) || columnMap[""Expected_Kwh""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Expected_kwh</th>';
                }
                if (userColumnId.includes(columnMap[""INV_Kwh""][0]) || columnMap[""INV_Kwh""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>INV_kWh</th>';
                }
                if (userCol");
            WriteLiteral(@"umnId.includes(columnMap[""Plant_Kwh""][0]) || columnMap[""Plant_Kwh""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Plant_kWh</th>';
                }
                if (userColumnId.includes(columnMap[""INV_PR""][0]) || columnMap[""INV_PR""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>INV_PR</th>';
                }
                if (userColumnId.includes(columnMap[""Plant_PR""][0]) || columnMap[""Plant_PR""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Plant_PR</th>';
                }
                if (userColumnId.includes(columnMap[""INV_PLF""][0]) || columnMap[""INV_PLF""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>INV_PLF<br>(%)</th>';
                }
                if (userColumnId.includes(columnMap[""Plant_PLF""][0]) || columnMap[""Plant_PLF""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Plant_PLF<br>(%)</th>';
                }
                if (userColumnId.includes(columnMap[""MA_ACT""][0]) || columnMap[""MA_ACT""][1] == ");
            WriteLiteral(@"1 || isAdmin == 1) {
                    tbl += '<th>MA_ACT<br>(%)</th>';
                }
                if (userColumnId.includes(columnMap[""IGA""][0]) || columnMap[""IGA""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>IGA<br>(%)</th>';
                }
                if (userColumnId.includes(columnMap[""EGA_A""][0]) || columnMap[""EGA_A""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGA_A<br>(%) <span class=""information"">i<span></th>';
                }
                if (userColumnId.includes(columnMap[""EGA_B""][0]) || columnMap[""EGA_B""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGA_B<br>(%) <span class=""information"">i<span></th>';
                }
                if (userColumnId.includes(columnMap[""EGA_C""][0]) || columnMap[""EGA_C""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGA_C<br>(%) <span class=""information"">i<span></th>';
                }
                if (userColumnId.includes(columnMap[""Gen_Hrs""][0]) || columnMap[""Gen_");
            WriteLiteral(@"Hrs""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Gen_Hrs</th>';
                }
                if (userColumnId.includes(columnMap[""USMH""][0]) || columnMap[""USMH""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>USMH</th>';
                }
                if (userColumnId.includes(columnMap[""SMH""][0]) || columnMap[""SMH""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>SMH</th>';
                }
                if (userColumnId.includes(columnMap[""OH""][0]) || columnMap[""OH""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>OH</th>';
                }
                if (userColumnId.includes(columnMap[""IGBD""][0]) || columnMap[""IGBD""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>IGBD</th>';
                }
                if (userColumnId.includes(columnMap[""EGBD""][0]) || columnMap[""EGBD""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGBD</th>';
                }
                if (userColumnId.includes(colum");
            WriteLiteral(@"nMap[""LS""][0]) || columnMap[""LS""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>LS</th>';
                }
                if (userColumnId.includes(columnMap[""Total_BD""][0]) || columnMap[""Total_BD""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Total_BD</th>';
                }
                if (userColumnId.includes(columnMap[""USMH_Loss""][0]) || columnMap[""USMH_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>USMH_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""SMH_Loss""][0]) || columnMap[""SMH_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>SMH_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""OH_Loss""][0]) || columnMap[""OH_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>OH_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""IGBD_Loss""][0]) || columnMap[""IGBD_Loss""][1] == 1 || isAdmin == 1) {
                    t");
            WriteLiteral(@"bl += '<th>IGBD_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""EGBD_Loss""][0]) || columnMap[""EGBD_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGBD_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""LS_Loss""][0]) || columnMap[""LS_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>LS_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""LULL_Loss""][0]) || columnMap[""LULL_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>LULL_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""Total_Loss""][0]) || columnMap[""Total_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Total_Loss</th>';
                }
                //tbl += '<th>FY</th>';
                //tbl += '<th>Country</th>';
                //tbl += '<th>State</th>';
                //tbl += '<th>SPV</th>';
                //tbl += '<th>Site</th");
            WriteLiteral(@">';
                //tbl += '<th>Inverter</th>';
                //tbl += '<th>DC_Capacity<br>(kWp)</th>';
                //tbl += '<th>AC_Capacity<br>(kW)</th>';
                //tbl += '<th>GHI</th>';
                //tbl += '<th>POA</th>';
                //tbl += '<th>Expected_kwh</th>';
                //tbl += '<th>INV_kWh</th>';
                //tbl += '<th>Plant_kWh</th>';
                //tbl += '<th>INV_PR</th>';
                //tbl += '<th>Plant_PR</th>';
                //tbl += '<th>INV_PLF<br>(%)</th>';
                //tbl += '<th>Plant_PLF<br>(%)</th>';
                //tbl += '<th>MA_ACT<br>(%)</th>';
                ////tbl += '<th>MA_CON<br>(%)</th>';
                //tbl += '<th>IGA<br>(%)</th>';
                //tbl += '<th>EGA_A<br>(%) <span class=""information"">i<span></th>';
                //tbl += '<th>EGA_B<br>(%) <span class=""information"">i<span></th>';
                //tbl += '<th>EGA_C<br>(%) <span class=""information"">i<span></th>';
                ");
            WriteLiteral(@"//tbl += '<th>Gen_Hrs</th>';
                //tbl += '<th>Lull_Hrs</th>';
                //tbl += '<th>USMH</th>';
                //tbl += '<th>SMH</th>';
                //tbl += '<th>OH</th>';
                //tbl += '<th>IGBD</th>';
                //tbl += '<th>EGBD</th>';
                //tbl += '<th>LS</th>';
                ////tbl += '<th>Tracker Loss</th>';

                //tbl += '<th>Total_BD</th>';


                //tbl += '<th>USMH_Loss</th>';
                //tbl += '<th>SMH_Loss</th>';
                //tbl += '<th>OH_Loss</th>';
                //tbl += '<th>IGBD_Loss</th>';
                //tbl += '<th>EGBD_Loss</th>';
                //tbl += '<th>LS_Loss</th>';
                //tbl += '<th>LULL_Loss</th>';
                //tbl += '<th>Total_Loss</th>';
                tbl += '</tr></thead>';

                if (result.length > 0) {
                    exceldata5 = result;
                    for (var i = 0; i < result.length; i++) {
                  ");
            WriteLiteral(@"     // var formattedDate = moment(result[i].date, 'YYYY/MM/DD').format('DD-MM-YYYY');
                        tbl += '<tr>';
                        if (userColumnId.includes(columnMap[""FY""][0]) || columnMap[""FY""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left""  style=""text-wrap: nowrap;"">' + fyyear + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Country""][0]) || columnMap[""Country""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"">' + result[i].country + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""State""][0]) || columnMap[""State""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"">' + result[i].state + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""SPV""][0]) || columnMap[""SPV""][1] == 1 || isAdmin == 1) {
                            tbl += '<t");
            WriteLiteral(@"d class=""text-left"" style=""text-wrap: nowrap;"">' + result[i].spv + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Site""][0]) || columnMap[""Site""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"" style=""text-wrap: nowrap;"">' + result[i].site + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Inverter""][0]) || columnMap[""Inverter""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"" style=""text-wrap: nowrap;"">' + result[i].inverter + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""DC_Capacity""][0]) || columnMap[""DC_Capacity""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].dc_capacity.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""AC_Capacity""][0]) || columnMap[""AC_Capacity""][1] ");
            WriteLiteral(@"== 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ac_capacity.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""GHI""][0]) || columnMap[""GHI""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ghi.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""POA""][0]) || columnMap[""POA""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].poa.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Expected_Kwh""][0]) || columnMap[""Expected_Kwh""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].expected_kwh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""INV_Kwh""][0]) || columnMap[""INV_Kwh""][");
            WriteLiteral(@"1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].inv_kwh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Plant_Kwh""][0]) || columnMap[""Plant_Kwh""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].plant_kwh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""INV_PR""][0]) || columnMap[""INV_PR""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].inv_pr.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Plant_PR""][0]) || columnMap[""Plant_PR""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].plant_pr.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""INV_PLF""][0]) || columnM");
            WriteLiteral(@"ap[""INV_PLF""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].inv_plf.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Plant_PLF""][0]) || columnMap[""Plant_PLF""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].plant_plf.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""MA_ACT""][0]) || columnMap[""MA_ACT""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ma_actual.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""IGA""][0]) || columnMap[""IGA""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].iga.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGA_A""][0]) || columnM");
            WriteLiteral(@"ap[""EGA_A""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ega.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGA_B""][0]) || columnMap[""EGA_B""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ega_b.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGA_C""][0]) || columnMap[""EGA_C""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ega_c.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Gen_Hrs""][0]) || columnMap[""Gen_Hrs""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].gen_hrs.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""USMH""][0]) || columnMap[""USMH""][1]");
            WriteLiteral(@" == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].usmh_bs.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""SMH""][0]) || columnMap[""SMH""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].smh_bd.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""OH""][0]) || columnMap[""OH""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].oh_bd.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""IGBD""][0]) || columnMap[""IGBD""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].igbdh_bd.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGBD""][0]) || columnMap[""EGBD""][1] == 1 || isAdmin == 1) {");
            WriteLiteral(@"
                            tbl += '<td class=""text-right"">' + result[i].egbdh_bd.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""LS""][0]) || columnMap[""LS""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].load_shedding_bd.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Total_BD""][0]) || columnMap[""Total_BD""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].total_bd_hrs.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""USMH_Loss""][0]) || columnMap[""USMH_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].usmh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""SMH_Loss""][0]) || columnMap[""SMH_Loss""][1] == 1 ");
            WriteLiteral(@"|| isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].smh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""OH_Loss""][0]) || columnMap[""OH_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].oh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""IGBD_Loss""][0]) || columnMap[""IGBD_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].igbdh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGBD_Loss""][0]) || columnMap[""EGBD_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].egbdh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""LS_Loss""][0]) || columnMap[""LS_Loss""][1] ==");
            WriteLiteral(@" 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].load_shedding.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""LULL_Loss""][0]) || columnMap[""LULL_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].lull_hrs.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Total_Loss""][0]) || columnMap[""Total_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].total_losses.toFixed(2) + '</td>';
                        }
                        //tbl += '<td class=""text-left""  style=""text-wrap: nowrap;"">' + fyyear  + '</td>';
                        //tbl += '<td class=""text-left"">' + result[i].country + '</td>';
                        //tbl += '<td class=""text-left"">' + result[i].state + '</td>';
                        //tbl += '<td class=""t");
            WriteLiteral(@"ext-left""  style=""text-wrap: nowrap;"">' + result[i].spv + '</td>';
                        //tbl += '<td class=""text-left"">' + result[i].site + '</td>';
                        //tbl += '<td class=""text-left""  style=""text-wrap: nowrap;"">' + result[i].inverter + '</td>';
                        //tbl += '<td class=""text-left"">' + result[i].dc_capacity.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-left"">' + result[i].ac_capacity.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].ghi.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].poa.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].expected_kwh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].inv_kwh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].plant_kwh.toFixed(2) + '</td>';
                        //tbl +");
            WriteLiteral(@"= '<td class=""text-right"">' + result[i].inv_pr.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].plant_pr.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].inv_plf.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].plant_plf.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].ma_actual.toFixed(2) + '</td>';
                        ////tbl += '<td class=""text-right"">' + result[i].ma_contractual.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].iga.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].ega.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].ega_b.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].ega_c.toFixed(2) + '</td>';
                        //tbl += '");
            WriteLiteral(@"<td class=""text-right"">' + result[i].gen_hrs.toFixed(2) + '</td>';

                        //tbl += '<td class=""text-right"">' + result[i].lull_hrs_bd.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].usmh_bs.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].smh_bd.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].oh_bd.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].igbdh_bd.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].egbdh_bd.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].load_shedding_bd.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].total_bd_hrs.toFixed(2) + '</td>';

                        ////tbl += '<td class=""text-right"">' + moment.utc(result[i].unschedule_hrs['totalSeconds'] * 10");
            WriteLiteral(@"00).format('HH:mm:ss') + '</td>';
                        ////tbl += '<td class=""text-right"">' + moment.utc(result[i].schedule_hrs['totalSeconds'] * 1000).format('HH:mm:ss') + '</td>';
                        ////tbl += '<td class=""text-right"">' + moment.utc(result[i].others['totalSeconds'] * 1000).format('HH:mm:ss') + '</td>';
                        ////tbl += '<td class=""text-right"">' + moment.utc(result[i].igbdh['totalSeconds'] * 1000).format('HH:mm:ss') + '</td>';
                        ////tbl += '<td class=""text-right"">' + moment.utc(result[i].egbdh['totalSeconds'] * 1000).format('HH:mm:ss') + '</td>';
                        ////tbl += '<td class=""text-right"">' + moment.utc(result[i].load_shedding['totalSeconds'] * 1000).format('HH:mm:ss') + '</td>';



                        //tbl += '<td class=""text-right"">' + result[i].usmh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].smh.toFixed(2) + '</td>';
                        //tbl += '<td class=""");
            WriteLiteral(@"text-right"">' + result[i].oh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].igbdh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].egbdh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].load_shedding.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].lull_hrs.toFixed(2) + '</td>';
                        ////tbl += '<td class=""text-right"">' + result[i].tracker_losses+ '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].total_losses.toFixed(2) + '</td>';

                        tbl += '</tr>';
                    }
                }
                else {
                    console.log(""Data not available"");
                    // tbl += '<tr><th colspan=""12"" style=""text-align:center"">Data Not Available <th></tr>';
                }
                tbl += '</table>';
                $(""#repor");
            WriteLiteral(@"tsYearly"").html(tbl);

                $('#example3').DataTable({
                    dom: 'Bfrtip',
                    title: 'ImportApproval',
                    fixedHeader: true,
                    responsive: true,
                    scrollX: true,
                    lengthChange: false,
                    autoWidth: true,
                    paging: true,
                    searching: true,
                    ordering: true,
                    info: true,
                    autoWidth: true,
                    fixedColumns: {
                        left: 8
                    },
                    pageLength: 50,
                    ""order"": [[4, ""asc""]],
                    buttons: [
                        {
                            extend: 'excel',
                            title: 'Solar Yearly Generation Reports Inverter Wise',
                            exportOptions: {
                                columns: ':visible'
                            }
  ");
            WriteLiteral(@"                      },
                        {
                            extend: 'csv',
                            title: 'Solar Yearly Generation Reports Inverter Wise',
                            exportOptions: {
                                columns: ':visible'
                            }
                        },
                        'colvis',
                        {
                            text: '<span class=""fas fa-file-excel"" title=""Download from DB up to six decimal""></span>',
                            className: 'btn ml-1   ',

                            action: function () {
                                YearlyexportToExcelGenReportInverterWise();
                            }
                        },
                    ],
                    initComplete: function () {
                        this.api().columns().header().to$().each(function () {
                            //$(this).attr('title', 'title for ' + $(this).text())
                    ");
            WriteLiteral(@"        if ($(this).text() == ""EGA_A(%) i"") {
                                $(this).attr('title', 'External Grid Breakdown, Shutdown & Load Shedding')
                            }
                            if ($(this).text() == ""EGA_B(%) i"") {
                                $(this).attr('title', 'External Grid Breakdown & Shutdown')
                            }
                            if ($(this).text() == ""EGA_C(%) i"") {
                                $(this).attr('title', 'Load Shedding')
                            }
                        })
                    }
                    /* ""buttons"": [
                         'copy', 'excel', 'csv', 'colvis'
                     ]*/
                });
                $("".dt-buttons"").addClass('btn-group flex-wrap');
                $("".dt-buttons > button"").addClass('btn btn-secondary');
                $("".dataTables_filter> label >input"").addClass('form-control form-control-sm');
                $(""dataTables_filter"").css(""m");
            WriteLiteral(@"argin-top"", ""-35px"");
                $(document).on(""click"", ""div.dt-button-collection > div > button"", function () {
                    if ($(this).hasClass(""active"")) {
                        $(this).css(""background-color"", ""white"");
                    } else {
                        $(this).css(""background-color"", ""#31576d"");
                    }
                });
               // $('#example3').removeClass('dataTable');
                //$('#example3').wrap(""<div class='scrolledTable'></div>"");
                document.getElementById(""loaderY"").style.display = 'none';
            }
        });

    }

    // Yearly SIte Wise
    function GetYearlyGenReportSiteWise() {
        var country = $('select#countryY option:selected').val();
        let site = """";
        let spv = """";
        let inv = """";
        let state = """";

        $('select#siteY option:selected').each(function () {
            site += $(this).val() + "","";
        });
        site = site != """" ? site.sl");
            WriteLiteral(@"ice(0, -1) : site;

        if (!site) {
            $('select#stateY option:selected').each(function () {
                state += $(this).val() + "","";
                //   console.log($(this).val());
            });
            state = state != """" ? state.slice(0, -1) : state;
            // console.log(state);
            //var spv = $('select#spv option:selected').val();

            $('select#spvY option:selected').each(function () {
                spv += $(this).val() + "","";
                //  console.log($(this).val());
            });
            spv = spv != """" ? spv.slice(0, -1) : spv;

        }
        if (userRole == ""User"" && site == """") {
            site = solarUserAccess;
        }

        $('select#invY option:selected').each(function () {
            inv += $(this).val() + "","";
            //console.log($(this).val());
        });
        inv = inv != """" ? inv.slice(0, -1) : inv;

        var fyyear = $('select#fyY option:selected').val();
        if (fyyear ");
            WriteLiteral(@"== """") {
            alert(""Please select financial year"");
            return false;
        }
        //var month = $('select#monthM option:selected').val();
        document.getElementById(""loaderY"").style.display = 'flex';
        var arr1 = new Array();
        arr1 = fyyear.split(""-"");
        var fromDate = """";
        fromDate = arr1[0] + '-04-01';
        toDate = '20' + arr1[1] + '-03-31';

        // alert(fromDate);
        //  alert(toDate);
        var reportType = ""Site"";
        var reporthead = ""Site Wise Report"";
        $.ajax({
            type: ""GET"",
            url: '");
#nullable restore
#line 3874 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarGenReport.cshtml"
             Write(Url.Action("GetSolarYearlyGenerationReportSiteWise", "SolarReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?fromDate=' + fromDate + '&toDate=' + toDate + '&country=' + country + '&state=' + state + '&spv=' + spv + '&site=' + site + '&inverter=' + inv + '&reportType=' + reportType,
            //url: ""/WindReport/GetWindYearlyGenerationReportSiteWise?fromDate="" + fromDate + ""&toDate="" + toDate + ""&country="" + country + ""&state="" + state + ""&spv="" + spv + ""&site="" + site + ""&wtg="" + wtg + ""&reportType="" + reportType,
            contentType: ""application/json; charset=utf-8"",

            datatype: ""JSON"",
            success: function (result, status, xhr) {

                var tbl = '<div class=""text-center""><h5></h5></div>';
                tbl += '<table id=""example3""  class=""table table-bordered table-striped"" style=""width:285%"">';
                tbl += '<thead class=""tbl-head""><tr>';
                if (userColumnId.includes(columnMap[""FY""][0]) || columnMap[""FY""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>FY</th>';
                }
                if (userColumnId.includes(");
            WriteLiteral(@"columnMap[""Country""][0]) || columnMap[""Country""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Country</th>';
                }
                if (userColumnId.includes(columnMap[""State""][0]) || columnMap[""State""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>State</th>';
                }
                if (userColumnId.includes(columnMap[""SPV""][0]) || columnMap[""SPV""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>SPV</th>';
                }
                if (userColumnId.includes(columnMap[""Site""][0]) || columnMap[""Site""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Site</th>';
                }
                if (userColumnId.includes(columnMap[""Inverter""][0]) || columnMap[""Inverter""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Inverter</th>';
                }
                if (userColumnId.includes(columnMap[""DC_Capacity""][0]) || columnMap[""DC_Capacity""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>D");
            WriteLiteral(@"C_Capacity<br>(kWp)</th>';
                }
                if (userColumnId.includes(columnMap[""AC_Capacity""][0]) || columnMap[""AC_Capacity""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>AC_Capacity<br>(kW)</th>';
                }
                if (userColumnId.includes(columnMap[""GHI""][0]) || columnMap[""GHI""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>GHI</th>';
                }
                if (userColumnId.includes(columnMap[""POA""][0]) || columnMap[""POA""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>POA</th>';
                }
                if (userColumnId.includes(columnMap[""Expected_Kwh""][0]) || columnMap[""Expected_Kwh""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Expected_kwh</th>';
                }
                if (userColumnId.includes(columnMap[""INV_Kwh""][0]) || columnMap[""INV_Kwh""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>INV_kWh</th>';
                }
                if (userColumnId.inc");
            WriteLiteral(@"ludes(columnMap[""Plant_Kwh""][0]) || columnMap[""Plant_Kwh""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Plant_kWh</th>';
                }
                if (userColumnId.includes(columnMap[""INV_PR""][0]) || columnMap[""INV_PR""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>INV_PR</th>';
                }
                if (userColumnId.includes(columnMap[""Plant_PR""][0]) || columnMap[""Plant_PR""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Plant_PR</th>';
                }
                if (userColumnId.includes(columnMap[""INV_PLF""][0]) || columnMap[""INV_PLF""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>INV_PLF<br>(%)</th>';
                }
                if (userColumnId.includes(columnMap[""Plant_PLF""][0]) || columnMap[""Plant_PLF""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Plant_PLF<br>(%)</th>';
                }
                if (userColumnId.includes(columnMap[""MA_ACT""][0]) || columnMap[""MA_ACT""][1] == 1 || isAd");
            WriteLiteral(@"min == 1) {
                    tbl += '<th>MA_ACT<br>(%)</th>';
                }
                if (userColumnId.includes(columnMap[""IGA""][0]) || columnMap[""IGA""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>IGA<br>(%)</th>';
                }
                if (userColumnId.includes(columnMap[""EGA_A""][0]) || columnMap[""EGA_A""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGA_A<br>(%) <span class=""information"">i<span></th>';
                }
                if (userColumnId.includes(columnMap[""EGA_B""][0]) || columnMap[""EGA_B""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGA_B<br>(%) <span class=""information"">i<span></th>';
                }
                if (userColumnId.includes(columnMap[""EGA_C""][0]) || columnMap[""EGA_C""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGA_C<br>(%) <span class=""information"">i<span></th>';
                }
                if (userColumnId.includes(columnMap[""Gen_Hrs""][0]) || columnMap[""Gen_Hrs""][1] ");
            WriteLiteral(@"== 1 || isAdmin == 1) {
                    tbl += '<th>Gen_Hrs</th>';
                }
                if (userColumnId.includes(columnMap[""USMH""][0]) || columnMap[""USMH""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>USMH</th>';
                }
                if (userColumnId.includes(columnMap[""SMH""][0]) || columnMap[""SMH""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>SMH</th>';
                }
                if (userColumnId.includes(columnMap[""OH""][0]) || columnMap[""OH""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>OH</th>';
                }
                if (userColumnId.includes(columnMap[""IGBD""][0]) || columnMap[""IGBD""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>IGBD</th>';
                }
                if (userColumnId.includes(columnMap[""EGBD""][0]) || columnMap[""EGBD""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGBD</th>';
                }
                if (userColumnId.includes(columnMap[""LS""");
            WriteLiteral(@"][0]) || columnMap[""LS""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>LS</th>';
                }
                if (userColumnId.includes(columnMap[""Total_BD""][0]) || columnMap[""Total_BD""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Total_BD</th>';
                }
                if (userColumnId.includes(columnMap[""USMH_Loss""][0]) || columnMap[""USMH_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>USMH_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""SMH_Loss""][0]) || columnMap[""SMH_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>SMH_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""OH_Loss""][0]) || columnMap[""OH_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>OH_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""IGBD_Loss""][0]) || columnMap[""IGBD_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<t");
            WriteLiteral(@"h>IGBD_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""EGBD_Loss""][0]) || columnMap[""EGBD_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>EGBD_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""LS_Loss""][0]) || columnMap[""LS_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>LS_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""LULL_Loss""][0]) || columnMap[""LULL_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>LULL_Loss</th>';
                }
                if (userColumnId.includes(columnMap[""Total_Loss""][0]) || columnMap[""Total_Loss""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Total_Loss</th>';
                }
                //tbl += '<th>FY</th>';
                //tbl += '<th>Country</th>';
                //tbl += '<th>State</th>';
                //tbl += '<th>SPV</th>';
                //tbl += '<th>Site</th>';
    ");
            WriteLiteral(@"            //tbl += '<th>DC_Capacity<br>(MW)</th>';
                //tbl += '<th>AC_Capacity<br>(MW)</th>';
                //tbl += '<th>GHI</th>';
                //tbl += '<th>POA</th>';
                //tbl += '<th>Expected_kwh</th>';
                //tbl += '<th>INV_kWh</th>';
                //tbl += '<th>Plant_kWh</th>';
                //tbl += '<th>INV_PR</th>';
                //tbl += '<th>Plant_PR</th>';
                //tbl += '<th>INV_PLF<br>(%)</th>';
                //tbl += '<th>Plant_PLF<br>(%)</th>';
                //tbl += '<th>MA_ACT<br>(%)</th>';
                ////tbl += '<th>MA_CON<br>(%)</th>';
                //tbl += '<th>IGA<br>(%)</th>';
                //tbl += '<th>EGA_A<br>(%) <span class=""information"">i<span></th>';
                //tbl += '<th>EGA_B<br>(%) <span class=""information"">i<span></th>';
                //tbl += '<th>EGA_C<br>(%) <span class=""information"">i<span></th>';
                //tbl += '<th>Gen_Hrs</th>';
                //tbl += '<");
            WriteLiteral(@"th>Lull_Hrs</th>';
                //tbl += '<th>USMH</th>';
                //tbl += '<th>SMH</th>';
                //tbl += '<th>OH</th>';
                //tbl += '<th>IGBD</th>';
                //tbl += '<th>EGBD</th>';
                //tbl += '<th>LS</th>';

                //tbl += '<th>Total_BD</th>';


                //tbl += '<th>USMH_Loss</th>';
                //tbl += '<th>SMH_Loss</th>';
                //tbl += '<th>OH_Loss</th>';
                //tbl += '<th>IGBD_Loss</th>';
                //tbl += '<th>EGBD_Loss</th>';
                //tbl += '<th>LS_Loss</th>';
                //tbl += '<th>LULL_Loss</th>';
                //tbl += '<th>Tracker_Loss</th>';
                //tbl += '<th>Total_Loss</th>';
                tbl += '</tr></thead>';

                if (result.length > 0) {
                     exceldata6 = result;
                    console.log(""Datatable"");
                    for (var i = 0; i < result.length; i++) {
                        // va");
            WriteLiteral(@"r formattedDate = moment(result[i].date, 'YYYY/MM/DD').format('DD-MM-YYYY');
                        let TotalFinal = result[i].total_losses + result[i].tracker_losses;
                        tbl += '<tr>';
                        if (userColumnId.includes(columnMap[""FY""][0]) || columnMap[""FY""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left""  style=""text-wrap: nowrap;"">' + fyyear + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Country""][0]) || columnMap[""Country""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"">' + result[i].country + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""State""][0]) || columnMap[""State""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"">' + result[i].state + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""SPV""][0]) || ");
            WriteLiteral(@"columnMap[""SPV""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"" style=""text-wrap: nowrap;"">' + result[i].spv + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Site""][0]) || columnMap[""Site""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"" style=""text-wrap: nowrap;"">' + result[i].site + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Inverter""][0]) || columnMap[""Inverter""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"" style=""text-wrap: nowrap;"">' + result[i].inverter + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""DC_Capacity""][0]) || columnMap[""DC_Capacity""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].dc_capacity.toFixed(2) + '</td>';
                        }
                        if ");
            WriteLiteral(@"(userColumnId.includes(columnMap[""AC_Capacity""][0]) || columnMap[""AC_Capacity""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ac_capacity.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""GHI""][0]) || columnMap[""GHI""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ghi.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""POA""][0]) || columnMap[""POA""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].poa.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Expected_Kwh""][0]) || columnMap[""Expected_Kwh""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].expected_kwh.toFixed(2) + '</td>';
                        }
                ");
            WriteLiteral(@"        if (userColumnId.includes(columnMap[""INV_Kwh""][0]) || columnMap[""INV_Kwh""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].inv_kwh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Plant_Kwh""][0]) || columnMap[""Plant_Kwh""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].plant_kwh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""INV_PR""][0]) || columnMap[""INV_PR""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].inv_pr.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Plant_PR""][0]) || columnMap[""Plant_PR""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].plant_pr.toFixed(2) + '</td>';
                        }
  ");
            WriteLiteral(@"                      if (userColumnId.includes(columnMap[""INV_PLF""][0]) || columnMap[""INV_PLF""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].inv_plf.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Plant_PLF""][0]) || columnMap[""Plant_PLF""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].plant_plf.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""MA_ACT""][0]) || columnMap[""MA_ACT""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ma_actual.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""IGA""][0]) || columnMap[""IGA""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].iga.toFixed(2) + '</td>';
                        }
");
            WriteLiteral(@"                        if (userColumnId.includes(columnMap[""EGA_A""][0]) || columnMap[""EGA_A""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ega.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGA_B""][0]) || columnMap[""EGA_B""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ega_b.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGA_C""][0]) || columnMap[""EGA_C""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].ega_c.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Gen_Hrs""][0]) || columnMap[""Gen_Hrs""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].prod_hrs.toFixed(2) + '</td>';
                        }
           ");
            WriteLiteral(@"             if (userColumnId.includes(columnMap[""USMH""][0]) || columnMap[""USMH""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].usmh_bs.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""SMH""][0]) || columnMap[""SMH""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].smh_bd.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""OH""][0]) || columnMap[""OH""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].oh_bd.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""IGBD""][0]) || columnMap[""IGBD""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].igbdh_bd.toFixed(2) + '</td>';
                        }
                        if (userCol");
            WriteLiteral(@"umnId.includes(columnMap[""EGBD""][0]) || columnMap[""EGBD""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].egbdh_bd.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""LS""][0]) || columnMap[""LS""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].load_shedding_bd.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Total_BD""][0]) || columnMap[""Total_BD""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].total_bd_hrs.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""USMH_Loss""][0]) || columnMap[""USMH_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].usmh.toFixed(2) + '</td>';
                        }
                        i");
            WriteLiteral(@"f (userColumnId.includes(columnMap[""SMH_Loss""][0]) || columnMap[""SMH_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].smh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""OH_Loss""][0]) || columnMap[""OH_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].oh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""IGBD_Loss""][0]) || columnMap[""IGBD_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].igbdh.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGBD_Loss""][0]) || columnMap[""EGBD_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].egbdh.toFixed(2) + '</td>';
                        }
                    ");
            WriteLiteral(@"    if (userColumnId.includes(columnMap[""LS_Loss""][0]) || columnMap[""LS_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].load_shedding.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""LULL_Loss""][0]) || columnMap[""LULL_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].lull_hrs.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Total_Loss""][0]) || columnMap[""Total_Loss""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].total_losses.toFixed() + '</td>';
                        }
                        //tbl += '<td class=""text-left""  style=""text-wrap: nowrap;"">' + fyyear + '</td>';
                        //tbl += '<td class=""text-left"">' + result[i].country + '</td>';
                        //tbl += '<td class=""text-le");
            WriteLiteral(@"ft"">' + result[i].state + '</td>';
                        //tbl += '<td class=""text-left""  style=""text-wrap: nowrap;"">' + result[i].spv + '</td>';
                        //tbl += '<td class=""text-left"">' + result[i].site + '</td>';
                        //tbl += '<td class=""text-left"">' + result[i].dc_capacity.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-left"">' + result[i].ac_capacity.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].ghi.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].poa.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].expected_kwh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].inv_kwh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].plant_kwh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[");
            WriteLiteral(@"i].inv_pr.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].plant_pr.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].inv_plf.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].plant_plf.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].ma_actual.toFixed(2) + '</td>';
                        ////tbl += '<td class=""text-right"">' + result[i].ma_contractual.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].iga.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].ega.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].ega_b.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].ega_c.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].");
            WriteLiteral(@"prod_hrs.toFixed(2) + '</td>';

                        //tbl += '<td class=""text-right"">' + result[i].lull_hrs_bd.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].usmh_bs.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].smh_bd.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].oh_bd.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].igbdh_bd.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].egbdh_bd.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].load_shedding_bd.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].total_bd_hrs.toFixed(2) + '</td>';



                        //tbl += '<td class=""text-right"">' + result[i].usmh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-ri");
            WriteLiteral(@"ght"">' + result[i].smh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].oh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].igbdh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].egbdh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].load_shedding.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].lull_hrs.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].tracker_losses.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].total_losses.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + moment.utc(result[i].unschedule_hrs['totalSeconds'] * 1000).format('HH:mm:ss') + '</td>';
                        //tbl += '<td class=""text-right"">' + moment.utc(result[i].schedule_hrs['totalS");
            WriteLiteral(@"econds'] * 1000).format('HH:mm:ss') + '</td>';
                        //tbl += '<td class=""text-right"">' + moment.utc(result[i].others['totalSeconds'] * 1000).format('HH:mm:ss') + '</td>';
                        //tbl += '<td class=""text-right"">' + moment.utc(result[i].igbdh['totalSeconds'] * 1000).format('HH:mm:ss') + '</td>';
                        //tbl += '<td class=""text-right"">' + moment.utc(result[i].egbdh['totalSeconds'] * 1000).format('HH:mm:ss') + '</td>';
                        //tbl += '<td class=""text-right"">' + moment.utc(result[i].load_shedding['totalSeconds'] * 1000).format('HH:mm:ss') + '</td>';



                        //tbl += '<td class=""text-right"">' + result[i].usmh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].smh.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].oh.toFixed() + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].igbdh.toFixed() + '</td>'");
            WriteLiteral(@";
                        //tbl += '<td class=""text-right"">' + result[i].egbdh.toFixed() + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].load_shedding.toFixed() + '</td>';

                        ////tbl += '<td class=""text-right"">' + result[i].tracker_losses + '</td>';

                        //tbl += '<td class=""text-right"">' + result[i].total_losses.toFixed() + '</td>';

                        tbl += '</tr>';
                    }
                }
                else {
                    console.log(""Data not available"");
                    // tbl += '<tr><th colspan=""12"" style=""text-align:center"">Data Not Available <th></tr>';
                }
                tbl += '</table>';
                $(""#reportsYearly"").html(tbl);

                //$.noConflict();

                ////$('#example1').DataTable().clear().destroy();
                ///*$('#example3').DataTable({

                //    ""responsive"": true, ""lengthChange"": false, ""autoW");
            WriteLiteral(@"idth"": false,
                //    ""buttons"": [""copy"", ""csv"", ""excel"", ""pdf"", ""print"", ""colvis""],
                //    ""paging"": true,
                //    ""lengthChange"": false,
                //    ""searching"": true,
                //    ""ordering"": true,
                //    ""info"": true,
                //    ""autoWidth"": false,
                //    ""responsive"": true,
                //}).buttons().container().appendTo('#example1_wrapper .col-md-6:eq(0)');*/
                //$('#example3').DataTable({
                //    //""responsive"": false, ""lengthChange"": true, ""autoWidth"": true,
                //    ""buttons"": [""csv"", ""excel"", ""colvis""],
                //    ""paging"": true,

                //    ""columnDefs"": [
                //        { ""width"": ""8%"", ""targets"": 0 },

                //    ],
                //    ""fixedColumns"": true

                //}).buttons().container().appendTo('#example1_wrapper .col-md-6:eq(0)');
                //$('#example3').remove");
            WriteLiteral(@"Class('dataTable');
                $('#example3').DataTable({
                    dom: 'Bfrtip',
                    title: 'ImportApproval',
                    fixedHeader: true,
                    responsive: true,
                    scrollX: true,
                    lengthChange: false,
                    autoWidth: true,
                    paging: true,
                    searching: true,
                    ordering: true,
                    info: true,
                    autoWidth: true,
                    fixedColumns: {
                        left: 7
                    },
                    pageLength: 50,
                    ""order"": [[4, ""asc""]],
                    buttons: [
                        {
                            extend: 'excel',
                            title: 'Solar Monthly Generation Reports Site Wise',
                            exportOptions: {
                                columns: ':visible'
                            }
         ");
            WriteLiteral(@"               },
                        {
                            extend: 'csv',
                            title: 'Solar Monthly Generation Reports Site Wise',
                            exportOptions: {
                                columns: ':visible'
                            }
                        },
                        'colvis',
                        {
                            text: '<span class=""fas fa-file-excel"" title=""Download from DB up to six decimal""></span>',
                            className: 'btn ml-1   ',

                            action: function () {
                                YearlyexportToExcelGenReportSiteWise();
                            }
                        },
                    ],
                    initComplete: function () {
                        this.api().columns().header().to$().each(function () {
                            //$(this).attr('title', 'title for ' + $(this).text())
                            if ($(");
            WriteLiteral(@"this).text() == ""EGA_A(%) i"") {
                                $(this).attr('title', 'External Grid Breakdown, Shutdown & Load Shedding')
                            }
                            if ($(this).text() == ""EGA_B(%) i"") {
                                $(this).attr('title', 'External Grid Breakdown & Shutdown')
                            }
                            if ($(this).text() == ""EGA_C(%) i"") {
                                $(this).attr('title', 'Load Shedding')
                            }
                        })
                    }
                    /* ""buttons"": [
                         'copy', 'excel', 'csv', 'colvis'
                     ]*/
                });
                $("".dt-buttons"").addClass('btn-group flex-wrap');
                $("".dt-buttons > button"").addClass('btn btn-secondary');
                $("".dataTables_filter> label >input"").addClass('form-control form-control-sm');
                $(""dataTables_filter"").css(""margin-top"", ""-");
            WriteLiteral(@"35px"");
                $(document).on(""click"", ""div.dt-button-collection > div > button"", function () {
                    if ($(this).hasClass(""active"")) {
                        $(this).css(""background-color"", ""white"");
                    } else {
                        $(this).css(""background-color"", ""#31576d"");
                    }
                });
                //$('#example3').removeClass('dataTable');
                //$('#example3').wrap(""<div class='scrolledTable'></div>"");
                document.getElementById(""loaderY"").style.display = 'none';
            }
        });

    }
    function  DailyexportToExcelGenReportInverterWise(){

        console.log(exceldata1)
        result = exceldata1;

        var columns = [
            ""Date"", ""Country"", ""State"", ""SPV"", ""Site"", ""Inverter"", ""DC_Capacity"", ""AC_Capacity"", ""GHI"", ""POA"",
            ""Expected_kwh"", ""INV_kwh"", ""Plant_kwh"", ""INV_PR (%)"",
            ""Plant_PR (%)"", ""INV_PLF"", ""Plant_PLF"", ""MA_ACT (%)"", ""IGA(%)");
            WriteLiteral(@""", ""EGA_A (%)"",
            ""EGA_B (%)"", ""EGA_C (%)"",""Gen_Hrs"",
            ""USMH"", ""SMH"",""OH"",  ""IGBD"", ""EGDB"", ""LS"", ""Total_BD"", ""USMH_Loss"", ""SMH_Loss"", ""OH_Loss"",
            ""IGBD_Loss"", ""EGBD_Loss"", ""LS_Loss"",""LULL_Loss"", ""Total_Losses""
        ];

        var rows = [];

        for (var i = 0; i < result.length; i++) {
            var row = [];
            var formattedDate = moment(result[i].date, 'YYYY/MM/DD').format('DD-MM-YYYY');
            row.push(formattedDate);
            row.push(result[i].country);
            row.push(result[i].state);
            row.push(result[i].spv);
            row.push(result[i].site);
            row.push(result[i].inverter);
            row.push(result[i].dc_capacity);
            row.push(result[i].ac_capacity);
            row.push(result[i].ghi);
            row.push(result[i].poa);
            row.push(result[i].expected_kwh);
            row.push(result[i].inv_kwh);
            row.push(result[i].plant_kwh);
            row.push(resul");
            WriteLiteral(@"t[i].inv_pr);
            row.push(result[i].plant_pr);
            row.push(result[i].inv_plf);
            row.push(result[i].plant_plf);
            row.push(result[i].ma_actual);
            row.push(result[i].iga);
            row.push(result[i].ega);
            row.push(result[i].ega_b);
            row.push(result[i].ega_c);
            row.push(result[i].prod_hrs);
            row.push(result[i].usmh_bs);
            row.push(result[i].smh_bd);
            row.push(result[i].oh_bd);
            row.push(result[i].igbdh_bd);
            row.push(result[i].egbdh_bd);
            row.push(result[i].load_shedding_bd);
            row.push(result[i].total_bd_hrs);
            row.push(result[i].usmh);
            row.push(result[i].smh);
            row.push(result[i].oh);
            row.push(result[i].igbdh);
            row.push(result[i].egbdh);
            row.push(result[i].load_shedding);
            row.push(result[i].lull_hrs);
            row.push(result[i].total_losses);");
            WriteLiteral(@"
            rows.push(row);
         }

        var data = [columns].concat(rows);
        var ws = XLSX.utils.aoa_to_sheet(data);
        var wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, ""SolarDailyGenRep InverterWise"");
        var wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'binary' });

        function s2ab(s) {
            var buf = new ArrayBuffer(s.length);
            var view = new Uint8Array(buf);
            for (var i = 0; i !== s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
            return buf;
        }

        saveAs(new Blob([s2ab(wbout)], { type: ""application/octet-stream"" }), ""SolarDailyGenRep InverterWise.xlsx"");

    }


    function DailyexportToExcelGenReportSiteWise()
    {
        console.log(exceldata2)
        result = exceldata2;
        var columns = [
            ""Date"", ""Site"", ""Country"", ""State"", ""SPV"", ""DC_Capacity"", ""AC_Capacity"", ""GHI"", ""POA"",
            ""Expected_kwh"", ""INV_kwh"", ""Plant_kwh"", ""INV_PR (%)"",");
            WriteLiteral(@"
            ""Plant_PR (%)"", ""INV_PLF"", ""Plant_PLF"", ""MA_ACT (%)"", ""IGA(%)"", ""EGA_A (%)"",
            ""EGA_B (%)"", ""EGA_C (%)"", ""Gen_Hrs"",""Lull_Hrs"",
            ""USMH"", ""SMH"", ""OH"", ""IGBD"", ""EGDB"", ""LS"", ""Total_BD"", ""USMH_Loss"", ""SMH_Loss"", ""OH_Loss"",
            ""IGBD_Loss"", ""EGBD_Loss"", ""LS_Loss"", ""LULL_Loss"", ""Tracker_Loss"", ""Total_Loss""
        ];

        var rows = [];
        for (var i = 0; i < result.length; i++)
        {
            var row = [];
            var formattedDate = moment(result[i].date, 'YYYY/MM/DD').format('DD-MM-YYYY');
            let totalFinal = result[i].total_losses + result[i].tracker_losses;
            row.push(formattedDate);
            row.push(result[i].site)
            row.push(result[i].country);
            row.push(result[i].state);
            row.push(result[i].spv);
            row.push(result[i].dc_capacity);
            row.push(result[i].ac_capacity);
            row.push(result[i].ghi);
            row.push(result[i].poa);
            r");
            WriteLiteral(@"ow.push(result[i].expected_kwh);
            row.push(result[i].inv_kwh);
            row.push(result[i].plant_kwh);
            row.push(result[i].inv_pr);
            row.push(result[i].plant_pr);
            row.push(result[i].inv_plf);
            row.push(result[i].plant_plf);
            row.push(result[i].ma_actual);
            row.push(result[i].iga);
            row.push(result[i].ega);
            row.push(result[i].ega_b);
            row.push(result[i].ega_c);
            row.push(result[i].prod_hrs);
            row.push(result[i].lull_hrs_bd);
            row.push(result[i].usmh_bs);
            row.push(result[i].smh_bd);
            row.push(result[i].oh_bd);
            row.push(result[i].igbdh_bd);
            row.push(result[i].egbdh_bd);
            row.push(result[i].load_shedding_bd);
            row.push(result[i].total_bd_hrs);
            row.push(result[i].usmh);
            row.push(result[i].smh);
            row.push(result[i].oh);
            row.push(res");
            WriteLiteral(@"ult[i].igbdh);
            row.push(result[i].egbdh);
            row.push(result[i].load_shedding);
            row.push(result[i].lull_hrs);
            row.push(result[i].tracker_losses);
            row.push(totalFinal);
            rows.push(row);
        }

        var data = [columns].concat(rows);
        var ws = XLSX.utils.aoa_to_sheet(data);
        var wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, ""SolarDailyGenRep SiteWise"");
        var wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'binary' });
        function s2ab(s) {
            var buf = new ArrayBuffer(s.length);
            var view = new Uint8Array(buf);
            for (var i = 0; i !== s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
            return buf;
        }
        saveAs(new Blob([s2ab(wbout)], { type: ""application/octet-stream"" }), ""SolarDailyGenRep SiteWise.xlsx"");
    }


    function MonthlyexportToExcelGenReportInverterWise() {

        console.log(exceldata3)
   ");
            WriteLiteral(@"     result = exceldata3;

        var columns = [
            ""FY"",""Month"", ""Country"", ""State"", ""SPV"", ""Site"", ""Inverter"", ""DC_Capacity"", ""AC_Capacity"", ""GHI"", ""POA"",
            ""Expected_kwh"", ""INV_kwh"", ""Plant_kwh"", ""INV_PR (%)"",
            ""Plant_PR (%)"", ""INV_PLF "", ""Plant_PLF "", ""MA_ACT (%)"", ""IGA(%)"", ""EGA_A (%)"",
            ""EGA_B (%)"", ""EGA_C (%)"", ""Gen_Hrs"",""Lull_Hrs"",
            ""USMH"", ""SMH"", ""OH"", ""IGBD"", ""EGDB"", ""LS"", ""Total_BD"", ""USMH_Loss"", ""SMH_Loss"", ""OH_Loss"",
            ""IGBD_Loss"", ""EGBD_Loss"", ""LS_Loss"", ""LULL_Loss"", ""Total_Loss""
        ];

        var rows = [];
        var year = $('select#fyM option:selected').val();
        for (var i = 0; i < result.length; i++) {
            var row = [];
            var formattedDate = moment(result[i].date, 'YYYY/MM/DD').format('DD-MM-YYYY');
            row.push(year);
            row.push(result[i].month);
            row.push(result[i].country);
            row.push(result[i].state);
            row.push(result[i].spv");
            WriteLiteral(@");
            row.push(result[i].site);
            row.push(result[i].inverter);
            row.push(result[i].dc_capacity);
            row.push(result[i].ac_capacity);
            row.push(result[i].ghi);
            row.push(result[i].poa);
            row.push(result[i].expected_kwh);
            row.push(result[i].inv_kwh);
            row.push(result[i].plant_kwh);
            row.push(result[i].inv_pr);
            row.push(result[i].plant_pr);
            row.push(result[i].inv_plf);
            row.push(result[i].plant_plf);
            row.push(result[i].ma_actual);
            row.push(result[i].iga);
            row.push(result[i].ega);
            row.push(result[i].ega_b);
            row.push(result[i].ega_c);
            row.push(result[i].prod_hrs);
            row.push(result[i].lull_hrs_bd);
            row.push(result[i].usmh_bs);
            row.push(result[i].smh_bd);
            row.push(result[i].oh_bd);
            row.push(result[i].igbdh_bd);
            ");
            WriteLiteral(@"row.push(result[i].egbdh_bd);
            row.push(result[i].load_shedding_bd);
            row.push(result[i].total_bd_hrs);
            row.push(result[i].usmh);
            row.push(result[i].smh);
            row.push(result[i].oh);
            row.push(result[i].igbdh);
            row.push(result[i].egbdh);
            row.push(result[i].load_shedding);
            row.push(result[i].lull_hrs);
            row.push (result[i].total_losses);
            rows.push(row);



        }

        var data = [columns].concat(rows);

        var ws = XLSX.utils.aoa_to_sheet(data);
        var wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, ""SolarMonthlyGenRep InverterWise"");
        var wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'binary' });

        function s2ab(s) {
            var buf = new ArrayBuffer(s.length);
            var view = new Uint8Array(buf);
            for (var i = 0; i !== s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
            ");
            WriteLiteral(@"return buf;
        }

        saveAs(new Blob([s2ab(wbout)], { type: ""application/octet-stream"" }), ""SolarMonthlyGenRep InverterWise.xlsx"");

    }

    function MonthlyexportToExcelGenReportSiteWise() {
        var fyyear = $('select#fyM option:selected').val();
        console.log(exceldata4)
        result = exceldata4;

        var columns = [
            ""FY"", ""Month"", ""Country"", ""State"", ""SPV"", ""Site"",""DC_Capacity"", ""AC_Capacity"", ""GHI"", ""POA"",
            ""Expected_kwh"", ""INV_kwh"", ""Plant_kwh"", ""INV_PR (%)"",
            ""Plant_PR (%)"", ""INV_PLF "", ""Plant_PLF "", ""MA_ACT (%)"", ""IGA(%)"", ""EGA_A (%)"",
            ""EGA_B (%)"", ""EGA_C (%)"", ""Gen_Hrs"", ""Lull_Hrs"",
            ""USMH"", ""SMH"", ""OH"", ""IGBD"", ""EGDB"", ""LS"", ""Total_BD"", ""USMH_Loss"", ""SMH_Loss"", ""OH_Loss"",
            ""IGBD_Loss"", ""EGBD_Loss"", ""LS_Loss"", ""LULL_Loss"", ""Tracker_Loss"", ""Total_Loss""
        ];

        var rows = [];

        for (var i = 0; i < result.length; i++) {
            var row = [];
            var for");
            WriteLiteral(@"mattedDate = moment(result[i].date, 'YYYY/MM/DD').format('DD-MM-YYYY');
            let totalFinal = result[i].total_losses + result[i].tracker_losses;
            row.push(fyyear);
            row.push(result[i].month);
            row.push(result[i].country);
            row.push(result[i].state);
            row.push(result[i].spv);
            row.push(result[i].site);
            row.push(result[i].dc_capacity);
            row.push(result[i].ac_capacity);
            row.push(result[i].ghi);
            row.push(result[i].poa);
            row.push(result[i].expected_kwh);
            row.push(result[i].inv_kwh);
            row.push(result[i].plant_kwh);
            row.push(result[i].inv_pr);
            row.push(result[i].plant_pr);
            row.push(result[i].inv_plf);
            row.push(result[i].plant_plf);
            row.push(result[i].ma_actual);
            row.push(result[i].iga);
            row.push(result[i].ega);
            row.push(result[i].ega_b);
         ");
            WriteLiteral(@"   row.push(result[i].ega_c);
            row.push(result[i].prod_hrs);
            row.push(result[i].lull_hrs_bd);
            row.push(result[i].usmh_bs);
            row.push(result[i].smh_bd);
            row.push(result[i].oh_bd);
            row.push(result[i].igbdh_bd);
            row.push(result[i].egbdh_bd);
            row.push(result[i].load_shedding_bd);
            row.push(result[i].total_bd_hrs);
            row.push(result[i].usmh);
            row.push(result[i].smh);
            row.push(result[i].oh);
            row.push(result[i].igbdh);
            row.push(result[i].egbdh);
            row.push(result[i].load_shedding);
            row.push(result[i].lull_hrs);
            row.push(result[i].tracker_losses);
            row.push(result[i].total_losses);
            rows.push(row);



        }

        var data = [columns].concat(rows);

        var ws = XLSX.utils.aoa_to_sheet(data);
        var wb = XLSX.utils.book_new();
        XLSX.utils.book_append_s");
            WriteLiteral(@"heet(wb, ws, ""SolarDailyGenRep SiteWise"");
        var wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'binary' });

        function s2ab(s) {
            var buf = new ArrayBuffer(s.length);
            var view = new Uint8Array(buf);
            for (var i = 0; i !== s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
            return buf;
        }

        saveAs(new Blob([s2ab(wbout)], { type: ""application/octet-stream"" }), ""SolarMonthlyGenRep SiteWise.xlsx"");

    }

    function YearlyexportToExcelGenReportInverterWise() {
        var fyyear = $('select#fyY option:selected').val();
        console.log(exceldata5)
        result = exceldata5;

        var columns = [
            ""FY"", ""Country"", ""State"", ""SPV"", ""Site"", ""Inverter"", ""DC_Capacity"", ""AC_Capacity"", ""GHI"", ""POA"",
            ""Expected_kwh"", ""INV_kwh"", ""Plant_kwh"", ""INV_PR (%)"",
            ""Plant_PR (%)"", ""INV_PLF "", ""Plant_PLF "", ""MA_ACT (%)"", ""IGA(%)"", ""EGA_A (%)"",
            ""EGA_B (%)"", ""EGA_C (%)"", ""Gen_Hrs"", ""Lu");
            WriteLiteral(@"ll_Hrs"",
            ""USMH"", ""SMH"", ""OH"", ""IGBD"", ""EGDB"", ""LS"", ""Total_BD"", ""USMH_Loss"", ""SMH_Loss"", ""OH_Loss"",
            ""IGBD_Loss"", ""EGBD_Loss"", ""LS_Loss"", ""LULL_Loss"", ""Total_Loss""
        ];

        var rows = [];

        for (var i = 0; i < result.length; i++) {
            var row = [];
            var formattedDate = moment(result[i].date, 'YYYY/MM/DD').format('DD-MM-YYYY');
            row.push(fyyear);
            row.push(result[i].country);
            row.push(result[i].state);
            row.push(result[i].spv);
            row.push(result[i].site);
            row.push(result[i].inverter);
            row.push(result[i].dc_capacity);
            row.push(result[i].ac_capacity);
            row.push(result[i].ghi);
            row.push(result[i].poa);
            row.push(result[i].expected_kwh);
            row.push(result[i].inv_kwh);
            row.push(result[i].plant_kwh);
            row.push(result[i].inv_pr);
            row.push(result[i].plant_pr);
      ");
            WriteLiteral(@"      row.push(result[i].inv_plf);
            row.push(result[i].plant_plf);
            row.push(result[i].ma_actual);
            row.push(result[i].iga);
            row.push(result[i].ega);
            row.push(result[i].ega_b);
            row.push(result[i].ega_c);
            row.push(result[i].prod_hrs);
            row.push(result[i].lull_hrs_bd);
            row.push(result[i].usmh_bs);
            row.push(result[i].smh_bd);
            row.push(result[i].oh_bd);
            row.push(result[i].igbdh_bd);
            row.push(result[i].egbdh_bd);
            row.push(result[i].load_shedding_bd);
            row.push(result[i].total_bd_hrs);
            row.push(result[i].usmh);
            row.push(result[i].smh);
            row.push(result[i].oh);
            row.push(result[i].igbdh);
            row.push(result[i].egbdh);
            row.push(result[i].load_shedding);
            row.push(result[i].lull_hrs);
            row.push(result[i].total_losses);
            rows");
            WriteLiteral(@".push(row);



        }

        var data = [columns].concat(rows);

        var ws = XLSX.utils.aoa_to_sheet(data);
        var wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, ""SolarYearlyGenRep InverterWise"");
        var wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'binary' });

        function s2ab(s) {
            var buf = new ArrayBuffer(s.length);
            var view = new Uint8Array(buf);
            for (var i = 0; i !== s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
            return buf;
        }

        saveAs(new Blob([s2ab(wbout)], { type: ""application/octet-stream"" }), ""SolarYearlyGenRep InverterWise.xlsx"");

    }

    function YearlyexportToExcelGenReportSiteWise() {
        var fyyear = $('select#fyY option:selected').val();
        console.log(exceldata6)
        result = exceldata6;

        var columns = [
            ""FY"", ""Country"", ""State"", ""SPV"",""Site"", ""DC_Capacity"", ""AC_Capacity"", ""GHI"", ""POA"",
            ""Expecte");
            WriteLiteral(@"d_kwh"", ""INV_kwh"", ""Plant_kwh"", ""INV_PR (%)"",
            ""Plant_PR (%)"", ""INV_PLF "", ""Plant_PLF "", ""MA_ACT (%)"", ""IGA(%)"", ""EGA_A (%)"",
            ""EGA_B (%)"", ""EGA_C (%)"", ""Gen_Hrs"", ""Lull_Hrs"",
            ""USMH"", ""SMH"", ""OH"", ""IGBD"", ""EGDB"", ""LS"", ""Total_BD"", ""USMH_Loss"", ""SMH_Loss"", ""OH_Loss"",
            ""IGBD_Loss"", ""EGBD_Loss"", ""LS_Loss"", ""LULL_Loss"", ""Tracker_Loss"", ""Total_Loss""
        ];

        var rows = [];

        for (var i = 0; i < result.length; i++) {
            var row = [];
            var formattedDate = moment(result[i].date, 'YYYY/MM/DD').format('DD-MM-YYYY');
            let totalFinal = result[i].total_losses + result[i].tracker_losses;
            row.push(fyyear);
            //row.push(result[i].month);
            row.push(result[i].country);
            row.push(result[i].state);
            row.push(result[i].spv);
            row.push(result[i].site);
            row.push(result[i].dc_capacity);
            row.push(result[i].ac_capacity);
            ");
            WriteLiteral(@"row.push(result[i].ghi);
            row.push(result[i].poa);
            row.push(result[i].expected_kwh);
            row.push(result[i].inv_kwh);
            row.push(result[i].plant_kwh);
            row.push(result[i].inv_pr);
            row.push(result[i].plant_pr);
            row.push(result[i].inv_plf);
            row.push(result[i].plant_plf);
            row.push(result[i].ma_actual);
            row.push(result[i].iga);
            row.push(result[i].ega);
            row.push(result[i].ega_b);
            row.push(result[i].ega_c);
            row.push(result[i].prod_hrs);
            row.push(result[i].lull_hrs_bd);
            row.push(result[i].usmh_bs);
            row.push(result[i].smh_bd);
            row.push(result[i].oh_bd);
            row.push(result[i].igbdh_bd);
            row.push(result[i].egbdh_bd);
            row.push(result[i].load_shedding_bd);
            row.push(result[i].total_bd_hrs);
            row.push(result[i].usmh);
            row.push(r");
            WriteLiteral(@"esult[i].smh);
            row.push(result[i].oh);
            row.push(result[i].igbdh);
            row.push(result[i].egbdh);
            row.push(result[i].load_shedding);
            row.push(result[i].lull_hrs);
            row.push(result[i].tracker_losses);
            row.push(result[i].total_losses);
            rows.push(row);



        }

        var data = [columns].concat(rows);

        var ws = XLSX.utils.aoa_to_sheet(data);
        var wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, ""SolarYearlyGenRep SiteWise"");
            var wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'binary' });

        function s2ab(s) {
            var buf = new ArrayBuffer(s.length);
            var view = new Uint8Array(buf);
            for (var i = 0; i !== s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
            return buf;
        }

        saveAs(new Blob([s2ab(wbout)], { type: ""application/octet-stream"" }), ""SolarYearlyGenRep SiteWise.xlsx"");

");
            WriteLiteral(@"    }

    function GetCustomDailyGenReport()
    {
        var daterange = $('#custom_daterange').val();
        var arr1 = new Array();
        arr1 = daterange.split(""-"");
        var fromDate = moment(arr1[0], 'DD/MM/YYYY').format('YYYY-MM-DD');
        var toDate = moment(arr1[1], 'DD/MM/YYYY').format('YYYY-MM-DD');
        let site_list = """";
        $('select#cust_daily_group option:selected').each(function () {
            site_list += $(this).val() + "","";
        });
        site_list = site_list != """" ? site_list.slice(0, -1) : site_list;
        document.getElementById(""loaderD"").style.display = 'flex';
        var reportType = ""Site"";
        var reporthead = ""Site Wise Report"";
        $.ajax({
            type: ""GET"",
            url: '");
#nullable restore
#line 4849 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarGenReport.cshtml"
             Write(Url.Action("GetCustomeSolarDaily", "SolarReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?fromDate=' + fromDate + '&toDate=' + toDate + '&site_list=' + site_list,
            contentType: ""application/json; charset=utf-8"",
            datatype: ""JSON"",
            success: function (result, status, xhr)
            {
                var  tbl = '<table id=""exampleDailygroup""  class=""table table-bordered table-striped"" style=""width:285%"">';
                tbl += '<thead class=""tbl-head""><tr>';
                tbl += '<th>Date</th>';
                tbl += '<th style=""text-wrap: nowrap;width:12%"">Group Name</th>';
                tbl += '<th>Country</th>';
                tbl += '<th>State</th>';
                //tbl += '<th>SPV</th>';
                tbl += '<th>DC_Capacity<br>(MW)</th>';
                tbl += '<th>AC_Capacity<br>(MW)</th>';
                tbl += '<th>GHI</th>';
                tbl += '<th>POA</th>';
                tbl += '<th>Expected_kwh</th>';
                tbl += '<th>INV_kWh</th>';
                tbl += '<th>Plant_kWh</th>';
                tbl ");
            WriteLiteral(@"+= '<th>INV_PR</th>';
                tbl += '<th>Plant_PR</th>';
                tbl += '<th>INV_PLF<br>(%)</th>';
                tbl += '<th>Plant_PLF<br>(%)</th>';
                tbl += '<th>MA_ACT<br>(%)</th>';
                tbl += '<th>IGA<br>(%)</th>';
                tbl += '<th>EGA_A<br>(%) <span class=""information"">i<span></th>';
                tbl += '<th>EGA_B<br>(%) <span class=""information"">i<span></th>';
                tbl += '<th>EGA_C<br>(%) <span class=""information"">i<span></th>';
                tbl += '<th>Gen_Hrs</th>';
                tbl += '<th>Lull_Hrs</th>';
                tbl += '<th>USMH</th>';
                tbl += '<th>SMH</th>';
                tbl += '<th>OH</th>';
                tbl += '<th>IGBD</th>';
                tbl += '<th>EGBD</th>';
                tbl += '<th>LS</th>';
                tbl += '<th>Total_BD</th>';
                tbl += '<th>USMH_Loss</th>';
                tbl += '<th>SMH_Loss</th>';
                tbl += '<th>OH_Loss</th>");
            WriteLiteral(@"';
                tbl += '<th>IGBD_Loss</th>';
                tbl += '<th>EGBD_Loss</th>';
                tbl += '<th>LS_Loss</th>';
                tbl += '<th>LULL_Loss</th>';
                tbl += '<th>Tracker_Loss</th>';
                tbl += '<th>Total_Loss</th>';
                tbl += '</tr></thead>';
                if (result.length > 0)
                {
                    for (var i = 0; i < result.length; i++) {
                        var formattedDate   = moment(result[i].date, 'YYYY/MM/DD').format('DD-MM-YYYY');
                        let totalFinal      = result[i].total_losses + result[i].tracker_losses;
                        let chielditem      = result[i].item;
                        let total_inv_pr    = 0;
                        let avg_inv_pr      = 0;
                        let total_plant_pr  = 0;
                        let avg_plant_pr    = 0;
                        let total_inv_plf   = 0;
                        let avg_inv_plf     = 0;
            ");
            WriteLiteral(@"            let total_plant_plf = 0;
                        let avg_plant_plf   = 0;
                        let total_act_ma    = 0;
                        let avg_act_ma      = 0;
                        let total_iga       = 0;
                        let avg_iga         = 0;
                        let total_ega_a     = 0;
                        let avg_ega_a       = 0;
                        let total_ega_b     = 0;
                        let avg_ega_b       = 0;
                        let total_ega_c     = 0;
                        let avg_ega_c       = 0;
                        let total_capacity  = 0;
                        for (var k = 0; k < chielditem.length; k++)
                        {
                            total_capacity  += chielditem[k].ac_capacity;
                            total_inv_pr    += chielditem[k].inv_pr * chielditem[k].ac_capacity;
                            total_plant_pr  += chielditem[k].plant_pr * chielditem[k].ac_capacity;
                 ");
            WriteLiteral(@"           total_inv_plf   += chielditem[k].inv_plf * chielditem[k].ac_capacity;
                            total_plant_plf += chielditem[k].plant_plf * chielditem[k].ac_capacity;
                            total_act_ma    += chielditem[k].ma_actual * chielditem[k].ac_capacity;
                            total_iga       += chielditem[k].iga * chielditem[k].ac_capacity;
                            total_ega_a     += chielditem[k].ega * chielditem[k].ac_capacity;
                            total_ega_b     += chielditem[k].ega_b * chielditem[k].ac_capacity;
                            total_ega_c     += chielditem[k].ega_c * chielditem[k].ac_capacity;
                        }
                        if (total_capacity != 0)
                        {
                            avg_inv_pr    = total_inv_pr / total_capacity;
                            avg_plant_pr  = total_plant_pr / total_capacity;
                            avg_inv_plf   = total_inv_plf / total_capacity;
                     ");
            WriteLiteral(@"       avg_plant_plf = total_plant_plf / total_capacity;
                            avg_act_ma    = total_act_ma / total_capacity;
                            avg_iga       = total_iga / total_capacity;
                            avg_ega_a     = total_ega_a / total_capacity;
                            avg_ega_b     = total_ega_b / total_capacity;
                            avg_ega_c     = total_ega_c / total_capacity;
                        }
                        let chield_class = result[i].cust_group.replace(/\s/g, """");
                        let expand_btn = """";
                        if (chielditem.length > 1) {
                            expand_btn = '<div class=""grp-btn"" id = ""parant_' + chield_class + '"" onclick = ""showchield(id)"" style = ""display:inline-block"" > <i class=""fas fa-plus""></i></div ><div class=""grp-btn"" id=""phide_' + chield_class + '"" onclick=""hidechield(id)"" style=""display:none""><i class=""fas fa-minus""></i></div>';

                        }
                      ");
            WriteLiteral(@"  tbl += '<tr>';
                        tbl += '<td class=""text-left"" style=""text-wrap: nowrap;"">' + formattedDate + '</td>';
                        tbl += '<td class=""text-left"" style=""text-wrap: nowrap;"">' + expand_btn + '<b>&nbsp;&nbsp;' + result[i].cust_group + '</b></td >';
                        tbl += '<td class=""text-left"">' + result[i].country + '</td>';
                        tbl += '<td class=""text-left"">' + result[i].state + '</td>';
                        //tbl += '<td class=""text-left"" style=""text-wrap: nowrap;"">' + result[i].spv + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].dc_capacity.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].ac_capacity.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].ghi.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].poa.toFixed(2) + '</td>';
                        tbl += '<td class=""text-righ");
            WriteLiteral(@"t"">' + result[i].expected_kwh.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].inv_kwh.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].plant_kwh.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_inv_pr.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_plant_pr.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_inv_plf.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_plant_plf.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_act_ma.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_iga.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_ega_a.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_ega_b.toFixed(2) + '</td>';
                        ");
            WriteLiteral(@"tbl += '<td class=""text-right"">' + avg_ega_c.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].prod_hrs.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].lull_hrs_bd.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].usmh_bs.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].smh_bd.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].oh_bd.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].igbdh_bd.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].egbdh_bd.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].load_shedding_bd.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].total_bd_hrs.toFixed(2) + '</td>';
                        tbl += '<td cl");
            WriteLiteral(@"ass=""text-right"">' + result[i].usmh.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].smh.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].oh.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].igbdh.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].egbdh.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].load_shedding.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].lull_hrs.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].tracker_losses.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + totalFinal.toFixed(2) + '</td>';
                        tbl += '</tr>';

                        for (var j = 0; j < chielditem.length; j++)
                        {
                            var ");
            WriteLiteral(@"formattedDate_chield = moment(chielditem[j].date, 'YYYY/MM/DD').format('DD-MM-YYYY');
                            let totalFinal_chield = chielditem[j].total_losses + chielditem[j].tracker_losses;

                            tbl += '<tr  class=""' + chield_class + '"" style=""display:none"">';
                            tbl += '<td class=""text-left"" style=""text-wrap: nowrap;"">' + formattedDate_chield + '</td>';
                            tbl += '<td class=""text-left"" style=""padding-left: 1rem !important;"">' + chielditem[j].site + '</td >';
                            tbl += '<td class=""text-left"">' + chielditem[j].country + '</td>';
                            tbl += '<td class=""text-left"">' + chielditem[j].state + '</td>';
                            //tbl += '<td class=""text-left"" style=""text-wrap: nowrap;"">' + result[i].spv + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].dc_capacity.toFixed(2) + '</td>';
                            tbl += '<td class=""text-ri");
            WriteLiteral(@"ght"">' + chielditem[j].ac_capacity.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].ghi.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].poa.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].expected_kwh.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].inv_kwh.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].plant_kwh.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].inv_pr.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].plant_pr.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].inv_plf.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].plant_plf.toFixed(2) + '</");
            WriteLiteral(@"td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].ma_actual.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].iga.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].ega.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].ega_b.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].ega_c.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].prod_hrs.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].lull_hrs_bd.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].usmh_bs.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].smh_bd.toFixed(2) + '</td>';
                            tbl += '<td class=""text");
            WriteLiteral(@"-right"">' + chielditem[j].oh_bd.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].igbdh_bd.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].egbdh_bd.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].load_shedding_bd.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].total_bd_hrs.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].usmh.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].smh.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].oh.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].igbdh.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].egbdh.toFixed(2) + '</td>'");
            WriteLiteral(@";
                            tbl += '<td class=""text-right"">' + chielditem[j].load_shedding.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].lull_hrs.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].tracker_losses.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + totalFinal_chield.toFixed(2) + '</td>';
                            tbl += '</tr>';
                        }
                    }
                }
                else
                {
                    console.log(""Data not available"");
                }
                tbl += '</table>';
                //$(""#reportsDailyGroup"").html(tbl);
                $(""#reportsDailyGroup"").html("""");
                $(""#reportsDailyGroup"").html(tbl);
                $('#exampleDailygroup').DataTable({
                    dom: 'Bfrtip',
                    searching: false,
                    paging: ");
            WriteLiteral(@"false,
                    ordering: false,
                    info: true,
                    fixedHeader: true,
                    responsive: true,
                    scrollX: true,
                    lengthChange: false,
                    autoWidth: true,
                    fixedColumns: {
                        left: 2
                    },
                    rowGroup: {
                        dataSrc: 0,
                    },
                    pageLength: 50,
                    ""order"": [[1, ""asc""]],
                    buttons: [
                        {
                            extend: 'excel',
                            title: 'Solar Daily Generation Reports Group By Site',
                            exportOptions: {
                                columns: ':visible'
                            }
                        },
                        {
                            extend: 'csv',
                            title: 'Solar Daily Generation Repo");
            WriteLiteral(@"rts Group By Site',
                            exportOptions: {
                                columns: ':visible'
                            }
                        },
                        'colvis',
                        //{
                            //text: '<span class=""fas fa-file-excel"" title=""Download from DB up to six decimal""></span>',
                            //className: 'btn ml-1   ',
                            //action: function () {
                                //DailyexportToExcelGenReportSiteWise();
                            //}
                        //},
                    ],
                    initComplete: function ()
                    {
                        this.api().columns().header().to$().each(function ()
                        {

                            if ($(this).text() == ""EGA_A(%) i"")
                            {
                                $(this).attr('title', 'External Grid Breakdown, Shutdown & Load Shedding')
      ");
            WriteLiteral(@"                      }
                            if ($(this).text() == ""EGA_B(%) i"")
                            {
                                $(this).attr('title', 'External Grid Breakdown & Shutdown')
                            }
                            if ($(this).text() == ""EGA_C(%) i"")
                            {
                                $(this).attr('title', 'Load Shedding')
                            }
                        })
                    }
                });
                $("".dt-buttons"").addClass('btn-group flex-wrap');
                $("".dt-buttons"").css(""margin-bottom"", ""0%"");
                $("".dt-buttons > button"").addClass('btn btn-secondary');
                $("".dataTables_filter> label >input"").addClass('form-control form-control-sm');
                //$(""dataTables_filter"").css(""margin-top"", ""-35px"");
                $(document).on(""click"", ""div.dt-button-collection > div > button"", function () {
                    if ($(this).hasClass");
            WriteLiteral(@"(""active"")) {
                        $(this).css(""background-color"", ""white"");
                    } else {
                        $(this).css(""background-color"", ""#31576d"");
                    }
                });
                document.getElementById(""loaderD"").style.display = 'none';
            }
        });
    }
    function GetCustomMonthGenReport()
    {
        let site_list= """";
        $('select#custM_group option:selected').each(function () {
            site_list += $(this).val() + "","";
        });
        site_list = site_list != """" ? site_list.slice(0, -1) : site_list;
        var fyyear = $('select#fyM_group option:selected').val();
        if (fyyear == """") {
            alert(""Please select financial year"");
            return false;
        }
        let month = """";
        $('select#monthM_group option:selected').each(function () {
            month+= $(this).val()+"","";
        });
        month = month != """" ? month.slice(0, -1) : month;
        document.g");
            WriteLiteral(@"etElementById(""loaderM"").style.display = 'flex';
        var arr1 = new Array();
        arr1 = fyyear.split(""-"");
        var fromDate = """";
        var reportType = ""Site"";
        var reporthead = ""Site Wise Report"";
        var cnt = 0;
        $.ajax({
            type: ""GET"",
            url: '");
#nullable restore
#line 5156 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarGenReport.cshtml"
             Write(Url.Action("GetCustomeSolarMonthly", "SolarReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?fy=' + arr1[0] + '&month=' + month + '&site_list=' + site_list,
            contentType: ""application/json; charset=utf-8"",
            datatype: ""JSON"",
            success: function (result, status, xhr)
            {
                //console.log(result);
                var tbl = '<table id=""exampleMothlyGroup""  class=""table table-bordered table-striped"" style=""width:285%"">';
                tbl += '<thead class=""tbl-head""><tr>';
                tbl += '<th>FY</th>';
                tbl += '<th>Month</th>';
                tbl += '<th>Country</th>';
                tbl += '<th>State</th>';
                //tbl += '<th>SPV</th>';
                tbl += '<th style=""text-wrap: nowrap;width:12%"">Group Name</th>';
                tbl += '<th>DC_Capacity<br>(MW)</th>';
                tbl += '<th>AC_Capacity<br>(MW)</th>';
                tbl += '<th>GHI</th>';
                tbl += '<th>POA</th>';
                tbl += '<th>Expected_kwh</th>';
                tbl += '<th>INV_kWh</th");
            WriteLiteral(@">';
                tbl += '<th>Plant_kWh</th>';
                tbl += '<th>INV_PR</th>';
                tbl += '<th>Plant_PR</th>';
                tbl += '<th>INV_PLF<br>(%)</th>';
                tbl += '<th>Plant_PLF<br>(%)</th>';
                tbl += '<th>MA_ACT<br>(%)</th>';
                tbl += '<th>IGA<br>(%)</th>';
                tbl += '<th>EGA_A<br>(%) <span class=""information"">i<span></th>';
                tbl += '<th>EGA_B<br>(%) <span class=""information"">i<span></th>';
                tbl += '<th>EGA_C<br>(%) <span class=""information"">i<span></th>';
                tbl += '<th>Gen_Hrs</th>';
                tbl += '<th>Lull_Hrs</th>';
                tbl += '<th>USMH</th>';
                tbl += '<th>SMH</th>';
                tbl += '<th>OH</th>';
                tbl += '<th>IGBD</th>';
                tbl += '<th>EGBD</th>';
                tbl += '<th>LS</th>';
                tbl += '<th>Total_BD</th>';
                tbl += '<th>USMH_Loss</th>';
              ");
            WriteLiteral(@"  tbl += '<th>SMH_Loss</th>';
                tbl += '<th>OH_Loss</th>';
                tbl += '<th>IGBD_Loss</th>';
                tbl += '<th>EGBD_Loss</th>';
                tbl += '<th>LS_Loss</th>';
                tbl += '<th>LULL_Loss</th>';
                tbl += '<th>Tracker_Loss</th>';
                tbl += '<th>Total_Loss</th>';
                tbl += '</tr></thead>';
                console.log(result.length);
                if (result.length > 0)
                {

                    for (var i = 0; i < result.length; i++)
                    {

                        let totalFinal = result[i].total_losses + result[i].tracker_losses;
                        let chielditem = result[i].item;
                        let total_inv_pr = 0;
                        let avg_inv_pr = 0;
                        let total_plant_pr = 0;
                        let avg_plant_pr = 0;
                        let total_inv_plf = 0;
                        let avg_inv_plf = 0;
     ");
            WriteLiteral(@"                   let total_plant_plf = 0;
                        let avg_plant_plf = 0;
                        let total_act_ma = 0;
                        let avg_act_ma = 0;
                        let total_iga = 0;
                        let avg_iga = 0;
                        let total_ega_a = 0;
                        let avg_ega_a = 0;
                        let total_ega_b = 0;
                        let avg_ega_b = 0;
                        let total_ega_c = 0;
                        let avg_ega_c = 0;
                        let total_capacity = 0;
                        for (var k = 0; k < chielditem.length; k++) {
                            total_capacity += chielditem[k].ac_capacity;
                            total_inv_pr += chielditem[k].inv_pr * chielditem[k].ac_capacity;
                            total_plant_pr += chielditem[k].plant_pr * chielditem[k].ac_capacity;
                            total_inv_plf += chielditem[k].inv_plf * chielditem[k].ac_capacity;");
            WriteLiteral(@"
                            total_plant_plf += chielditem[k].plant_plf * chielditem[k].ac_capacity;
                            total_act_ma += chielditem[k].ma_actual * chielditem[k].ac_capacity;
                            total_iga += chielditem[k].iga * chielditem[k].ac_capacity;
                            total_ega_a += chielditem[k].ega * chielditem[k].ac_capacity;
                            total_ega_b += chielditem[k].ega_b * chielditem[k].ac_capacity;
                            total_ega_c += chielditem[k].ega_c * chielditem[k].ac_capacity;
                        }
                        if (total_capacity != 0) {
                            avg_inv_pr = total_inv_pr / total_capacity;
                            avg_plant_pr = total_plant_pr / total_capacity;
                            avg_inv_plf = total_inv_plf / total_capacity;
                            avg_plant_plf = total_plant_plf / total_capacity;
                            avg_act_ma = total_act_ma / total_capacity;
 ");
            WriteLiteral(@"                           avg_iga = total_iga / total_capacity;
                            avg_ega_a = total_ega_a / total_capacity;
                            avg_ega_b = total_ega_b / total_capacity;
                            avg_ega_c = total_ega_c / total_capacity;
                        }

                        let chield_class = result[i].cust_group.replace(/\s/g, """");
                        let expand_btn = """";
                        if (chielditem.length > 1) {
                            expand_btn = '<div class=""grp-btn"" id = ""parantM_' + chield_class + '"" onclick = ""showchieldMontly(id)"" style = ""display:inline-block"" > <i class=""fas fa-plus""></i></div ><div class=""grp-btn"" id=""phideM_' + chield_class + '"" onclick=""hidechieldMonthly(id)"" style=""display:none""><i class=""fas fa-minus""></i></div>';

                        }
                        tbl += '<tr>';
                        tbl += '<td class=""text-left"" style=""text-wrap: nowrap;"">' + fyyear + '</td>';
              ");
            WriteLiteral(@"          tbl += '<td class=""text-left"">' + result[i].month + '</td>';
                        tbl += '<td class=""text-left"">' + result[i].country + '</td>';
                        tbl += '<td class=""text-left"">' + result[i].state + '</td>';
                        //tbl += '<td class=""text-left""  style=""text-wrap: nowrap;"">' + result[i].spv + '</td>';
                        tbl += '<td class=""text-left"" style=""text-wrap: nowrap;"">' + expand_btn + '<b>&nbsp;&nbsp;' + result[i].cust_group + '</b></td >';
                        tbl += '<td class=""text-left"">' + result[i].dc_capacity.toFixed(2) + '</td>';
                        tbl += '<td class=""text-left"">' + result[i].ac_capacity.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].ghi.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].poa.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].expected_kwh.toFixed(2) + '</td>';
     ");
            WriteLiteral(@"                   tbl += '<td class=""text-right"">' + result[i].inv_kwh.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].plant_kwh.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_inv_pr.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_plant_pr.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_inv_plf.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_plant_plf.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_act_ma.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_iga.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_ega_a.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_ega_b.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_ega_c.toFixed(2) + ");
            WriteLiteral(@"'</td>';
                        tbl += '<td class=""text-right"">' + result[i].prod_hrs.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].lull_hrs_bd.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].usmh_bs.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].smh_bd.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].oh_bd.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].igbdh_bd.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].egbdh_bd.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].load_shedding_bd.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].total_bd_hrs.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].usmh.toFixed(2) + '</td>';");
            WriteLiteral(@"
                        tbl += '<td class=""text-right"">' + result[i].smh.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].oh.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].igbdh.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].egbdh.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].load_shedding.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].lull_hrs.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].tracker_losses.toFixed(2)+ '</td>';
                        tbl += '<td class=""text-right"">' + result[i].total_losses.toFixed(2) + '</td>';
                        tbl += '</tr>';
                        for (var j = 0; j < chielditem.length; j++)
                        {
                            let totalFinal_chield = chielditem[j].total_losses + ");
            WriteLiteral(@"chielditem[j].tracker_losses;
                            tbl += '<tr class=""' + chield_class +'"" style=""display:none"">';
                            tbl += '<td class=""text-left"" style=""text-wrap: nowrap;"">' + fyyear + '</td>';
                            tbl += '<td class=""text-left"">' + chielditem[j].month + '</td>';
                            tbl += '<td class=""text-left"">' + chielditem[j].country + '</td>';
                            tbl += '<td class=""text-left"">' + chielditem[j].state + '</td>';
                            //tbl += '<td class=""text-left""  style=""text-wrap: nowrap;"">' + result[i].spv + '</td>';
                            tbl += '<td class=""text-left"" style=""padding-left: 1rem !important;"">' + chielditem[j].site + '</td >';
                            tbl += '<td class=""text-left"">' + chielditem[j].dc_capacity.toFixed(2) + '</td>';
                            tbl += '<td class=""text-left"">' + chielditem[j].ac_capacity.toFixed(2) + '</td>';
                            tbl += ");
            WriteLiteral(@"'<td class=""text-right"">' + chielditem[j].ghi.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].poa.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].expected_kwh.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].inv_kwh.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].plant_kwh.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].inv_pr.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].plant_pr.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].inv_plf.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].plant_plf.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].ma_actual");
            WriteLiteral(@".toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].iga.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].ega.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].ega_b.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].ega_c.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].prod_hrs.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].lull_hrs_bd.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].usmh_bs.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].smh_bd.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].oh_bd.toFixed(2) + '</td>';
                            tbl += '<t");
            WriteLiteral(@"d class=""text-right"">' + chielditem[j].igbdh_bd.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].egbdh_bd.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].load_shedding_bd.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].total_bd_hrs.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].usmh.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].smh.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].oh.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].igbdh.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].egbdh.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].load_shedding");
            WriteLiteral(@".toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].lull_hrs.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].tracker_losses.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].total_losses.toFixed(2) + '</td>';
                            tbl += '</tr>';
                        }
                    }
                }
                else
                {
                    console.log(""Data not available"");

                }
                console.log(""rows""+cnt+"""");
                tbl += '</table>';
                //$(""#reportsMonthlyGroup"").html(tbl);
                $(""#reportsMonthlyGroup"").html("""");
                $(""#reportsMonthlyGroup"").html(tbl);
                $('#exampleMothlyGroup').DataTable({
                    dom: 'Bfrtip',
                    searching: false,
                    paging: false,
                    or");
            WriteLiteral(@"dering: false,
                    info: true,
                    fixedHeader: true,
                    responsive: true,
                    scrollX: true,
                    lengthChange: false,
                    autoWidth: true,
                    fixedColumns: {
                        left: 2
                    },
                    rowGroup: {
                        dataSrc: 0,
                    },
                    pageLength: 50,
                    ""order"": [[5, ""asc""]],
                    buttons: [
                        {
                            extend: 'excel',
                            title: 'Solar Monthly Generation Reports Group By Site',
                            exportOptions: {
                                columns: ':visible',
                                rows: { selected: false, search: 'none', order: 'applied', page: 'all', range: ''+cnt+''}
                            }
                        },
                        {
           ");
            WriteLiteral(@"                 extend: 'csv',
                            title: 'Solar Monthly Generation Reports Group By Site',
                            exportOptions: {
                                columns: ':visible'
                            }
                        },
                        'colvis',
                        //{
                            //text: '<span class=""fas fa-file-excel"" title=""Download from DB up to six decimal""></span>',
                            //className: 'btn ml-1   ',
                            //action: function () {
                               // MonthlyexportToExcelGenReportSiteWise();
                           // }
                        //},
                    ],
                    initComplete: function ()
                    {
                        this.api().columns().header().to$().each(function ()
                        {
                            if ($(this).text() == ""EGA_A(%) i"")
                            {
                ");
            WriteLiteral(@"                $(this).attr('title', 'External Grid Breakdown, Shutdown & Load Shedding')
                            }
                            if ($(this).text() == ""EGA_B(%) i"")
                            {
                                $(this).attr('title', 'External Grid Breakdown & Shutdown')
                            }
                            if ($(this).text() == ""EGA_C(%) i"")
                            {
                                $(this).attr('title', 'Load Shedding')
                            }
                        })
                    }
                });
                $("".dt-buttons"").addClass('btn-group flex-wrap');
                $("".dt-buttons"").css(""margin-bottom"", ""0%"");
                $("".dt-buttons > button"").addClass('btn btn-secondary');
                $("".dataTables_filter> label >input"").addClass('form-control form-control-sm');
                //$(""dataTables_filter"").css(""margin-top"", ""-35px"");
                $(document).on(""click"", ");
            WriteLiteral(@"""div.dt-button-collection > div > button"", function ()
                {
                    if ($(this).hasClass(""active""))
                    {
                        $(this).css(""background-color"", ""white"");
                    }
                    else
                    {
                        $(this).css(""background-color"", ""#31576d"");
                    }
                });
                document.getElementById(""loaderM"").style.display = 'none';
            }
        });

    }
    function GetCustomYearlyGenReport()
    {
        let site_list = """";
        $('select#customY_group option:selected').each(function () {
            site_list += $(this).val() + "","";
        });
        site_list = site_list != """" ? site_list.slice(0, -1) : site_list;
        var fyyear = $('select#fyY_group option:selected').val();
        if (fyyear == """") {
            alert(""Please select financial year"");
            return false;
        }
        document.getElementById(""loaderY");
            WriteLiteral(@""").style.display = 'flex';
        var arr1 = new Array();
        arr1 = fyyear.split(""-"");
        var fromDate = """";
        fromDate = arr1[0] + '-04-01';
        toDate = '20' + arr1[1] + '-03-31';
        var reportType = ""Site"";
        var reporthead = ""Site Wise Report"";
        $.ajax({
            type: ""GET"",
            url: '");
#nullable restore
#line 5469 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\SolarGenReport.cshtml"
             Write(Url.Action("GetCustomeSolarYearly", "SolarReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?fromDate=' + fromDate + '&toDate=' + toDate + '&site_list=' + site_list,
            contentType: ""application/json; charset=utf-8"",
            datatype: ""JSON"",
            success: function (result, status, xhr)
            {
                //var tbl = '<div class=""text-center""><h5></h5></div>';
                var tbl = '<table id=""exampleGroupY""  class=""table table-bordered table-striped"" style=""width:285%"">';
                tbl += '<thead class=""tbl-head""><tr>';
                tbl += '<th>FY</th>';
                tbl += '<th>Country</th>';
                tbl += '<th>State</th>';
                //tbl += '<th>SPV</th>';
                tbl += '<th style=""text-wrap: nowrap;width:12%"" >Group Name</th>';
                tbl += '<th>DC_Capacity<br>(MW)</th>';
                tbl += '<th>AC_Capacity<br>(MW)</th>';
                tbl += '<th>GHI</th>';
                tbl += '<th>POA</th>';
                tbl += '<th>Expected_kwh</th>';
                tbl += '<th>INV_kWh</th>';");
            WriteLiteral(@"
                tbl += '<th>Plant_kWh</th>';
                tbl += '<th>INV_PR</th>';
                tbl += '<th>Plant_PR</th>';
                tbl += '<th>INV_PLF<br>(%)</th>';
                tbl += '<th>Plant_PLF<br>(%)</th>';
                tbl += '<th>MA_ACT<br>(%)</th>';
                tbl += '<th>IGA<br>(%)</th>';
                tbl += '<th>EGA_A<br>(%) <span class=""information"">i<span></th>';
                tbl += '<th>EGA_B<br>(%) <span class=""information"">i<span></th>';
                tbl += '<th>EGA_C<br>(%) <span class=""information"">i<span></th>';
                tbl += '<th>Gen_Hrs</th>';
                tbl += '<th>Lull_Hrs</th>';
                tbl += '<th>USMH</th>';
                tbl += '<th>SMH</th>';
                tbl += '<th>OH</th>';
                tbl += '<th>IGBD</th>';
                tbl += '<th>EGBD</th>';
                tbl += '<th>LS</th>';
                tbl += '<th>Total_BD</th>';
                tbl += '<th>USMH_Loss</th>';
                tb");
            WriteLiteral(@"l += '<th>SMH_Loss</th>';
                tbl += '<th>OH_Loss</th>';
                tbl += '<th>IGBD_Loss</th>';
                tbl += '<th>EGBD_Loss</th>';
                tbl += '<th>LS_Loss</th>';
                tbl += '<th>LULL_Loss</th>';
                tbl += '<th>Tracker_Loss</th>';
                tbl += '<th>Total_Loss</th>';
                tbl += '</tr></thead>';
                if (result.length > 0)
                {
                    for (var i = 0; i < result.length; i++)
                    {
                        let TotalFinal = result[i].total_losses + result[i].tracker_losses;
                        let chielditem = result[i].item;
                        let total_inv_pr = 0;
                        let avg_inv_pr = 0;
                        let total_plant_pr = 0;
                        let avg_plant_pr = 0;
                        let total_inv_plf = 0;
                        let avg_inv_plf = 0;
                        let total_plant_plf = 0;
        ");
            WriteLiteral(@"                let avg_plant_plf = 0;
                        let total_act_ma = 0;
                        let avg_act_ma = 0;
                        let total_iga = 0;
                        let avg_iga = 0;
                        let total_ega_a = 0;
                        let avg_ega_a = 0;
                        let total_ega_b = 0;
                        let avg_ega_b = 0;
                        let total_ega_c = 0;
                        let avg_ega_c = 0;
                        let total_capacity = 0;
                        for (var k = 0; k < chielditem.length; k++) {
                            total_capacity += chielditem[k].ac_capacity;
                            total_inv_pr += chielditem[k].inv_pr * chielditem[k].ac_capacity;
                            total_plant_pr += chielditem[k].plant_pr * chielditem[k].ac_capacity;
                            total_inv_plf += chielditem[k].inv_plf * chielditem[k].ac_capacity;
                            total_plant_plf += chie");
            WriteLiteral(@"lditem[k].plant_plf * chielditem[k].ac_capacity;
                            total_act_ma += chielditem[k].ma_actual * chielditem[k].ac_capacity;
                            total_iga += chielditem[k].iga * chielditem[k].ac_capacity;
                            total_ega_a += chielditem[k].ega * chielditem[k].ac_capacity;
                            total_ega_b += chielditem[k].ega_b * chielditem[k].ac_capacity;
                            total_ega_c += chielditem[k].ega_c * chielditem[k].ac_capacity;
                        }
                        if (total_capacity != 0) {
                            avg_inv_pr = total_inv_pr / total_capacity;
                            avg_plant_pr = total_plant_pr / total_capacity;
                            avg_inv_plf = total_inv_plf / total_capacity;
                            avg_plant_plf = total_plant_plf / total_capacity;
                            avg_act_ma = total_act_ma / total_capacity;
                            avg_iga = total_iga / tota");
            WriteLiteral(@"l_capacity;
                            avg_ega_a = total_ega_a / total_capacity;
                            avg_ega_b = total_ega_b / total_capacity;
                            avg_ega_c = total_ega_c / total_capacity;
                        }

                        let chield_class = result[i].cust_group.replace(/\s/g, """");
                        let expand_btn = """";
                        if (chielditem.length > 1) {
                            expand_btn = '<div class=""grp-btn"" id = ""parantY_' + chield_class + '"" onclick = ""showchieldYearly(id)"" style = ""display:inline-block"" > <i class=""fas fa-plus""></i></div ><div class=""grp-btn"" id=""phideY_' + chield_class + '"" onclick=""hidechieldYearly(id)"" style=""display:none""><i class=""fas fa-minus""></i></div>';

                        }
                        tbl += '<tr>';
                        tbl += '<td class=""text-left""  style=""text-wrap: nowrap;"">' + fyyear + '</td>';
                        tbl += '<td class=""text-left"">' + result[i]");
            WriteLiteral(@".country + '</td>';
                        tbl += '<td class=""text-left"">' + result[i].state + '</td>';
                        //tbl += '<td class=""text-left""  style=""text-wrap: nowrap;"">' + result[i].spv + '</td>';
                        tbl += '<td class=""text-left"" style=""text-wrap: nowrap;"">' + expand_btn + '<b>&nbsp;&nbsp;' + result[i].cust_group + '</b></td>';
                        tbl += '<td class=""text-left"">' + result[i].dc_capacity.toFixed(2) + '</td>';
                        tbl += '<td class=""text-left"">' + result[i].ac_capacity.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].ghi.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].poa.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].expected_kwh.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].inv_kwh.toFixed(2) + '</td>';
                        tbl += '<td class=""te");
            WriteLiteral(@"xt-right"">' + result[i].plant_kwh.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_inv_pr.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_plant_pr.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_inv_plf.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_plant_plf.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_act_ma.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_iga.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_ega_a.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_ega_b.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_ega_c.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].prod_hrs.toFixed(2) + '</td>';
                        tbl +");
            WriteLiteral(@"= '<td class=""text-right"">' + result[i].lull_hrs_bd.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].usmh_bs.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].smh_bd.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].oh_bd.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].igbdh_bd.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].egbdh_bd.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].load_shedding_bd.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].total_bd_hrs.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].usmh.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].smh.toFixed(2) + '</td>';
                        tbl += '<td class=""");
            WriteLiteral(@"text-right"">' + result[i].oh.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].igbdh.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].egbdh.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].load_shedding.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].lull_hrs.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].tracker_losses.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].total_losses.toFixed(2) + '</td>';
                        tbl += '</tr>';
                        for (var j = 0; j < chielditem.length; j++)
                        {
                            tbl += '<tr class=""' + chield_class +'"" style=""display:none"">';
                            tbl += '<td class=""text-left""  style=""text-wrap: nowrap;"">' + fyyear + '</td>';
                  ");
            WriteLiteral(@"          tbl += '<td class=""text-left"">' + chielditem[j].country + '</td>';
                            tbl += '<td class=""text-left"">' + chielditem[j].state + '</td>';
                            //tbl += '<td class=""text-left""  style=""text-wrap: nowrap;"">' + result[i].spv + '</td>';
                            tbl += '<td class=""text-left"" style=""padding-left: 1rem !important;"">' + chielditem[j].site + '</td>';
                            tbl += '<td class=""text-left"">' + chielditem[j].dc_capacity.toFixed(2) + '</td>';
                            tbl += '<td class=""text-left"">' + chielditem[j].ac_capacity.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].ghi.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].poa.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].expected_kwh.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">");
            WriteLiteral(@"' + chielditem[j].inv_kwh.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].plant_kwh.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].inv_pr.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].plant_pr.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].inv_plf.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].plant_plf.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].ma_actual.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].iga.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].ega.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].ega_b.toFixed(2) + '</td>';
       ");
            WriteLiteral(@"                     tbl += '<td class=""text-right"">' + chielditem[j].ega_c.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].prod_hrs.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].lull_hrs_bd.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].usmh_bs.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].smh_bd.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].oh_bd.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].igbdh_bd.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].egbdh_bd.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].load_shedding_bd.toFixed(2) + '</td>';
                            tbl += '<td class=""t");
            WriteLiteral(@"ext-right"">' + chielditem[j].total_bd_hrs.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].usmh.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].smh.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].oh.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].igbdh.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].egbdh.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].load_shedding.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].lull_hrs.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].tracker_losses.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].total_losses.toFixed");
            WriteLiteral(@"(2) + '</td>';
                            tbl += '</tr>';
                        }
                    }
                }
                else
                {
                    console.log(""Data not available"");
                }
                tbl += '</table>';
                //$(""#reportsYearlyGroup"").html(tbl);
                $(""#reportsYearlyGroup"").html("""");
                $(""#reportsYearlyGroup"").html(tbl);
                    $('#exampleGroupY').DataTable({
                    dom: 'Bfrtip',
                    searching: false,
                    paging: false,
                    ordering: false,
                    info: true,
                    fixedHeader: true,
                    responsive: true,
                    scrollX: true,
                    lengthChange: false,
                    autoWidth: true,
                    fixedColumns: {
                        left: 2
                    },
                    rowGroup: {
                        d");
            WriteLiteral(@"ataSrc: 0,
                    },
                    pageLength: 50,
                    ""order"": [[4, ""asc""]],
                    buttons: [
                        {
                            extend: 'excel',
                            title: 'Solar Monthly Generation Reports Group By Site',
                            exportOptions: {
                                columns: ':visible'
                            }
                        },
                        {
                            extend: 'csv',
                            title: 'Solar Monthly Generation Reports Group By Site',
                            exportOptions: {
                                columns: ':visible'
                            }
                        },
                        'colvis',
                        //{
                            //text: '<span class=""fas fa-file-excel"" title=""Download from DB up to six decimal""></span>',
                            //className: 'btn ml-1   ',");
            WriteLiteral(@"
                            //action: function () {
                             //   YearlyexportToExcelGenReportSiteWise();
                            //}
                        //},
                    ],
                    initComplete: function ()
                    {
                        this.api().columns().header().to$().each(function ()
                        {
                            if ($(this).text() == ""EGA_A(%) i"")
                            {
                                $(this).attr('title', 'External Grid Breakdown, Shutdown & Load Shedding')
                            }
                            if ($(this).text() == ""EGA_B(%) i"")
                            {
                                $(this).attr('title', 'External Grid Breakdown & Shutdown')
                            }
                            if ($(this).text() == ""EGA_C(%) i"")
                            {
                                $(this).attr('title', 'Load Shedding')
          ");
            WriteLiteral(@"                  }
                        })
                    }
                });
                $("".dt-buttons"").addClass('btn-group flex-wrap');
                $("".dt-buttons"").css(""margin-bottom"", ""0%"");
                $("".dt-buttons > button"").addClass('btn btn-secondary');
                $("".dataTables_filter> label >input"").addClass('form-control form-control-sm');
                //$(""dataTables_filter"").css(""margin-top"", ""-35px"");
                $(document).on(""click"", ""div.dt-button-collection > div > button"", function () {
                    if ($(this).hasClass(""active""))
                    {
                        $(this).css(""background-color"", ""white"");
                    }
                    else
                    {
                        $(this).css(""background-color"", ""#31576d"");
                    }
                });
                document.getElementById(""loaderY"").style.display = 'none';
            }
        });
    }
    function showchield(");
            WriteLiteral(@"id)
    {
        let iden = id.split(""_"");
        let elements = document.getElementsByClassName(iden[1]);
        for (let i = 0; i < elements.length; i++) {
            elements[i].style.display = ""table-row"";
        }
        document.getElementById(id).style.display = ""none"";
        document.getElementById(""phide_"" + iden[1]).style.display = ""inline-block"";

    }
    function hidechield(id)
    {
        let iden = id.split(""_"");
        let elements = document.getElementsByClassName(iden[1]);
        for (let i = 0; i < elements.length; i++) {
            elements[i].style.display = ""none"";
        }
        document.getElementById(id).style.display = ""none"";
        document.getElementById(""parant_"" + iden[1]).style.display = ""inline-block"";
    }
    //-------Monthly------//
    function showchieldMontly(id) {
        let iden = id.split(""_"");
        let elements = document.getElementsByClassName(iden[1]);
        for (let i = 0; i < elements.length; i++) {
            e");
            WriteLiteral(@"lements[i].style.display = ""table-row"";
        }
        document.getElementById(id).style.display = ""none"";
        document.getElementById(""phideM_"" + iden[1]).style.display = ""inline-block"";

    }
    function hidechieldMonthly(id) {
        let iden = id.split(""_"");
        let elements = document.getElementsByClassName(iden[1]);
        for (let i = 0; i < elements.length; i++) {
            elements[i].style.display = ""none"";
        }
        document.getElementById(id).style.display = ""none"";
        document.getElementById(""parantM_"" + iden[1]).style.display = ""inline-block"";
    }

    //-------Yearly------//
    function showchieldYearly(id) {
        let iden = id.split(""_"");
        let elements = document.getElementsByClassName(iden[1]);
        for (let i = 0; i < elements.length; i++) {
            elements[i].style.display = ""table-row"";
        }
        document.getElementById(id).style.display = ""none"";
        document.getElementById(""phideY_"" + iden[1]).style.di");
            WriteLiteral(@"splay = ""inline-block"";

    }
    function hidechieldYearly(id) {
        let iden = id.split(""_"");
        let elements = document.getElementsByClassName(iden[1]);
        for (let i = 0; i < elements.length; i++) {
            elements[i].style.display = ""none"";
        }
        document.getElementById(id).style.display = ""none"";
        document.getElementById(""parantY_"" + iden[1]).style.display = ""inline-block"";
    }

</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public IHttpContextAccessor HttpContextAccessor { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<DGRA_V1.Models.CountryList> Html { get; private set; }
    }
}
#pragma warning restore 1591
