#pragma checksum "C:\Data Folder All Data should be here\DGR\Git_Repo_code\Production code\Code UP\DGR_Main\DGRA\DGRA_V1\Views\Home\Dashbord.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "11c641b12695bea0b6bb5a4fe5f040317f8a20b6"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Dashbord), @"mvc.1.0.view", @"/Views/Home/Dashbord.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Data Folder All Data should be here\DGR\Git_Repo_code\Production code\Code UP\DGR_Main\DGRA\DGRA_V1\Views\_ViewImports.cshtml"
using DGRA_V1;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Data Folder All Data should be here\DGR\Git_Repo_code\Production code\Code UP\DGR_Main\DGRA\DGRA_V1\Views\_ViewImports.cshtml"
using DGRA_V1.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "C:\Data Folder All Data should be here\DGR\Git_Repo_code\Production code\Code UP\DGR_Main\DGRA\DGRA_V1\Views\Home\Dashbord.cshtml"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Data Folder All Data should be here\DGR\Git_Repo_code\Production code\Code UP\DGR_Main\DGRA\DGRA_V1\Views\Home\Dashbord.cshtml"
using Microsoft.AspNetCore.Http;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"11c641b12695bea0b6bb5a4fe5f040317f8a20b6", @"/Views/Home/Dashbord.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"aa9fc0f0a035817cf8f1fc535e299e80b45b9453", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Dashbord : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/fontawesome-free/css/all.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/daterangepicker/daterangepicker.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables-bs4/css/dataTables.bootstrap4.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables-responsive/css/responsive.bootstrap4.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/multiple-select/dist/multiple-select.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables-buttons/css/buttons.bootstrap4.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/dist/css/adminlte.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_8 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/img/image010.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_9 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("width", new global::Microsoft.AspNetCore.Html.HtmlString("60"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_10 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("height", new global::Microsoft.AspNetCore.Html.HtmlString("60"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_11 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/img/image002.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_12 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("width", new global::Microsoft.AspNetCore.Html.HtmlString("40"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_13 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("height", new global::Microsoft.AspNetCore.Html.HtmlString("40"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_14 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/img/image019.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_15 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/img/image020.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_16 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/jquery/jquery.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_17 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/moment/moment.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_18 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/dist/js/comman.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_19 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/daterangepicker/daterangepicker.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_20 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/tempusdominus-bootstrap-4/js/tempusdominus-bootstrap-4.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_21 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/summernote/summernote-bs4.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_22 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/chart.js/Chart.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_23 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/multiple-select/dist/multiple-select.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
            WriteLiteral("\r\n");
#nullable restore
#line 6 "C:\Data Folder All Data should be here\DGR\Git_Repo_code\Production code\Code UP\DGR_Main\DGRA\DGRA_V1\Views\Home\Dashbord.cshtml"
  
    ViewData["Title"] = "Home Page";

#line default
#line hidden
#nullable disable
            WriteLiteral("<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700&display=fallback\">\r\n<!-- Font Awesome -->\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "11c641b12695bea0b6bb5a4fe5f040317f8a20b613329", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<!-- daterange picker -->\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "11c641b12695bea0b6bb5a4fe5f040317f8a20b614474", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<!-- DataTables -->\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "11c641b12695bea0b6bb5a4fe5f040317f8a20b615613", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "11c641b12695bea0b6bb5a4fe5f040317f8a20b616729", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "11c641b12695bea0b6bb5a4fe5f040317f8a20b617845", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "11c641b12695bea0b6bb5a4fe5f040317f8a20b618960", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
<!-- dropdown search -->
<link href=""https://unpkg.com/multiple-select@1.5.2/dist/multiple-select.min.css"" rel=""stylesheet"">
<script src=""https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js""></script>
<script src=""https://unpkg.com/multiple-select@1.5.2/dist/multiple-select.min.js""></script>
<style>
    .d-
    tooltip {
        position: relative;
        display: inline-block;
        border-bottom: 1px dotted black;
    }

    .d-tooltip .d-tooltiptext {
        visibility: hidden;
        width: 80px;
        background-color: black;
        text-align: center;
        border-radius: 6px;
        padding: 0px 0;
        /* Position the tooltip */
        position: absolute;
        z-index: 1;
        margin-top: 21px;
        margin-left: -60px;
        border: 1px solid;
    }

    .d-tooltip:hover .d-tooltiptext {
        visibility: visible;
    }

    select {
        width: 50%;
        height:36px;
    }
</style>
");
#nullable restore
#line 55 "C:\Data Folder All Data should be here\DGR\Git_Repo_code\Production code\Code UP\DGR_Main\DGRA\DGRA_V1\Views\Home\Dashbord.cshtml"
  
    string windSiteList = "";
    string solarSiteList = "";



#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
#nullable restore
#line 62 "C:\Data Folder All Data should be here\DGR\Git_Repo_code\Production code\Code UP\DGR_Main\DGRA\DGRA_V1\Views\Home\Dashbord.cshtml"
 if (@HttpContextAccessor.HttpContext.Session.GetString("role") != "Admin")
{
    var usermodel = JsonConvert.DeserializeObject<UserAccess>(@HttpContextAccessor.HttpContext.Session.GetString("UserAccess"));
    for (int i = 0; i < @usermodel.access_list.Count; i++)
    {

        if (@usermodel.access_list[i].page_type == 3 && @usermodel.access_list[i].site_type == 1)
        {
            windSiteList += @usermodel.access_list[i].identity.ToString() + ",";
        }
        if (@usermodel.access_list[i].page_type == 3 && @usermodel.access_list[i].site_type == 2)
        {
            solarSiteList += @usermodel.access_list[i].identity.ToString() + ",";
        }


    }
}

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "11c641b12695bea0b6bb5a4fe5f040317f8a20b622323", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_7);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
<div class=""content-wrapper"">
    <section class=""content-header"">
    </section>


    <section class=""content"">
        <div class=""card"">
            <div class=""card-header"">
                <h3 class=""card-title text-center"">Dashboard</h3>

                <!--<div class=""card-tools"">
                    <button type=""button"" class=""btn btn-tool"" data-card-widget=""collapse"" title=""Collapse"">
                        <i class=""fas fa-minus""></i>
                    </button>
                    <button type=""button"" class=""btn btn-tool"" data-card-widget=""remove"" title=""Remove"">
                        <i class=""fas fa-times""></i>
                    </button>
                </div>-->
            </div>
            <div class=""card-body"">
                <div class=""row"" style=""margin-top:-0.5rem;"">
                    <div class=""col-sm-1""></div>
                    <div class=""col-sm-1"">
                        <div class=""form-group row"">
                            <label clas");
            WriteLiteral(@"s=""col-form-label text-right"">FY : &nbsp;&nbsp;&nbsp; <span id=""fyearlebel""></span> </label>
                            <!--<select class=""form-control  col-sm-8"" id=""fy"" name=""fy"" value="""">
                <option value="""">Please select </option>
            </select>-->
                        </div>
                    </div>

                    <div class=""col-sm-3"">
                        <div class=""form-group"">
                            <div class=""row"">
                                <label class=""col-sm-4 col-form-label text-right"">Wind Site : </label>
                                <select class=""form-control multi-select col-sm-8"" id=""wind_site"" name=""wind_site"" multiple></select>
                            </div>
                        </div>
                    </div>
                    <div class=""col-sm-1""></div>
                    <div class=""col-sm-3"">
                        <div class=""form-group"">
                            <div class=""row"">
                 ");
            WriteLiteral(@"               <label class=""col-sm-4 col-form-label text-right"">Solar Site : </label>
                                <select class=""form-control multi-select col-sm-8"" id=""solar_site"" name=""solar_site"" multiple></select>
                            </div>
                        </div>
                    </div>

                    <div class=""col-sm-2 "" style=""margin-left: 15px;"">

                        <button type=""button"" class=""btn btn-block btn-primary"" onclick=""GetReport();"" style="" width: 5rem;"">Search</button>
                    </div>
                    <div class=""col-sm-2""></div>
                </div>
                <hr style=""margin-top: -0.5rem;"">
                    <div class=""row"">
                        <div class=""col-sm-6"">
                        <div class=""card tbl-head"" style=""max-height: 165px; height: 165px; width: 100%; padding: 0.5rem 1rem 0 0; border-radius: 3rem;"">
                                <table style=""border-collapse: collapse; width: 100%;"">
 ");
            WriteLiteral(@"                                   <tbody>
                                        <tr style=""border-bottom:2px solid lightgray"">
                                            <td rowspan=""2"">
                                                <div style=""width: 70%; float: left; text-align: center;"">
                                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "11c641b12695bea0b6bb5a4fe5f040317f8a20b627079", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_8);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_9);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_10);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                                                    <br><br><span>Wind <br><span id=""total_mw""> (0 MW)</span></span>
                                                </div>
                                                <div style=""width: 30%; float: left;"">
                                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "11c641b12695bea0b6bb5a4fe5f040317f8a20b628594", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_11);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_12);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                                                </div>
                                            </td>
                                            <td>
                                                <span style=""font-size:14px"" class=""d-tooltip"">
                                                    Last Day Energy
                                                    <span class=""d-tooltiptext"" id=""w_tar_enrgy""><b>0</b> MWH</span>
                                                </span><br>
                                                <span style=""font-size:15px"" id=""lastday_enrgy""><b> 0</b></span>
                                                <span style=""font-size:12px"">MWh</span><br>
                                                <span style=""font-size:12px"" id=""lastday_enrgy_var"">(0 %)</span><br>
                                            </td>
                                            <td>
                                                <span style=""font-size:14px"" class=""d-tooltip""");
            WriteLiteral(@">
                                                    MTD Energy
                                                    <span class=""d-tooltiptext"" id=""w_m_tar_enrgy""><b>0</b> GWh</span>
                                                </span><br>
                                                <span style=""font-size:15px"" id=""manthly_enrgy""><b>0</b></span>
                                                <span style=""font-size:12px"">GWh</span><br>
                                                <span style=""font-size:12px"" id=""manthly_enrgy_var"">(0 %)</span><br>
                                            </td>
                                            <td>
                                                <span style=""font-size:14px"" class=""d-tooltip"">
                                                    YTD Energy
                                                    <span class=""d-tooltiptext"" id=""w_y_tar_enrgy""><b>0</b> GWh</span>
                                                </span><br>
         ");
            WriteLiteral(@"                                       <span style=""font-size:15px"" id=""yearly_enrgy""><b>0</b></span>
                                                <span style=""font-size:12px"">GWh</span><br>
                                                <span style=""font-size:12px"" id=""yearly_enrgy_var"">(0 %)</span><br>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>
                                                <span style=""font-size:14px"" class=""d-tooltip"">
                                                    Last Day Wind Speed
                                                    <span class=""d-tooltiptext"" id=""w_ws_tar""><b>0</b> m/s</span>
                                                </span><br>
                                                <span style=""font-size:15px"" id=""lastday_wspeed""><b>0</b></span>
                                                <span sty");
            WriteLiteral(@"le=""font-size:12px"">m/s</span><br>
                                                <span style=""font-size:12px"" id=""lastday_wspeed_var"">(%)</span><br>
                                            </td>
                                            <td>
                                                <span style=""font-size:14px"" class=""d-tooltip"">
                                                    MTD Wind Speed
                                                    <span class=""d-tooltiptext"" id=""w_ws_tar_m""><b>0</b> m/s</span>
                                                </span><br>
                                                <span style=""font-size:15px"" id=""monthly_wspeed""><b>0</b></span>
                                                <span style=""font-size:12px"">m/s</span><br>
                                                <span style=""font-size:12px"" id=""monthly_wspeed_var"">(0 %)</span><br>
                                            </td>
                                            <td>
");
            WriteLiteral(@"                                                <span style=""font-size:14px"" class=""d-tooltip"">
                                                    YTD Wind Speed
                                                    <span class=""d-tooltiptext"" id=""w_ws_tar_y""><b>0</b> m/s</span>
                                                </span><br>
                                                <span style=""font-size:15px"" id=""yearly_wspeed""><b>0</b></span>
                                                <span style=""font-size:12px"">m/s</span><br>
                                                <span style=""font-size:12px"" id=""yearly_wspeed_var"">(0 %)</span><br>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>

                                <!-- <img src=""~/Content/img/image002.png"" />-->
                            </div>
                        </div>
                   ");
            WriteLiteral(@"     <div class=""col-sm-6"">
                        <div class=""card tbl-head"" style=""max-height: 165px; height: 165px; width: 100%; padding: 0.5rem 1rem 0 0; border-radius: 3rem;"">
                                <table style=""border-collapse: collapse; width: 100%;"">
                                    <tbody>
                                        <tr style=""border-bottom:2px solid lightgray"">
                                            <td rowspan=""2"">
                                                <div style=""width: 70%; float: left; text-align: center;"">
                                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "11c641b12695bea0b6bb5a4fe5f040317f8a20b635823", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_9);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_10);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                                                    <br><span>Solar <br><span id=""total_ac_mw""> (0 MW)</span></span>
                                                </div>
                                                <div style=""width: 30%; float: left;"">
                                                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "11c641b12695bea0b6bb5a4fe5f040317f8a20b637339", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_12);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                                                </div>
                                            </td>
                                            <td>
                                                <span style=""font-size:14px"" class=""d-tooltip"">
                                                    Last Day Energy
                                                    <span class=""d-tooltiptext"" id=""s_l_tar_energy""><b>0</b> MWh</span>
                                                </span><br>
                                                <span style=""font-size:15px"" id=""lastday_solar_enrgy""><b>0</b></span>
                                                <span style=""font-size:12px"">MWh</span><br>
                                                <span style=""font-size:12px"" id=""lastday_solar_enrgy_var"">(0 %)</span><br>

                                            </td>
                                            <td>
                                                <span style=""font-size:14px"" c");
            WriteLiteral(@"lass=""d-tooltip"">
                                                    MTD Energy
                                                    <span class=""d-tooltiptext"" id=""s_m_tar_energy""><b>0</b> GWh</span>
                                                </span><br>
                                                <span style=""font-size:15px"" id=""monthly_solar_enrgy""><b>0</b></span>
                                                <span style=""font-size:12px"">GWh</span><br>
                                                <span style=""font-size:12px"" id=""monthly_solar_enrgy_var"">(0 %)</span><br>
                                            </td>
                                            <td>
                                                <span style=""font-size:14px"" class=""d-tooltip"">
                                                    YTD Energy
                                                    <span class=""d-tooltiptext"" id=""s_y_tar_energy""><b>0</b> GWh</span>
                                        ");
            WriteLiteral(@"        </span><br>
                                                <span style=""font-size:15px"" id=""yearly_solar_enrgy""><b>0</b></span>
                                                <span style=""font-size:12px"">GWh</span><br>
                                                <span style=""font-size:12px"" id=""yearly_solar_enrgy_var"">(0 %)</span><br>
                                            </td>
                                        </tr>

                                        <tr>
                                            <td>
                                                <span style=""font-size:14px"" class=""d-tooltip"">
                                                    Last Day IR
                                                    <span class=""d-tooltiptext"" id=""s_l_tar_ir""><b>0</b> kWh/m<sup>2</sup></span>
                                                </span><br>
                                                <span style=""font-size:15px"" id=""lastday_ir""><b>0</b></span>
         ");
            WriteLiteral(@"                                       <span style=""font-size:12px"">kWh/m<sup>2</sup></span><br>
                                                <span style=""font-size:12px"" id=""lastday_ir_var"">(0 %)</span><br>

                                            </td>
                                            <td>
                                                <span style=""font-size:14px"" class=""d-tooltip"">
                                                    MTD IR
                                                    <span class=""d-tooltiptext"" id=""s_m_tar_ir""><b>0</b> kWh/m<sup>2</sup></span>
                                                </span><br>
                                                <span style=""font-size:15px"" id=""monthly_ir""><b>0</b></span>
                                                <span style=""font-size:12px"">kWh/m<sup>2</sup></span><br>
                                                <span style=""font-size:12px"" id=""monthly_ir_var"">(0 %)</span><br>
                           ");
            WriteLiteral(@"                 </td>
                                            <td>
                                                <span style=""font-size:14px"" class=""d-tooltip"">
                                                    YTD IR
                                                    <span class=""d-tooltiptext"" id=""s_y_tar_ir""><b>0</b> kWh/m<sup>2</sup></span>
                                                </span><br>
                                                <span style=""font-size:15px"" id=""yearly_ir""><b>0</b></span>
                                                <span style=""font-size:12px"">kWh/m<sup>2</sup></span><br>
                                                <span style=""font-size:12px"" id=""yearly_ir_var"">(0 %)</span><br>

                                            </td>
                                        </tr>
                                    </tbody>
                                </table>


                            </div>
                        </div>
           ");
            WriteLiteral(@"         </div>
                <hr style=""margin-top:-0.5rem"">
                    <div class=""card-header"">
                        <h3 class=""card-title text-center"">Generation Trend</h3>
                    </div>
                    <br>
                <div class=""row"" style=""margin-top:-1rem; margin-bottom:-1rem;"">
                        <div class=""col-sm-4"">
                            <div class=""form-group row"">
                                <div class=""col-sm-6"">
                                    <div class=""custom-control custom-radio "">
                                        <input class=""custom-control-input"" type=""radio"" id=""customRadio1"" name=""customRadio"" value=""1"" onclick=""chartSelection(1)"" checked>
                                        <label for=""customRadio1"" class=""custom-control-label"">Last 10 Days</label>
                                    </div>
                                </div>
                                <div class=""col-sm-6"">
                    ");
            WriteLiteral(@"                <div class=""custom-control custom-radio "">
                                        <input class=""custom-control-input"" type=""radio"" id=""customRadio2"" name=""customRadio"" value=""2"" onclick=""chartSelection(2)"">
                                        <label for=""customRadio2"" class=""custom-control-label"">Monthly</label>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class=""col-sm-8"">
                        </div>
                    </div>
                    <hr>
                    <div class=""row"">
                        <div class=""col-sm-6"">

                        <canvas id=""energy_wind"" style=""min-height: 400px; height: 400px; max-height: 400px; max-width: 90%; width: 540px; margin-top: -1rem ""></canvas>
                    </div>
                    <div class=""col-sm-6"">

                        <canvas id=""energy_solar"" style=""min-height");
            WriteLiteral(": 400px; height: 400px; max-height: 400px; max-width: 90%; width: 540px; margin-top: -1rem \"></canvas>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n\r\n                </div>\r\n\r\n\r\n    </section>\r\n\r\n</div>\r\n<!-- /.content-wrapper -->\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "11c641b12695bea0b6bb5a4fe5f040317f8a20b646375", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js\"></script>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "11c641b12695bea0b6bb5a4fe5f040317f8a20b647510", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_17);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "11c641b12695bea0b6bb5a4fe5f040317f8a20b648551", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "11c641b12695bea0b6bb5a4fe5f040317f8a20b649592", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "11c641b12695bea0b6bb5a4fe5f040317f8a20b650941", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_20);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "11c641b12695bea0b6bb5a4fe5f040317f8a20b651986", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_21);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "11c641b12695bea0b6bb5a4fe5f040317f8a20b653031", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_22);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "11c641b12695bea0b6bb5a4fe5f040317f8a20b654072", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_23);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js@3.0.0/dist/chart.min.js\"></script>\r\n<script src=\"https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.0.0-rc\"></script>\r\n\r\n<script type=\"text/javascript\">\r\n    var userRole = \"");
#nullable restore
#line 359 "C:\Data Folder All Data should be here\DGR\Git_Repo_code\Production code\Code UP\DGR_Main\DGRA\DGRA_V1\Views\Home\Dashbord.cshtml"
               Write(Html.Raw(@HttpContextAccessor.HttpContext.Session.GetString("role")));

#line default
#line hidden
#nullable disable
            WriteLiteral("\";\r\n    //var userName = \"");
#nullable restore
#line 360 "C:\Data Folder All Data should be here\DGR\Git_Repo_code\Production code\Code UP\DGR_Main\DGRA\DGRA_V1\Views\Home\Dashbord.cshtml"
                 Write(Html.Raw(@HttpContextAccessor.HttpContext.Session.GetString("DisplayName")));

#line default
#line hidden
#nullable disable
            WriteLiteral("\";\r\n    var UserID = getCookie(\'userid\');\r\n    console.log(\"User Role :::\" + userRole);\r\n    var wsite_list = \"");
#nullable restore
#line 363 "C:\Data Folder All Data should be here\DGR\Git_Repo_code\Production code\Code UP\DGR_Main\DGRA\DGRA_V1\Views\Home\Dashbord.cshtml"
                 Write(Html.Raw(windSiteList.TrimEnd(',')));

#line default
#line hidden
#nullable disable
            WriteLiteral("\";\r\n    var ssite_list = \"");
#nullable restore
#line 364 "C:\Data Folder All Data should be here\DGR\Git_Repo_code\Production code\Code UP\DGR_Main\DGRA\DGRA_V1\Views\Home\Dashbord.cshtml"
                 Write(Html.Raw(solarSiteList.TrimEnd(',')));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""";
    var chartTitle = """";
    var fyear = """";
    var fdate = """";
    var monthdate = """";
    var month = """";
    var displaychart = {""wind"":false,""solar"":false};
    //var tendays = """";
    window.onload = function () {
        updateLoginLog(UserID, ""login"");
        getYear();
        var today = new Date();
        fyear = getFinancialYear(today);
        fdate = getFinancialYearDate(fyear);
        monthdate = GetMonthDate(today);
        month = today.getMonth() + 1;
        tendays = GetLastTendays();

        document.getElementById(""fyearlebel"").innerHTML = fyear;
        if (userRole == ""User"" && !wsite_list && !ssite_list) {
            $('#wind_site,#solar_site').multipleSelect();
             return;
        }
        else {
            if (userRole == ""User"") {
                if (ssite_list) {
                    if (!wsite_list) {
                        $('#wind_site').multipleSelect();
                    }

                    getSolarSite();

             ");
            WriteLiteral(@"       displaychart.solar = true;
                }
                if (wsite_list) {
                    if (!ssite_list) {
                        $('#solar_site').multipleSelect();
                    }

                    displaychart.wind = true;

                    getWindSite();
                }
            } else {
                getWindSite();
                getSolarSite();
                displaychart.wind = true;
                displaychart.solar = true;

            }
        }
        //if (userRole == ""User"" &&  !ssite_list) {
           // $('#solar_site').multipleSelect();
            //return;
        //}




    }

    //updateLoginLog()
    function updateLoginLog(UserID, userRole) {
        console.log(""Updating Login Log Id:"" + UserID + "" role :"" + userRole);
        $.ajax({
            type: ""GET"",
            url: '");
#nullable restore
#line 430 "C:\Data Folder All Data should be here\DGR\Git_Repo_code\Production code\Code UP\DGR_Main\DGRA\DGRA_V1\Views\Home\Dashbord.cshtml"
             Write(Url.Action("UpdateLoginLog", "Home"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?userId=' + UserID + ""&userRole="" + userRole ,
            //url: ""/Dashboard/GetFinacialYear"",
            contentType: ""application/json; charset=utf-8"",
            //data: '{""countryname"":""' + selcountry + '""}',
            datatype: ""html"",
            success: function (result, status, xhr) {
                consol.log(""Result "" + result + "" status :"" + status);
            }
        });
    }

    function getYear() {
        $.ajax({
            type: ""GET"",
            url: '");
#nullable restore
#line 444 "C:\Data Folder All Data should be here\DGR\Git_Repo_code\Production code\Code UP\DGR_Main\DGRA\DGRA_V1\Views\Home\Dashbord.cshtml"
             Write(Url.Action("GetFinacialYear", "Dashboard"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
            //url: ""/Dashboard/GetFinacialYear"",
            contentType: ""application/json; charset=utf-8"",
            //data: '{""countryname"":""' + selcountry + '""}',
            datatype: ""html"",
            success: function (result, status, xhr) {
                var options = """";
                options += '<option value="""">Select Financial Year</option>';
                for (var i = 0; i < result.length; i++) {
                    if (result[i].financial_year == fyear) {
                        options += '<option value=""' + result[i].financial_year + '"" selected>' + result[i].financial_year + '</option>';
                    }
                    else {
                        options += '<option value=""' + result[i].financial_year + '"">' + result[i].financial_year + '</option>';
                    }

                }
                $(""#fy"").html(options);
                $('select#fy').multipleSelect({
                    filter: true
                })
            }
    ");
            WriteLiteral("    });\r\n    }\r\n    function getWindSite() {\r\n        //let wSiteList=\"");
#nullable restore
#line 469 "C:\Data Folder All Data should be here\DGR\Git_Repo_code\Production code\Code UP\DGR_Main\DGRA\DGRA_V1\Views\Home\Dashbord.cshtml"
                    Write(Html.Raw(windSiteList.TrimEnd(',')));

#line default
#line hidden
#nullable disable
            WriteLiteral("\";\r\n\r\n        var site_ids = \"");
#nullable restore
#line 471 "C:\Data Folder All Data should be here\DGR\Git_Repo_code\Production code\Code UP\DGR_Main\DGRA\DGRA_V1\Views\Home\Dashbord.cshtml"
                   Write(Html.Raw(windSiteList.TrimEnd(',')));

#line default
#line hidden
#nullable disable
            WriteLiteral("\";\r\n\r\n\r\n        var wind_total_mw = 0;\r\n        $.ajax({\r\n            type: \"GET\",\r\n           // url: \"/Dashboard/GetWindSiteList\",\r\n            url: \'");
#nullable restore
#line 478 "C:\Data Folder All Data should be here\DGR\Git_Repo_code\Production code\Code UP\DGR_Main\DGRA\DGRA_V1\Views\Home\Dashbord.cshtml"
             Write(Url.Action("GetWindSiteList", "Dashboard"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?sitelist=' + site_ids,
            contentType: ""application/json; charset=utf-8"",
            datatype: ""html"",
            success: function (result, status, xhr) {
               // console.log(result);
                var options = """";
                for (var i = 0; i < result.length; i++) {
                    wind_total_mw += result[i].total_mw;
                    options += '<option value=""' + result[i].site_master_id + '"">' + result[i].site + '</option>';
                }
                $(""#wind_site"").html(options);
                $('select#wind_site').multipleSelect({
                    ""minimumCountSelected"": 2,
                    ""placeholder"": ""Select Wind Site(s)"",
                    filter:true
                });

                $('#wind_site').multipleSelect(""setSelects"", site_ids.split("",""));
                document.getElementById(""total_mw"").innerHTML = ""("" + wind_total_mw.toFixed(0) + "" MW)"";
                GetWindDataByLastDay();
                //GetW");
            WriteLiteral(@"indDataByCurrentMonth();
                //GetWindDataByYearly();
                //if ($('#customRadio1').is(':checked')) {
                chartSelection(1);

               // }
            }
        });
    }
    function getSolarSite() {
        var site_ids = """);
#nullable restore
#line 508 "C:\Data Folder All Data should be here\DGR\Git_Repo_code\Production code\Code UP\DGR_Main\DGRA\DGRA_V1\Views\Home\Dashbord.cshtml"
                   Write(Html.Raw(solarSiteList.TrimEnd(',')));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""";
        /*if (userRole == ""User"" && !site_ids) {
            $(""#solar_site"").html('');
            $('#solar_site').multipleSelect({
                ""minimumCountSelected"": 2,
                ""placeholder"": ""Select Wind Site(s)"",
            });
            return;
        }*/
        var solar_total_mw = 0;
        $.ajax({
            type: ""GET"",
            url: '");
#nullable restore
#line 520 "C:\Data Folder All Data should be here\DGR\Git_Repo_code\Production code\Code UP\DGR_Main\DGRA\DGRA_V1\Views\Home\Dashbord.cshtml"
             Write(Url.Action("GetSolarSiteList", "Dashboard"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?sitelist=' + site_ids,
            contentType: ""application/json; charset=utf-8"",
            datatype: ""html"",
            success: function (result, status, xhr) {
               // console.log(result);
                var options = """";

                for (var i = 0; i < result.length; i++) {
                    solar_total_mw += result[i].ac_capacity;
                    options += '<option value=""' + result[i].site_master_solar_id + '"">' + result[i].site + '</option>';
                }
                console.log(options);
                $(""#solar_site"").html(options);
                $('select#solar_site').multipleSelect({
                   ""minimumCountSelected"": 2,
                    ""placeholder"": ""Select Solar Site(s)"",
                    filter: true
                });
                $('#solar_site').multipleSelect(""setSelects"", site_ids.split("",""));
                document.getElementById(""total_ac_mw"").innerHTML = ""("" + solar_total_mw.toFixed(0) + "" MW)"";
      ");
            WriteLiteral(@"          GetSolarDataByLastDay();
               // GetSolarDataByCurrentMonth();
                //GetSolarDataByYearly();
                chartSelection(1);

            }
        });
    }

    function GetReport() {
       
        if (userRole == ""User"" && !wsite_list && !ssite_list) {
            return;
        }
        else {
            if (userRole == ""User"") {
                if (ssite_list) {
                    GetSolarDataByLastDay();
                    if ($(""#customRadio1"").is("":checked"")) {
                        chartTitle = ""Last 10 Days"";
                        setTimeout(GetSolarData(tendays, chartTitle), 5000);
                    }
                    if ($(""#customRadio2"").is("":checked"")) {
                        chartTitle = ""Monthly"";
                        setTimeout(GetSolarData(monthdate, chartTitle)
                            , 5000);
                    }
                }
                if (wsite_list) {
                    GetWindDataByLas");
            WriteLiteral(@"tDay();
                    
                    if ($(""#customRadio1"").is("":checked"")) {
                        chartTitle = ""Last 10 Days"";
                        GetWindChartData(tendays, chartTitle);
                    }
                    if ($(""#customRadio2"").is("":checked"")) {
                        chartTitle = ""Monthly"";
                        GetWindChartData(monthdate, chartTitle);
                    }
                }
            }
            else {
                GetWindDataByLastDay();
               
                GetSolarDataByLastDay();
                
                if ($(""#customRadio1"").is("":checked"")) {
                    chartTitle = ""Last 10 Days"";
                    GetWindChartData(tendays, chartTitle);
                    GetSolarData(tendays, chartTitle);
                }
                if ($(""#customRadio2"").is("":checked"")) {
                    chartTitle = ""Monthly"";
                    GetWindChartData(monthdate, chartTitle);
          ");
            WriteLiteral(@"          setTimeout(GetSolarData(monthdate, chartTitle)
                        , 5000);
                }
            }
        }

        //GetWindChartData(tendays, chartTitle);
       // GetSolarData(tendays, chartTitle);

    }
    function GetWindAndSolarMW() {
        let wsite = """";
        let ssite = """";
        $('select#wind_site option:selected').each(function () {
            wsite += $(this).val() + "","";
            // console.log($(this).val());

        });
        wsite = wsite != """" ? wsite.slice(0, -1) : wsite;
        $('select#solar_site option:selected').each(function () {
            ssite += $(this).val() + "","";
            // console.log($(this).val());

        });
        ssite = ssite != """" ? ssite.slice(0, -1) : ssite;
        $.ajax({
            type: ""GET"",
            url: '");
#nullable restore
#line 621 "C:\Data Folder All Data should be here\DGR\Git_Repo_code\Production code\Code UP\DGR_Main\DGRA\DGRA_V1\Views\Home\Dashbord.cshtml"
             Write(Url.Action("GetTotalMWforDashbord", "Dashboard"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?w_site=' + wsite + '&s_site=' + ssite,
            contentType: ""application/json; charset=utf-8"",
            datatype: ""html"",
            success: function (result, status, xhr) {
               // console.log(result);
                var options = """";

                for (var i = 0; i < result.length; i++) {
                    solar_total_mw += result[i].ac_capacity;

                }

                document.getElementById(""total_ac_mw"").innerHTML = ""("" + solar_total_mw.toFixed(0) + "" MW)"";

             }
        });
    }

    // Wind call
    function GetWindDataByLastDay() {

        let site = """";
         $('select#wind_site option:selected').each(function () {
            site += $(this).val() + "","";
           // console.log($(this).val());

         });
        site = site != """" ? site.slice(0, -1) : site;
        //var FY = $('select#fy option:selected').val();
        var FY = fyear;
        //console.log(""Hello""+FY);
        var date = GetPreviousDate(");
            WriteLiteral(");\r\n        //console.log(\"PeviousDate\" + date);\r\n        $.ajax({\r\n            type: \"GET\",\r\n            url: \'");
#nullable restore
#line 656 "C:\Data Folder All Data should be here\DGR\Git_Repo_code\Production code\Code UP\DGR_Main\DGRA\DGRA_V1\Views\Home\Dashbord.cshtml"
             Write(Url.Action("GetWindDashboardDataByLastDay", "Dashboard"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?FY=' + FY + '&sites=' + site + '&date=' + date,
            //url: ""/Dashboard/GetWindDashboardDataByLastDay?FY="" + FY + ""&sites="" + site + ""&date="" + date,
            contentType: ""application/json; charset=utf-8"",
            //data: '{""countryname"":""' + selcountry + '""}',
            datatype: ""html"",
            success: function (result, status, xhr) {
              // console.log(result);
                if (result.length > 0) {
                    console.log(""Inside if"");
                    var wind_lastday_energy = 0;
                    var wind_lastday_energy_target = 0;
                    var wind_lastday_wspeed = 0;
                    var wind_lastday_wspeed_target = 0;
                    var wcnt = 0;
                    var lastVariant_energy = 0;
                    var lastVariant_wspeed = 0;
                    var total_capacity = 0;
                    var total_capActWind = 0;
                    var total_capTarWind = 0;

                    for (var i = 0;");
            WriteLiteral(@" i < result.length; i++) {
                        wind_lastday_energy += result[i].jmrkwh;
                      //  wind_lastday_wspeed += result[i].wind;
                        wind_lastday_energy_target += result[i].tarkwh/1000000;
                      //  wind_lastday_wspeed_target += result[i].tarwind;
                        total_capacity += result[i].total_mw;
                        total_capActWind += result[i].wind * result[i].total_mw;
                        total_capTarWind += result[i].tarwind * result[i].total_mw ;
                        wcnt++;
                    }

                    console.log(wcnt + """" + total_capacity);
                    if (total_capacity != 0) {
                        wind_lastday_wspeed = total_capActWind / total_capacity;
                        wind_lastday_wspeed_target = total_capTarWind / total_capacity;
                    }
                    

                    if (wind_lastday_energy_target != 0) {
                        lastVa");
            WriteLiteral(@"riant_energy = (((wind_lastday_energy / 1000).toFixed(1) - (wind_lastday_energy_target / 1000).toFixed(1)/ (wind_lastday_energy_target / 1000).toFixed(1))) * 100;
                    }
                    if (wind_lastday_wspeed_target != 0) {
                        lastVariant_wspeed = ((wind_lastday_wspeed - wind_lastday_wspeed_target) / wind_lastday_wspeed_target) * 100;
                    }

                    document.getElementById(""lastday_enrgy"").innerHTML = ""<b>"" + (wind_lastday_energy / 1000).toFixed(1) + ""</b>"";
                    document.getElementById(""lastday_wspeed"").innerHTML = ""<b>"" + wind_lastday_wspeed.toFixed(1) + ""</b>"";

                    document.getElementById(""lastday_enrgy_var"").innerHTML = ""("" + lastVariant_energy.toFixed(1) + "" %)"";
                    document.getElementById(""lastday_wspeed_var"").innerHTML = ""("" + lastVariant_wspeed.toFixed(1) + "" %)"";
                    document.getElementById(""w_tar_enrgy"").innerHTML = ""<b>"" + (wind_lastday_energy_target / 100");
            WriteLiteral(@"0).toFixed(1) + ""</b> MWh"";
                    document.getElementById(""w_ws_tar"").innerHTML = ""<b>"" + wind_lastday_wspeed_target.toFixed(1) + ""</b> m/s"";
                }
                else
                {
                    console.log(""Inside Else"");
                    document.getElementById(""lastday_enrgy"").innerHTML = ""<b>0.0</b>"";
                    document.getElementById(""lastday_wspeed"").innerHTML = ""<b>0.0</b>"";

                    document.getElementById(""lastday_enrgy_var"").innerHTML = ""(0 %)"";
                    document.getElementById(""lastday_wspeed_var"").innerHTML = ""(0 %)"";
                    document.getElementById(""w_tar_enrgy"").innerHTML = ""<b>0.0</b> MWh"";
                    document.getElementById(""w_ws_tar"").innerHTML = ""<b>0.0</b> m/s"";
                }
                GetWindDataByCurrentMonth();


            }
        });
    }


    function GetWindDataByCurrentMonth() {

        let site = """";
        $('select#wind_site option:selected').ea");
            WriteLiteral(@"ch(function () {
            site += $(this).val() + "","";

        });
        site = site != """" ? site.slice(0, -1) : site;
        var startDate = monthdate.startdate;
        var endDate = monthdate.enddate; //GetPreviousDate();//monthdate.enddate;
        //var FY = $('select#fy option:selected').val();
        var FY = fyear;

       // var month = month;
        $.ajax({
            type: ""GET"",
            url: '");
#nullable restore
#line 744 "C:\Data Folder All Data should be here\DGR\Git_Repo_code\Production code\Code UP\DGR_Main\DGRA\DGRA_V1\Views\Home\Dashbord.cshtml"
             Write(Url.Action("GetWindDashboardDataByCurrentMonth", "Dashboard"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?startDate=' + startDate + '&endDate=' + endDate + '&FY=' + FY + '&sites=' + site + '&month=' + month,
            //url: ""/Dashboard/GetWindDashboardDataByCurrentMonth?startDate="" + startDate + ""&endDate="" + endDate + ""&FY="" + FY + ""&sites="" + site + ""&month="" + month,
            contentType: ""application/json; charset=utf-8"",
            //data: '{""countryname"":""' + selcountry + '""}',
            datatype: ""html"",
            success: function (result, status, xhr) {
                if (result.length > 0) {
                    var wind_monthly_energy = 0;
                    var wind_monthly_energy_target = 0;
                    var wind_monthly_wspeed = 0;
                    var wind_monthly_wspeed_target = 0;
                    var monthly_var_energy = 0;
                    var monthly_var_wspeed = 0;
                    var total_capacity = 0;
                    var total_capActWind = 0;
                    var total_capTarWind = 0;

                    var wcnt = 0;
        ");
            WriteLiteral(@"            for (var i = 0; i < result.length; i++) {
                        wind_monthly_energy += result[i].jmrkwh;
                      //  wind_monthly_wspeed += result[i].wind;
                        wind_monthly_energy_target += result[i].tarkwh;
                       // wind_monthly_wspeed_target += result[i].tarwind;
                        total_capacity += result[i].total_mw;
                        total_capActWind += result[i].wind * result[i].total_mw;
                        total_capTarWind += result[i].tarwind * result[i].total_mw;
                        
                        wcnt++;
                    }
                    

                    console.log(wcnt);
                    if (total_capacity != 0) {
                        wind_monthly_wspeed = total_capActWind / total_capacity;
                        wind_monthly_wspeed_target = total_capTarWind / total_capacity;
                    }
                    //console.log(total_capacity);
                  ");
            WriteLiteral(@"  //console.log(wind_monthly_wspeed);
                    //console.log(wind_monthly_wspeed_target);

                    if (wind_monthly_energy_target != 0) {
                        monthly_var_energy = (((wind_monthly_energy / 1000000).toFixed(1) - (wind_monthly_energy_target / 1000000).toFixed(1)) / (wind_monthly_energy_target / 1000000).toFixed(1))*100;
                    }
                    if (wind_monthly_wspeed_target != 0) {
                        monthly_var_wspeed = ((wind_monthly_wspeed.toFixed(1) - wind_monthly_wspeed_target.toFixed(1)) / wind_monthly_wspeed_target.toFixed(1))* 100;
                    }
                   
                    document.getElementById(""manthly_enrgy"").innerHTML = ""<b>"" + (wind_monthly_energy / 1000000).toFixed(1) + ""</b>"";
                    document.getElementById(""monthly_wspeed"").innerHTML = ""<b>"" + wind_monthly_wspeed.toFixed(1) + ""</b>"";

                    document.getElementById(""manthly_enrgy_var"").innerHTML = ""("" + monthly_var_energy.");
            WriteLiteral(@"toFixed(1) + "" %)"";
                    document.getElementById(""monthly_wspeed_var"").innerHTML = ""("" + wind_monthly_wspeed_target.toFixed(1) + "" %)"";
                    document.getElementById(""w_m_tar_enrgy"").innerHTML = ""<b>"" + (wind_monthly_energy_target / 1000000).toFixed(1) + ""</b> GWh"";
                    document.getElementById(""w_ws_tar_m"").innerHTML = ""<b>"" + (wind_monthly_wspeed_target).toFixed(1) + ""</b> m/s"";
                }
                else {
                    document.getElementById(""manthly_enrgy"").innerHTML = ""<b>0.0</b>"";
                    document.getElementById(""monthly_wspeed"").innerHTML = ""<b>0.0</b>"";

                    document.getElementById(""manthly_enrgy_var"").innerHTML = ""(0 %)"";
                    document.getElementById(""monthly_wspeed_var"").innerHTML = ""(0 %)"";
                    document.getElementById(""w_m_tar_enrgy"").innerHTML = ""<b>0.0</b> GWh"";
                    document.getElementById(""w_ws_tar_m"").innerHTML = ""<b>0.0</b> m/s"";
              ");
            WriteLiteral(@"  }

                GetWindDataByYearly();
            }
        });
    }

    function GetWindDataByYearly() {
        let site = """";
        $('select#wind_site option:selected').each(function () {
            site += $(this).val() + "","";

        });
        site = site != """" ? site.slice(0, -1) : site;
        var startDate = fdate.startdate;
        var endDate = GetPreviousDate();//fdate.enddate;
        //var FY = $('select#fy option:selected').val();
        var FY = fyear;

        $.ajax({
            type: ""GET"",
            //url: ""/Dashboard/GetWindDashboardDataByYearly?startDate="" + startDate + ""&endDate="" + endDate + ""&FY="" + FY + ""&sites="" + site,
            url: '");
#nullable restore
#line 829 "C:\Data Folder All Data should be here\DGR\Git_Repo_code\Production code\Code UP\DGR_Main\DGRA\DGRA_V1\Views\Home\Dashbord.cshtml"
             Write(Url.Action("GetWindDashboardDataByYearly", "Dashboard"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?startDate=' + startDate + '&endDate=' + endDate + '&FY=' + FY + '&sites=' + site,
            contentType: ""application/json; charset=utf-8"",
            //data: '{""countryname"":""' + selcountry + '""}',
            datatype: ""html"",
            success: function (result, status, xhr) {
                if (result.length > 0) {
                    var wind_yearly_energy = 0;
                    var wind_yearly_wspeed = 0;
                    var wind_yearly_energy_target = 0;
                    var wind_yearly_wspeed_target = 0;
                    var total_capacity = 0;
                    var total_capActWind = 0;
                    var total_capTarWind = 0;

                    var yearly_var_energy = 0;
                    var yearly_var_wspeed = 0;
                    var wcnt = 0;
                    for (var i = 0; i < result.length; i++) {
                        wind_yearly_energy += result[i].jmrkwh;
                        //wind_yearly_wspeed += result[i].wind;
          ");
            WriteLiteral(@"              wind_yearly_energy_target += result[i].tarkwh;
                        //wind_yearly_wspeed_target += result[i].tarwind;
                        total_capacity += result[i].total_mw;
                        total_capActWind += result[i].wind * result[i].total_mw;
                        total_capTarWind += result[i].tarwind * result[i].total_mw;
                        //console.log(result[i].wind);
                        //console.log(result[i].tarwind);

                        wcnt++;
                    }

                    console.log(wcnt);
                    if (total_capacity != 0) {
                        wind_yearly_wspeed = total_capActWind / total_capacity;
                        wind_yearly_wspeed_target = total_capTarWind / total_capacity;
                    }
                    //console.log(total_capacity);
                    //console.log(wind_yearly_wspeed );
                    //console.log(wind_yearly_wspeed_target);

                    if (wind");
            WriteLiteral(@"_yearly_energy_target != 0) {
                        yearly_var_energy = (((wind_yearly_energy / 1000000).toFixed(1) - (wind_yearly_energy_target / 1000000).toFixed(1)) / (wind_yearly_energy_target / 1000000).toFixed(1)) * 100;
                    }
                    if (wind_yearly_wspeed_target != 0) {
                        yearly_var_wspeed = ((wind_yearly_wspeed.toFixed(1) - wind_yearly_wspeed_target.toFixed(1)) / wind_yearly_wspeed_target.toFixed(1)) * 100;
                    }
                    //console.log(result);
                    document.getElementById(""yearly_enrgy"").innerHTML = ""<b>"" + (wind_yearly_energy / 1000000).toFixed(1) + ""</b>"";
                    document.getElementById(""yearly_wspeed"").innerHTML = ""<b>"" + (wind_yearly_wspeed).toFixed(1) + ""</b>"";
                    document.getElementById(""w_y_tar_enrgy"").innerHTML = ""<b>"" + (wind_yearly_energy_target / 1000000).toFixed(1) + ""</b> GWh"";
                    document.getElementById(""w_ws_tar_y"").innerHTML = ""<b>"" + ");
            WriteLiteral(@"(wind_yearly_wspeed_target).toFixed(1) + ""</b> m/s"";

                    document.getElementById(""yearly_enrgy_var"").innerHTML = ""("" + yearly_var_energy.toFixed(1) + "" %)"";
                    document.getElementById(""yearly_wspeed_var"").innerHTML = ""("" + yearly_var_wspeed.toFixed(1) + "" %)"";


                }
                else {
                    document.getElementById(""yearly_enrgy"").innerHTML = ""<b>0.0</b>"";
                    document.getElementById(""yearly_wspeed"").innerHTML = ""<b>0.0</b>"";
                    document.getElementById(""w_y_tar_enrgy"").innerHTML = ""<b>0.0</b> GWh"";
                    document.getElementById(""w_ws_tar_y"").innerHTML = ""<b>0.0</b> m/s"";
                    document.getElementById(""yearly_enrgy_var"").innerHTML = ""(0 %)"";
                    document.getElementById(""yearly_wspeed_var"").innerHTML = ""(0 %)"";
                }


            }
        });
    }



    // Solar call
    function GetSolarDataByLastDay() {
        let solar_site = """);
            WriteLiteral(@""";
        $('select#solar_site option:selected').each(function () {
            solar_site += $(this).val() + "","";
            //console.log($(this).val());

        });
        solar_site = solar_site != """" ? solar_site.slice(0, -1) : solar_site;

        //var FY = $('select#fy option:selected').val();
        var FY = fyear;
        var date = GetPreviousDate();
        $.ajax({
            type: ""GET"",
           // url: ""/Dashboard/GetSolarDashboardDataByLastDay?FY="" + FY + ""&sites="" + solar_site + ""&date="" + date,
            url: '");
#nullable restore
#line 918 "C:\Data Folder All Data should be here\DGR\Git_Repo_code\Production code\Code UP\DGR_Main\DGRA\DGRA_V1\Views\Home\Dashbord.cshtml"
             Write(Url.Action("GetSolarDashboardDataByLastDay", "Dashboard"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?FY=' + FY + '&sites=' + solar_site + '&date=' + date,
            contentType: ""application/json; charset=utf-8"",
            //data: '{""countryname"":""' + selcountry + '""}',
            datatype: ""html"",
            success: function (result, status, xhr) {
                if (result.length > 0) {
                    var lastday_energy = 0;
                    var lastday_ir = 0;
                    var lastday_energy_tar = 0;
                    var lastday_ir_tar = 0;
                    var lastday_var_energy = 0;
                    var lastday_var_ir = 0;
                    var total_capacity = 0;
                    var total_capActIr = 0;
                    var total_capTarIr = 0;
                    var cnt = 0;
                    for (var i = 0; i < result.length; i++) {
                        lastday_energy += result[i].jmrkwh;
                       // lastday_ir += result[i].ir;
                        lastday_energy_tar += result[i].tarkwh;
                      //  ");
            WriteLiteral(@"lastday_ir_tar += result[i].tarIR;
                        total_capacity += result[i].ac_capacity;
                        total_capActIr += result[i].ir * result[i].ac_capacity;
                        total_capTarIr += result[i].tarIR * result[i].ac_capacity;
                        cnt++;
                    }

                    if (total_capacity != 0) {
                        lastday_ir  = total_capActIr / total_capacity;
                        lastday_ir_tar = total_capTarIr / total_capacity;
                    }
                    if (lastday_energy_tar != 0) {
                        lastday_var_energy = (((lastday_energy / 1000).toFixed(1) - (lastday_energy_tar / 1000).toFixed(1)) / (lastday_energy_tar / 1000).toFixed(1)) * 100;
                    }
                    if (lastday_ir_tar != 0) {
                        lastday_var_ir = ((lastday_ir.toFixed(1) - lastday_ir_tar.toFixed(1)) / lastday_ir_tar.toFixed(1)) * 100;
                    }

                    console.l");
            WriteLiteral(@"og(""Actuel IR"" + lastday_ir);
                    console.log(""Tar IR"" + lastday_ir_tar);
                    console.log(""var IR"" + lastday_var_ir);
                    document.getElementById(""lastday_solar_enrgy"").innerHTML = ""<b>"" + ((lastday_energy) / 1000).toFixed(1) + ""</b>"";

                    document.getElementById(""lastday_ir"").innerHTML = ""<b>"" + lastday_ir.toFixed(1) + ""</b>"";

                    document.getElementById(""lastday_solar_enrgy_var"").innerHTML = ""("" + lastday_var_energy.toFixed(1) + "" %)"";
                    document.getElementById(""lastday_ir_var"").innerHTML = ""("" + lastday_var_ir.toFixed(1) + "" %)"";

                    document.getElementById(""s_l_tar_energy"").innerHTML = ""<b>"" + (lastday_energy_tar / 1000).toFixed(1) + ""</b> MWh"";
                    document.getElementById(""s_l_tar_ir"").innerHTML = ""<b>"" + lastday_ir_tar.toFixed(1) + ""</b> kWh/m<sup>2</sup>"";
                }
                else {
                    document.getElementById(""lastday_solar_enr");
            WriteLiteral(@"gy"").innerHTML = ""<b>0.0</b>"";
                    document.getElementById(""lastday_ir"").innerHTML = ""<b>0.0</b>"";
                    document.getElementById(""lastday_solar_enrgy_var"").innerHTML = ""(0 %)"";
                    document.getElementById(""lastday_ir_var"").innerHTML = ""(0 %)"";
                    document.getElementById(""s_l_tar_energy"").innerHTML = ""<b>0.0</b> GWh"";
                    document.getElementById(""s_l_tar_ir"").innerHTML = ""<b>0.0</b> kWh/m<sup>2</sup>"";
                }
                setTimeout(GetSolarDataByCurrentMonth()
                    , 5000);

            }
        });
    }

    function GetSolarDataByCurrentMonth() {

        let solar_site = """";
        $('select#solar_site option:selected').each(function () {
            solar_site += $(this).val() + "","";

        });
        solar_site = solar_site != """" ? solar_site.slice(0, -1) : solar_site;

        var startDate = monthdate.startdate;
        var endDate = monthdate.enddate//GetPreviousDat");
            WriteLiteral(@"e();
        //var FY = $('select#fy option:selected').val();
        var FY = fyear;

        $.ajax({
            type: ""GET"",
            //url: ""/Dashboard/GetSolarDashboardDataByCurrentMonth?startDate="" + startDate + ""&endDate="" + endDate + ""&FY="" + FY + ""&sites="" + solar_site + ""&month="" + month,
            url: '");
#nullable restore
#line 1001 "C:\Data Folder All Data should be here\DGR\Git_Repo_code\Production code\Code UP\DGR_Main\DGRA\DGRA_V1\Views\Home\Dashbord.cshtml"
             Write(Url.Action("GetSolarDashboardDataByCurrentMonth", "Dashboard"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?startDate=' + startDate + '&endDate=' + endDate + '&FY=' + FY + '&sites=' + solar_site + '&month=' + month,
            contentType: ""application/json; charset=utf-8"",
            //data: '{""countryname"":""' + selcountry + '""}',
            datatype: ""html"",
            success: function (result, status, xhr) {
                if (result.length > 0) {
                    var monthly_energy = 0;
                    var monthly_ir = 0;
                    var monthly_energy_tar = 0;
                    var monthly_ir_tar = 0;
                    var monthly_var_energy = 0;
                    var monthly_var_ir = 0;
                    var total_capacity = 0;
                    var total_capActIr = 0;
                    var total_capTarIr = 0;
                    var cnt = 0;
                    for (var i = 0; i < result.length; i++) {
                        monthly_energy += result[i].jmrkwh;
                       // monthly_ir += result[i].ir;
                        monthly_energ");
            WriteLiteral(@"y_tar += result[i].tarkwh;
                       // monthly_ir_tar += result[i].tarIR;
                        total_capacity += result[i].ac_capacity;
                        total_capActIr += result[i].ir * result[i].ac_capacity;
                        total_capTarIr += result[i].tarIR * result[i].ac_capacity;
                        console.log(result[i].ac_capacity);
                        console.log(result[i].ir);
                        console.log(result[i].tarIR);
                        cnt++;
                    }
                    console.log(total_capacity);
                    if (total_capacity != 0) {
                        monthly_ir = total_capActIr / total_capacity;
                        monthly_ir_tar = total_capTarIr / total_capacity;
                    }
                    if (monthly_energy_tar != 0) {
                        monthly_var_energy = (((monthly_energy / 1000000).toFixed(1) - (monthly_energy_tar / 1000000).toFixed(1)) /(monthly_energy_tar / 1000000)");
            WriteLiteral(@".toFixed(1)) * 100;
                    }
                    if (monthly_ir_tar != 0) {
                        monthly_var_ir = ((monthly_ir.toFixed(1) - monthly_ir_tar.toFixed(1)) / monthly_ir_tar.toFixed(1)) * 100;
                    }

                    document.getElementById(""monthly_solar_enrgy"").innerHTML = ""<b>"" + (monthly_energy/ 1000000).toFixed(1) + ""</b>"";
                    document.getElementById(""monthly_ir"").innerHTML = ""<b>"" + monthly_ir.toFixed(1)  + ""</b>"";
                    document.getElementById(""monthly_solar_enrgy_var"").innerHTML = ""("" + monthly_var_energy.toFixed(1) + "" %)"";
                    document.getElementById(""monthly_ir_var"").innerHTML = ""("" + monthly_var_ir.toFixed(1) + "" %)"";
                    document.getElementById(""s_m_tar_energy"").innerHTML = ""<b>"" + (monthly_energy_tar / 1000000).toFixed(1) + ""</b> GWh"";
                    document.getElementById(""s_m_tar_ir"").innerHTML = ""<b>"" + monthly_ir_tar.toFixed(1) + ""</b> kWh/m<sup>2</sup>"";
            ");
            WriteLiteral(@"    }
                else {
                    document.getElementById(""monthly_solar_enrgy"").innerHTML = ""<b>0.0</b>"";
                    document.getElementById(""monthly_ir"").innerHTML = ""<b>0.0</b>"";
                    document.getElementById(""monthly_solar_enrgy_var"").innerHTML = ""(0 %)"";
                    document.getElementById(""monthly_ir_var"").innerHTML = ""(0 %)"";
                    document.getElementById(""s_m_tar_energy"").innerHTML = ""<b>0.0</b> GWh"";
                    document.getElementById(""s_m_tar_ir"").innerHTML = ""<b>0.0</b> kWh/m<sup>2</sup>"";
                }

            }
        });
        setTimeout(GetSolarDataByYearly()
            , 5000);

    }

    function GetSolarDataByYearly() {
        let solar_site = """";
        $('select#solar_site option:selected').each(function () {
            solar_site += $(this).val() + "","";
            //console.log($(this).val());

        });
        solar_site = solar_site != """" ? solar_site.slice(0, -1) : solar_si");
            WriteLiteral("te;\r\n        var startDate = fdate.startdate;\r\n        var endDate = GetPreviousDate();\r\n        //var FY = $(\'select#fy option:selected\').val();\r\n        var FY = fyear;\r\n\r\n        $.ajax({\r\n            type: \"GET\",\r\n            url: \'");
#nullable restore
#line 1080 "C:\Data Folder All Data should be here\DGR\Git_Repo_code\Production code\Code UP\DGR_Main\DGRA\DGRA_V1\Views\Home\Dashbord.cshtml"
             Write(Url.Action("GetSolarDashboardDataByYearly", "Dashboard"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?startDate=' + startDate + '&endDate=' + endDate + '&FY=' + FY + '&sites=' + solar_site,
           //url: ""/Dashboard/GetSolarDashboardDataByYearly?startDate="" + startDate + ""&endDate="" + endDate + ""&FY"" + FY + ""&sites="" + solar_site,
            contentType: ""application/json; charset=utf-8"",
            //data: '{""countryname"":""' + selcountry + '""}',
            datatype: ""html"",
            success: function (result, status, xhr) {
                if (result.length > 0) {
                    var yearly_energy = 0;
                    var yeary_ir = 0;
                    var yearly_energy_tar = 0;
                    var yeary_ir_tar = 0;
                    var yearly_var_energy = 0;
                    var yearly_var_ir = 0;
                    var total_capacity = 0;
                    var total_capActIr = 0;
                    var total_capTarIr = 0;
                    var cnt = 0;
                    for (var i = 0; i < result.length; i++) {
                        yearly_en");
            WriteLiteral(@"ergy += result[i].jmrkwh;
                       // yeary_ir += result[i].ir;
                        yearly_energy_tar += result[i].tarkwh;
                       // yeary_ir_tar += result[i].tarIR;
                        total_capacity += result[i].ac_capacity;
                        total_capActIr += result[i].ir * result[i].ac_capacity;
                        total_capTarIr += result[i].tarIR * result[i].ac_capacity;
                        cnt++;
                    }
                    if (total_capacity != 0) {
                        yeary_ir = total_capActIr / total_capacity;
                        yeary_ir_tar = total_capTarIr / total_capacity;
                    }
                    if (yearly_energy_tar != 0) {
                        yearly_var_energy = (((yearly_energy / 1000000).toFixed(1) - (yearly_energy_tar / 1000000).toFixed(1)) / (yearly_energy_tar / 1000000).toFixed(1)) * 100;
                    }
                    if (yeary_ir_tar != 0) {
                      ");
            WriteLiteral(@"  yearly_var_ir = ((yeary_ir.toFixed(1) - yeary_ir_tar.toFixed(1)) / yeary_ir_tar.toFixed(1)) * 100;
                    }
                    document.getElementById(""yearly_solar_enrgy"").innerHTML = ""<b>"" + ((yearly_energy) / 1000000).toFixed(1) + ""</b>"";
                    document.getElementById(""yearly_ir"").innerHTML = ""<b>"" + (yeary_ir).toFixed(1) + ""</b>"";
                    document.getElementById(""yearly_solar_enrgy_var"").innerHTML = ""("" + yearly_var_energy.toFixed(1) + "" %)"";
                    document.getElementById(""yearly_ir_var"").innerHTML = ""("" + yearly_var_ir.toFixed(1) + "" %)"";
                    document.getElementById(""s_y_tar_energy"").innerHTML = ""<b>"" + (yearly_energy_tar / 1000000).toFixed(1) + ""</b> GWh"";
                    document.getElementById(""s_y_tar_ir"").innerHTML = ""<b>"" + (yeary_ir_tar).toFixed(1) + ""</b> kWh/m<sup>2</sup>"";
                }
                else {
                    document.getElementById(""yearly_solar_enrgy"").innerHTML = ""<b>0.0</b>"";
     ");
            WriteLiteral(@"               document.getElementById(""yearly_ir"").innerHTML = ""<b>0.0</b>"";
                    document.getElementById(""yearly_solar_enrgy_var"").innerHTML = ""(0 %)"";
                    document.getElementById(""yearly_ir_var"").innerHTML = ""(0 %)"";
                    document.getElementById(""s_y_tar_energy"").innerHTML = ""<b>0.0</b> GWh"";
                    document.getElementById(""s_y_tar_ir"").innerHTML = ""<b>0.0</b> kWh/m<sup>2</sup>"";
                }

            }
        });
    }
    // chart
    function chartSelection(type) {

        if (type == 1) {
            chartTitle = ""Last 10 Days"";
            if (displaychart.wind) {
                GetWindChartData(tendays, chartTitle);
            }
            if (displaychart.solar) {
                setTimeout(GetSolarData(tendays, chartTitle)
                    , 5000);
            }
        }
        if (type==2) {
            chartTitle = ""Monthly"";
            if (displaychart.wind) {
                GetWindChartData");
            WriteLiteral(@"(monthdate, chartTitle);
            }
            if (displaychart.solar) {
                setTimeout(GetSolarData(monthdate, chartTitle)
                    , 5000);
            }

        }
    }

    function GetWindChartData(date_arr,title) {
        let site = """";
        $('select#wind_site option:selected').each(function () {
            site += $(this).val() + "","";
            // console.log($(this).val());

        });
        site = site != """" ? site.slice(0, -1) : site;
        //console.log(date_arr);
        var startDate = date_arr.startdate;
        var endDate = GetPreviousDate();//date_arr.enddate;
        //var FY = $('select#fy option:selected').val();
        var FY = fyear;
        var ismonthly = false;
        if (title == ""Monthly"") {
            startDate = getFinancialYearDateStartDate(fyear).startdate;
            ismonthly = true;
        }
        console.log(startDate);

        var taget_wind = [];
        var actual_wind = [];
        var targe");
            WriteLiteral(@"t_energy = [];
        var actual_energy = [];
        var datelebels = [];
        $.ajax({
            type: ""GET"",
            url: ""/Dashboard/GetWindGraphData?startDate="" + startDate + ""&endDate="" + endDate + ""&FY="" + FY + ""&sites="" + site + ""&monthly="" + ismonthly,
            contentType: ""application/json; charset=utf-8"",

            datatype: ""html"",
            success: function (result, status, xhr) {
                // console.log(result)
                if (result.length > 0) {
                    let previous = """";
                    let total_tar_wind = 0;
                    let toral_ac_wind = 0;
                    let total_tar_kwh = 0;
                    let totat_act_kwh = 0;
                    let cnt = 0;
                    for (var w = 0; w < result.length; w++) {

                        var formattedDate = moment(result[w].date, 'YYYY-MM-DD').format('DD-MM-YYYY');
                        if (title == ""Monthly"") {
                            cnt++;
        ");
            WriteLiteral(@"                    var oneDate = moment(formattedDate, 'DD-MM-YYYY');
                            var monthName = oneDate.format('MMMM');

                            if (monthName != previous) {
                                datelebels.push(monthName);
                                previous = monthName;
                            }

                            //total_tar_wind = result[w].tarwind;
                            //toral_ac_wind += result[w].wind;
                            //total_tar_kwh += result[w].tarkwh;
                            //totat_act_kwh += result[w].jmrkwh;
                            taget_wind.push(result[w].tarwind.toFixed(1));
                            actual_wind.push(result[w].wind.toFixed(1));
                            target_energy.push((result[w].tarkwh / 1000000).toFixed(1));
                            actual_energy.push((result[w].jmrkwh / 1000000).toFixed(1));

                        }
                        else {
                    ");
            WriteLiteral(@"        datelebels.push(formattedDate);
                            taget_wind.push(result[w].tarwind.toFixed(1));
                            actual_wind.push(result[w].wind .toFixed(1));
                            target_energy.push((result[w].tarkwh / 1000000).toFixed(1));
                            actual_energy.push((result[w].jmrkwh / 1000000).toFixed(1));
                        }




                    }
                    /*if (title == ""Monthly"") {
                        taget_wind.push((total_tar_wind / cnt).toFixed(1));
                        actual_wind.push((toral_ac_wind / cnt).toFixed(1));
                        target_energy.push((total_tar_kwh / 1000000).toFixed(1GetSolarSiteList
                        actual_energy.push((totat_act_kwh / 1000000).toFixed(1));
                    }*/
                }

                windChart(title,datelebels, taget_wind, actual_wind, target_energy, actual_energy);
            }
        });

    }
    function windChart(title");
            WriteLiteral(@", datelebels, taget_wind, actual_wind, target_energy, actual_energy) {
        let chartStatus = Chart.getChart(""energy_wind""); // <canvas> id
        if (chartStatus != undefined) {
            chartStatus.destroy();
        }

        new Chart(document.getElementById(""energy_wind""), {
            type: 'bar',
            data: {
                labels: datelebels,
                datasets: [
                    {
                        yAxisID: 'A',
                        label: ""Target Energy (GWh)"",
                        type: ""bar"",
                        backgroundColor: ""#77CAE7"",
                        data: target_energy,
                        order: 1,
                        datalabels: {
                            anchor: 'center',
                            align: 'top',
                            color: 'white',
                            labels: {
                                title: {
                                    font: {
                          ");
            WriteLiteral(@"              weight: 'bold'
                                    }
                                },
                            },
                        }
                    }, {

                        yAxisID: 'A',
                        label: ""Actual Energy (GWh)"",
                        type: ""bar"",
                        backgroundColor: ""#31576D"",
                        backgroundColorHover: ""#3e95cd"",
                        data: actual_energy,
                        order: 1,
                        datalabels: {
                            anchor: 'center',
                            align: 'top',
                            color: 'white',
                            labels: {
                                title: {
                                    font: {
                                        weight: 'bold'

                                    }
                                },
                            },
                        },
               ");
            WriteLiteral(@"     }, {

                        yAxisID: 'B',
                        label: ""Target Wind (m/s)"",
                        type: ""line"",
                        borderColor: ""#86C466"",
                        data: taget_wind,
                        order: 0,
                        fill: false,
                        datalabels: {
                            anchor: 'end',
                            align: 'top',
                            offset: 5
                        },


                    },
                    {
                        order: 0,
                        yAxisID: 'B',
                        label: ""Actual Wind (m/s)"",
                        type: ""line"",
                        borderColor: ""#FFCA5A"",
                        data: actual_wind,
                        fill: false,

                        datalabels: {
                            anchor: 'end',
                            align: 'top',
                        },

                ");
            WriteLiteral(@"    }
                ]
            },

            plugins: [ChartDataLabels],
            options: {
                responsive: true,
                plugins: {
                    title: {
                        display: true,
                        //text: title
                         text: """"

                    },

                    legend: {
                        display: true,
                        position: ""bottom""
                    }

                },

                scales: {
                    A: {
                        type: 'linear',
                        position: 'left',
                         grid: { display: false }
                    },
                    B: {
                        type: 'linear',
                        position: 'right',
                        ticks: { beginAtZero: true,},
                        grid: { display: false }
                    },
                }
            }



            }
           ");
            WriteLiteral(@" );
    }


    function GetSolarData(date_arr, title) {
        let solar_site = """";
        $('select#solar_site option:selected').each(function () {
            solar_site += $(this).val() + "","";

        });

        solar_site = solar_site != """" ? solar_site.slice(0, -1) : solar_site;
        var startDate = date_arr.startdate;
        var endDate = GetPreviousDate();//date_arr.enddate;
        //var FY = $('select#fy option:selected').val();
        var FY = fyear;
        var ismonthly = false;
        if (title == ""Monthly"") {
            startDate = getFinancialYearDateStartDate(fyear).startdate;
            ismonthly = true;
        }
        var target_kwh = [];
        var actual_kwh = [];
        var target_ir = [];
        var actual_ir = [];
        var datelebels = [];
        $.ajax({
            type: ""GET"",
            url: ""/Dashboard/GetSolarDashboardData?startDate="" + startDate + ""&endDate="" + endDate + ""&FY="" + FY + ""&sites="" + solar_site + ""&monthly="" + ismo");
            WriteLiteral(@"nthly,
            contentType: ""application/json; charset=utf-8"",
            //data: '{""countryname"":""' + selcountry + '""}',
            datatype: ""html"",
            success: function (result, status, xhr) {
                //console.log(result)
                if (result.length > 0) {
                    let previous = """";
                    let total_inv_kwh = 0;
                    let total_tar_kwh = 0;
                    let total_ir = 0;
                    let total_tar_ir = 0;
                    let scnt = 0;
                    for (var s = 0; s < result.length; s++) {
                        var formattedDate = moment(result[s].date, 'YYYY-MM-DD').format('DD-MM-YYYY');


                        if (title == ""Monthly"") {
                            var oneDate = moment(formattedDate, 'DD-MM-YYYY');
                            var monthName = oneDate.format('MMMM');
                            scnt++;
                            if (monthName != previous) {
                ");
            WriteLiteral(@"                datelebels.push(monthName);
                                previous = monthName;
                            }
                            /*total_inv_kwh += result[s].inv_kwh;
                            total_tar_kwh += result[s].tarkwh;
                            total_ir += result[s].tarIR ;
                            total_tar_ir += result[s].tarIR;*/

                            actual_kwh.push((result[s].jmrkwh / 1000000).toFixed(1));
                            target_kwh.push((result[s].tarkwh / 1000000).toFixed(1));
                            target_ir.push(result[s].tarIR.toFixed(1));
                            actual_ir.push(result[s].ir.toFixed(1));
                        }
                        else {
                            datelebels.push(formattedDate);

                            actual_kwh.push((result[s].jmrkwh / 1000000).toFixed(1));
                            target_kwh.push((result[s].tarkwh / 1000000).toFixed(1));
                        ");
            WriteLiteral(@"    target_ir.push(result[s].tarIR.toFixed(1));
                            actual_ir.push(result[s].ir.toFixed(1));
                        }

                       // datelebels.push(formattedDate)
                       // actual_kwh.push((result[s].inv_kwh/1000000).toFixed(2));
                       // target_kwh.push((result[s].tarkwh /1000000).toFixed(2));
                        //target_ir.push(result[s].tarIR.toFixed(2));
                        //actual_ir.push(result[s].ir.toFixed(2));
                        //target_energy.push((result[w].tarkwh / 1000000).toFixed(2));
                        //actual_energy.push((result[w].jmrkwh / 1000000).toFixed(2));
                    }
                    /*if (title == ""Monthly"") {
                        actual_kwh.push((total_inv_kwh / 1000000).toFixed(2));
                        target_kwh.push((total_tar_kwh / 1000000).toFixed(2));
                        target_ir.push((total_tar_ir / scnt).toFixed(2));
                        actu");
            WriteLiteral(@"al_ir.push((total_ir / scnt).toFixed(2));
                    }*/
                }

                solarChart(title,datelebels, target_kwh, actual_kwh, target_ir, actual_ir);

            }
        });
    }
    function solarChart(title, datelebels, target_kwh, actual_kwh, target_ir, actual_ir) {
        let chartStatus = Chart.getChart(""energy_solar""); // <canvas> id
        if (chartStatus != undefined) {
            chartStatus.destroy();
        }
        new Chart(document.getElementById(""energy_solar""), {
            type: 'bar',
            data: {
                labels: datelebels ,
                datasets: [
                    {
                    yAxisID: 'A',
                        label: ""Target Energy (GWh)"",
                    type: ""bar"",
                    order: 1,
                    backgroundColor: ""#77CAE7"",
                    data: target_kwh,
                    datalabels: {
                        anchor: 'center',
                        align: ");
            WriteLiteral(@"'top',
                        color: 'white',
                        labels: {
                            title: {
                                font: {
                                    weight: 'bold'

                                }
                            },
                        },
                    },
                }, {
                    yAxisID: 'A',
                    label: ""Actual Energy (GWh)"",
                    type: ""bar"",
                    order: 1,
                    backgroundColor: ""#31576D"",
                    backgroundColorHover: ""#3e95cd"",
                    data: actual_kwh,
                        datalabels: {
                            anchor: 'center',
                            align: 'top',
                            color: 'white',
                            labels: {
                                title: {
                                    font: {
                                        weight: 'bold'

               ");
            WriteLiteral(@"                     }
                                },
                            },
                        },
                    },
                    {
                        yAxisID: 'B',
                        order: 0,
                        label: ""Target IR (kWh/m^2)"",
                        type: ""line"",
                        borderColor: ""#86C466"",
                        data: target_ir,
                        fill: false,

                        datalabels: {
                            anchor: 'end',
                            align: 'top',
                            offset: 5


                        },

                    }, {
                        order: 0,
                        yAxisID: 'B',
                        label: ""Actual IR (kWh/m^2)"",
                        type: ""line"",
                        borderColor: ""#FFCA5A"",
                        data: actual_ir,
                        fill: false,
                         datalabels:");
            WriteLiteral(@" {
                            anchor: 'end',
                            align: 'top',

                        },

                    }

                ]
            },
            plugins: [ChartDataLabels],
            options: {
                responsive: true,
                plugins: {
                    title: {
                        display: true,
                       // text: title
                        text: """"
                    },

                    legend: {
                        display: true,
                        position: ""bottom"",
                       // labels: {
                            // This more specific font property overrides the global property
                          //  font: {
                               // weight: ""bold"",
                           // }
                       // }

                    }

                },
                scales: {
                    A: {
                        type: 'linear',
   ");
            WriteLiteral(@"                     position: 'left',
                        grid: { display: false }
                    },
                    B: {
                        type: 'linear',
                        position: 'right',
                        ticks: { beginAtZero: true, },
                        grid: { display: false }
                    },
                }
            }

        });
    }

    function getCookie(cname) {
        let name = cname + ""="";
        let decodedCookie = decodeURIComponent(document.cookie);
        let ca = decodedCookie.split(';');
        for (let i = 0; i < ca.length; i++) {
            let c = ca[i];
            while (c.charAt(0) == ' ') {
                c = c.substring(1);
            }
            if (c.indexOf(name) == 0) {
                return c.substring(name.length, c.length);
            }
        }
        return """";
    }
</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public IHttpContextAccessor HttpContextAccessor { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
