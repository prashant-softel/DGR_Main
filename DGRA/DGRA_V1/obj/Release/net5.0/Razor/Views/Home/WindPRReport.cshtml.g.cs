#pragma checksum "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindPRReport.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "201ed6843d039c80233e074b32105abd929097db"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_WindPRReport), @"mvc.1.0.view", @"/Views/Home/WindPRReport.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\_ViewImports.cshtml"
using DGRA_V1;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\_ViewImports.cshtml"
using DGRA_V1.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindPRReport.cshtml"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindPRReport.cshtml"
using Microsoft.AspNetCore.Http;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"201ed6843d039c80233e074b32105abd929097db", @"/Views/Home/WindPRReport.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"aa9fc0f0a035817cf8f1fc535e299e80b45b9453", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_WindPRReport : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<DGRA_V1.Models.CountryList>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/fontawesome-free/css/all.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/daterangepicker/daterangepicker.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables-bs4/css/dataTables.bootstrap4.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables-responsive/css/responsive.bootstrap4.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables-buttons/css/buttons.bootstrap4.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/jquery/jquery.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables/jquery.dataTables.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_8 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables-responsive/js/dataTables.responsive.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_9 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables-buttons/js/dataTables.buttons.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_10 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables-buttons/js/buttons.colVis.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_11 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/dist/css/adminlte.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_12 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/jquery/jquery.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_13 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/moment/moment.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_14 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/daterangepicker/daterangepicker.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_15 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/tempusdominus-bootstrap-4/js/tempusdominus-bootstrap-4.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_16 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/summernote/summernote-bs4.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_17 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables/jquery.dataTables.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_18 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables/jquery.dataTables.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_19 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables/dataTables.fixedHeader.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_20 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables-buttons/js/dataTables.buttons.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_21 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/jszip/jszip.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_22 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables-buttons/js/buttons.html5.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_23 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/pdfmake/pdfmake.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_24 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables-buttons/js/buttons.colVis.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_25 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/chart.js/Chart.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_26 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/multiple-select/dist/multiple-select.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_27 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/dist/js/comman.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 6 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindPRReport.cshtml"
  
    ViewData["Title"] = "Wind Performance Summary";

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindPRReport.cshtml"
  
    string windSiteList = "";

    var usermodel = JsonConvert.DeserializeObject<UserAccess>(@HttpContextAccessor.HttpContext.Session.GetString("UserAccess"));


#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindPRReport.cshtml"
 for (int i = 0; i < @usermodel.access_list.Count; i++)
{

    if (@usermodel.access_list[i].page_type == 3 && @usermodel.access_list[i].site_type == 1)
    {
        windSiteList += @usermodel.access_list[i].identity.ToString() + ",";
    }


}

#line default
#line hidden
#nullable disable
            WriteLiteral("<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700&display=fallback\">\r\n<!-- Font Awesome -->\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "201ed6843d039c80233e074b32105abd929097db15668", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<!-- daterange picker -->\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "201ed6843d039c80233e074b32105abd929097db16813", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<!-- DataTables -->\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "201ed6843d039c80233e074b32105abd929097db17952", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "201ed6843d039c80233e074b32105abd929097db19068", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<link rel=\"stylesheet\" href=\"https://cdn.datatables.net/fixedcolumns/4.3.0/css/fixedColumns.dataTables.min.css\" />\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "201ed6843d039c80233e074b32105abd929097db20306", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "201ed6843d039c80233e074b32105abd929097db21422", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "201ed6843d039c80233e074b32105abd929097db22538", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_7);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "201ed6843d039c80233e074b32105abd929097db23654", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_8);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "201ed6843d039c80233e074b32105abd929097db24770", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_9);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "201ed6843d039c80233e074b32105abd929097db25886", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_10);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"

<!-- dropdown search -->
<link href=""https://unpkg.com/multiple-select@1.5.2/dist/multiple-select.min.css"" rel=""stylesheet"">
<script src=""https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js""></script>
<script src=""https://unpkg.com/multiple-select@1.5.2/dist/multiple-select.min.js""></script>
<script src=""https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.5/xlsx.full.min.js""></script>


");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "201ed6843d039c80233e074b32105abd929097db27411", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_11);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
<style>
    .tab-btn {
        font-size: 0.7rem;
        font-weight: bold;
    }

    .scrolledTable {
        overflow-y: auto;
        clear: both;
    }

    .dt-button buttons-columnVisibility:active {
        background-color: aquamarine;
    }
    /* .dt-button-collection > div > button{
        background-color: palevioletred;
    }
    .dt-button-collection > div > button:active{
        background-color: blueviolet;
    }*/
</style>
<style>
");
            WriteLiteral(@"    div.dataTables_scrollBody > table {
        margin-top: -33px !important;
    }
</style>

<div class=""content-wrapper"">

    <section class=""content-header"">
        <!--<div class=""container-fluid"">
            <div class=""row mb-2"">
                <div class=""col-sm-6"">

                </div>
                <div class=""col-sm-6"">
                    <ol class=""breadcrumb float-sm-right"">
                        <li class=""breadcrumb-item""><a href=""#"">Home</a></li>
                        <li class=""breadcrumb-item active"">Wind Performance Reports</li>
                    </ol>
                </div>
            </div>
        </div>-->
    </section>


    <section class=""content"">
        <div class=""card"">
            <div class=""card-header"">
                <h3 class=""card-title text-center"">Wind Performance Summary</h3>
            </div>
            <div class=""card-body"">
                <div class=""row"" style=""margin-top: -14px;"">
                    <div class=");
            WriteLiteral(@"""chart col-sm-8"">
                    </div>
                    <div class=""chart col-sm-4 text-right"" id=""customDiv"">
                        <span style="" margin-left:-20px; margin-top: -6px; "">
                            <input type=""checkbox"" class=""form-check-input group_by_site"" id=""group_by_site"" name=""group_by_site"" value=""1"" style=""width: 17px; height: 16px;"" onclick=""grouping_site()"">
                        </span> <span><b>&nbsp;&nbsp;&nbsp;Custom Grouping of Site </b></span>
                    </div>

                </div>
                <hr>
                <!-- No Group-->
                <div class=""row"" id=""no_group"" style=""display:flex"">
                    <div class=""col-sm-4"">
                        <div class=""input-group "">
                            <label class=""col-sm-3.1 col-form-label text-left"">Date Range :&nbsp;&nbsp;</label>
                            <div class=""input-group-prepend"">
                                <span class=""input-group-text"">
      ");
            WriteLiteral(@"                              <i class=""far fa-calendar-alt""></i>
                                </span>
                            </div>
                            <input type=""text"" class=""form-control float-right col-sm-9"" id=""daterange"" name=""daterange"">
                        </div>
                    </div>
                    <div class=""col-sm-3"" style=""margin-left: -13px;"">
                        <div class=""form-group"">
                            <div class=""row"">
                                <label class=""col-sm-3 col-form-label text-right"">SPV : </label>
                                <select class=""form-control  col-sm-9"" id=""spv"" name=""spv[]""");
            BeginWriteAttribute("value", " value=\"", 5809, "\"", 5817, 0);
            EndWriteAttribute();
            WriteLiteral(@" onchange=""getSite(true)"" multiple></select>
                            </div>
                        </div>
                    </div>
                    <div class=""col-sm-3"">
                        <div class=""form-group"">
                            <div class=""row"">
                                <label class=""col-sm-3 col-form-label text-right"">Site : </label>
                                <select class=""form-control  col-sm-9"" id=""site"" name=""site[]"" multiple></select>
                            </div>
                        </div>
                    </div>
                    <div class=""col-sm-2 text-left"">
                        <button type=""button"" class=""btn btn-block btn-primary"" onclick=""GetPRReport();"" style="" width: 5rem; line-height: 1.3;"">Search</button>
                    </div>
                    <div class=""col-sm-1 text-center""></div>


                </div>
                <div class=""row"" id=""no_group_tab"" style=""display:flex"">
                    <di");
            WriteLiteral(@"v class=""col-sm-5"">
                        <div class=""card-body table-responsive pad"" style=""margin-left: -4%; padding-bottom: 2px;"">
                            <div class=""btn-group btn-group-toggle"" data-toggle=""buttons"">
                                <label class=""btn bg-olive"">
                                    <input type=""radio"" name=""reportType"" value=""Site"" id=""pr_b1"" autocomplete=""off"" checked> Site Wise Report
                                </label>
                                <label class=""btn bg-olive"">
                                    <input type=""radio"" name=""reportType"" value=""SPV"" id=""pr_b2"" autocomplete=""off""> SPV Wise Report
                                </label>
                            </div>
                        </div>
                    </div>
                    <div class=""col-sm-2 text-center""></div>
                    <div class=""col-sm-5 text-center""></div>
                </div>
                <!--Custom Group By Site -->
                <d");
            WriteLiteral(@"iv class=""row"" id=""groupbysite"" style=""display:none"">
                    <div class=""col-sm-4"">
                        <div class=""input-group "">
                            <label class=""col-sm-2 col-form-label text-left"">Date : </label>
                            <div class=""input-group-prepend"">
                                <span class=""input-group-text"">
                                    <i class=""far fa-calendar-alt""></i>
                                </span>
                            </div>
                            <input type=""text"" class=""form-control float-right col-sm-8"" id=""daterange_group"" name=""daterange"">
                        </div>
                    </div>
                    <div class=""col-sm-4"">
                        <div class=""form-group"">
                            <div class=""row"">
                                <label class=""col-sm-4 col-form-label text-left"">Custom Group : </label>
                                <select class=""form-control  col-");
            WriteLiteral("sm-8\" id=\"cust_group\" name=\"cust_group[]\"");
            BeginWriteAttribute("value", " value=\"", 8931, "\"", 8939, 0);
            EndWriteAttribute();
            WriteLiteral(@" multiple></select>
                            </div>
                        </div>
                    </div>
                    <div class=""col-sm-1 text-center""></div>
                    <div class=""col-sm-1 text-left"">
                        <button type=""button"" class=""btn btn-block btn-primary"" onclick=""GetPRReportGroup();"" style=""margin-left:-5rem; width: 5rem;"">Search</button>
                    </div>
                    <!--<div class=""col-sm-1 text-center""></div>-->
                </div>
                <hr>
                <div id=""reportsDaily"" style=""overflow-x: auto;"" class=""reportsDaily""></div>
                <div id=""reportsDailygroup"" style=""overflow-x: auto;"" class=""reportsDailygroup""></div>
                
                <div id=""loader"" class=""loader  center"" style=""display:none""></div>
                <!-- <hr>-->
                <div class=""row"" id=""sitewisechart"" style=""display:none"">
                    <div class=""chart col-sm-6 text-center"">
             ");
            WriteLiteral(@"           <h5>Energy (MUs) </h5>
                        <canvas id=""energy_chart"" style=""min-height: 350px; height: 350px; max-height: 350px; max-width: 100%;""></canvas>
                    </div>
                    <div class=""chart col-sm-6 text-center"">
                        <h5>Wind (m/s) </h5>
                        <canvas id=""wind_chart"" style=""min-height: 350px; height: 350px; max-height: 350px; max-width: 100%;""></canvas>
                    </div>
                </div>
                <div class=""row"" id=""spvwisechart"" style=""display:none"">
                    <div class=""col-sm-6 text-center"">
                        <canvas id=""pieChart"" style=""min-height: 350px; height: 350px; max-height: 350px; max-width: 100%;""></canvas>
                    </div>
                    <div class=""col-sm-6 text-center""></div>
                </div>
            </div>
        </div>
    </section>
</div>
");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "201ed6843d039c80233e074b32105abd929097db37596", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_12);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js\"></script>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "201ed6843d039c80233e074b32105abd929097db38731", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "201ed6843d039c80233e074b32105abd929097db39772", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "201ed6843d039c80233e074b32105abd929097db41121", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "201ed6843d039c80233e074b32105abd929097db42166", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<!-- DataTables  & Plugins -->\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "201ed6843d039c80233e074b32105abd929097db43241", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_17);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "201ed6843d039c80233e074b32105abd929097db44282", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "201ed6843d039c80233e074b32105abd929097db45631", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<script src=\"https://cdn.datatables.net/fixedcolumns/4.3.0/js/dataTables.fixedColumns.min.js\" defer></script>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "201ed6843d039c80233e074b32105abd929097db47095", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_20);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "201ed6843d039c80233e074b32105abd929097db48444", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_21);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "201ed6843d039c80233e074b32105abd929097db49793", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_22);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "201ed6843d039c80233e074b32105abd929097db51142", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_23);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "201ed6843d039c80233e074b32105abd929097db52491", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_24);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "201ed6843d039c80233e074b32105abd929097db53840", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_25);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "201ed6843d039c80233e074b32105abd929097db54881", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_26);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "201ed6843d039c80233e074b32105abd929097db56230", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_27);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.5/xlsx.full.min.js\"></script>\r\n\r\n<script type=\"text/javascript\">\r\n    var userIdFromSession = \"");
#nullable restore
#line 248 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindPRReport.cshtml"
                        Write(Html.Raw(@HttpContextAccessor.HttpContext.Session.GetString("userid")));

#line default
#line hidden
#nullable disable
            WriteLiteral("\";\r\n    var userRoles = \"");
#nullable restore
#line 249 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindPRReport.cshtml"
                Write(Html.Raw(@HttpContextAccessor.HttpContext.Session.GetString("role")));

#line default
#line hidden
#nullable disable
            WriteLiteral("\";\r\n    var isAdmin = 0;\r\n    if (userRoles == \"Admin\") {\r\n        isAdmin = 1;\r\n    }\r\n    const columnMap = {};\r\n    const userColumnId = [];\r\n     var userRole = \"");
#nullable restore
#line 256 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindPRReport.cshtml"
                Write(Html.Raw(@HttpContextAccessor.HttpContext.Session.GetString("role")));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""";
     var exceldata1;
     var exceldata2;

    //-- Selection Disable Enable
    function grouping_site()
    {

        var checkBox = document.getElementById(""group_by_site"");
        console.log(checkBox.checked);
        if (checkBox.checked == true) {
            document.getElementById('no_group').style.display          = 'none';
            document.getElementById('no_group_tab').style.display      = 'none';
            document.getElementById('groupbysite').style.display       = 'flex';
            document.getElementById('reportsDailygroup').style.display = 'block';
            document.getElementById('reportsDaily').style.display      = 'none';
        }
        else
        {
            document.getElementById('no_group').style.display          = 'flex';
            document.getElementById('no_group_tab').style.display      = 'flex';
            document.getElementById('groupbysite').style.display       = 'none';
            document.getElementById('reportsDailygroup').sty");
            WriteLiteral(@"le.display = 'none';
            document.getElementById('reportsDaily').style.display      = 'block';
        }
    }

    $(document).ready(function () {
        console.log(""Role=>"", userRole);
        if (userRole != ""Admin"") {
            document.getElementById(""customDiv"").style.display = ""none"";
            GetCustomGroupAccess();
        }
        var today = new Date();
        fyear = getFinancialYear(today);
        console.log(fyear);
        $('#daterange').daterangepicker(
        {
            maxDate: new Date(),
            locale: {
                format: 'DD/MM/YYYY',
            }
        });
        $('#daterange_group').daterangepicker(
        {
            maxDate: new Date(),
            locale: {
                format: 'DD/MM/YYYY',
            }
        });
    });
    window.onload = function () {
        console.log(""User Id from session"" + userIdFromSession);
        getPageColumns();
        getUserGroupColumns();

        var site_ids = """);
#nullable restore
#line 312 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindPRReport.cshtml"
                   Write(Html.Raw(windSiteList.TrimEnd(',')));

#line default
#line hidden
#nullable disable
            WriteLiteral("\";\r\n        GetSPV(false);\r\n        getSite(false);\r\n        getCutomeGroup();\r\n    }\r\n    function getPageColumns() {\r\n        $.ajax({\r\n        type: \"GET\",\r\n       // url: \"/WindReport/GetSiteMaster\",\r\n          url: \'");
#nullable restore
#line 321 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindPRReport.cshtml"
           Write(Url.Action("GetPageColumns", "Home"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?page_id=22',
        contentType: ""application/json; charset=utf-8"",
        //data: '{""countryname"":""' + selcountry + '""}',
        datatype: ""html"",
        success: function (result, status, xhr) {
            if (result.length > 0) {
                console.log(result);
                result.forEach(item => {
                    columnMap[item.column_name] = [item.column_id, item.required];
                });
                console.log(columnMap);
                console.log(columnMap[""Country""], "" : "", columnMap[""Country""][0], ""  :  "", columnMap[""Country""][1]);
            }
            else {
            }
        }
    });
    }
    function getUserGroupColumns() {
        $.ajax({
        type: ""GET"",
            // url: ""/WindReport/GetSiteMaster"",
            url: '");
#nullable restore
#line 343 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindPRReport.cshtml"
             Write(Url.Action("GetUserGroupColumns", "Home"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?page_id=22&userId=' + userIdFromSession,
        contentType: ""application/json; charset=utf-8"",
        //data: '{""countryname"":""' + selcountry + '""}',
        datatype: ""html"",
        success: function (result, status, xhr) {
            if (result.length > 0) {
                console.log(result);
                result.forEach(item => {
                    userColumnId.push(item.column_id);
                });
                console.log(userColumnId);
            }
            else {
            }
        }
    });
    }


    function getPageColumns() {
        $.ajax({
        type: ""GET"",
       // url: ""/WindReport/GetSiteMaster"",
          url: '");
#nullable restore
#line 366 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindPRReport.cshtml"
           Write(Url.Action("GetPageColumns", "Home"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?page_id=11',
        contentType: ""application/json; charset=utf-8"",
        //data: '{""countryname"":""' + selcountry + '""}',
        datatype: ""html"",
        success: function (result, status, xhr) {
            if (result.length > 0) {
                console.log(result);
                result.forEach(item => {
                    columnMap[item.column_name] = [item.column_id, item.required];
                });
                console.log(columnMap);
                console.log(columnMap[""Country""], "" : "", columnMap[""Country""][0], ""  :  "", columnMap[""Country""][1]);
            }
            else {
            }
        }
    });
    }
    function getUserGroupColumns() {
        $.ajax({
        type: ""GET"",
            // url: ""/WindReport/GetSiteMaster"",
            url: '");
#nullable restore
#line 388 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindPRReport.cshtml"
             Write(Url.Action("GetUserGroupColumns", "Home"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?page_id=11&userId=' + userIdFromSession,
        contentType: ""application/json; charset=utf-8"",
        //data: '{""countryname"":""' + selcountry + '""}',
        datatype: ""html"",
        success: function (result, status, xhr) {
            if (result.length > 0) {
                console.log(result);
                result.forEach(item => {
                    userColumnId.push(item.column_id);
                });
                console.log(userColumnId);
            }
            else {
            }
        }
    });
    }


    var today = new Date();
    fyear = getFinancialYear(today);
    var Fy = fyear;
    function GetCustomGroupAccess()
    {
        console.log(""call function"");
        var login_id = ");
#nullable restore
#line 413 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindPRReport.cshtml"
                  Write(HttpContextAccessor.HttpContext.Session.GetString("userid"));

#line default
#line hidden
#nullable disable
            WriteLiteral(";\r\n        $.ajax({\r\n            type: \"GET\",\r\n            url: \'");
#nullable restore
#line 416 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindPRReport.cshtml"
             Write(Url.Action("GetCustomGroupAccess", "Home"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?login_id=' + login_id + '&site_type=1',
            contentType: ""application/json; charset=utf-8"",
            datatype: ""html"",
            success: function (result, status, xhr) {
                if (result.length > 0) {
                    CustomGroupOfSite = true;
                    document.getElementById(""customDiv"").style.display = ""block"";
                }
                else {
                    CustomGroupOfSite = false;
                    document.getElementById(""customDiv"").style.display = ""none"";
                }
            }
        });
    }
    function GetSPV(fliterVal)
    {
        let state_id = """";
        let site_ids = """";
        if (fliterVal == false)
        {
            site_ids = """);
#nullable restore
#line 437 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindPRReport.cshtml"
                   Write(Html.Raw(windSiteList.TrimEnd(',')));

#line default
#line hidden
#nullable disable
            WriteLiteral("\";\r\n        }\r\n        $.ajax({\r\n            type: \"GET\",\r\n            url: \'");
#nullable restore
#line 441 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindPRReport.cshtml"
             Write(Url.Action("GetSPVList", "WindReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?state=' + state_id + '&sitelist=' + site_ids,
            contentType: ""application/json; charset=utf-8"",
            datatype: ""html"",
            success: function (result, status, xhr)
            {
                var options = """";
                for (var j = 0; j < result.length; j++)
                {
                    options += '<option value=""' + result[j].spv + '"">' + result[j].spv + '</option>';
                }
                $(""#spv"").multipleSelect('destroy');
                $(""#spv"").html(options);
                $('select#spv').multipleSelect({
                    ""minimumCountSelected"": 2,
                    ""placeholder"": ""Select SPV(s)"",
                    filter:true
                });
                $(""#spv_group"").multipleSelect('destroy');
                $(""#spv_group"").html(options);
                $('select#spv_group').multipleSelect({
                    ""minimumCountSelected"": 2,
                    ""placeholder"": ""Select SPV(s)"",
           ");
            WriteLiteral("         filter: true\r\n                });\r\n            }\r\n        });\r\n        getSite(false);\r\n    }\r\n    function getSite(fliterVal)\r\n    {\r\n        var site_ids = \"\";\r\n        if (fliterVal == false)\r\n        {\r\n            site_ids = \"");
#nullable restore
#line 474 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindPRReport.cshtml"
                   Write(Html.Raw(windSiteList.TrimEnd(',')));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""";
        }
        let state_id = """";
        $('select#state option:selected').each(function () {
            state_id += $(this).val() + "","";
        });
        state_id = state_id != """" ? state_id.slice(0, -1) : state_id;

        let spv = """";
        $('select#spv option:selected').each(function ()
        {
            spv += $(this).val() + "","";
        });
        spv = spv != """" ? spv.slice(0, -1) : spv;
        if (state_id != """" || spv != """") {
             site_ids = """);
#nullable restore
#line 489 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindPRReport.cshtml"
                    Write(Html.Raw(windSiteList.TrimEnd(',')));

#line default
#line hidden
#nullable disable
            WriteLiteral("\";\r\n        }\r\n        $.ajax({\r\n            type: \"POST\",\r\n            url: \'");
#nullable restore
#line 493 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindPRReport.cshtml"
             Write(Url.Action("GetSiteList", "WindReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?state=' + state_id + '&spv=' + spv + '&sitelist=' + site_ids,
            contentType: ""application/json; charset=utf-8"",
            datatype: ""html"",
            success: function (result, status, xhr)
            {
                var options = """";
                for (var k = 0; k < result.length; k++)
                {
                    options += '<option value=""' + result[k].site_master_id + '"">' + result[k].site + '</option>';
                }
                $(""#site"").multipleSelect('destroy');
                $(""#site"").html("""").html(options);

                $('select#site').multipleSelect({
                    ""minimumCountSelected"": 2,
                    ""placeholder"": ""Select Site(s)"",
                    filter:true
                });
            }
        });
    }
    function getCutomeGroup()
    {
        $.ajax({
            type: ""POST"",
            url: '");
#nullable restore
#line 518 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindPRReport.cshtml"
             Write(Url.Action("GetCustomGroup", "WindReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"?siteType=2',
            contentType: ""application/json; charset=utf-8"",
            datatype: ""html"",
            success: function (result, status, xhr)
            {
                var options = """";
                for (var k = 0; k < result.length; k++)
                {
                    options += '<option value=""' + result[k].site_ids + '"">' + result[k].cust_group + '</option>';
                }
                $(""#cust_group"").multipleSelect('destroy');
                $(""#cust_group"").html("""").html(options);
                $('select#cust_group').multipleSelect({
                    ""minimumCountSelected"": 2,
                    ""placeholder"": ""Select Group(s)"",
                    filter:true
                });
            }
        });
    }
    function GetPRReport()
    {
        var ReportType = $(""input[name='reportType']:checked"").val();
        if (ReportType == ""SPV"")
        {
            GetWindPRReportSPVWise();
        }
        else
        {
         ");
            WriteLiteral(@"   GetWindPRReportSiteWise();
        }
    }
    function ExportToExcelSPVWise()
    {
        console.log(exceldata1)
        result = exceldata1;
        var columns = [
            ""SPV"",""Capacity"",""JMR Energy (in MU) Tar"",""JMR Energy (in MU) Exp"",""JMR Energy (in MU) Act"",""JMR Energy (in MU) T.var(%)"",""JMR Energy (in MU) E.var(%)"",""Revenue (MINR)"","" Wind Speed (m/s) Tar"",""Wind Speed (m/s) Act "",""Wind Speed (m/s) Var (%)"",""PLF (%) Tar"",
            ""PLF (%) Act "",""PLF (%) Var (%) "",""MA Actual (%) Tar"",""MA Actual (%) Act "",""MA Actual (%) Var (%) "",""IGA (%) Tar"",""IGA (%) Act "",""IGA (%) Var (%) "",""EGA (%) Tar"",""EGA (%) Act "",""EGA (%) Var (%) ""
        ];
        var rows = [];
        for (var i = 0; i < result.length; i++)
        {
            var row                  = [];
            let total_capacity       = 0;
            let total_capTarMu       = 0;
            let total_tar_mu         = 0;
            let total_exp_power      = 0;
            let total_act_jmr_kwh_mu = 0;
       ");
            WriteLiteral(@"     let avg_jmr_var          = 0;
            let total_revenue        = 0;
            let total_capTarWind     = 0;
            let total_tar_wind       = 0;
            let total_act_wind       = 0;
            let avg_wind_var         = 0;
            let total_capTarPlf      = 0;
            let total_tar_plf        = 0;
            let total_act_plf        = 0;
            let avg_plf_var          = 0;
            let total_capTarMa       = 0;
            let total_tar_ma         = 0;
            let total_act_ma         = 0;
            let avg_ma_var           = 0;
            let total_capTarIga      = 0;
            let total_tar_iga        = 0;
            let total_act_iga        = 0;
            let avg_iga_var          = 0;
            let total_capTarEga      = 0;
            let total_tar_ega        = 0;
            let total_act_ega        = 0;
            let avg_ega_var          = 0;
            let total_capActWind     = 0;
            let total_capActPlf      = 0;");
            WriteLiteral(@"
            let total_capActMa       = 0;
            let total_capActIga      = 0;
            let total_capActEga      = 0;
            let revenue              = 0;
            let jmr_var              = 0;
            let e_var                = 0;
            let wind_var             = 0;
            let plf_var              = 0;
            let ma_act_var           = 0;
            let iga_var              = 0;
            let ega_var              = 0;
            let tar_mu               = 0;
            tar_mu                   = result[i].tar_kwh_mu / 1000000;
            revenue                  = ((result[i].act_jmr_kwh_mu - tar_mu) * result[i].total_tarrif);
            if (result[i].act_jmr_kwh_mu != 0 || result[i].tar_kwh_mu != 0)
            {
                jmr_var = ((result[i].act_jmr_kwh_mu - tar_mu) / tar_mu) * 100;
            }
            if (result[i].exp_power != 0)
            {
                e_var = ((result[i].act_jmr_kwh_mu - (result[i].exp_power /6) / 10000");
            WriteLiteral(@"00) / ((result[i].exp_power /6 ) / 1000000)) * 100;
            }
            if (result[i].act_Wind != 0 || result[i].tar_wind != 0)
            {
                wind_var = ((result[i].act_Wind - result[i].tar_wind) / result[i].tar_wind) * 100;
            }
            plf_var              = (result[i].act_plf - result[i].tar_plf);
            ma_act_var           = (result[i].act_ma - result[i].tar_ma);
            iga_var              = (result[i].act_iga - result[i].tar_iga);
            ega_var              = (result[i].act_ega - result[i].tar_ega);
	        total_capacity       += result[i].total_mw;
            total_tar_mu         += tar_mu;
            total_act_jmr_kwh_mu += result[i].act_jmr_kwh_mu;
            total_exp_power      += ((result[i].exp_power/6)/1000000);
            total_revenue        += revenue;
            total_tar_wind       += result[i].tar_wind;
            total_act_wind       += result[i].act_Wind;
            total_tar_plf        += result[i].tar_plf;
 ");
            WriteLiteral(@"           total_act_plf        += result[i].act_plf;
            total_tar_ma         += result[i].tar_ma;
            total_act_ma         += result[i].act_ma;
            total_tar_iga        += result[i].tar_iga;
            total_act_iga        += result[i].act_iga;
            total_tar_ega        += result[i].tar_ega;
            total_act_ega        += result[i].act_ega;
            total_capTarMu       += tar_mu * result[i].total_mw;
            total_capTarWind     += result[i].tar_wind * result[i].total_mw;
            total_capTarPlf      += result[i].tar_plf * result[i].total_mw;
            total_capTarMa       += result[i].tar_ma * result[i].total_mw;
            total_capTarIga      += result[i].tar_iga * result[i].total_mw;
            total_capTarEga      += result[i].tar_ega * result[i].total_mw;
            total_capActWind     += result[i].act_Wind * result[i].total_mw;
            total_capActPlf      += result[i].act_plf * result[i].total_mw;
            total_capActMa   ");
            WriteLiteral(@"    += result[i].act_ma * result[i].total_mw;
            total_capActIga      += result[i].act_iga * result[i].total_mw;
            total_capActEga      += result[i].act_ega * result[i].total_mw;
            row.push(result[i].spv);
            row.push(result[i].total_mw);
            row.push(tar_mu);
            row.push((result[i].exp_power /6)/ 1000000);
            row.push(result[i].act_jmr_kwh_mu);
            row.push( jmr_var);
            row.push(e_var);
            row.push(revenue);
            row.push(result[i].tar_wind);
            row.push(result[i].act_Wind);
            row.push(wind_var);
            row.push(result[i].tar_plf);
            row.push(result[i].act_plf);
            row.push(plf_var);
            row.push(result[i].tar_ma);
            row.push(result[i].act_ma);
            row.push(ma_act_var);
            row.push(result[i].tar_iga);
            row.push(result[i].act_iga);
            row.push(iga_var);
            row.push(result[i].tar_ega);");
            WriteLiteral(@"
            row.push( result[i].act_ega);
            row.push( ega_var);
            rows.push(row);
        }
        var data = [columns].concat(rows);
        var ws   = XLSX.utils.aoa_to_sheet(data);
        var wb   = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, ""Wind PerformanceSum SPVWise"");
        var wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'binary' });

        function s2ab(s)
        {
            var buf  = new ArrayBuffer(s.length);
            var view = new Uint8Array(buf);
            for (var i = 0; i !== s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
            return buf;
        }
        saveAs(new Blob([s2ab(wbout)], { type: ""application/octet-stream"" }), ""Wind PerformanceSum SPVWise.xlsx"");
    }

    // Daily Gen Report SPV WIse
    function GetWindPRReportSPVWise()
    {
        document.getElementById(""loader"").style.display = 'flex';
        var site_ids = """);
#nullable restore
#line 692 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindPRReport.cshtml"
                   Write(Html.Raw(windSiteList.TrimEnd(',')));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""";
        let site = """";
        let spv = """";
        $('select#site option:selected').each(function () {
            site += $(this).val() + "","";
        });
        site = site != """" ? site.slice(0, -1) : site;

        $('select#spv option:selected').each(function () {
            spv += $(this).val() + "","";
        });
        spv = spv != """" ? spv.slice(0, -1) : spv;
        if (userRole == ""User"" && site == """")
        {
            site = site_ids;
        }
        var daterange   = $('#daterange').val();
        var arr1        = new Array();
        arr1            = daterange.split(""-"");
        var fromDate    = moment(arr1[0], 'DD/MM/YYYY').format('YYYY-MM-DD');
        var toDate      = moment(arr1[1], 'DD/MM/YYYY').format('YYYY-MM-DD');
        var fyear       = Fy;
        var leble       = [];
        var revenue_arr = [];
        var reporthead = ""SPV Wise Reports"";
        $.ajax({
            type: ""GET"",
            url: '");
#nullable restore
#line 719 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindPRReport.cshtml"
             Write(Url.Action("GetWindPRReportSPVWise", "WindReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?fy=' + fyear + '&fromDate=' + fromDate + '&toDate=' + toDate + '&sitelist=' + site + '&spv=' + spv,

            contentType: ""application/json; charset=utf-8"",

            datatype: ""JSON"",
            success: function (result, status, xhr)
            {
                console.log(result);
                var genNosSubCols = 0;
                var plfSubCols = 0;
                var maSubCols = 0;
                var igaSubCols = 0;
                var egaSubCols = 0;
                var windSpeedSubCols = 0;

                if (userColumnId.includes(columnMap[""GenNos_Tar""][0]) || isAdmin == 1) {
                    genNosSubCols++;
                }
                if (userColumnId.includes(columnMap[""GenNos_Exp""][0]) || isAdmin == 1) {
                    genNosSubCols++;
                }
                if (userColumnId.includes(columnMap[""GenNos_ActJMR""][0]) || isAdmin == 1) {
                    genNosSubCols++;
                }
                if (userColumnId.includ");
            WriteLiteral(@"es(columnMap[""GenNos_TVar""][0]) || isAdmin == 1) {
                    genNosSubCols++;
                }
                if (userColumnId.includes(columnMap[""GenNos_Evar""][0]) || isAdmin == 1) {
                    genNosSubCols++;
                }

                if (userColumnId.includes(columnMap[""Wind_Speed_Tar""][0]) || isAdmin == 1) {
                    windSpeedSubCols++;
                }
                if (userColumnId.includes(columnMap[""Wind_Speed_Act""][0]) || isAdmin == 1) {
                    windSpeedSubCols++;
                }
                if (userColumnId.includes(columnMap[""Wind_Speed_Var""][0]) || isAdmin == 1) {
                    windSpeedSubCols++;
                }

                if (userColumnId.includes(columnMap[""PLF_Tar""][0]) || isAdmin == 1) {
                    plfSubCols++;
                }
                if (userColumnId.includes(columnMap[""PLF_Act""][0]) || isAdmin == 1) {
                    plfSubCols++;
                }
                if ");
            WriteLiteral(@"(userColumnId.includes(columnMap[""PLF_Var""][0]) || isAdmin == 1) {
                    plfSubCols++;
                }

                if (userColumnId.includes(columnMap[""MA_Actual_Tar""][0]) || isAdmin == 1) {
                    maSubCols++;
                }
                if (userColumnId.includes(columnMap[""MA_Actual_Act""][0]) || isAdmin == 1) {
                    maSubCols++;
                }
                if (userColumnId.includes(columnMap[""MA_Actual_Var""][0]) || isAdmin == 1) {
                    maSubCols++;
                }

                if (userColumnId.includes(columnMap[""IGA_Tar""][0]) || isAdmin == 1) {
                    igaSubCols++;
                }
                if (userColumnId.includes(columnMap[""IGA_Act""][0]) || isAdmin == 1) {
                    igaSubCols++;
                }
                if (userColumnId.includes(columnMap[""IGA_Var""][0]) || isAdmin == 1) {
                    igaSubCols++;
                }

                if (userColumnId.in");
            WriteLiteral(@"cludes(columnMap[""EGA_Tar""][0]) || isAdmin == 1) {
                    egaSubCols++;
                }
                if (userColumnId.includes(columnMap[""EGA_Act""][0]) || isAdmin == 1) {
                    egaSubCols++;
                }
                if (userColumnId.includes(columnMap[""EGA_Var""][0]) || isAdmin == 1) {
                    egaSubCols++;
                }

                //var tbl = '<div class=""text-center""><h5>' + reporthead+'</h5></div>';
                var tbl = '<table id=""example1""  class=""table table-bordered table-striped"" style=""width: 130%;"">';
                tbl += '<thead class=""tbl-head""><tr>';
                if (userColumnId.includes(columnMap[""SPV""][0]) || columnMap[""SPV""][1] == 1 || isAdmin == 1) {
                    tbl += '<th rowspan=""2"" style=""width: 10%;"">SPV</th>';
                }                
                if (userColumnId.includes(columnMap[""Capacity""][0]) || columnMap[""Capacity""][1] == 1 || isAdmin == 1) {
                    tbl += '<");
            WriteLiteral(@"th rowspan=""2"">Capacity<br> (MW)</th>';
                }
                if (genNosSubCols > 0) {
                    tbl += '<th colspan=""' + genNosSubCols + '"" class=""text-center"">JMR Energy (in MU)</th >';
                }
                if (userColumnId.includes(columnMap[""Revenue""][0]) || columnMap[""Revenue""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>(±)Revenue</th>';
                }
                if (windSpeedSubCols > 0) {
                    tbl += '<th colspan=""' + windSpeedSubCols + '"" class=""text-center"">Wind Speed (m/s)</th>';
                }
                if (plfSubCols > 0) {
                    tbl += '<th colspan=""' + plfSubCols + '"" class=""text-center"">PLF (%)</th>';
                }
                if (maSubCols > 0) {
                    tbl += '<th colspan=""' + maSubCols + '"" class=""text-center"">MA Actual (%)</th>';
                }
                if (igaSubCols > 0) {
                    tbl += '<th colspan=""' + igaSubCols + '"" class=""text-");
            WriteLiteral(@"center"">IGA (%)</th>';
                }
                if (egaSubCols > 0) {
                    tbl += '<th colspan=""' + egaSubCols + '"" class=""text-center"">EGA (%)</th>';
                }
                tbl += '</tr>';
                tbl += '<tr>';
                if (userColumnId.includes(columnMap[""GenNos_Tar""][0]) || columnMap[""GenNos_Tar""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Tar</th>';
                }
                if (userColumnId.includes(columnMap[""GenNos_Exp""][0]) || columnMap[""GenNos_Exp""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Exp</th>';
                }
                if (userColumnId.includes(columnMap[""GenNos_ActJMR""][0]) || columnMap[""GenNos_ActJMR""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Act</th>';
                }
                if (userColumnId.includes(columnMap[""GenNos_TVar""][0]) || columnMap[""GenNos_TVar""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>T.Var (%)</th>';
              ");
            WriteLiteral(@"  }
                if (userColumnId.includes(columnMap[""GenNos_Evar""][0]) || columnMap[""GenNos_Evar""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>E.Var (%)</th>';
                }
                if (userColumnId.includes(columnMap[""Revenue""][0]) || columnMap[""Revenue""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>(MINR)</th>';
                }
                if (userColumnId.includes(columnMap[""Wind_Speed_Tar""][0]) || columnMap[""Wind_Speed_Tar""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Tar</th>';
                }
                if (userColumnId.includes(columnMap[""Wind_Speed_Act""][0]) || columnMap[""Wind_Speed_Act""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Act</th>';
                }
                if (userColumnId.includes(columnMap[""Wind_Speed_Var""][0]) || columnMap[""Wind_Speed_Var""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Var (%)</th>';
                }
                if (userColumnId.includes(colu");
            WriteLiteral(@"mnMap[""PLF_Tar""][0]) || columnMap[""PLF_Tar""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Tar</th>';
                }
                if (userColumnId.includes(columnMap[""PLF_Act""][0]) || columnMap[""PLF_Act""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Act</th>';
                }
                if (userColumnId.includes(columnMap[""PLF_Var""][0]) || columnMap[""PLF_Var""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Var (%)</th>';
                }
                if (userColumnId.includes(columnMap[""MA_Actual_Tar""][0]) || columnMap[""MA_Actual_Tar""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Tar</th>';
                }
                if (userColumnId.includes(columnMap[""MA_Actual_Act""][0]) || columnMap[""MA_Actual_Act""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Act</th>';
                }
                if (userColumnId.includes(columnMap[""MA_Actual_Var""][0]) || columnMap[""MA_Actual_Var""][1] == 1 || isAdmin == 1) {
 ");
            WriteLiteral(@"                   tbl += '<th>Var (%)</th>';
                }
                if (userColumnId.includes(columnMap[""IGA_Tar""][0]) || columnMap[""IGA_Tar""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Tar</th>';
                }
                if (userColumnId.includes(columnMap[""IGA_Act""][0]) || columnMap[""IGA_Act""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Act</th>';
                }
                if (userColumnId.includes(columnMap[""IGA_Var""][0]) || columnMap[""IGA_Var""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Var (%)</th>';
                }
                if (userColumnId.includes(columnMap[""EGA_Tar""][0]) || columnMap[""EGA_Tar""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Tar</th>';
                }
                if (userColumnId.includes(columnMap[""EGA_Act""][0]) || columnMap[""EGA_Act""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Act</th>';
                }
                if (userColumnId.includes(co");
            WriteLiteral(@"lumnMap[""EGA_Var""][0]) || columnMap[""EGA_Var""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Var (%)</th>';
                }
                tbl += '</tr></thead>';

                if (result.length > 0) {
                    exceldata1 = result;

                    console.log(""Datatable"");
                    let total_capacity = 0;
                    let total_capTarMu = 0;
                    let total_tar_mu = 0;
                    let total_exp_power = 0;
                    let total_act_jmr_kwh_mu = 0;
                    let avg_jmr_var = 0;
                    let total_revenue = 0;
                    let total_capTarWind = 0;
                    let total_tar_wind = 0;
                    let total_act_wind = 0;
                    let avg_wind_var = 0;
                    let total_capTarPlf = 0;
                    let total_tar_plf = 0;
                    let total_act_plf = 0;
                    let avg_plf_var = 0;
                    let total_capT");
            WriteLiteral(@"arMa = 0;
                    let total_tar_ma = 0;
                    let total_act_ma = 0;
                    let avg_ma_var = 0;
                    let total_capTarIga = 0;
                    let total_tar_iga = 0;
                    let total_act_iga = 0;
                    let avg_iga_var = 0;
                    let total_capTarEga = 0;
                    let total_tar_ega = 0;
                    let total_act_ega = 0;
                    let avg_ega_var = 0;
                    let total_capActWind = 0;
                    let total_capActPlf = 0;
                    let total_capActMa = 0;
                    let total_capActIga = 0;
                    let total_capActEga = 0;

                    for (var i = 0; i < result.length; i++) {
                        leble.push(result[i].spv);
                        let revenue = 0;
                        let jmr_var = 0;
                        let e_var = 0;
                        let wind_var = 0;
                    ");
            WriteLiteral(@"    let plf_var = 0;
                        let ma_act_var = 0;
                        let iga_var = 0;
                        let ega_var = 0;
                        let tar_mu = 0;
                        tar_mu = result[i].tar_kwh_mu / 1000000;
                        revenue = ((result[i].act_jmr_kwh_mu - tar_mu) * result[i].total_tarrif);
                        if (result[i].act_jmr_kwh_mu != 0 || result[i].tar_kwh_mu != 0) {
                            jmr_var = ((result[i].act_jmr_kwh_mu - tar_mu) / tar_mu) * 100;
                        }
                        if (result[i].exp_power != 0) {
                            //e_var = ((result[i].act_jmr_kwh_mu - (result[i].exp_power /6) / 1000000) / ((result[i].exp_power /6 ) / 1000000)) * 100;
                            e_var = (result[i].act_jmr_kwh_mu - result[i].exp_power) / (result[i].exp_power) * 100;

                            //if (result[i].site == ""Maragutti"") {
                            //    console.log(""Actual : "", r");
            WriteLiteral(@"esult[i].act_kwh, ""Expected : "", result[i].expected_kwh, ""evar : "" + e_var);
                            //    //    console.log(temp_e_var);
                            //}
                        }
                        if (result[i].act_Wind != 0 || result[i].tar_wind != 0) {
                            wind_var = ((result[i].act_Wind - result[i].tar_wind) / result[i].tar_wind) * 100;
                        }
                        plf_var = (result[i].act_plf - result[i].tar_plf);
                        ma_act_var = (result[i].act_ma - result[i].tar_ma);
                        iga_var = (result[i].act_iga - result[i].tar_iga);
                        ega_var = (result[i].act_ega - result[i].tar_ega);

                        //revenue_arr.push(revenue.toFixed(2));
			            total_capacity += result[i].total_mw;
                        total_tar_mu += tar_mu;
                        total_act_jmr_kwh_mu += result[i].act_jmr_kwh_mu;
                        total_exp_power += resul");
            WriteLiteral(@"t[i].exp_power;
                        total_revenue += revenue;
                        total_tar_wind += result[i].tar_wind;
                        total_act_wind += result[i].act_Wind;
                        total_tar_plf += result[i].tar_plf;
                        total_act_plf += result[i].act_plf;
                        total_tar_ma += result[i].tar_ma;
                        total_act_ma += result[i].act_ma;
                        total_tar_iga += result[i].tar_iga;
                        total_act_iga += result[i].act_iga;
                        total_tar_ega += result[i].tar_ega;
                        total_act_ega += result[i].act_ega;
                        total_capTarMu += tar_mu * result[i].total_mw;
                        total_capTarWind += result[i].tar_wind * result[i].total_mw;
                        total_capTarPlf += result[i].tar_plf * result[i].total_mw;
                        total_capTarMa += result[i].tar_ma * result[i].total_mw;
                      ");
            WriteLiteral(@"  total_capTarIga += result[i].tar_iga * result[i].total_mw;
                        total_capTarEga += result[i].tar_ega * result[i].total_mw;
                        total_capActWind += result[i].act_Wind * result[i].total_mw;
                        total_capActPlf += result[i].act_plf * result[i].total_mw;
                        total_capActMa += result[i].act_ma * result[i].total_mw;
                        total_capActIga += result[i].act_iga * result[i].total_mw;
                        total_capActEga += result[i].act_ega * result[i].total_mw;

                        tbl += '<tr>';
                        if (userColumnId.includes(columnMap[""SPV""][0]) || columnMap[""SPV""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"">' + result[i].spv + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Capacity""][0]) || columnMap[""Capacity""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-r");
            WriteLiteral(@"ight"">' + result[i].total_mw.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""GenNos_Tar""][0]) || columnMap[""GenNos_Tar""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + tar_mu.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""GenNos_Exp""][0]) || columnMap[""GenNos_Exp""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].exp_power.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""GenNos_ActJMR""][0]) || columnMap[""GenNos_ActJMR""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].act_jmr_kwh_mu.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""GenNos_TVar""][0]) || columnMap[""GenNos_TVar""][1] == 1 || isAdmin == 1) {
              ");
            WriteLiteral(@"              tbl += '<td class=""text-right"">' + jmr_var.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""GenNos_Evar""][0]) || columnMap[""GenNos_Evar""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + e_var.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Revenue""][0]) || columnMap[""Revenue""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + revenue.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Wind_Speed_Tar""][0]) || columnMap[""Wind_Speed_Tar""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].tar_wind.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Wind_Speed_Act""][0]) || columnMap[""Wind_Speed_Act""][1] == 1 || isAdmin == 1) {
 ");
            WriteLiteral(@"                           tbl += '<td class=""text-right"">' + result[i].act_Wind.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Wind_Speed_Var""][0]) || columnMap[""Wind_Speed_Var""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + wind_var.toFixed(2) + '</td>';
                        }                        
                        if (userColumnId.includes(columnMap[""PLF_Tar""][0]) || columnMap[""PLF_Tar""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].tar_plf.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""PLF_Act""][0]) || columnMap[""PLF_Act""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].act_plf.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""PLF_Var""][0]) || columnMap[""P");
            WriteLiteral(@"LF_Var""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + plf_var.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""MA_Actual_Tar""][0]) || columnMap[""MA_Actual_Tar""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].tar_ma.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""MA_Actual_Act""][0]) || columnMap[""MA_Actual_Act""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].act_ma.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""MA_Actual_Var""][0]) || columnMap[""MA_Actual_Var""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + ma_act_var.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""IGA_");
            WriteLiteral(@"Tar""][0]) || columnMap[""IGA_Tar""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].tar_iga.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""IGA_Act""][0]) || columnMap[""IGA_Act""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].act_iga.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""IGA_Var""][0]) || columnMap[""IGA_Var""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + iga_var.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGA_Tar""][0]) || columnMap[""EGA_Tar""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].tar_ega.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGA_Ac");
            WriteLiteral(@"t""][0]) || columnMap[""EGA_Act""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].act_ega.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGA_Var""][0]) || columnMap[""EGA_Var""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + ega_var.toFixed(2) + '</td>';
                        }
                        tbl += '</tr>';
                    }
                    let avg_tar_mu = 0;
                    let avg_e_var = 0;
                    let avg_tar_wind = 0;
                    let avg_tar_plf = 0;
                    let avg_tar_ma = 0;
                    let avg_tar_iga = 0;
                    let avg_tar_ega = 0;
                    let avg_act_wind = 0;
                    let avg_act_plf = 0;
                    let avg_act_ma = 0;
                    let avg_act_iga = 0;
                    let avg_act_ega = 0;


                ");
            WriteLiteral(@"    if (total_capacity != 0) {
                        avg_tar_mu = total_capTarMu / total_capacity;
                        avg_tar_wind = total_capTarWind / total_capacity;
                        avg_tar_plf = total_capTarPlf / total_capacity;
                        avg_tar_ma = total_capTarMa / total_capacity;
                        avg_tar_iga = total_capTarIga / total_capacity;
                        avg_tar_ega = total_capTarEga / total_capacity;
                        avg_act_wind = total_capActWind / total_capacity;
                        avg_act_plf = total_capActPlf / total_capacity;
                        avg_act_ma = total_capActMa / total_capacity;
                        avg_act_iga = total_capActIga / total_capacity;
                        avg_act_ega = total_capActEga / total_capacity;
                    }

                    if (total_tar_mu != 0) {
                        avg_jmr_var = (((total_act_jmr_kwh_mu - total_tar_mu) / total_tar_mu) * 100);
                 ");
            WriteLiteral(@"   }
                    if (avg_tar_wind != 0) {
                        avg_wind_var = ((avg_act_wind.toFixed(2) - avg_tar_wind.toFixed(2)) / avg_tar_wind.toFixed(2)) * 100;
                    }
                    if (total_exp_power != 0) {
                        avg_e_var = (((total_act_jmr_kwh_mu.toFixed(2) - total_exp_power.toFixed(2)) / total_exp_power.toFixed(2)) * 100);
                    }

                    avg_plf_var = (avg_act_plf - avg_tar_plf);
                    avg_ma_var = (avg_act_ma - avg_tar_ma);
                    avg_iga_var = (avg_act_iga - avg_tar_iga);
                    avg_ega_var = (avg_act_ega - avg_tar_ega);

                    tbl += '<tfoot><tr>';
                    tbl += '<th rowspan=""1""  style=""width: 10%; font-weight: bold;"">Grand Total</th>';
                    if (userColumnId.includes(columnMap[""Capacity""][0]) || columnMap[""Capacity""][1] == 1 || isAdmin == 1) {
                        tbl += '<td class=""text-right"" style=""font-weight: bold;""");
            WriteLiteral(@"><b>' + total_capacity.toFixed(2) + '</b></td>';
                    }
                    if (userColumnId.includes(columnMap[""GenNos_Tar""][0]) || columnMap[""GenNos_Tar""][1] == 1 || isAdmin == 1) {
                        tbl += '<td class=""text-right""><b>' + total_tar_mu.toFixed(2) + '</b></td>';
                    }
                    if (userColumnId.includes(columnMap[""GenNos_Exp""][0]) || columnMap[""GenNos_Exp""][1] == 1 || isAdmin == 1) {
                        tbl += '<td class=""text-right""><b>' + total_exp_power.toFixed(2) + '</b></td>';
                    }
                    if (userColumnId.includes(columnMap[""GenNos_ActJMR""][0]) || columnMap[""GenNos_ActJMR""][1] == 1 || isAdmin == 1) {
                        tbl += '<td class=""text-right""><b>' + total_act_jmr_kwh_mu.toFixed(2) + '</b></td>';
                    }
                    if (userColumnId.includes(columnMap[""GenNos_TVar""][0]) || columnMap[""GenNos_TVar""][1] == 1 || isAdmin == 1) {
                        tbl += '<td class");
            WriteLiteral(@"=""text-right""><b>' + avg_jmr_var.toFixed(2) + '</b></td>';
                    }
                    if (userColumnId.includes(columnMap[""GenNos_Evar""][0]) || columnMap[""GenNos_Evar""][1] == 1 || isAdmin == 1) {
                        tbl += '<td class=""text-right""><b>' + avg_e_var.toFixed(2) + '</b></td>';
                    }
                    if (userColumnId.includes(columnMap[""Revenue""][0]) || columnMap[""Revenue""][1] == 1 || isAdmin == 1) {
                        tbl += '<td class=""text-right""><b>' + total_revenue.toFixed(2) + '</b></td>';
                    }

                    if (userColumnId.includes(columnMap[""Wind_Speed_Tar""][0]) || columnMap[""Wind_Speed_Tar""][1] == 1 || isAdmin == 1) {
                        tbl += '<td class=""text-right""><b>' + avg_tar_wind.toFixed(2) + '</b></td>';
                    }
                    if (userColumnId.includes(columnMap[""Wind_Speed_Act""][0]) || columnMap[""Wind_Speed_Act""][1] == 1 || isAdmin == 1) {
                        tbl += '<td cl");
            WriteLiteral(@"ass=""text-right""><b>' + avg_act_wind.toFixed(2) + '</b></td>';
                    }
                    if (userColumnId.includes(columnMap[""Wind_Speed_Var""][0]) || columnMap[""Wind_Speed_Var""][1] == 1 || isAdmin == 1) {
                        tbl += '<td class=""text-right""><b>' + avg_wind_var.toFixed(2) + '</b></td>';
                    }
                    if (userColumnId.includes(columnMap[""PLF_Tar""][0]) || columnMap[""PLF_Tar""][1] == 1 || isAdmin == 1) {
                        tbl += '<td class=""text-right""><b>' + avg_tar_plf.toFixed(2) + '</b></td>';
                    }
                    if (userColumnId.includes(columnMap[""PLF_Act""][0]) || columnMap[""PLF_Act""][1] == 1 || isAdmin == 1) {
                        tbl += '<td class=""text-right""><b>' + avg_act_plf.toFixed(2) + '</b></td>';
                    }
                    if (userColumnId.includes(columnMap[""PLF_Var""][0]) || columnMap[""PLF_Var""][1] == 1 || isAdmin == 1) {
                        tbl += '<td class=""text-right""><b>");
            WriteLiteral(@"' + avg_plf_var.toFixed(2) + '</b></td>';
                    }



                    if (userColumnId.includes(columnMap[""MA_Actual_Tar""][0]) || columnMap[""MA_Actual_Tar""][1] == 1 || isAdmin == 1) {
                        tbl += '<td class=""text-right""><b>' + avg_tar_ma.toFixed(2) + '</b></td>';
                    }
                    if (userColumnId.includes(columnMap[""MA_Actual_Act""][0]) || columnMap[""MA_Actual_Act""][1] == 1 || isAdmin == 1) {
                        tbl += '<td class=""text-right""><b>' + avg_act_ma.toFixed(2) + '</b></td>';
                    }
                    if (userColumnId.includes(columnMap[""MA_Actual_Var""][0]) || columnMap[""MA_Actual_Var""][1] == 1 || isAdmin == 1) {
                        tbl += '<td class=""text-right""><b>' + avg_ma_var.toFixed(2) + '</b></td>';
                    }
                    if (userColumnId.includes(columnMap[""IGA_Tar""][0]) || columnMap[""IGA_Tar""][1] == 1 || isAdmin == 1) {
                        tbl += '<td class=""text-right"">");
            WriteLiteral(@"<b>' + avg_tar_iga.toFixed(2) + '</b></td>';
                    }
                    if (userColumnId.includes(columnMap[""IGA_Act""][0]) || columnMap[""IGA_Act""][1] == 1 || isAdmin == 1) {
                        tbl += '<td class=""text-right""><b>' + avg_act_iga.toFixed(2) + '</b></td>';
                    }
                    if (userColumnId.includes(columnMap[""IGA_Var""][0]) || columnMap[""IGA_Var""][1] == 1 || isAdmin == 1) {
                        tbl += '<td class=""text-right""><b>' + avg_iga_var.toFixed(2) + '</b></td>';
                    }
                    if (userColumnId.includes(columnMap[""EGA_Tar""][0]) || columnMap[""EGA_Tar""][1] == 1 || isAdmin == 1) {
                        tbl += '<td class=""text-right""><b>' + avg_tar_ega.toFixed(2) + '</b></td>';
                    }
                    if (userColumnId.includes(columnMap[""EGA_Act""][0]) || columnMap[""EGA_Act""][1] == 1 || isAdmin == 1) {
                        tbl += '<td class=""text-right""><b>' + avg_act_ega.toFixed(2) + '</b");
            WriteLiteral(@"></td>';
                    }
                    if (userColumnId.includes(columnMap[""EGA_Var""][0]) || columnMap[""EGA_Var""][1] == 1 || isAdmin == 1) {
                        tbl += '<td class=""text-right""><b>' + avg_ega_var.toFixed(2) + '</b></td>';
                    }
                    tbl += '</tr></tfoot>';
                }
                else {
                    console.log(""Data not available"");

                }
                tbl += '</table>';
                //$(""#reportsDaily"").html(tbl);
                $(""#reportsDaily"").html("""").html(tbl);
                $.fn.DataTable.ext.pager.numbers_length = 6;
                $('#example1').DataTable({
                    dom: 'Bfrtip',
                    fixedHeader: true,
                    responsive: true,
                    scrollX: true,
                   lengthChange: false,
                    paging: true,
                    lengthChange: false,
                    searching: true,
                    order");
            WriteLiteral(@"ing: true,
                    info: true,
                    fixedColumns: {
                        left: 2
                    },
                    autoWidth: true,
                    pageLength: 50,
                    buttons: [
                        {
                            extend:'excel',
                            footer: true,
                            title:'Wind Performance Reports SPV Wise',
                            //titleAttr: 'Export Excel',
                            ""oSelectorOpts"": { filter: 'applied', order: 'current' },
                            exportOptions: {
                                columns: ':visible',
                                modifier: {
                                    page: 'all'
                                },
                                format: {
                                    header: function (data, columnIdx) {
                                        if (columnIdx == 1) {
                                    ");
            WriteLiteral(@"        return 'Capacity (MW)';
                                        }
                                        else if (columnIdx == 2) {
                                            return 'JMR Energy (in MU)  Tar';
                                        }
                                        else if (columnIdx == 3) {
                                            return 'JMR Energy (in MU)  Exp';
                                        }
                                        else if (columnIdx == 4) {
                                            return 'JMR Energy (in MU)  Act';
                                        }
                                        else if (columnIdx == 5) {
                                            return 'JMR Energy (in MU)  T.Var (%)';
                                        }
                                        else if (columnIdx == 6) {
                                            return 'JMR Energy (in MU)  E.Var (%)';
                             ");
            WriteLiteral(@"           }
                                        else if (columnIdx == 7) {
                                            return 'Revenue (MINR) ';
                                        }
                                        else if (columnIdx == 8) {
                                            return 'Wind Speed (m/s)  Tar';
                                        }
                                        else if (columnIdx == 9) {
                                            return 'Wind Speed (m/s)  Act ';
                                        }
                                        else if (columnIdx == 10) {
                                            return 'Wind Speed (m/s)  Var (%) ';
                                        }
                                        else if (columnIdx == 11) {
                                            return 'PLF (%)  Tar';
                                        }
                                        else if (columnIdx == 12) {
        ");
            WriteLiteral(@"                                    return 'PLF (%)  Act ';
                                        }
                                        else if (columnIdx == 13) {
                                            return 'PLF (%)  Var (%) ';
                                        }
                                        else if (columnIdx == 14) {
                                            return 'MA Actual (%)  Tar';
                                        }
                                        else if (columnIdx == 15) {
                                            return 'MA Actual (%)  Act ';
                                        }
                                        else if (columnIdx == 16) {
                                            return 'MA Actual (%)  Var (%) ';
                                        }
                                        else if (columnIdx == 17) {
                                            return 'IGA (%)  Tar';
                                  ");
            WriteLiteral(@"      }
                                        else if (columnIdx == 18) {
                                            return 'IGA (%)  Act ';
                                        }
                                        else if (columnIdx == 19) {
                                            return 'IGA (%)  Var (%) ';
                                        }
                                        else if (columnIdx == 20) {
                                            return 'EGA (%)  Tar';
                                        }
                                        else if (columnIdx == 21) {
                                            return 'EGA (%)  Act ';
                                        }
                                        else if (columnIdx == 22) {
                                            return 'EGA (%)  Var (%) ';
                                        }
                                        else {
                                            return data");
            WriteLiteral(@";
                                        }
                                    }
                                }
                            }
                        },
                        {
                            extend: 'csv',
                            footer: true,
                            title: 'Wind Performance Reports SPV Wise',
                            //titleAttr: 'Export Excel',
                            ""oSelectorOpts"": { filter: 'applied', order: 'current' },
                            exportOptions: {
                                columns: ':visible',
                                modifier: {
                                    page: 'all'
                                },
                                format: {
                                    header: function (data, columnIdx) {
                                        if (columnIdx == 1) {
                                            return 'Capacity (MW)';
                                  ");
            WriteLiteral(@"      }
                                        else if (columnIdx == 2) {
                                            return 'JMR Energy (in MU)  Tar';
                                        }
                                        else if (columnIdx == 3) {
                                            return 'JMR Energy (in MU)  Exp';
                                        }
                                        else if (columnIdx == 4) {
                                            return 'JMR Energy (in MU)  Act';
                                        }
                                        else if (columnIdx == 5) {
                                            return 'JMR Energy (in MU)  T.Var (%)';
                                        }
                                        else if (columnIdx == 6) {
                                            return 'JMR Energy (in MU)  E.Var (%)';
                                        }
                                        else if (colu");
            WriteLiteral(@"mnIdx == 7) {
                                            return 'Revenue (MINR) ';
                                        }
                                        else if (columnIdx == 8) {
                                            return 'Wind Speed (m/s)  Tar';
                                        }
                                        else if (columnIdx == 9) {
                                            return 'Wind Speed (m/s)  Act ';
                                        }
                                        else if (columnIdx == 10) {
                                            return 'Wind Speed (m/s)  Var (%) ';
                                        }
                                        else if (columnIdx == 11) {
                                            return 'PLF (%)  Tar';
                                        }
                                        else if (columnIdx == 12) {
                                            return 'PLF (%)  Act ';
      ");
            WriteLiteral(@"                                  }
                                        else if (columnIdx == 13) {
                                            return 'PLF (%)  Var (%) ';
                                        }
                                        else if (columnIdx == 14) {
                                            return 'MA Actual (%)  Tar';
                                        }
                                        else if (columnIdx == 15) {
                                            return 'MA Actual (%)  Act ';
                                        }
                                        else if (columnIdx == 16) {
                                            return 'MA Actual (%)  Var (%) ';
                                        }
                                        else if (columnIdx == 17) {
                                            return 'IGA (%)  Tar';
                                        }
                                        else if (columnIdx");
            WriteLiteral(@" == 18) {
                                            return 'IGA (%)  Act ';
                                        }
                                        else if (columnIdx == 19) {
                                            return 'IGA (%)  Var (%) ';
                                        }
                                        else if (columnIdx == 20) {
                                            return 'EGA (%)  Tar';
                                        }
                                        else if (columnIdx == 21) {
                                            return 'EGA (%)  Act ';
                                        }
                                        else if (columnIdx == 22) {
                                            return 'EGA (%)  Var (%) ';
                                        }
                                        else {
                                            return data;
                                        }
                     ");
            WriteLiteral(@"               }
                                }
                            }
                        },
                        {
                            extend: 'colvis',
                            //  columns: ':not(.noVis)',
                            columnText: function (dt, idx, title) {
                                if (idx == 1) {
                                    return 'Capacity (MW)';
                                }
                                else if (idx == 2) {
                                    return 'JMR Energy (in MU)  Tar';
                                }
                                else if (idx == 3) {
                                    return 'JMR Energy (in MU)  Exp';
                                }
                                else if (idx == 4) {
                                    return 'JMR Energy (in MU)  Act';
                                }
                                else if (idx == 5) {
                                ");
            WriteLiteral(@"    return 'JMR Energy (in MU)  T.Var (%)';
                                }
                                else if (idx == 6) {
                                    return 'JMR Energy (in MU)  E.Var (%)';
                                }
                                else if (idx == 7) {
                                    return 'Revenue (MINR) ';
                                }
                                else if (idx == 8) {
                                    return 'Wind Speed (m/s)  Tar';
                                }
                                else if (idx == 9) {
                                    return 'Wind Speed (m/s)  Act ';
                                }
                                else if (idx == 10) {
                                    return 'Wind Speed (m/s)  Var (%) ';
                                }
                                else if (idx == 11) {
                                    return 'PLF (%)  Tar';
                              ");
            WriteLiteral(@"  }
                                else if (idx == 12) {
                                    return 'PLF (%)  Act ';
                                }
                                else if (idx == 13) {
                                    return 'PLF (%)  Var (%) ';
                                }
                                else if (idx == 14) {
                                    return 'MA Actual (%)  Tar';
                                }
                                else if (idx == 15) {
                                    return 'MA Actual (%)  Act ';
                                }
                                else if (idx == 16) {
                                    return 'MA Actual (%)  Var (%) ';
                                }
                                else if (idx == 17) {
                                    return 'IGA (%)  Tar';
                                }
                                else if (idx == 18) {
                                  ");
            WriteLiteral(@"  return 'IGA (%)  Act ';
                                }
                                else if (idx == 19) {
                                    return 'IGA (%)  Var (%) ';
                                }
                                else if (idx == 20) {
                                    return 'EGA (%)  Tar';
                                }
                                else if (idx == 21) {
                                    return 'EGA (%)  Act ';
                                }
                                else if (idx == 22) {
                                    return 'EGA (%)  Var (%) ';
                                }
                                else {
                                    return title;
                                }
                            }
                        },

                        {
                            text: '<span class=""fas fa-file-excel"" title=""Download from DB up to six decimal""></span>',
                ");
            WriteLiteral(@"            className: 'btn ml-1   ',

                            action: function () {
                             ExportToExcelSPVWise()
                            },
                             format: {
                                    header: function (data, columnIdx) {
                                        if (columnIdx == 1) {
                                            return 'Capacity (MW)';
                                        }
                                        else if (columnIdx == 2) {
                                            return 'JMR Energy (in MU)  Tar';
                                        }
                                        else if (columnIdx == 3) {
                                            return 'JMR Energy (in MU)  Exp';
                                        }
                                        else if (columnIdx == 4) {
                                            return 'JMR Energy (in MU)  Act';
                               ");
            WriteLiteral(@"         }
                                        else if (columnIdx == 5) {
                                            return 'JMR Energy (in MU)  T.Var (%)';
                                        }
                                        else if (columnIdx == 6) {
                                            return 'JMR Energy (in MU)  E.Var (%)';
                                        }
                                        else if (columnIdx == 7) {
                                            return 'Revenue (MINR) ';
                                        }
                                        else if (columnIdx == 8) {
                                            return 'Wind Speed (m/s)  Tar';
                                        }
                                        else if (columnIdx == 9) {
                                            return 'Wind Speed (m/s)  Act ';
                                        }
                                        else if (columnIdx ==");
            WriteLiteral(@" 10) {
                                            return 'Wind Speed (m/s)  Var (%) ';
                                        }
                                        else if (columnIdx == 11) {
                                            return 'PLF (%)  Tar';
                                        }
                                        else if (columnIdx == 12) {
                                            return 'PLF (%)  Act ';
                                        }
                                        else if (columnIdx == 13) {
                                            return 'PLF (%)  Var (%) ';
                                        }
                                        else if (columnIdx == 14) {
                                            return 'MA Actual (%)  Tar';
                                        }
                                        else if (columnIdx == 15) {
                                            return 'MA Actual (%)  Act ';
               ");
            WriteLiteral(@"                         }
                                        else if (columnIdx == 16) {
                                            return 'MA Actual (%)  Var (%) ';
                                        }
                                        else if (columnIdx == 17) {
                                            return 'IGA (%)  Tar';
                                        }
                                        else if (columnIdx == 18) {
                                            return 'IGA (%)  Act ';
                                        }
                                        else if (columnIdx == 19) {
                                            return 'IGA (%)  Var (%) ';
                                        }
                                        else if (columnIdx == 20) {
                                            return 'EGA (%)  Tar';
                                        }
                                        else if (columnIdx == 21) {
          ");
            WriteLiteral(@"                                  return 'EGA (%)  Act ';
                                        }
                                        else if (columnIdx == 22) {
                                            return 'EGA (%)  Var (%) ';
                                        }
                                        else {
                                            return data;
                                        }
                                    }
                                }
                        },

                    ]
                });
                $("".dt-buttons"").addClass('btn-group flex-wrap');
                $("".dt-buttons > button"").addClass('btn btn-secondary');
                $("".dataTables_filter> label >input"").addClass('form-control form-control-sm');
                $(document).on(""click"", ""div.dt-button-collection > div > button"", function () {
                    if ($(this).hasClass(""active"")) {
                        $(this).css(""background-c");
            WriteLiteral(@"olor"", ""white"");
                    } else {
                        $(this).css(""background-color"", ""#31576d"");
                    }
                });
               // $('#example1').wrap(""<div class='scrolledTable'></div>"");
                document.getElementById(""loader"").style.display = 'none';

            }
        });


    }
  function ExportToExcelSiteWise() {

    console.log(exceldata2)
    result = exceldata2;

    var columns = [
       ""Site"",""Capacity"",""JMR Energy (in MU) Tar"",""JMR Energy (in MU) Exp"",""JMR Energy (in MU) Act"",""JMR Energy (in MU) T.var(%)"",""JMR Energy (in MU) E.var(%)"",""Revenue (MINR)"","" Wind Speed (m/s) Tar"",""Wind Speed (m/s) Act "",""Wind Speed (m/s) Var (%)"",""PLF (%) Tar"",
       ""PLF (%) Act "",""PLF (%) Var (%) "",""MA Actual (%) Tar"",""MA Actual (%) Act "",""MA Actual (%) Var (%) "",""IGA (%) Tar"",""IGA (%) Act "",""IGA (%) Var (%) "",""EGA (%) Tar"",""EGA (%) Act "",""EGA (%) Var (%) ""
    ];

    var rows = [];

    for (var i = 0; i < result.length; i++) {
 ");
            WriteLiteral(@"       var row = [];
         var Energy_Dataset = [];
        var Wind_Dataset = [];
        var Levels = [];
       let target_energy = [];
                    let actual_energy = [];
                    let pas_energy_var = [];
                    let neg_energy_var = [];
                    let target_wind = [];
                    let actual_wind = [];
                    let pas_wind_var = [];
                    let neg_wind_var = [];
	                let total_capacity = 0;
                    let total_capTarMu = 0;
                    let total_exp_power = 0;
                    let total_tar_mu = 0;
                    let total_act_jmr_kwh_mu = 0;
                    let avg_jmr_var = 0;
                    let total_revenue = 0;
                    let total_capTarWind = 0;
                    let total_tar_wind = 0;
                    let total_act_wind = 0;
                    let avg_wind_var = 0;
                    let total_capTarPlf = 0;
                    let tot");
            WriteLiteral(@"al_tar_plf = 0;
                    let total_act_plf = 0;
                    let avg_plf_var = 0;
                    let total_capTarMa = 0;
                    let total_tar_ma = 0;
                    let total_act_ma = 0;
                    let avg_ma_var = 0;
                    let total_capTarIga = 0;
                    let total_tar_iga = 0;
                    let total_act_iga = 0;
                    let avg_iga_var = 0;
                    let total_capTarEga = 0;
                    let total_tar_ega = 0;
                    let total_act_ega = 0;
                    let avg_ega_var = 0;
                    let total_capActWind = 0;
                    let total_capActPlf = 0;
                    let total_capActMa = 0;
                    let total_capActIga = 0;
                    let total_capActEga = 0;
                        let revenue = 0;
                        let jmr_var = 0;
                        let e_var = 0;
                        let wind_var = 0;
");
            WriteLiteral(@"                        let plf_var = 0;
                        let ma_act_var = 0;
                        let iga_var = 0;
                        let ega_var = 0;
                        let tar_mu = 0;
                        tar_mu = result[i].tar_kwh_mu / 1000000;
                        revenue = ((result[i].act_jmr_kwh_mu - tar_mu) * result[i].total_tarrif);
                        if (result[i].act_jmr_kwh_mu != 0 || result[i].tar_kwh_mu != 0) {
                            jmr_var = ((result[i].act_jmr_kwh_mu - tar_mu) / tar_mu) * 100;
                        }
                        if (result[i].act_Wind != 0 || result[i].tar_wind != 0) {
                            wind_var = ((result[i].act_Wind.toFixed(2) - result[i].tar_wind.toFixed(2)) / result[i].tar_wind.toFixed(2)) * 100;
                        }
                        if (result[i].exp_power != 0) {
                            //e_var = ((result[i].act_jmr_kwh_mu - (result[i].exp_power / 6) / 1000000) / ((result[i].exp_po");
            WriteLiteral(@"wer / 6) / 1000000)) * 100;
                            e_var = (result[i].act_jmr_kwh_mu - result[i].exp_power) / (result[i].exp_power) * 100;
                            //if (result[i].site == ""Maragutti"") {
                            //    console.log(""Actual : "", result[i].act_kwh, ""Expected : "", result[i].expected_kwh, ""evar : "" + e_var);
                            //    //    console.log(temp_e_var);
                            //}
                        }

                        plf_var = (result[i].act_plf - result[i].tar_plf);
                        ma_act_var = (result[i].act_ma - result[i].tar_ma);
                        iga_var = (result[i].act_iga - result[i].tar_iga);
                        ega_var = (result[i].act_ega - result[i].tar_ega);

                        let pasitive;
                        let negative;
                        if (jmr_var < 0) {
                            negative = jmr_var;
                        }
                        else {
       ");
            WriteLiteral(@"                     pasitive = jmr_var;
                        }
                        let w_pasitive;
                        let w_negative;
                        if (wind_var < 0) {
                            w_negative = wind_var;
                        }
                        else {
                            w_pasitive = wind_var;
                        }

                        target_energy.push(result[i].tar_kwh_mu.toFixed(2));
                        actual_energy.push(result[i].act_jmr_kwh_mu.toFixed(2));
                        pas_energy_var.push(pasitive);
                        neg_energy_var.push(negative);
                        Levels.push(result[i].site);
                        target_wind.push(result[i].tar_wind.toFixed(2));
                        actual_wind.push(result[i].act_Wind.toFixed(2));
                        pas_wind_var.push(w_pasitive);
                        neg_wind_var.push(w_negative);

                        total_capacity += result");
            WriteLiteral(@"[i].total_mw;
                        total_tar_mu += tar_mu;
                        total_act_jmr_kwh_mu += result[i].act_jmr_kwh_mu;
                        //total_exp_power += (result[i].exp_power / 6) / 1000000;
                        total_exp_power += result[i].exp_power;
                        total_revenue += revenue;
                        total_tar_wind += result[i].tar_wind;
                        total_act_wind += result[i].act_Wind;
                        total_tar_plf += result[i].tar_plf;
                        total_act_plf += result[i].act_plf;
                        total_tar_ma += result[i].tar_ma;
                        total_act_ma += result[i].act_ma;
                        total_tar_iga += result[i].tar_iga;
                        total_act_iga += result[i].act_iga
                        total_tar_ega += result[i].tar_ega;
                        total_act_ega += result[i].act_ega;
                        total_capTarMu += tar_mu * result[i].total_mw;
     ");
            WriteLiteral(@"                   total_capTarWind += result[i].tar_wind * result[i].total_mw;
                        total_capTarPlf += result[i].tar_plf * result[i].total_mw;
                        total_capTarMa += result[i].tar_ma * result[i].total_mw;
                        total_capTarIga += result[i].tar_iga * result[i].total_mw;
                        total_capTarEga += result[i].tar_ega * result[i].total_mw;
                        total_capActWind += result[i].act_Wind * result[i].total_mw;
                        total_capActPlf += result[i].act_plf * result[i].total_mw;
                        total_capActMa += result[i].act_ma * result[i].total_mw;
                        total_capActIga += result[i].act_iga * result[i].total_mw;
                        total_capActEga += result[i].act_ega * result[i].total_mw;

        row.push(result[i].site);
        row.push(result[i].total_mw);
        row.push(tar_mu);
        row.push(result[i].exp_power);
        row.push(result[i].act_jmr_kwh_mu);
 ");
            WriteLiteral(@"       row.push( jmr_var);
        row.push(e_var);
        row.push(revenue);
        row.push(result[i].tar_wind);
        row.push(result[i].act_Wind);
        row.push(wind_var);
        row.push(result[i].tar_plf);
        row.push(result[i].act_plf);
        row.push(plf_var);
        row.push( result[i].tar_ma);
        row.push(result[i].act_ma);
        row.push(ma_act_var);
        row.push(result[i].tar_iga);
        row.push(result[i].act_iga);
        row.push(iga_var);
        row.push(result[i].tar_ega);
        row.push( result[i].act_ega);
        row.push( ega_var);
        rows.push(row);



    }

    var data = [columns].concat(rows);

    var ws = XLSX.utils.aoa_to_sheet(data);
    var wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, ""Wind PerformanceSum SiteWise"");
    var wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'binary' });

    function s2ab(s) {
        var buf = new ArrayBuffer(s.length);
        var view = new Uint8Array");
            WriteLiteral(@"(buf);
        for (var i = 0; i !== s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
        return buf;
    }

    saveAs(new Blob([s2ab(wbout)], { type: ""application/octet-stream"" }), ""Wind PerformanceSum SiteWise.xlsx"");

}
   // -----------------------------------------------

    // Daily Gen Report Site WIse
    function GetWindPRReportSiteWise() {
        document.getElementById(""loader"").style.display = 'flex';
        var site_ids = """);
#nullable restore
#line 1753 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindPRReport.cshtml"
                   Write(Html.Raw(windSiteList.TrimEnd(',')));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""";
        let site = """";
        let spv = """";
        $('select#site option:selected').each(function () {
            site += $(this).val() + "","";
        });
        site = site != """" ? site.slice(0, -1) : site;

        $('select#spv option:selected').each(function () {
            spv += $(this).val() + "","";
        });
        spv = spv != """" ? spv.slice(0, -1) : spv;
        if (userRole == ""User"" && site == """") {
            site = site_ids;
        }
        var daterange = $('#daterange').val();
        var arr1 = new Array();
        arr1 = daterange.split(""-"");
        var fromDate = moment(arr1[0], 'DD/MM/YYYY').format('YYYY-MM-DD');
        var toDate = moment(arr1[1], 'DD/MM/YYYY').format('YYYY-MM-DD');
        var fyear = Fy;
        console.log(fyear);
        var reporthead = ""Site Wise Reports"";
        var Energy_Dataset = [];
        var Wind_Dataset = [];
        var Levels = [];
        //var Actual_Energy_Dataset = [];
        //var Energy_var_Dataset = [];
");
            WriteLiteral("        document.getElementById(\"loader\").style.display = \'flex\';\r\n        $.ajax({\r\n            type: \"GET\",\r\n            url: \'");
#nullable restore
#line 1784 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindPRReport.cshtml"
             Write(Url.Action("GetWindPRReportSiteWise", "WindReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?fy=' + fyear + '&fromDate=' + fromDate + '&toDate=' + toDate + '&sitelist=' + site+'&spv='+spv,
            //url: ""/WindReport/GetWindPRReportSiteWise?fy="" + fyear+"" &fromDate="" + fromDate + ""&toDate="" + toDate,
            contentType: ""application/json; charset=utf-8"",
            datatype: ""JSON"",
            success: function (result, status, xhr) {
                console.log(result);
                var genNosSubCols = 0;
                var plfSubCols = 0;
                var maSubCols = 0;
                var igaSubCols = 0;
                var egaSubCols = 0;
                var windSpeedSubCols = 0;

                if (userColumnId.includes(columnMap[""GenNos_Tar""][0]) || isAdmin == 1) {
                    genNosSubCols++;
                }
                if (userColumnId.includes(columnMap[""GenNos_Exp""][0]) || isAdmin == 1) {
                    genNosSubCols++;
                }
                if (userColumnId.includes(columnMap[""GenNos_ActJMR""][0]) || isAdmin == 1) {");
            WriteLiteral(@"
                    genNosSubCols++;
                }
                if (userColumnId.includes(columnMap[""GenNos_TVar""][0]) || isAdmin == 1) {
                    genNosSubCols++;
                }
                if (userColumnId.includes(columnMap[""GenNos_Evar""][0]) || isAdmin == 1) {
                    genNosSubCols++;
                }

                if (userColumnId.includes(columnMap[""Wind_Speed_Tar""][0]) || isAdmin == 1) {
                    windSpeedSubCols++;
                }
                if (userColumnId.includes(columnMap[""Wind_Speed_Act""][0]) || isAdmin == 1) {
                    windSpeedSubCols++;
                }
                if (userColumnId.includes(columnMap[""Wind_Speed_Var""][0]) || isAdmin == 1) {
                    windSpeedSubCols++;
                }

                if (userColumnId.includes(columnMap[""PLF_Tar""][0]) || isAdmin == 1) {
                    plfSubCols++;
                }
                if (userColumnId.includes(columnMap[""PLF_Act""][");
            WriteLiteral(@"0]) || isAdmin == 1) {
                    plfSubCols++;
                }
                if (userColumnId.includes(columnMap[""PLF_Var""][0]) || isAdmin == 1) {
                    plfSubCols++;
                }

                if (userColumnId.includes(columnMap[""MA_Actual_Tar""][0]) || isAdmin == 1) {
                    maSubCols++;
                }
                if (userColumnId.includes(columnMap[""MA_Actual_Act""][0]) || isAdmin == 1) {
                    maSubCols++;
                }
                if (userColumnId.includes(columnMap[""MA_Actual_Var""][0]) || isAdmin == 1) {
                    maSubCols++;
                }

                if (userColumnId.includes(columnMap[""IGA_Tar""][0]) || isAdmin == 1) {
                    igaSubCols++;
                }
                if (userColumnId.includes(columnMap[""IGA_Act""][0]) || isAdmin == 1) {
                    igaSubCols++;
                }
                if (userColumnId.includes(columnMap[""IGA_Var""][0]) || isAdmin == ");
            WriteLiteral(@"1) {
                    igaSubCols++;
                }

                if (userColumnId.includes(columnMap[""EGA_Tar""][0]) || isAdmin == 1) {
                    egaSubCols++;
                }
                if (userColumnId.includes(columnMap[""EGA_Act""][0]) || isAdmin == 1) {
                    egaSubCols++;
                }
                if (userColumnId.includes(columnMap[""EGA_Var""][0]) || isAdmin == 1) {
                    egaSubCols++;
                }


               // var tbl = '<div class=""text-center""><h5>' + reporthead + '</h5></div>';
                var tbl = '<table id=""example2""  class=""table table-bordered table-striped"" style=""width: 130%;"">';
                tbl += '<thead class=""tbl-head""><tr>';
                if (userColumnId.includes(columnMap[""Site""][0]) || columnMap[""Site""][1] == 1 || isAdmin == 1) {
                    tbl += '<th rowspan=""2""  style=""width: 10%;"">Site</th>';
                }
                if (userColumnId.includes(columnMap[""Capacity");
            WriteLiteral(@"""][0]) || columnMap[""Capacity""][1] == 1 || isAdmin == 1) {
                    tbl += '<th rowspan=""2"">Capacity<br> (MW)</th>';
                }
                if (genNosSubCols > 0) {
                    tbl += '<th colspan=""' + genNosSubCols + '"" class=""text-center"">JMR Energy (in MU)</th >';
                }
                if (userColumnId.includes(columnMap[""Revenue""][0]) || columnMap[""Revenue""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>(±)Revenue</th>';
                }
                if (windSpeedSubCols > 0) {
                    tbl += '<th colspan=""' + windSpeedSubCols + '"" class=""text-center"">Wind Speed (m/s)</th>';
                }
                if (plfSubCols > 0) {
                    tbl += '<th colspan=""' + plfSubCols + '"" class=""text-center"">PLF (%)</th>';
                }
                if (maSubCols > 0) {
                    tbl += '<th colspan=""' + maSubCols + '"" class=""text-center"">MA Actual (%)</th>';
                }
                if (iga");
            WriteLiteral(@"SubCols > 0) {
                    tbl += '<th colspan=""' + igaSubCols + '"" class=""text-center"">IGA (%)</th>';
                }
                if (egaSubCols > 0) {
                    tbl += '<th colspan=""' + egaSubCols + '"" class=""text-center"">EGA (%)</th>';
                }
                tbl += '</tr>';

               // tbl += '<tr><th>&nbsp;</th>';
                //tbl += '<th>(MW)</th>';
                tbl += '<tr>';
                if (userColumnId.includes(columnMap[""GenNos_Tar""][0]) || columnMap[""GenNos_Tar""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Tar</th>';
                }
                if (userColumnId.includes(columnMap[""GenNos_Exp""][0]) || columnMap[""GenNos_Exp""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Exp</th>';
                }
                if (userColumnId.includes(columnMap[""GenNos_ActJMR""][0]) || columnMap[""GenNos_ActJMR""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Act</th>';
                }
        ");
            WriteLiteral(@"        if (userColumnId.includes(columnMap[""GenNos_TVar""][0]) || columnMap[""GenNos_TVar""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>T.Var (%)</th>';
                }
                if (userColumnId.includes(columnMap[""GenNos_Evar""][0]) || columnMap[""GenNos_Evar""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>E.Var (%)</th>';
                }
                if (userColumnId.includes(columnMap[""Revenue""][0]) || columnMap[""Revenue""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>(MINR)</th>';
                }
                if (userColumnId.includes(columnMap[""Wind_Speed_Tar""][0]) || columnMap[""Wind_Speed_Tar""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Tar</th>';
                }
                if (userColumnId.includes(columnMap[""Wind_Speed_Act""][0]) || columnMap[""Wind_Speed_Act""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Act</th>';
                }
                if (userColumnId.includes(columnMap[""Wind_Speed");
            WriteLiteral(@"_Var""][0]) || columnMap[""Wind_Speed_Var""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Var (%)</th>';
                }
                if (userColumnId.includes(columnMap[""PLF_Tar""][0]) || columnMap[""PLF_Tar""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Tar</th>';
                }
                if (userColumnId.includes(columnMap[""PLF_Act""][0]) || columnMap[""PLF_Act""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Act</th>';
                }
                if (userColumnId.includes(columnMap[""PLF_Var""][0]) || columnMap[""PLF_Var""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Var (%)</th>';
                }
                if (userColumnId.includes(columnMap[""MA_Actual_Tar""][0]) || columnMap[""MA_Actual_Tar""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Tar</th>';
                }
                if (userColumnId.includes(columnMap[""MA_Actual_Act""][0]) || columnMap[""MA_Actual_Act""][1] == 1 || isAdmin == 1) {
            ");
            WriteLiteral(@"        tbl += '<th>Act</th>';
                }
                if (userColumnId.includes(columnMap[""MA_Actual_Var""][0]) || columnMap[""MA_Actual_Var""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Var (%)</th>';
                }
                if (userColumnId.includes(columnMap[""IGA_Tar""][0]) || columnMap[""IGA_Tar""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Tar</th>';
                }
                if (userColumnId.includes(columnMap[""IGA_Act""][0]) || columnMap[""IGA_Act""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Act</th>';
                }
                if (userColumnId.includes(columnMap[""IGA_Var""][0]) || columnMap[""IGA_Var""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Var (%)</th>';
                }
                if (userColumnId.includes(columnMap[""EGA_Tar""][0]) || columnMap[""EGA_Tar""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Tar</th>';
                }
                if (userColumnId.includes(c");
            WriteLiteral(@"olumnMap[""EGA_Act""][0]) || columnMap[""EGA_Act""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Act</th>';
                }
                if (userColumnId.includes(columnMap[""EGA_Var""][0]) || columnMap[""EGA_Var""][1] == 1 || isAdmin == 1) {
                    tbl += '<th>Var (%)</th>';
                }

                tbl += '</tr></thead>';
                console.log(result.length);
                if (result.length > 0) {
                    exceldata2 = result;
                    console.log(""Datatable"");
                    let target_energy = [];
                    let actual_energy = [];
                    let pas_energy_var = [];
                    let neg_energy_var = [];
                    let target_wind = [];
                    let actual_wind = [];
                    let pas_wind_var = [];
                    let neg_wind_var = [];
	                let total_capacity = 0;
                    let total_capTarMu = 0;
                    let total_exp_pow");
            WriteLiteral(@"er = 0;
                    let total_tar_mu = 0;
                    let total_act_jmr_kwh_mu = 0;
                    let avg_jmr_var = 0;
                    let total_revenue = 0;
                    let total_capTarWind = 0;
                    let total_tar_wind = 0;
                    let total_act_wind = 0;
                    let avg_wind_var = 0;
                    let total_capTarPlf = 0;
                    let total_tar_plf = 0;
                    let total_act_plf = 0;
                    let avg_plf_var = 0;
                    let total_capTarMa = 0;
                    let total_tar_ma = 0;
                    let total_act_ma = 0;
                    let avg_ma_var = 0;
                    let total_capTarIga = 0;
                    let total_tar_iga = 0;
                    let total_act_iga = 0;
                    let avg_iga_var = 0;
                    let total_capTarEga = 0;
                    let total_tar_ega = 0;
                    let total_act_ega = 0");
            WriteLiteral(@";
                    let avg_ega_var = 0;
                    let total_capActWind = 0;
                    let total_capActPlf = 0;
                    let total_capActMa = 0;
                    let total_capActIga = 0;
                    let total_capActEga = 0;

                    for (var i = 0; i < result.length; i++) {
                        let revenue = 0;
                        let jmr_var = 0;
                        let e_var = 0;
                        let wind_var = 0;
                        let plf_var = 0;
                        let ma_act_var = 0;
                        let iga_var = 0;
                        let ega_var = 0;
                        let tar_mu = 0;
                        tar_mu = result[i].tar_kwh_mu / 1000000;
                        revenue = ((result[i].act_jmr_kwh_mu - tar_mu) * result[i].total_tarrif);
                        if (result[i].act_jmr_kwh_mu != 0 || result[i].tar_kwh_mu != 0) {
                            jmr_var = ((result[i]");
            WriteLiteral(@".act_jmr_kwh_mu - tar_mu) / tar_mu) * 100;
                        }
                        if (result[i].act_Wind != 0 || result[i].tar_wind != 0) {
                            wind_var = ((result[i].act_Wind.toFixed(2) - result[i].tar_wind.toFixed(2)) / result[i].tar_wind.toFixed(2)) * 100;
                        }
                        if (result[i].exp_power != 0) {
                            //e_var = ((result[i].act_jmr_kwh_mu - (result[i].exp_power /6) / 1000000) / ((result[i].exp_power /6) / 1000000)) * 100;
                            e_var = (result[i].act_jmr_kwh_mu - result[i].exp_power ) / (result[i].exp_power) * 100;
                            //if (result[i].site == ""Maragutti"") {
                            //    console.log(""Actual : "", result[i].act_kwh, ""Expected : "", result[i].expected_kwh, ""evar : "" + e_var);
                            //    //    console.log(temp_e_var);
                            //}
                        }

                        plf_var = (res");
            WriteLiteral(@"ult[i].act_plf - result[i].tar_plf);
                        ma_act_var = (result[i].act_ma - result[i].tar_ma);
                        iga_var = (result[i].act_iga - result[i].tar_iga);
                        ega_var = (result[i].act_ega - result[i].tar_ega);

                        let pasitive;
                        let negative;
                        if (jmr_var < 0) {
                            negative = jmr_var;
                        }
                        else {
                            pasitive = jmr_var;
                        }
                        let w_pasitive;
                        let w_negative;
                        if (wind_var < 0) {
                            w_negative = wind_var;
                        }
                        else {
                            w_pasitive = wind_var;
                        }

                        target_energy.push(result[i].tar_kwh_mu.toFixed(2));
                        actual_energy.push(result[i]");
            WriteLiteral(@".act_jmr_kwh_mu.toFixed(2));
                        pas_energy_var.push(pasitive);
                        neg_energy_var.push(negative);
                        Levels.push(result[i].site);
                        target_wind.push(result[i].tar_wind.toFixed(2));
                        actual_wind.push(result[i].act_Wind.toFixed(2));
                        pas_wind_var.push(w_pasitive);
                        neg_wind_var.push(w_negative);

                        total_capacity += result[i].total_mw;
                        total_tar_mu += tar_mu;
                        total_act_jmr_kwh_mu += result[i].act_jmr_kwh_mu;
                        total_exp_power += result[i].exp_power;
                        total_revenue += revenue;
                        total_tar_wind += result[i].tar_wind;
                        total_act_wind += result[i].act_Wind;
                        total_tar_plf += result[i].tar_plf;
                        total_act_plf += result[i].act_plf;
               ");
            WriteLiteral(@"         total_tar_ma += result[i].tar_ma;
                        total_act_ma += result[i].act_ma;
                        total_tar_iga += result[i].tar_iga;
                        total_act_iga += result[i].act_iga
                        total_tar_ega += result[i].tar_ega;
                        total_act_ega += result[i].act_ega;
                        total_capTarMu += tar_mu * result[i].total_mw;
                        total_capTarWind += result[i].tar_wind * result[i].total_mw;
                        total_capTarPlf += result[i].tar_plf * result[i].total_mw;
                        total_capTarMa += result[i].tar_ma * result[i].total_mw;
                        total_capTarIga += result[i].tar_iga * result[i].total_mw;
                        total_capTarEga += result[i].tar_ega * result[i].total_mw;
                        total_capActWind += result[i].act_Wind * result[i].total_mw;
                        total_capActPlf += result[i].act_plf * result[i].total_mw;
                ");
            WriteLiteral(@"        total_capActMa += result[i].act_ma * result[i].total_mw;
                        total_capActIga += result[i].act_iga * result[i].total_mw;
                        total_capActEga += result[i].act_ega * result[i].total_mw;

                        tbl += '<tr>';
                        if (userColumnId.includes(columnMap[""Site""][0]) || columnMap[""Site""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-left"">' + result[i].site + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Capacity""][0]) || columnMap[""Capacity""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].total_mw.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""GenNos_Tar""][0]) || columnMap[""GenNos_Tar""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + tar_mu.toFixed(2) + '</td>';
                        ");
            WriteLiteral(@"}
                        if (userColumnId.includes(columnMap[""GenNos_Exp""][0]) || columnMap[""GenNos_Exp""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].exp_power.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""GenNos_ActJMR""][0]) || columnMap[""GenNos_ActJMR""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].act_jmr_kwh_mu.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""GenNos_TVar""][0]) || columnMap[""GenNos_TVar""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + jmr_var.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""GenNos_Evar""][0]) || columnMap[""GenNos_Evar""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + e_var.toFixed(2) + '</td");
            WriteLiteral(@">';
                        }
                        if (userColumnId.includes(columnMap[""Revenue""][0]) || columnMap[""Revenue""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + revenue.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Wind_Speed_Tar""][0]) || columnMap[""Wind_Speed_Tar""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].tar_wind.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Wind_Speed_Act""][0]) || columnMap[""Wind_Speed_Act""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].act_Wind.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""Wind_Speed_Var""][0]) || columnMap[""Wind_Speed_Var""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right");
            WriteLiteral(@""">' + wind_var.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""PLF_Tar""][0]) || columnMap[""PLF_Tar""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].tar_plf.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""PLF_Act""][0]) || columnMap[""PLF_Act""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].act_plf.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""PLF_Var""][0]) || columnMap[""PLF_Var""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + plf_var.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""MA_Actual_Tar""][0]) || columnMap[""MA_Actual_Tar""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-righ");
            WriteLiteral(@"t"">' + result[i].tar_ma.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""MA_Actual_Act""][0]) || columnMap[""MA_Actual_Act""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].act_ma.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""MA_Actual_Var""][0]) || columnMap[""MA_Actual_Var""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + ma_act_var.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""IGA_Tar""][0]) || columnMap[""IGA_Tar""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].tar_iga.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""IGA_Act""][0]) || columnMap[""IGA_Act""][1] == 1 || isAdmin == 1) {
                            tbl +");
            WriteLiteral(@"= '<td class=""text-right"">' + result[i].act_iga.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""IGA_Var""][0]) || columnMap[""IGA_Var""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + iga_var.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGA_Tar""][0]) || columnMap[""EGA_Tar""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].tar_ega.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGA_Act""][0]) || columnMap[""EGA_Act""][1] == 1 || isAdmin == 1) {
                            tbl += '<td class=""text-right"">' + result[i].act_ega.toFixed(2) + '</td>';
                        }
                        if (userColumnId.includes(columnMap[""EGA_Var""][0]) || columnMap[""EGA_Var""][1] == 1 || isAdmin == 1) {
                            tbl += ");
            WriteLiteral(@"'<td class=""text-right"">' + ega_var.toFixed(2) + '</td>';
                        }
                        
                        //tbl += '<td class=""text-right"">' + result[i].total_mw.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + tar_mu.toFixed(2) + '</td>';
                        ////tbl += '<td class=""text-right"">' + ((result[i].exp_power / 6) / 1000000).toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].exp_power.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].act_jmr_kwh_mu.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + jmr_var.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + e_var.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + revenue.toFixed(2)+'</td>';
                        //tbl += '<td class=""text-right"">' + result[i].tar_wind.toFixed(2) + '</td>';
      ");
            WriteLiteral(@"                  //tbl += '<td class=""text-right"">' + result[i].act_Wind.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + wind_var.toFixed(2)+'</td>';
                        //tbl += '<td class=""text-right"">' + result[i].tar_plf.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].act_plf.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + plf_var.toFixed(2)+'</td>';
                        //tbl += '<td class=""text-right"">' + result[i].tar_ma.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].act_ma.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + ma_act_var.toFixed(2)+'</td>';
                        //tbl += '<td class=""text-right"">' + result[i].tar_iga.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].act_iga.toFixed(2) + '</td>';
                        //tbl += '<td class");
            WriteLiteral(@"=""text-right"">' + iga_var.toFixed(2)+'</td>';
                        //tbl += '<td class=""text-right"">' + result[i].tar_ega.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + result[i].act_ega.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + ega_var.toFixed(2)+'</td>';

                        tbl += '</tr>';
                    }
                    let avg_tar_mu = 0;
                    let avg_tar_wind = 0;
                    let avg_e_var = 0;
                    let avg_tar_plf = 0;
                    let avg_tar_ma = 0;
                    let avg_tar_iga = 0;
                    let avg_tar_ega = 0
                    let avg_act_wind = 0;
                    let avg_act_plf = 0;
                    let avg_act_ma = 0;
                    let avg_act_iga = 0;
                    let avg_act_ega = 0;


                    if (total_capacity != 0) {
                        avg_tar_mu = total_capTarMu / total_capac");
            WriteLiteral(@"ity;
                        avg_tar_wind = total_capTarWind / total_capacity;
                        avg_tar_plf = total_capTarPlf / total_capacity;
                        avg_tar_ma = total_capTarMa / total_capacity;
                        avg_tar_iga = total_capTarIga / total_capacity;
                        avg_tar_ega = total_capTarEga / total_capacity;
                        avg_act_wind = total_capActWind / total_capacity;
                        avg_act_plf = total_capActPlf / total_capacity;
                        avg_act_ma = total_capActMa / total_capacity;
                        avg_act_iga = total_capActIga / total_capacity;
                        avg_act_ega = total_capActEga / total_capacity;
                    }

                    if (total_tar_mu != 0) {
                        avg_jmr_var = (((total_act_jmr_kwh_mu - total_tar_mu) / total_tar_mu) * 100);
                    }
                    if (avg_tar_wind != 0) {
                        avg_wind_var = ((avg_");
            WriteLiteral(@"act_wind.toFixed(2) - avg_tar_wind.toFixed(2)) / avg_tar_wind.toFixed(2)) * 100;
                    }
                    if (total_exp_power != 0) {
                        avg_e_var = (((total_act_jmr_kwh_mu.toFixed(2) - total_exp_power.toFixed(2)) / total_exp_power.toFixed(2)) * 100);
                    }

                    avg_plf_var = (avg_act_plf - avg_tar_plf);
                    avg_ma_var = (avg_act_ma - avg_tar_ma);
                    avg_iga_var = (avg_act_iga - avg_tar_iga);
                    avg_ega_var = (avg_act_ega - avg_tar_ega);

                    tbl += '<tfoot><tr>';
                    tbl += '<th rowspan=""1""  style=""width: 10%; font-weight: bold;"">Grand Total</th>';
                    if (userColumnId.includes(columnMap[""Capacity""][0]) || columnMap[""Capacity""][1] == 1 || isAdmin == 1) {
                        tbl += '<td class=""text-right""><b>' + total_capacity.toFixed(2) + '</b></td>';
                    }
                    if (userColumnId.includes(colum");
            WriteLiteral(@"nMap[""GenNos_Tar""][0]) || columnMap[""GenNos_Tar""][1] == 1 || isAdmin == 1) {
                        tbl += '<td class=""text-right""><b>' + total_tar_mu.toFixed(2) + '</b></td>';
                    }
                    if (userColumnId.includes(columnMap[""GenNos_Exp""][0]) || columnMap[""GenNos_Exp""][1] == 1 || isAdmin == 1) {
                        tbl += '<td class=""text-right""><b>' + total_exp_power.toFixed(2) + '</b></td>';
                    }
                    if (userColumnId.includes(columnMap[""GenNos_ActJMR""][0]) || columnMap[""GenNos_ActJMR""][1] == 1 || isAdmin == 1) {
                        tbl += '<td class=""text-right""><b>' + total_act_jmr_kwh_mu.toFixed(2) + '</b></td>';
                    }
                    if (userColumnId.includes(columnMap[""GenNos_TVar""][0]) || columnMap[""GenNos_TVar""][1] == 1 || isAdmin == 1) {
                        tbl += '<td class=""text-right""><b>' + avg_jmr_var.toFixed(2) + '</b></td>';
                    }
                    if (userColumnId.incl");
            WriteLiteral(@"udes(columnMap[""GenNos_Evar""][0]) || columnMap[""GenNos_Evar""][1] == 1 || isAdmin == 1) {
                        tbl += '<td class=""text-right""><b>' + avg_e_var.toFixed(2) + '</b></td>';
                    }
                    if (userColumnId.includes(columnMap[""Revenue""][0]) || columnMap[""Revenue""][1] == 1 || isAdmin == 1) {
                        tbl += '<td class=""text-right""><b>' + total_revenue.toFixed(2) + '</b></td>';
                    }
                    if (userColumnId.includes(columnMap[""Wind_Speed_Tar""][0]) || columnMap[""Wind_Speed_Tar""][1] == 1 || isAdmin == 1) {
                        tbl += '<td class=""text-right""><b>' + avg_tar_wind.toFixed(2) + '</b></td>';
                    }
                    if (userColumnId.includes(columnMap[""Wind_Speed_Act""][0]) || columnMap[""Wind_Speed_Act""][1] == 1 || isAdmin == 1) {
                        tbl += '<td class=""text-right""><b>' + avg_act_wind.toFixed(2) + '</b></td>';
                    }
                    if (userColumnId.in");
            WriteLiteral(@"cludes(columnMap[""Wind_Speed_Var""][0]) || columnMap[""Wind_Speed_Var""][1] == 1 || isAdmin == 1) {
                        tbl += '<td class=""text-right""><b>' + avg_wind_var.toFixed(2) + '</b></td>';
                    }
                    if (userColumnId.includes(columnMap[""PLF_Tar""][0]) || columnMap[""PLF_Tar""][1] == 1 || isAdmin == 1) {
                        tbl += '<td class=""text-right""><b>' + avg_tar_plf.toFixed(2) + '</b></td>';
                    }
                    if (userColumnId.includes(columnMap[""PLF_Act""][0]) || columnMap[""PLF_Act""][1] == 1 || isAdmin == 1) {
                        tbl += '<td class=""text-right""><b>' + avg_act_plf.toFixed(2) + '</b></td>';
                    }
                    if (userColumnId.includes(columnMap[""PLF_Var""][0]) || columnMap[""PLF_Var""][1] == 1 || isAdmin == 1) {
                        tbl += '<td class=""text-right""><b>' + avg_plf_var.toFixed(2) + '</b></td>';
                    }
                    if (userColumnId.includes(columnMap[""MA_");
            WriteLiteral(@"Actual_Tar""][0]) || columnMap[""MA_Actual_Tar""][1] == 1 || isAdmin == 1) {
                        tbl += '<td class=""text-right""><b>' + avg_tar_ma.toFixed(2) + '</b></td>';
                    }
                    if (userColumnId.includes(columnMap[""MA_Actual_Act""][0]) || columnMap[""MA_Actual_Act""][1] == 1 || isAdmin == 1) {
                        tbl += '<td class=""text-right""><b>' + avg_act_ma.toFixed(2) + '</b></td>';
                    }
                    if (userColumnId.includes(columnMap[""MA_Actual_Var""][0]) || columnMap[""MA_Actual_Var""][1] == 1 || isAdmin == 1) {
                        tbl += '<td class=""text-right""><b>' + avg_ma_var.toFixed(2) + '</b></td>';
                    }
                    if (userColumnId.includes(columnMap[""IGA_Tar""][0]) || columnMap[""IGA_Tar""][1] == 1 || isAdmin == 1) {
                        tbl += '<td class=""text-right""><b>' + avg_tar_iga.toFixed(2) + '</b></td>';
                    }
                    if (userColumnId.includes(columnMap[""IGA_Ac");
            WriteLiteral(@"t""][0]) || columnMap[""IGA_Act""][1] == 1 || isAdmin == 1) {
                        tbl += '<td class=""text-right""><b>' + avg_act_iga.toFixed(2) + '</b></td>';
                    }
                    if (userColumnId.includes(columnMap[""IGA_Var""][0]) || columnMap[""IGA_Var""][1] == 1 || isAdmin == 1) {
                        tbl += '<td class=""text-right""><b>' + avg_iga_var.toFixed(2) + '</b></td>';
                    }
                    if (userColumnId.includes(columnMap[""EGA_Tar""][0]) || columnMap[""EGA_Tar""][1] == 1 || isAdmin == 1) {
                        tbl += '<td class=""text-right""><b>' + avg_tar_ega.toFixed(2) + '</b></td>';
                    }
                    if (userColumnId.includes(columnMap[""EGA_Act""][0]) || columnMap[""EGA_Act""][1] == 1 || isAdmin == 1) {
                        tbl += '<td class=""text-right""><b>' + avg_act_ega.toFixed(2) + '</b></td>';
                    }
                    if (userColumnId.includes(columnMap[""EGA_Var""][0]) || columnMap[""EGA_Var""][1] =");
            WriteLiteral(@"= 1 || isAdmin == 1) {
                        tbl += '<td class=""text-right""><b>' + avg_ega_var.toFixed(2) + '</b></td>';
                    }

                    tbl += '</tr></tfoot>';



                }
                else {
                    console.log(""Data not available"");

                }
                tbl += '</table>';
                //$(""#reportsDaily"").html(tbl);
                $(""#reportsDaily"").html("""").html(tbl);
                $('#example2').DataTable({
                    dom: 'Bfrtip',
                    fixedHeader: true,
                    responsive: true,
                    scrollX: true,
                    lengthChange: false,
                    autoWidth: true,
                    paging: true,
                    lengthChange: false,
                    searching: true,
                    ordering: true,
                    info: true,
                    autoWidth: true,
                    fixedColumns: {
                        lef");
            WriteLiteral(@"t: 2
                    },
                    pageLength: 50,
                    buttons: [
                        {
                            extend: 'excel',
                            footer: true,
                            title: 'Wind Performance Reports Site Wise',
                            //titleAttr: 'Export Excel',
                            ""oSelectorOpts"": { filter: 'applied', order: 'current' },
                            exportOptions: {
                                columns: ':visible',
                                modifier: {
                                    page: 'all'
                                },
                                format: {
                                    header: function (data, columnIdx) {
                                        if (columnIdx == 1) {
                                            return 'Capacity (MW)';
                                        }
                                        else if (columnIdx == 2) {
");
            WriteLiteral(@"                                            return 'JMR Energy (in MU)  Tar';
                                        }
                                        else if (columnIdx == 3) {
                                            return 'JMR Energy (in MU)  Exp';
                                        }
                                        else if (columnIdx == 4) {
                                            return 'JMR Energy (in MU) Act';
                                        }
                                        else if (columnIdx == 5) {
                                            return 'JMR Energy (in MU) T.Var (%)';
                                        }
                                        else if (columnIdx == 6) {
                                            return 'JMR Energy (in MU) E.Var (%)';
                                        }
                                        else if (columnIdx == 7) {
                                            return 'Revenue (MINR");
            WriteLiteral(@") ';
                                        }
                                        else if (columnIdx == 8) {
                                            return 'Wind Speed (m/s) Tar';
                                        }
                                        else if (columnIdx == 9) {
                                            return 'Wind Speed (m/s) Act ';
                                        }
                                        else if (columnIdx == 10) {
                                            return 'Wind Speed (m/s) Var (%) ';
                                        }
                                        else if (columnIdx == 11) {
                                            return 'PLF (%) Tar';
                                        }
                                        else if (columnIdx == 12) {
                                            return 'PLF (%) Act ';
                                        }
                                        else if ");
            WriteLiteral(@"(columnIdx == 13) {
                                            return 'PLF (%) Var (%) ';
                                        }
                                        else if (columnIdx == 14) {
                                            return 'MA Actual (%) Tar';
                                        }
                                        else if (columnIdx == 15) {
                                            return 'MA Actual (%) Act ';
                                        }
                                        else if (columnIdx == 16) {
                                            return 'MA Actual (%) Var (%) ';
                                        }
                                        else if (columnIdx == 17) {
                                            return 'IGA (%) Tar';
                                        }
                                        else if (columnIdx == 18) {
                                            return 'IGA (%) Act ';
           ");
            WriteLiteral(@"                             }
                                        else if (columnIdx == 19) {
                                            return 'IGA (%) Var (%) ';
                                        }
                                        else if (columnIdx == 20) {
                                            return 'EGA (%) Tar';
                                        }
                                        else if (columnIdx == 21) {
                                            return 'EGA (%) Act ';
                                        }
                                        else if (columnIdx == 22) {
                                            return 'EGA (%) Var (%) ';
                                        }
                                        else {
                                            return data;
                                        }
                                    }
                                }
                            }
           ");
            WriteLiteral(@"             },
                        {
                            extend: 'csv',
                            footer: true,
                            title: 'Wind Performance Reports Site Wise',
                            //titleAttr: 'Export Excel',
                            ""oSelectorOpts"": { filter: 'applied', order: 'current' },
                            exportOptions: {
                                columns: ':visible',
                                modifier: {
                                    page: 'all'
                                },
                                format: {
                                    header: function (data, columnIdx) {
                                        if (columnIdx == 1) {
                                            return 'Capacity (MW)';
                                        }
                                        else if (columnIdx == 2) {
                                            return 'JMR Energy (in MU)  Tar';
     ");
            WriteLiteral(@"                                   }
                                        else if (columnIdx == 3) {
                                            return 'JMR Energy (in MU)  Exp';
                                        }
                                        else if (columnIdx == 4) {
                                            return 'JMR Energy (in MU) Act';
                                        }
                                        else if (columnIdx == 5) {
                                            return 'JMR Energy (in MU) T.Var (%)';
                                        }
                                        else if (columnIdx == 6) {
                                            return 'JMR Energy (in MU) E.Var (%)';
                                        }
                                        else if (columnIdx == 7) {
                                            return 'Revenue (MINR) ';
                                        }
                                   ");
            WriteLiteral(@"     else if (columnIdx == 8) {
                                            return 'Wind Speed (m/s) Tar';
                                        }
                                        else if (columnIdx == 9) {
                                            return 'Wind Speed (m/s) Act ';
                                        }
                                        else if (columnIdx == 10) {
                                            return 'Wind Speed (m/s) Var (%) ';
                                        }
                                        else if (columnIdx == 11) {
                                            return 'PLF (%) Tar';
                                        }
                                        else if (columnIdx == 12) {
                                            return 'PLF (%) Act ';
                                        }
                                        else if (columnIdx == 13) {
                                            return 'PLF (%) Var");
            WriteLiteral(@" (%) ';
                                        }
                                        else if (columnIdx == 14) {
                                            return 'MA Actual (%) Tar';
                                        }
                                        else if (columnIdx == 15) {
                                            return 'MA Actual (%) Act ';
                                        }
                                        else if (columnIdx == 16) {
                                            return 'MA Actual (%) Var (%) ';
                                        }
                                        else if (columnIdx == 17) {
                                            return 'IGA (%) Tar';
                                        }
                                        else if (columnIdx == 18) {
                                            return 'IGA (%) Act ';
                                        }
                                        else if (col");
            WriteLiteral(@"umnIdx == 19) {
                                            return 'IGA (%) Var (%) ';
                                        }
                                        else if (columnIdx == 20) {
                                            return 'EGA (%) Tar';
                                        }
                                        else if (columnIdx == 21) {
                                            return 'EGA (%) Act ';
                                        }
                                        else if (columnIdx == 22) {
                                            return 'EGA (%) Var (%) ';
                                        }
                                        else {
                                            return data;
                                        }
                                    }
                                }
                            }
                        },
                        {
                            extend: 'col");
            WriteLiteral(@"vis',
                            //  columns: ':not(.noVis)',
                            columnText: function (dt, idx, title) {
                                if (idx == 1) {
                                    return 'Capacity (MW)';
                                }
                                else if (idx == 2) {
                                    return 'JMR Energy (in MU)  Tar';
                                }
                                else if (idx == 3) {
                                    return 'JMR Energy (in MU)  Exp';
                                }
                                else if (idx == 4) {
                                    return 'JMR Energy (in MU) Act';
                                }
                                else if (idx == 5) {
                                    return 'JMR Energy (in MU) T.Var (%)';
                                }
                                else if (idx == 6) {
                                    return 'JMR");
            WriteLiteral(@" Energy (in MU) E.Var (%)';
                                }
                                else if (idx == 7) {
                                    return 'Revenue (MINR) ';
                                }
                                else if (idx == 8) {
                                    return 'Wind Speed (m/s) Tar';
                                }
                                else if (idx == 9) {
                                    return 'Wind Speed (m/s) Act ';
                                }
                                else if (idx == 10) {
                                    return 'Wind Speed (m/s) Var (%) ';
                                }
                                else if (idx == 11) {
                                    return 'PLF (%) Tar';
                                }
                                else if (idx == 12) {
                                    return 'PLF (%) Act ';
                                }
                               ");
            WriteLiteral(@" else if (idx == 13) {
                                    return 'PLF (%) Var (%) ';
                                }
                                else if (idx == 14) {
                                    return 'MA Actual (%) Tar';
                                }
                                else if (idx == 15) {
                                    return 'MA Actual (%) Act ';
                                }
                                else if (idx == 16) {
                                    return 'MA Actual (%) Var (%) ';
                                }
                                else if (idx == 17) {
                                    return 'IGA (%) Tar';
                                }
                                else if (idx == 18) {
                                    return 'IGA (%) Act ';
                                }
                                else if (idx == 19) {
                                    return 'IGA (%) Var (%) ';
            ");
            WriteLiteral(@"                    }
                                else if (idx == 20) {
                                    return 'EGA (%) Tar';
                                }
                                else if (idx == 21) {
                                    return 'EGA (%) Act ';
                                }
                                else if (idx == 22) {
                                    return 'EGA (%) Var (%) ';
                                }
                                else {
                                    return title;
                                }
                            }
                        },
                         {
                            text: '<span class=""fas fa-file-excel"" title=""Download from DB up to six decimal""></span>',
                            className: 'btn ml-1   ',

                            action: function () {
                               ExportToExcelSiteWise();
                            },
                 ");
            WriteLiteral(@"            format: {
                                    header: function (data, columnIdx) {
                                        if (columnIdx == 1) {
                                            return 'Capacity (MW)';
                                        }
                                        else if (columnIdx == 2) {
                                            return 'JMR Energy (in MU)  Tar';
                                        }
                                        else if (columnIdx == 3) {
                                            return 'JMR Energy (in MU)  Exp';
                                        }
                                        else if (columnIdx == 4) {
                                            return 'JMR Energy (in MU)  Act';
                                        }
                                        else if (columnIdx == 5) {
                                            return 'JMR Energy (in MU)  T.Var (%)';
                             ");
            WriteLiteral(@"           }
                                        else if (columnIdx == 6) {
                                            return 'JMR Energy (in MU)  E.Var (%)';
                                        }
                                        else if (columnIdx == 7) {
                                            return 'Revenue (MINR) ';
                                        }
                                        else if (columnIdx == 8) {
                                            return 'Wind Speed (m/s)  Tar';
                                        }
                                        else if (columnIdx == 9) {
                                            return 'Wind Speed (m/s)  Act ';
                                        }
                                        else if (columnIdx == 10) {
                                            return 'Wind Speed (m/s)  Var (%) ';
                                        }
                                        else if (columnIdx ==");
            WriteLiteral(@" 11) {
                                            return 'PLF (%)  Tar';
                                        }
                                        else if (columnIdx == 12) {
                                            return 'PLF (%)  Act ';
                                        }
                                        else if (columnIdx == 13) {
                                            return 'PLF (%)  Var (%) ';
                                        }
                                        else if (columnIdx == 14) {
                                            return 'MA Actual (%)  Tar';
                                        }
                                        else if (columnIdx == 15) {
                                            return 'MA Actual (%)  Act ';
                                        }
                                        else if (columnIdx == 16) {
                                            return 'MA Actual (%)  Var (%) ';
                  ");
            WriteLiteral(@"                      }
                                        else if (columnIdx == 17) {
                                            return 'IGA (%)  Tar';
                                        }
                                        else if (columnIdx == 18) {
                                            return 'IGA (%)  Act ';
                                        }
                                        else if (columnIdx == 19) {
                                            return 'IGA (%)  Var (%) ';
                                        }
                                        else if (columnIdx == 20) {
                                            return 'EGA (%)  Tar';
                                        }
                                        else if (columnIdx == 21) {
                                            return 'EGA (%)  Act ';
                                        }
                                        else if (columnIdx == 22) {
                       ");
            WriteLiteral(@"                     return 'EGA (%)  Var (%) ';
                                        }
                                        else {
                                            return data;
                                        }
                                    }
                                }
                        },
                    ]
                });
                $("".dt-buttons"").addClass('btn-group flex-wrap');
                $("".dt-buttons > button"").addClass('btn btn-secondary');
                $("".dt-button-collection > div > button"").addClass('btn btn-secondary');
               // $(""button.dt-button.buttons-collection.buttons-colvis"").addClass('btn btn-light');
                $("".dataTables_filter> label >input"").addClass('form-control form-control-sm');
                $(document).on(""click"", ""div.dt-button-collection > div > button"", function () {
                    if ($(this).hasClass(""active"")) {
                        $(this).css(""background-color");
            WriteLiteral(@""", ""white"");
                    } else {
                        $(this).css(""background-color"", ""#31576d"");
                    }
                });
                document.getElementById(""loader"").style.display = 'none';
            }
        });
    }

    function GetPRReportGroup()
    {
        document.getElementById(""loader"").style.display = 'flex';

        let custom_site = """";
        $('select#cust_group option:selected').each(function () {
            custom_site += $(this).val() + "","";
        });
        custom_site = custom_site != """" ? custom_site.slice(0, -1) : custom_site;
        var daterange = $('#daterange_group').val();
        var arr1        = new Array();
        arr1            = daterange.split(""-"");
        var fromDate    = moment(arr1[0], 'DD/MM/YYYY').format('YYYY-MM-DD');
        var toDate      = moment(arr1[1], 'DD/MM/YYYY').format('YYYY-MM-DD');
        var fyear       = Fy;
        var leble       = [];
        var revenue_arr = [];
        v");
            WriteLiteral("ar reporthead  = \"SPV Wise Reports\";\r\n        $.ajax({\r\n            type: \"GET\",\r\n            url: \'");
#nullable restore
#line 2701 "C:\18 July DGR CA\DGR_Main\DGRA\DGRA_V1\Views\Home\WindPRReport.cshtml"
             Write(Url.Action("GetWindGroupOfSite", "WindReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?fy=' + fyear + '&fromDate=' + fromDate + '&toDate=' + toDate + '&site_list=' + custom_site,
            contentType: ""application/json; charset=utf-8"",
            datatype: ""JSON"",
            success: function (result, status, xhr) {
                console.log(result);
                var tbl = '<table id=""example_group""  class=""table table-bordered table-striped"" style=""width: 130%;"">';
                tbl += '<thead class=""tbl-head""><tr>';
                tbl += '<th rowspan=""2"" style=""width: 12%;"">Group Name</th><th rowspan=""2"">Capacity<br> (MW)</th>';
                tbl += '<th colspan=""5"" class=""text-center"">JMR Energy (in MU)</th><th>(±)Revenue</th>';
                tbl += '<th colspan=""3"" class=""text-center"">Wind Speed (m/s)</th><th colspan=""3"" class=""text-center"">PLF (%)</th>';
                tbl += '<th colspan=""3"" class=""text-center"">MA Actual (%)</th><th colspan=""3"" class=""text-center"">IGA (%)</th>';
                tbl += '<th colspan=""3"" class=""text-center"">EGA (%)</th></tr");
            WriteLiteral(@">';
                tbl += '<tr><th>Tar</th>';
                tbl += '<th>Exp</th>';
                tbl += '<th>Act</th>';
                tbl += '<th>T.Var (%)</th>';
                tbl += '<th>E.Var (%)</th>';
                tbl += '<th>(MINR)</th>';
                tbl += '<th>Tar</th>';
                tbl += '<th>Act</th>';
                tbl += '<th>Var (%)</th>';
                tbl += '<th>Tar</th>';
                tbl += '<th>Act</th>';
                tbl += '<th>Var (%)</th>';
                tbl += '<th>Tar</th>';
                tbl += '<th>Act</th>';
                tbl += '<th>Var (%)</th>';
                tbl += '<th>Tar</th>';
                tbl += '<th>Act</th>';
                tbl += '<th>Var (%)</th>';
                tbl += '<th>Tar</th>';
                tbl += '<th>Act</th>';
                tbl += '<th>Var (%)</th>';
                tbl += '</tr></thead>';
                if (result.length > 0) {
                    for (var i = 0; i < result.length; i+");
            WriteLiteral(@"+)
                    {
                        let revenue     = 0;
                        let jmr_var     = 0;
                        let e_var       = 0;
                        let wind_var    = 0;
                        let plf_var     = 0;
                        let ma_act_var  = 0;
                        let iga_var     = 0;
                        let ega_var     = 0;
                        let tar_mu = 0;
                        let total_tar_wind = 0;
                        let total_act_wind = 0;
                        let total_capacity = 0;
                        let avg_tar_wind = 0;
                        let avg_act_wind = 0;
                        let total_tar_plf = 0;
                        let total_act_plf = 0;
                        let avg_tar_plf = 0;
                        let avg_act_plf = 0;
                        let avg_plf_var = 0;
                        let total_tar_ma = 0;
                        let total_act_ma = 0;
                   ");
            WriteLiteral(@"     let avg_tar_ma = 0;
                        let avg_act_ma = 0;
                        let avg_ma_var = 0;
                        let total_tar_iga = 0;
                        let total_act_iga = 0;
                        let avg_tar_iga = 0;
                        let avg_act_iga = 0;
                        let avg_iga_var = 0;
                        let avg_ega_var = 0;
                        let avg_tar_ega = 0;
                        let avg_act_ega = 0;
                        let total_tar_ega = 0;
                        let total_act_ega = 0;

                        tar_mu          = result[i].tar_kwh_mu / 1000000;
                        
                        if (result[i].act_jmr_kwh_mu != 0 || result[i].tar_kwh_mu != 0) {
                            jmr_var     = ((result[i].act_jmr_kwh_mu - tar_mu) / tar_mu) * 100;
                        }
                        if (result[i].exp_power != 0) {
                            e_var       = ((result[i].act_jmr_kwh");
            WriteLiteral(@"_mu - (result[i].exp_power / 6) / 1000000) / ((result[i].exp_power / 6) / 1000000)) * 100;
                        }
                        if (result[i].act_Wind != 0 || result[i].tar_wind != 0) {
                            wind_var    = ((result[i].act_Wind - result[i].tar_wind) / result[i].tar_wind) * 100;
                        }
                        //plf_var         = (result[i].act_plf - result[i].tar_plf);
                       // ma_act_var      = (result[i].act_ma - result[i].tar_ma);
                        //iga_var         = (result[i].act_iga - result[i].tar_iga);
                       // ega_var         = (result[i].act_ega - result[i].tar_ega);
                        let chielditem = result[i].item;
                        for (var k = 0; k < chielditem.length; k++)
                        {
                            total_capacity += chielditem[k].total_mw;
                            revenue += ((chielditem[k].act_jmr_kwh_mu - (chielditem[k].tar_kwh_mu / 1000000)) * c");
            WriteLiteral(@"hielditem[k].total_tarrif);
                            total_tar_wind += chielditem[k].tar_wind * chielditem[k].total_mw;
                            total_act_wind += chielditem[k].act_Wind * chielditem[k].total_mw;
                            total_tar_plf += chielditem[k].tar_plf * chielditem[k].total_mw;
                            total_act_plf += chielditem[k].act_plf * chielditem[k].total_mw;
                            total_tar_ma += chielditem[k].tar_ma * chielditem[k].total_mw;
                            total_act_ma += chielditem[k].act_ma * chielditem[k].total_mw;
                            total_tar_iga += chielditem[k].tar_iga * chielditem[k].total_mw;
                            total_act_iga += chielditem[k].act_iga * chielditem[k].total_mw;
                            total_tar_ega += chielditem[k].tar_ega * chielditem[k].total_mw;
                            total_act_ega += chielditem[k].act_ega * chielditem[k].total_mw;
                        }
                        if (");
            WriteLiteral(@"total_capacity != 0) {
                            avg_tar_wind = total_tar_wind / total_capacity;
                            avg_act_wind = total_act_wind / total_capacity;
                            avg_tar_plf = total_tar_plf / total_capacity;
                            avg_act_plf = total_act_plf / total_capacity;
                            avg_tar_ma = total_tar_ma / total_capacity;
                            avg_act_ma = total_act_ma / total_capacity;
                            avg_tar_iga = total_tar_iga / total_capacity;
                            avg_act_iga = total_act_iga / total_capacity;
                            avg_tar_ega = total_tar_ega / total_capacity;
                            avg_act_ega = total_act_ega / total_capacity;

                        }
                        if (avg_tar_wind != 0) {
                            avg_wind_var = ((avg_act_wind.toFixed(2) - avg_tar_wind.toFixed(2)) / avg_tar_wind.toFixed(2)) * 100;
                        }
             ");
            WriteLiteral(@"           avg_plf_var = (avg_act_plf - avg_tar_plf);
                        avg_ma_var = (avg_act_ma - avg_tar_ma);
                        avg_iga_var = (avg_act_iga - avg_tar_iga);
                        avg_ega_var = (avg_act_ega - avg_tar_ega);
                        let chield_class = result[i].cust_group.replace(/\s/g, """");
                        
                        tbl += '<tr>';
                        //tbl += '<td class=""text-left"">';
                        let expand_btn = """";
                        if (chielditem.length > 1) {
                            expand_btn  = '<div class=""grp-btn"" id = ""parant_' + chield_class + '"" onclick = ""showchield(id)"" style = ""display:inline-block"" > <i class=""fas fa-plus""></i></div ><div class=""grp-btn"" id=""phide_' + chield_class + '"" onclick=""hidechield(id)"" style=""display:none""><i class=""fas fa-minus""></i></div>';

                        }
                        tbl += '<td class=""text-left"">' + expand_btn+'<b>&nbsp;&nbsp;' + result[i]");
            WriteLiteral(@".cust_group + '</b></td >';
                        tbl += '<td class=""text-right"">' + result[i].total_mw.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + tar_mu.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + ((result[i].exp_power / 6) / 1000000).toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].act_jmr_kwh_mu.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + jmr_var.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + e_var.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + revenue.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_tar_wind.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_act_wind.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_wind_var.toFixed(2) + '</td>';
                        t");
            WriteLiteral(@"bl += '<td class=""text-right"">' + avg_tar_plf.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_act_plf.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_plf_var.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_tar_ma.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_act_ma.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_ma_var.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_tar_iga.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_act_iga.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_iga_var.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_tar_ega.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + avg_act_ega.toFixed(2) + '</td>';
                  ");
            WriteLiteral(@"      tbl += '<td class=""text-right"">' + avg_ega_var.toFixed(2) + '</td>';
                        tbl += '</tr>';

                        for (var j = 0; j < chielditem.length; j++) {

                            let revenue_chield = 0;
                            let jmr_var_chield = 0;
                            let e_var_chield = 0;
                            let wind_var_chield = 0;
                            let plf_var_chield = 0;
                            let ma_act_var_chield = 0;
                            let iga_var_chield = 0;
                            let ega_var_chield = 0;
                            let tar_mu_chield = 0;
                            tar_mu_chield = chielditem[j].tar_kwh_mu / 1000000;
                            revenue = ((chielditem[j].act_jmr_kwh_mu - (chielditem[j].tar_kwh_mu / 1000000)) * chielditem[j].total_tarrif);
                            if (chielditem[j].act_jmr_kwh_mu != 0 || chielditem[j].tar_kwh_mu != 0) {
                             ");
            WriteLiteral(@"   jmr_var_chield = ((chielditem[j].act_jmr_kwh_mu - tar_mu_chield) / tar_mu_chield) * 100;
                            }
                            if (chielditem[j].exp_power != 0) {
                                e_var_chield = ((chielditem[j].act_jmr_kwh_mu - (chielditem[j].exp_power / 6) / 1000000) / ((chielditem[j].exp_power / 6) / 1000000)) * 100;
                            }
                            if (chielditem[j].act_Wind != 0 || chielditem[j].tar_wind != 0) {
                                wind_var_chield = ((chielditem[j].act_Wind - chielditem[j].tar_wind) / chielditem[j].tar_wind) * 100;
                            }
                            plf_var_chield = (chielditem[j].act_plf - chielditem[j].tar_plf);
                            ma_act_var_chield = (chielditem[j].act_ma - chielditem[j].tar_ma);
                            iga_var_chield = (chielditem[j].act_iga - chielditem[j].tar_iga);
                            ega_var_chield = (chielditem[j].act_ega - chielditem[j]");
            WriteLiteral(@".tar_ega);

                            tbl += '<tr class=""'+ chield_class+'"" style=""display:none"">';
                            tbl += '<td class=""text-left"" style=""padding-left: 1rem !important;"">' + chielditem[j].site + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].total_mw.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + tar_mu_chield.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + ((chielditem[j].exp_power / 6) / 1000000).toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].act_jmr_kwh_mu.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + jmr_var_chield.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + e_var_chield.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + revenue_chield.toFixed(2) + '</td>';
                            tbl +=");
            WriteLiteral(@" '<td class=""text-right"">' + chielditem[j].tar_wind.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].act_Wind.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + wind_var_chield.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].tar_plf.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].act_plf.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + plf_var_chield.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].tar_ma.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].act_ma.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + ma_act_var_chield.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].tar_iga.toFixed(2) + '</td");
            WriteLiteral(@">';
                            tbl += '<td class=""text-right"">' + chielditem[j].act_iga.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + iga_var_chield.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].tar_ega.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + chielditem[j].act_ega.toFixed(2) + '</td>';
                            tbl += '<td class=""text-right"">' + ega_var_chield.toFixed(2) + '</td>';
                            tbl += '</tr>';
                        }

                    }
                }
                else {
                }
                tbl += '</table>';
                $(""#reportsDailygroup"").html("""");
                $(""#reportsDailygroup"").html(tbl);
                //$(""#reportsDailygroup"").html("""").html(tbl);
                $('#example_group').DataTable({
                    dom: 'Bfrtip',
                    searching: false,
        ");
            WriteLiteral(@"            paging: false,
                    ordering: false,
                    info: true,
                    fixedHeader: true,
                    responsive: true,
                    scrollX: true,
                    lengthChange: false,
                    autoWidth: true,
                    fixedColumns: {
                        left: 2
                    },
                    rowGroup: {
                        dataSrc: 0,
                    },
                    pageLength: 50,
                    buttons: [
                        {
                            extend: 'excel',
                            footer: true,
                            title: 'Wind Performance Reports Site Wise',
                            //titleAttr: 'Export Excel',
                            ""oSelectorOpts"": { filter: 'applied', order: 'current' },
                            exportOptions: {
                                columns: ':visible',
                                modifi");
            WriteLiteral(@"er: {
                                    page: 'all'
                                },
                                format: {
                                    header: function (data, columnIdx) {
                                        if (columnIdx == 1) {
                                            return 'Capacity (MW)';
                                        }
                                        else if (columnIdx == 2) {
                                            return 'JMR Energy (in MU)  Tar';
                                        }
                                        else if (columnIdx == 3) {
                                            return 'JMR Energy (in MU)  Exp';
                                        }
                                        else if (columnIdx == 4) {
                                            return 'JMR Energy (in MU) Act';
                                        }
                                        else if (columnIdx == 5) {
   ");
            WriteLiteral(@"                                         return 'JMR Energy (in MU) T.Var (%)';
                                        }
                                        else if (columnIdx == 6) {
                                            return 'JMR Energy (in MU) E.Var (%)';
                                        }
                                        else if (columnIdx == 7) {
                                            return 'Revenue (MINR) ';
                                        }
                                        else if (columnIdx == 8) {
                                            return 'Wind Speed (m/s) Tar';
                                        }
                                        else if (columnIdx == 9) {
                                            return 'Wind Speed (m/s) Act ';
                                        }
                                        else if (columnIdx == 10) {
                                            return 'Wind Speed (m/s) Var (%) ';");
            WriteLiteral(@"
                                        }
                                        else if (columnIdx == 11) {
                                            return 'PLF (%) Tar';
                                        }
                                        else if (columnIdx == 12) {
                                            return 'PLF (%) Act ';
                                        }
                                        else if (columnIdx == 13) {
                                            return 'PLF (%) Var (%) ';
                                        }
                                        else if (columnIdx == 14) {
                                            return 'MA Actual (%) Tar';
                                        }
                                        else if (columnIdx == 15) {
                                            return 'MA Actual (%) Act ';
                                        }
                                        else if (columnIdx == 16)");
            WriteLiteral(@" {
                                            return 'MA Actual (%) Var (%) ';
                                        }
                                        else if (columnIdx == 17) {
                                            return 'IGA (%) Tar';
                                        }
                                        else if (columnIdx == 18) {
                                            return 'IGA (%) Act ';
                                        }
                                        else if (columnIdx == 19) {
                                            return 'IGA (%) Var (%) ';
                                        }
                                        else if (columnIdx == 20) {
                                            return 'EGA (%) Tar';
                                        }
                                        else if (columnIdx == 21) {
                                            return 'EGA (%) Act ';
                                        ");
            WriteLiteral(@"}
                                        else if (columnIdx == 22) {
                                            return 'EGA (%) Var (%) ';
                                        }
                                        else {
                                            return data;
                                        }
                                    }
                                }
                            }
                        },
                        {
                            extend: 'csv',
                            footer: true,
                            title: 'Wind Performance Reports Site Wise',
                            //titleAttr: 'Export Excel',
                            ""oSelectorOpts"": { filter: 'applied', order: 'current' },
                            exportOptions: {
                                columns: ':visible',
                                modifier: {
                                    page: 'all'
                            ");
            WriteLiteral(@"    },
                                format: {
                                    header: function (data, columnIdx) {
                                        if (columnIdx == 1) {
                                            return 'Capacity (MW)';
                                        }
                                        else if (columnIdx == 2) {
                                            return 'JMR Energy (in MU)  Tar';
                                        }
                                        else if (columnIdx == 3) {
                                            return 'JMR Energy (in MU)  Exp';
                                        }
                                        else if (columnIdx == 4) {
                                            return 'JMR Energy (in MU) Act';
                                        }
                                        else if (columnIdx == 5) {
                                            return 'JMR Energy (in MU) T.Var (%)';
   ");
            WriteLiteral(@"                                     }
                                        else if (columnIdx == 6) {
                                            return 'JMR Energy (in MU) E.Var (%)';
                                        }
                                        else if (columnIdx == 7) {
                                            return 'Revenue (MINR) ';
                                        }
                                        else if (columnIdx == 8) {
                                            return 'Wind Speed (m/s) Tar';
                                        }
                                        else if (columnIdx == 9) {
                                            return 'Wind Speed (m/s) Act ';
                                        }
                                        else if (columnIdx == 10) {
                                            return 'Wind Speed (m/s) Var (%) ';
                                        }
                                       ");
            WriteLiteral(@" else if (columnIdx == 11) {
                                            return 'PLF (%) Tar';
                                        }
                                        else if (columnIdx == 12) {
                                            return 'PLF (%) Act ';
                                        }
                                        else if (columnIdx == 13) {
                                            return 'PLF (%) Var (%) ';
                                        }
                                        else if (columnIdx == 14) {
                                            return 'MA Actual (%) Tar';
                                        }
                                        else if (columnIdx == 15) {
                                            return 'MA Actual (%) Act ';
                                        }
                                        else if (columnIdx == 16) {
                                            return 'MA Actual (%) Var (%) ';
  ");
            WriteLiteral(@"                                      }
                                        else if (columnIdx == 17) {
                                            return 'IGA (%) Tar';
                                        }
                                        else if (columnIdx == 18) {
                                            return 'IGA (%) Act ';
                                        }
                                        else if (columnIdx == 19) {
                                            return 'IGA (%) Var (%) ';
                                        }
                                        else if (columnIdx == 20) {
                                            return 'EGA (%) Tar';
                                        }
                                        else if (columnIdx == 21) {
                                            return 'EGA (%) Act ';
                                        }
                                        else if (columnIdx == 22) {
            ");
            WriteLiteral(@"                                return 'EGA (%) Var (%) ';
                                        }
                                        else {
                                            return data;
                                        }
                                    }
                                }
                            }
                        },
                        {
                            extend: 'colvis',
                            //  columns: ':not(.noVis)',
                            columnText: function (dt, idx, title) {
                                if (idx == 1) {
                                    return 'Capacity (MW)';
                                }
                                else if (idx == 2) {
                                    return 'JMR Energy (in MU)  Tar';
                                }
                                else if (idx == 3) {
                                    return 'JMR Energy (in MU)  Exp';
        ");
            WriteLiteral(@"                        }
                                else if (idx == 4) {
                                    return 'JMR Energy (in MU) Act';
                                }
                                else if (idx == 5) {
                                    return 'JMR Energy (in MU) T.Var (%)';
                                }
                                else if (idx == 6) {
                                    return 'JMR Energy (in MU) E.Var (%)';
                                }
                                else if (idx == 7) {
                                    return 'Revenue (MINR) ';
                                }
                                else if (idx == 8) {
                                    return 'Wind Speed (m/s) Tar';
                                }
                                else if (idx == 9) {
                                    return 'Wind Speed (m/s) Act ';
                                }
                                else if (");
            WriteLiteral(@"idx == 10) {
                                    return 'Wind Speed (m/s) Var (%) ';
                                }
                                else if (idx == 11) {
                                    return 'PLF (%) Tar';
                                }
                                else if (idx == 12) {
                                    return 'PLF (%) Act ';
                                }
                                else if (idx == 13) {
                                    return 'PLF (%) Var (%) ';
                                }
                                else if (idx == 14) {
                                    return 'MA Actual (%) Tar';
                                }
                                else if (idx == 15) {
                                    return 'MA Actual (%) Act ';
                                }
                                else if (idx == 16) {
                                    return 'MA Actual (%) Var (%) ';
             ");
            WriteLiteral(@"                   }
                                else if (idx == 17) {
                                    return 'IGA (%) Tar';
                                }
                                else if (idx == 18) {
                                    return 'IGA (%) Act ';
                                }
                                else if (idx == 19) {
                                    return 'IGA (%) Var (%) ';
                                }
                                else if (idx == 20) {
                                    return 'EGA (%) Tar';
                                }
                                else if (idx == 21) {
                                    return 'EGA (%) Act ';
                                }
                                else if (idx == 22) {
                                    return 'EGA (%) Var (%) ';
                                }
                                else {
                                    return title;
     ");
            WriteLiteral(@"                           }
                            }
                        },
                        /*{
                            text: '<span class=""fas fa-file-excel"" title=""Download from DB up to six decimal""></span>',
                            className: 'btn ml-1   ',

                            action: function () {
                                ExportToExcelSiteWise();
                            },
                            format: {
                                header: function (data, columnIdx) {
                                    if (columnIdx == 1) {
                                        return 'Capacity (MW)';
                                    }
                                    else if (columnIdx == 2) {
                                        return 'JMR Energy (in MU)  Tar';
                                    }
                                    else if (columnIdx == 3) {
                                        return 'JMR Energy (in MU)  Exp';");
            WriteLiteral(@"
                                    }
                                    else if (columnIdx == 4) {
                                        return 'JMR Energy (in MU)  Act';
                                    }
                                    else if (columnIdx == 5) {
                                        return 'JMR Energy (in MU)  T.Var (%)';
                                    }
                                    else if (columnIdx == 6) {
                                        return 'JMR Energy (in MU)  E.Var (%)';
                                    }
                                    else if (columnIdx == 7) {
                                        return 'Revenue (MINR) ';
                                    }
                                    else if (columnIdx == 8) {
                                        return 'Wind Speed (m/s)  Tar';
                                    }
                                    else if (columnIdx == 9) {
                           ");
            WriteLiteral(@"             return 'Wind Speed (m/s)  Act ';
                                    }
                                    else if (columnIdx == 10) {
                                        return 'Wind Speed (m/s)  Var (%) ';
                                    }
                                    else if (columnIdx == 11) {
                                        return 'PLF (%)  Tar';
                                    }
                                    else if (columnIdx == 12) {
                                        return 'PLF (%)  Act ';
                                    }
                                    else if (columnIdx == 13) {
                                        return 'PLF (%)  Var (%) ';
                                    }
                                    else if (columnIdx == 14) {
                                        return 'MA Actual (%)  Tar';
                                    }
                                    else if (columnIdx == 15) {
       ");
            WriteLiteral(@"                                 return 'MA Actual (%)  Act ';
                                    }
                                    else if (columnIdx == 16) {
                                        return 'MA Actual (%)  Var (%) ';
                                    }
                                    else if (columnIdx == 17) {
                                        return 'IGA (%)  Tar';
                                    }
                                    else if (columnIdx == 18) {
                                        return 'IGA (%)  Act ';
                                    }
                                    else if (columnIdx == 19) {
                                        return 'IGA (%)  Var (%) ';
                                    }
                                    else if (columnIdx == 20) {
                                        return 'EGA (%)  Tar';
                                    }
                                    else if (columnIdx == 21) {");
            WriteLiteral(@"
                                        return 'EGA (%)  Act ';
                                    }
                                    else if (columnIdx == 22) {
                                        return 'EGA (%)  Var (%) ';
                                    }
                                    else {
                                        return data;
                                    }
                                }
                            }
                        },*/
                    ]
                });
                $("".dt-buttons"").addClass('btn-group flex-wrap');
                $("".dt-buttons"").css(""margin-bottom"", ""0%"");
                $("".dt-buttons > button"").addClass('btn btn-secondary');
                $("".dt-button-collection > div > button"").addClass('btn btn-secondary');
                 //$(""button.dt-button.buttons-collection.buttons-colvis"").addClass('btn btn-light');
                $("".dataTables_filter> label >input"").addClass('form-cont");
            WriteLiteral(@"rol form-control-sm');
                $(document).on(""click"", ""div.dt-button-collection > div > button"", function () {
                    if ($(this).hasClass(""active"")) {
                        $(this).css(""background-color"", ""white"");
                    } else {
                        $(this).css(""background-color"", ""#31576d"");
                    }
                });
                document.getElementById(""loader"").style.display = 'none';
                //$('#example2').wrap(""<div class='scrolledTable'></div>"");

            }
        });
    }

    function showchield(id)
    {
       let iden = id.split(""_"");
       let elements = document.getElementsByClassName(iden[1]);
       for (let i = 0; i < elements.length; i++) {
            elements[i].style.display = ""table-row"";
        }
        document.getElementById(id).style.display = ""none"";
        document.getElementById(""phide_"" + iden[1]).style.display = ""inline-block"";

    }
    function hidechield(id) {
        ");
            WriteLiteral(@"let iden = id.split(""_"");
        let elements = document.getElementsByClassName(iden[1]);
        for (let i = 0; i < elements.length; i++) {
            elements[i].style.display = ""none"";
        }
        document.getElementById(id).style.display = ""none"";
        document.getElementById(""parant_"" + iden[1]).style.display = ""inline-block"";
    }
</script>
");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public IHttpContextAccessor HttpContextAccessor { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<DGRA_V1.Models.CountryList> Html { get; private set; }
    }
}
#pragma warning restore 1591
