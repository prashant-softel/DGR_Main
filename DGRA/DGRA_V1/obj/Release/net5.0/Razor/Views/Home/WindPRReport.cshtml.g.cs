#pragma checksum "D:\Haresh\Softel\Production code\DGR_Main\DGRA\DGRA_V1\Views\Home\WindPRReport.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "a06c7dc2861f9b13fbea9f2a5c1a585d02411738"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_WindPRReport), @"mvc.1.0.view", @"/Views/Home/WindPRReport.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\Haresh\Softel\Production code\DGR_Main\DGRA\DGRA_V1\Views\_ViewImports.cshtml"
using DGRA_V1;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Haresh\Softel\Production code\DGR_Main\DGRA\DGRA_V1\Views\_ViewImports.cshtml"
using DGRA_V1.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "D:\Haresh\Softel\Production code\DGR_Main\DGRA\DGRA_V1\Views\Home\WindPRReport.cshtml"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Haresh\Softel\Production code\DGR_Main\DGRA\DGRA_V1\Views\Home\WindPRReport.cshtml"
using Microsoft.AspNetCore.Http;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a06c7dc2861f9b13fbea9f2a5c1a585d02411738", @"/Views/Home/WindPRReport.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"aa9fc0f0a035817cf8f1fc535e299e80b45b9453", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_WindPRReport : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<DGRA_V1.Models.CountryList>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/fontawesome-free/css/all.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/daterangepicker/daterangepicker.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables-bs4/css/dataTables.bootstrap4.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables-responsive/css/responsive.bootstrap4.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables-buttons/css/buttons.bootstrap4.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/jquery/jquery.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables/jquery.dataTables.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_8 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables-responsive/js/dataTables.responsive.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_9 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables-buttons/js/dataTables.buttons.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_10 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables-buttons/js/buttons.colVis.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_11 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/dist/css/adminlte.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_12 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/jquery/jquery.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_13 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/moment/moment.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_14 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/daterangepicker/daterangepicker.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_15 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/tempusdominus-bootstrap-4/js/tempusdominus-bootstrap-4.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_16 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/summernote/summernote-bs4.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_17 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables/jquery.dataTables.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_18 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables/jquery.dataTables.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_19 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables/dataTables.fixedHeader.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_20 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables-buttons/js/dataTables.buttons.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_21 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/jszip/jszip.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_22 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables-buttons/js/buttons.html5.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_23 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/pdfmake/pdfmake.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_24 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/datatables-buttons/js/buttons.colVis.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_25 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/chart.js/Chart.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_26 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/plugins/multiple-select/dist/multiple-select.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_27 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Content/theme/dist/js/comman.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 6 "D:\Haresh\Softel\Production code\DGR_Main\DGRA\DGRA_V1\Views\Home\WindPRReport.cshtml"
  
    ViewData["Title"] = "Wind Performance Summary";

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Haresh\Softel\Production code\DGR_Main\DGRA\DGRA_V1\Views\Home\WindPRReport.cshtml"
  
    string windSiteList = "";

    var usermodel = JsonConvert.DeserializeObject<UserAccess>(@HttpContextAccessor.HttpContext.Session.GetString("UserAccess"));


#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "D:\Haresh\Softel\Production code\DGR_Main\DGRA\DGRA_V1\Views\Home\WindPRReport.cshtml"
 for (int i = 0; i < @usermodel.access_list.Count; i++)
{

    if (@usermodel.access_list[i].page_type == 3 && @usermodel.access_list[i].site_type == 1)
    {
        windSiteList += @usermodel.access_list[i].identity.ToString() + ",";
    }


}

#line default
#line hidden
#nullable disable
            WriteLiteral("<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700&display=fallback\">\r\n<!-- Font Awesome -->\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "a06c7dc2861f9b13fbea9f2a5c1a585d0241173815788", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<!-- daterange picker -->\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "a06c7dc2861f9b13fbea9f2a5c1a585d0241173816933", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<!-- DataTables -->\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "a06c7dc2861f9b13fbea9f2a5c1a585d0241173818072", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "a06c7dc2861f9b13fbea9f2a5c1a585d0241173819188", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<link rel=\"stylesheet\" href=\"https://cdn.datatables.net/fixedcolumns/4.3.0/css/fixedColumns.dataTables.min.css\" />\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "a06c7dc2861f9b13fbea9f2a5c1a585d0241173820426", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "a06c7dc2861f9b13fbea9f2a5c1a585d0241173821542", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "a06c7dc2861f9b13fbea9f2a5c1a585d0241173822658", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_7);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "a06c7dc2861f9b13fbea9f2a5c1a585d0241173823774", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_8);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "a06c7dc2861f9b13fbea9f2a5c1a585d0241173824890", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_9);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "a06c7dc2861f9b13fbea9f2a5c1a585d0241173826006", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_10);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"

<!-- dropdown search -->
<link href=""https://unpkg.com/multiple-select@1.5.2/dist/multiple-select.min.css"" rel=""stylesheet"">
<script src=""https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js""></script>
<script src=""https://unpkg.com/multiple-select@1.5.2/dist/multiple-select.min.js""></script>
<script src=""https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.5/xlsx.full.min.js""></script>


");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "a06c7dc2861f9b13fbea9f2a5c1a585d0241173827531", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_11);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
<style>
    .tab-btn {
        font-size: 0.7rem;
        font-weight: bold;
    }

    .scrolledTable {
        overflow-y: auto;
        clear: both;
    }

    .dt-button buttons-columnVisibility:active {
        background-color: aquamarine;
    }
    /* .dt-button-collection > div > button{
        background-color: palevioletred;
    }
    .dt-button-collection > div > button:active{
        background-color: blueviolet;
    }*/
</style>
<style>
");
            WriteLiteral(@"    div.dataTables_scrollBody > table {
        margin-top: -33px !important;
    }
</style>

<div class=""content-wrapper"">

    <section class=""content-header"">
        <!--<div class=""container-fluid"">
            <div class=""row mb-2"">
                <div class=""col-sm-6"">

                </div>
                <div class=""col-sm-6"">
                    <ol class=""breadcrumb float-sm-right"">
                        <li class=""breadcrumb-item""><a href=""#"">Home</a></li>
                        <li class=""breadcrumb-item active"">Wind Performance Reports</li>
                    </ol>
                </div>
            </div>
        </div>-->
    </section>


    <section class=""content"">
        <div class=""card"">
            <div class=""card-header"">
                <h3 class=""card-title text-center"">Wind Performance Summary</h3>

               
            </div>
            <div class=""card-body"">
                <div class=""row"" >


                    <div class=""co");
            WriteLiteral(@"l-sm-3""  style="" margin-left: 15px;"">
                        <div class=""input-group "">
                            <label class=""col-sm-3.1 col-form-label text-left"">Date Range :&nbsp;&nbsp;</label>
                            <div class=""input-group-prepend"">
                                <span class=""input-group-text"">
                                    <i class=""far fa-calendar-alt""></i>
                                </span>
                            </div>
                            <input type=""text"" class=""form-control float-right col-sm-9"" id=""daterange"" name=""daterange"">
                        </div>
                    </div>
                    <div class=""col-sm-3"" style=""margin-left: -13px;"">
                        <div class=""form-group"">
                            <div class=""row"">
                                <label class=""col-sm-3 col-form-label text-right"">SPV : </label>
                                <select class=""form-control  col-sm-9"" id=""spv"" name=""spv[]""");
            BeginWriteAttribute("value", " value=\"", 5123, "\"", 5131, 0);
            EndWriteAttribute();
            WriteLiteral(@" onchange=""getSite(true)"" multiple></select>
                            </div>
                        </div>
                    </div>
                    <div class=""col-sm-3"">
                        <div class=""form-group"">
                            <div class=""row"">
                                <label class=""col-sm-3 col-form-label text-right"">Site : </label>
                                <select class=""form-control  col-sm-9"" id=""site"" name=""site[]"" multiple></select>
                            </div>
                        </div>
                    </div>
                    <div class=""col-sm-2 text-left"">
                        <button type=""button"" class=""btn btn-block btn-primary"" onclick=""GetPRReport();"" style="" width: 5rem; line-height: 1.3;"">Search</button>
                    </div>
                    <div class=""col-sm-1 text-center""></div>


                </div>
                <div class=""row"">
                    <div class=""col-sm-5"">
                  ");
            WriteLiteral(@"      <div class=""card-body table-responsive pad"" style=""margin-left: -4%; padding-bottom: 2px;"">
                            <div class=""btn-group btn-group-toggle"" data-toggle=""buttons"">
                                <label class=""btn bg-olive"">
                                    <input type=""radio"" name=""reportType"" value=""Site"" id=""pr_b1"" autocomplete=""off"" checked> Site Wise Report
                                </label>
                                <label class=""btn bg-olive"">
                                    <input type=""radio"" name=""reportType"" value=""SPV"" id=""pr_b2"" autocomplete=""off""> SPV Wise Report
                                </label>
                            </div>
                        </div>
                    </div>
                    <div class=""col-sm-2 text-center"">

                    </div>
                    <div class=""col-sm-5 text-center""></div>
                </div>

                <hr>

                <div id=""reportsDaily"" style=""overflo");
            WriteLiteral(@"w-x: auto;"" class=""reportsDaily""></div>
                <div id=""loader"" class=""loader  center"" style=""display:none""></div>

               <!-- <hr>-->
                <div class=""row"" id=""sitewisechart"" style=""display:none"">
                    <div class=""chart col-sm-6 text-center"">
                        <h5>Energy (MUs) </h5>
                        <canvas id=""energy_chart"" style=""min-height: 350px; height: 350px; max-height: 350px; max-width: 100%;""></canvas>
                    </div>
                    <div class=""chart col-sm-6 text-center"">
                        <h5>Wind (m/s) </h5>
                        <canvas id=""wind_chart"" style=""min-height: 350px; height: 350px; max-height: 350px; max-width: 100%;""></canvas>
                    </div>

                </div>
                <div class=""row"" id=""spvwisechart"" style=""display:none"">
                    <div class=""col-sm-6 text-center"">
                        <canvas id=""pieChart"" style=""min-height: 350px; height: 350px;");
            WriteLiteral(" max-height: 350px; max-width: 100%;\"></canvas>\r\n                    </div>\r\n                    <div class=\"col-sm-6 text-center\"></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n</div>\r\n</section>\r\n</div>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a06c7dc2861f9b13fbea9f2a5c1a585d0241173834973", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_12);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js\"></script>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a06c7dc2861f9b13fbea9f2a5c1a585d0241173836108", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a06c7dc2861f9b13fbea9f2a5c1a585d0241173837149", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a06c7dc2861f9b13fbea9f2a5c1a585d0241173838498", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a06c7dc2861f9b13fbea9f2a5c1a585d0241173839543", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<!-- DataTables  & Plugins -->\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a06c7dc2861f9b13fbea9f2a5c1a585d0241173840618", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_17);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a06c7dc2861f9b13fbea9f2a5c1a585d0241173841659", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a06c7dc2861f9b13fbea9f2a5c1a585d0241173843008", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<script src=\"https://cdn.datatables.net/fixedcolumns/4.3.0/js/dataTables.fixedColumns.min.js\" defer></script>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a06c7dc2861f9b13fbea9f2a5c1a585d0241173844472", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_20);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a06c7dc2861f9b13fbea9f2a5c1a585d0241173845821", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_21);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a06c7dc2861f9b13fbea9f2a5c1a585d0241173847170", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_22);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a06c7dc2861f9b13fbea9f2a5c1a585d0241173848519", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_23);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a06c7dc2861f9b13fbea9f2a5c1a585d0241173849868", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_24);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a06c7dc2861f9b13fbea9f2a5c1a585d0241173851217", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_25);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a06c7dc2861f9b13fbea9f2a5c1a585d0241173852258", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_26);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("defer", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a06c7dc2861f9b13fbea9f2a5c1a585d0241173853607", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_27);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.5/xlsx.full.min.js\"></script>\r\n\r\n<script type=\"text/javascript\">\r\n     var userRole = \"");
#nullable restore
#line 218 "D:\Haresh\Softel\Production code\DGR_Main\DGRA\DGRA_V1\Views\Home\WindPRReport.cshtml"
                Write(Html.Raw(@HttpContextAccessor.HttpContext.Session.GetString("role")));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""";
     var exceldata1;
     var exceldata2;
    $(document).ready(function () {
        var today = new Date();
        fyear = getFinancialYear(today);
        console.log(fyear);

        $('#daterange').daterangepicker(
            {
                maxDate: new Date(),
                locale: {
                    format: 'DD/MM/YYYY',
                }
            });
    });
    window.onload = function () {

        var site_ids = """);
#nullable restore
#line 236 "D:\Haresh\Softel\Production code\DGR_Main\DGRA\DGRA_V1\Views\Home\WindPRReport.cshtml"
                   Write(Html.Raw(windSiteList.TrimEnd(',')));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""";
        GetSPV(false);
        getSite(false);

    }

    var today = new Date();
    fyear = getFinancialYear(today);
    var Fy = fyear;
     function GetSPV(fliterVal) {
        let state_id = """";
        let site_ids = """";

        if (fliterVal == false) {
            site_ids = """);
#nullable restore
#line 250 "D:\Haresh\Softel\Production code\DGR_Main\DGRA\DGRA_V1\Views\Home\WindPRReport.cshtml"
                   Write(Html.Raw(windSiteList.TrimEnd(',')));

#line default
#line hidden
#nullable disable
            WriteLiteral("\";\r\n        }\r\n\r\n        $.ajax({\r\n            type: \"GET\",\r\n            ///url: \"/WindReport/GetSPVList?state=\" + val,\r\n            url: \'");
#nullable restore
#line 256 "D:\Haresh\Softel\Production code\DGR_Main\DGRA\DGRA_V1\Views\Home\WindPRReport.cshtml"
             Write(Url.Action("GetSPVList", "WindReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?state=' + state_id + '&sitelist=' + site_ids,
            contentType: ""application/json; charset=utf-8"",
            datatype: ""html"",
            success: function (result, status, xhr) {

                var options = """";
                for (var j = 0; j < result.length; j++) {
                    options += '<option value=""' + result[j].spv + '"">' + result[j].spv + '</option>';
                }
                $(""#spv"").multipleSelect('destroy');
                $(""#spv"").html(options);
                $('select#spv').multipleSelect({
                    ""minimumCountSelected"": 2,
                    ""placeholder"": ""Select SPV(s)"",
                    filter:true
                });

            }
        });
        getSite(false);
    }
    function getSite(fliterVal) {
        var site_ids = """";
        if (fliterVal == false) {
            site_ids = """);
#nullable restore
#line 280 "D:\Haresh\Softel\Production code\DGR_Main\DGRA\DGRA_V1\Views\Home\WindPRReport.cshtml"
                   Write(Html.Raw(windSiteList.TrimEnd(',')));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""";
        }
        let state_id = """";
        $('select#state option:selected').each(function () {
            state_id += $(this).val() + "","";
        });
        state_id = state_id != """" ? state_id.slice(0, -1) : state_id;

        let spv = """";
        $('select#spv option:selected').each(function () {
            spv += $(this).val() + "","";
        });
        spv = spv != """" ? spv.slice(0, -1) : spv;
        if (state_id != """" || spv != """") {
             site_ids = """);
#nullable restore
#line 294 "D:\Haresh\Softel\Production code\DGR_Main\DGRA\DGRA_V1\Views\Home\WindPRReport.cshtml"
                    Write(Html.Raw(windSiteList.TrimEnd(',')));

#line default
#line hidden
#nullable disable
            WriteLiteral("\";\r\n        }\r\n        $.ajax({\r\n            type: \"POST\",\r\n            url: \'");
#nullable restore
#line 298 "D:\Haresh\Softel\Production code\DGR_Main\DGRA\DGRA_V1\Views\Home\WindPRReport.cshtml"
             Write(Url.Action("GetSiteList", "WindReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?state=' + state_id + '&spv=' + spv + '&sitelist=' + site_ids,
            contentType: ""application/json; charset=utf-8"",
            datatype: ""html"",
            success: function (result, status, xhr) {
                var options = """";
                for (var k = 0; k < result.length; k++) {
                    options += '<option value=""' + result[k].site_master_id + '"">' + result[k].site + '</option>';
                }
                $(""#site"").multipleSelect('destroy');
                $(""#site"").html("""").html(options);

                $('select#site').multipleSelect({
                    ""minimumCountSelected"": 2,
                    ""placeholder"": ""Select Site(s)"",
                    filter:true
                });
            }
        });

    }

    function GetPRReport() {

        var ReportType = $(""input[name='reportType']:checked"").val();
        if (ReportType == ""SPV"") {
            GetWindPRReportSPVWise();
        }
        else {

           GetWin");
            WriteLiteral(@"dPRReportSiteWise();
        }
    }
    function ExportToExcelSPVWise() {

    console.log(exceldata1)
    result = exceldata1;

    var columns = [
         ""SPV"",""Capacity"",""JMR Energy (in MU) Tar"",""JMR Energy (in MU) Exp"",""JMR Energy (in MU) Act"",""JMR Energy (in MU) T.var(%)"",""JMR Energy (in MU) E.var(%)"",""Revenue (MINR)"","" Wind Speed (m/s) Tar"",""Wind Speed (m/s) Act "",""Wind Speed (m/s) Var (%)"",""PLF (%) Tar"",
       ""PLF (%) Act "",""PLF (%) Var (%) "",""MA Actual (%) Tar"",""MA Actual (%) Act "",""MA Actual (%) Var (%) "",""IGA (%) Tar"",""IGA (%) Act "",""IGA (%) Var (%) "",""EGA (%) Tar"",""EGA (%) Act "",""EGA (%) Var (%) ""
    ];

    var rows = [];

    for (var i = 0; i < result.length; i++) {
        var row = [];
       let total_capacity = 0;
                    let total_capTarMu = 0;
                    let total_tar_mu = 0;
                    let total_exp_power = 0;
                    let total_act_jmr_kwh_mu = 0;
                    let avg_jmr_var = 0;
                    let total_r");
            WriteLiteral(@"evenue = 0;
                    let total_capTarWind = 0;
                    let total_tar_wind = 0;
                    let total_act_wind = 0;
                    let avg_wind_var = 0;
                    let total_capTarPlf = 0;
                    let total_tar_plf = 0;
                    let total_act_plf = 0;
                    let avg_plf_var = 0;
                    let total_capTarMa = 0;
                    let total_tar_ma = 0;
                    let total_act_ma = 0;
                    let avg_ma_var = 0;
                    let total_capTarIga = 0;
                    let total_tar_iga = 0;
                    let total_act_iga = 0;
                    let avg_iga_var = 0;
                    let total_capTarEga = 0;
                    let total_tar_ega = 0;
                    let total_act_ega = 0;
                    let avg_ega_var = 0;
                    let total_capActWind = 0;
                    let total_capActPlf = 0;
                    let total_capActMa");
            WriteLiteral(@" = 0;
                    let total_capActIga = 0;
        let total_capActEga = 0;
                        let revenue = 0;
                        let jmr_var = 0;
                        let e_var = 0;
                        let wind_var = 0;
                        let plf_var = 0;
                        let ma_act_var = 0;
                        let iga_var = 0;
                        let ega_var = 0;
                        let tar_mu = 0;
                        tar_mu = result[i].tar_kwh_mu / 1000000;
                        revenue = ((result[i].act_jmr_kwh_mu - tar_mu) * result[i].total_tarrif);
                        if (result[i].act_jmr_kwh_mu != 0 || result[i].tar_kwh_mu != 0) {
                            jmr_var = ((result[i].act_jmr_kwh_mu - tar_mu) / tar_mu) * 100;
                        }
                        if (result[i].exp_power != 0) {
                            //e_var = ((result[i].act_jmr_kwh_mu - (result[i].exp_power / 6) / 1000000) / ((result[i].exp_pow");
            WriteLiteral(@"er / 6) / 1000000)) * 100;
                            e_var = (result[i].act_jmr_kwh_mu - result[i].exp_power ) / (result[i].exp_power) * 100;
                            //if (result[i].site == ""Maragutti"") {
                            //    console.log(""Actual : "", result[i].act_kwh, ""Expected : "", result[i].expected_kwh, ""evar : "" + e_var);
                            //    //    console.log(temp_e_var);
                            //}
                        }
                        if (result[i].act_Wind != 0 || result[i].tar_wind != 0) {
                            wind_var = ((result[i].act_Wind - result[i].tar_wind) / result[i].tar_wind) * 100;
                        }
                        plf_var = (result[i].act_plf - result[i].tar_plf);
                        ma_act_var = (result[i].act_ma - result[i].tar_ma);
                        iga_var = (result[i].act_iga - result[i].tar_iga);
                        ega_var = (result[i].act_ega - result[i].tar_ega);

                 ");
            WriteLiteral(@"       //revenue_arr.push(revenue.toFixed(2));
			            total_capacity += result[i].total_mw;
                        total_tar_mu += tar_mu;
                        total_act_jmr_kwh_mu += result[i].act_jmr_kwh_mu;
                        total_exp_power += result[i].exp_power;
                        total_revenue += revenue;
                        total_tar_wind += result[i].tar_wind;
                        total_act_wind += result[i].act_Wind;
                        total_tar_plf += result[i].tar_plf;
                        total_act_plf += result[i].act_plf;
                        total_tar_ma += result[i].tar_ma;
                        total_act_ma += result[i].act_ma;
                        total_tar_iga += result[i].tar_iga;
                        total_act_iga += result[i].act_iga;
                        total_tar_ega += result[i].tar_ega;
                        total_act_ega += result[i].act_ega;
                        total_capTarMu += tar_mu * result[i].total_mw;
");
            WriteLiteral(@"                        total_capTarWind += result[i].tar_wind * result[i].total_mw;
                        total_capTarPlf += result[i].tar_plf * result[i].total_mw;
                        total_capTarMa += result[i].tar_ma * result[i].total_mw;
                        total_capTarIga += result[i].tar_iga * result[i].total_mw;
                        total_capTarEga += result[i].tar_ega * result[i].total_mw;
                        total_capActWind += result[i].act_Wind * result[i].total_mw;
                        total_capActPlf += result[i].act_plf * result[i].total_mw;
                        total_capActMa += result[i].act_ma * result[i].total_mw;
                        total_capActIga += result[i].act_iga * result[i].total_mw;
                        total_capActEga += result[i].act_ega * result[i].total_mw;

       row.push(result[i].spv);
        row.push(result[i].total_mw);
        row.push(tar_mu);
        row.push(result[i].exp_power);
        row.push(result[i].act_jmr_kwh_mu);");
            WriteLiteral(@"
        row.push( jmr_var);
        row.push(e_var);
        row.push(revenue);
        row.push(result[i].tar_wind);
        row.push(result[i].act_Wind);
        row.push(wind_var);
        row.push(result[i].tar_plf);
        row.push(result[i].act_plf);
        row.push(plf_var);
        row.push( result[i].tar_ma);
        row.push(result[i].act_ma);
        row.push(ma_act_var);
        row.push(result[i].tar_iga);
        row.push(result[i].act_iga);
        row.push(iga_var);
        row.push(result[i].tar_ega);
        row.push( result[i].act_ega);
        row.push( ega_var);
        rows.push(row);



    }

    var data = [columns].concat(rows);

    var ws = XLSX.utils.aoa_to_sheet(data);
    var wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, ""Wind PerformanceSum SPVWise"");
    var wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'binary' });

    function s2ab(s) {
        var buf = new ArrayBuffer(s.length);
        var view = new Uint8Arr");
            WriteLiteral(@"ay(buf);
        for (var i = 0; i !== s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
        return buf;
    }

    saveAs(new Blob([s2ab(wbout)], { type: ""application/octet-stream"" }), ""Wind PerformanceSum SPVWise.xlsx"");

}


    // Daily Gen Report SPV WIse
    function GetWindPRReportSPVWise() {
        document.getElementById(""loader"").style.display = 'flex';
        var site_ids = """);
#nullable restore
#line 485 "D:\Haresh\Softel\Production code\DGR_Main\DGRA\DGRA_V1\Views\Home\WindPRReport.cshtml"
                   Write(Html.Raw(windSiteList.TrimEnd(',')));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""";
        let site = """";
        let spv = """";
        $('select#site option:selected').each(function () {
            site += $(this).val() + "","";
        });
        site = site != """" ? site.slice(0, -1) : site;

        $('select#spv option:selected').each(function () {
            spv += $(this).val() + "","";
        });
        spv = spv != """" ? spv.slice(0, -1) : spv;
        if (userRole == ""User"" && site == """") {
            site = site_ids;
        }
        var daterange = $('#daterange').val();
        var arr1 = new Array();
        arr1 = daterange.split(""-"");
        var fromDate = moment(arr1[0], 'DD/MM/YYYY').format('YYYY-MM-DD');
        var toDate = moment(arr1[1], 'DD/MM/YYYY').format('YYYY-MM-DD');
        var fyear = Fy;
        console.log(fyear);
        var leble = [];
        var revenue_arr = [];
        var reporthead = ""SPV Wise Reports"";
        $.ajax({
            type: ""GET"",
            url: '");
#nullable restore
#line 512 "D:\Haresh\Softel\Production code\DGR_Main\DGRA\DGRA_V1\Views\Home\WindPRReport.cshtml"
             Write(Url.Action("GetWindPRReportSPVWise", "WindReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?fy=' + fyear + '&fromDate=' + fromDate + '&toDate=' + toDate + '&sitelist=' + site + '&spv=' + spv,

            contentType: ""application/json; charset=utf-8"",

            datatype: ""JSON"",
            success: function (result, status, xhr) {
                console.log(result);
                //var tbl = '<div class=""text-center""><h5>' + reporthead+'</h5></div>';
                var tbl = '<table id=""example1""  class=""table table-bordered table-striped"" style=""width: 130%;"">';
                tbl += '<thead class=""tbl-head""><tr>';
                tbl += '<th rowspan=""2"" style=""width: 10%;"">SPV</th><th rowspan=""2"">Capacity<br> (MW)</th>';
                tbl += '<th colspan=""5"" class=""text-center"">JMR Energy (in MU)</th><th>(±)Revenue</th>';
                tbl += '<th colspan=""3"" class=""text-center"">Wind Speed (m/s)</th><th colspan=""3"" class=""text-center"">PLF (%)</th>';
                tbl += '<th colspan=""3"" class=""text-center"">MA Actual (%)</th><th colspan=""3"" class=""text-center"">IGA");
            WriteLiteral(@" (%)</th>';
                tbl += '<th colspan=""3"" class=""text-center"">EGA (%)</th></tr>';
                //tbl += '<tr><th>&nbsp;</th>';
               // tbl += '<th>(MW)</th>';
                tbl += '<tr><th>Tar</th>';
                tbl += '<th>Exp</th>';
                tbl += '<th>Act</th>';
                tbl += '<th>T.Var (%)</th>';
                tbl += '<th>E.Var (%)</th>';
                tbl += '<th>(MINR)</th>';
                tbl += '<th>Tar</th>';
                tbl += '<th>Act</th>';
                tbl += '<th>Var (%)</th>';
                tbl += '<th>Tar</th>';
                tbl += '<th>Act</th>';
                tbl += '<th>Var (%)</th>';
                tbl += '<th>Tar</th>';
                tbl += '<th>Act</th>';
                tbl += '<th>Var (%)</th>';
                tbl += '<th>Tar</th>';
                tbl += '<th>Act</th>';
                tbl += '<th>Var (%)</th>';
                tbl += '<th>Tar</th>';
                tbl += '<th>Act</th>';
   ");
            WriteLiteral(@"             tbl += '<th>Var (%)</th>';

                tbl += '</tr></thead>';

                if (result.length > 0) {
                    exceldata1 = result;
                   
                    console.log(""Datatable"");
                    let total_capacity = 0;
                    let total_capTarMu = 0;
                    let total_tar_mu = 0;
                    let total_exp_power = 0;
                    let total_act_jmr_kwh_mu = 0;
                    let avg_jmr_var = 0;
                    let total_revenue = 0;
                    let total_capTarWind = 0;
                    let total_tar_wind = 0;
                    let total_act_wind = 0;
                    let avg_wind_var = 0;
                    let total_capTarPlf = 0;
                    let total_tar_plf = 0;
                    let total_act_plf = 0;
                    let avg_plf_var = 0;
                    let total_capTarMa = 0;
                    let total_tar_ma = 0;
                    let to");
            WriteLiteral(@"tal_act_ma = 0;
                    let avg_ma_var = 0;
                    let total_capTarIga = 0;
                    let total_tar_iga = 0;
                    let total_act_iga = 0;
                    let avg_iga_var = 0;
                    let total_capTarEga = 0;
                    let total_tar_ega = 0;
                    let total_act_ega = 0;
                    let avg_ega_var = 0;
                    let total_capActWind = 0;
                    let total_capActPlf = 0;
                    let total_capActMa = 0;
                    let total_capActIga = 0;
                    let total_capActEga = 0;

                    for (var i = 0; i < result.length; i++) {
                        leble.push(result[i].spv);
                        let revenue = 0;
                        let jmr_var = 0;
                        let e_var = 0;
                        let wind_var = 0;
                        let plf_var = 0;
                        let ma_act_var = 0;
             ");
            WriteLiteral(@"           let iga_var = 0;
                        let ega_var = 0;
                        let tar_mu = 0;
                        tar_mu = result[i].tar_kwh_mu / 1000000;
                        revenue = ((result[i].act_jmr_kwh_mu - tar_mu) * result[i].total_tarrif);
                        if (result[i].act_jmr_kwh_mu != 0 || result[i].tar_kwh_mu != 0) {
                            jmr_var = ((result[i].act_jmr_kwh_mu - tar_mu) / tar_mu) * 100;
                        }
                        if (result[i].exp_power != 0) {
                            //e_var = ((result[i].act_jmr_kwh_mu - (result[i].exp_power /6) / 1000000) / ((result[i].exp_power /6 ) / 1000000)) * 100;
                            e_var = (result[i].act_jmr_kwh_mu - result[i].exp_power) / (result[i].exp_power) * 100;

                            //if (result[i].site == ""Maragutti"") {
                            //    console.log(""Actual : "", result[i].act_kwh, ""Expected : "", result[i].expected_kwh, ""evar : "" + e_var);
  ");
            WriteLiteral(@"                          //    //    console.log(temp_e_var);
                            //}
                        }
                        if (result[i].act_Wind != 0 || result[i].tar_wind != 0) {
                            wind_var = ((result[i].act_Wind - result[i].tar_wind) / result[i].tar_wind) * 100;
                        }
                        plf_var = (result[i].act_plf - result[i].tar_plf);
                        ma_act_var = (result[i].act_ma - result[i].tar_ma);
                        iga_var = (result[i].act_iga - result[i].tar_iga);
                        ega_var = (result[i].act_ega - result[i].tar_ega);

                        //revenue_arr.push(revenue.toFixed(2));
			            total_capacity += result[i].total_mw;
                        total_tar_mu += tar_mu;
                        total_act_jmr_kwh_mu += result[i].act_jmr_kwh_mu;
                        total_exp_power += result[i].exp_power;
                        total_revenue += revenue;
            ");
            WriteLiteral(@"            total_tar_wind += result[i].tar_wind;
                        total_act_wind += result[i].act_Wind;
                        total_tar_plf += result[i].tar_plf;
                        total_act_plf += result[i].act_plf;
                        total_tar_ma += result[i].tar_ma;
                        total_act_ma += result[i].act_ma;
                        total_tar_iga += result[i].tar_iga;
                        total_act_iga += result[i].act_iga;
                        total_tar_ega += result[i].tar_ega;
                        total_act_ega += result[i].act_ega;
                        total_capTarMu += tar_mu * result[i].total_mw;
                        total_capTarWind += result[i].tar_wind * result[i].total_mw;
                        total_capTarPlf += result[i].tar_plf * result[i].total_mw;
                        total_capTarMa += result[i].tar_ma * result[i].total_mw;
                        total_capTarIga += result[i].tar_iga * result[i].total_mw;
                  ");
            WriteLiteral(@"      total_capTarEga += result[i].tar_ega * result[i].total_mw;
                        total_capActWind += result[i].act_Wind * result[i].total_mw;
                        total_capActPlf += result[i].act_plf * result[i].total_mw;
                        total_capActMa += result[i].act_ma * result[i].total_mw;
                        total_capActIga += result[i].act_iga * result[i].total_mw;
                        total_capActEga += result[i].act_ega * result[i].total_mw;

                        tbl += '<tr>';
                        tbl += '<td class=""text-left"">' + result[i].spv + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].total_mw.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + tar_mu.toFixed(2)+'</td>';
                        //tbl += '<td class=""text-right"">' + ((result[i].exp_power / 6) / 1000000).toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].exp_power.toFixed(2) + '</td>';
");
            WriteLiteral(@"                        tbl += '<td class=""text-right"">' + result[i].act_jmr_kwh_mu.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + jmr_var.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + e_var.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + revenue.toFixed(2)+'</td>';
                        tbl += '<td class=""text-right"">' + result[i].tar_wind.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].act_Wind.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + wind_var.toFixed(2)+'</td>';
                        tbl += '<td class=""text-right"">' + result[i].tar_plf.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].act_plf.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + plf_var.toFixed(2)+'</td>';
                        tbl += '<td class=""text-right"">' + result[i].tar");
            WriteLiteral(@"_ma.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].act_ma.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + ma_act_var.toFixed(2)+'</td>';
                        tbl += '<td class=""text-right"">' + result[i].tar_iga.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].act_iga.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + iga_var.toFixed(2)+'</td>';
                        tbl += '<td class=""text-right"">' + result[i].tar_ega.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].act_ega.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + ega_var.toFixed(2)+'</td>';

                        tbl += '</tr>';
                    }
                    let avg_tar_mu = 0;
                    let avg_e_var = 0;
                    let avg_tar_wind = 0;
                    let avg_tar_plf = 0;");
            WriteLiteral(@"
                    let avg_tar_ma = 0;
                    let avg_tar_iga = 0;
                    let avg_tar_ega = 0;
                    let avg_act_wind = 0;
                    let avg_act_plf = 0;
                    let avg_act_ma = 0;
                    let avg_act_iga = 0;
                    let avg_act_ega = 0;


                    if (total_capacity != 0) {
                        avg_tar_mu = total_capTarMu / total_capacity;
                        avg_tar_wind = total_capTarWind / total_capacity;
                        avg_tar_plf = total_capTarPlf / total_capacity;
                        avg_tar_ma = total_capTarMa / total_capacity;
                        avg_tar_iga = total_capTarIga / total_capacity;
                        avg_tar_ega = total_capTarEga / total_capacity;
                        avg_act_wind = total_capActWind / total_capacity;
                        avg_act_plf = total_capActPlf / total_capacity;
                        avg_act_ma = total_capActMa ");
            WriteLiteral(@"/ total_capacity;
                        avg_act_iga = total_capActIga / total_capacity;
                        avg_act_ega = total_capActEga / total_capacity;
                    }

                    if (total_tar_mu != 0) {
                        avg_jmr_var = (((total_act_jmr_kwh_mu - total_tar_mu) / total_tar_mu) * 100);
                    }
                    if (avg_tar_wind != 0) {
                        avg_wind_var = ((avg_act_wind.toFixed(2) - avg_tar_wind.toFixed(2)) / avg_tar_wind.toFixed(2)) * 100;
                    }
                    if (total_exp_power != 0) {
                        avg_e_var = (((total_act_jmr_kwh_mu.toFixed(2) - total_exp_power.toFixed(2)) / total_exp_power.toFixed(2)) * 100);
                    }

                    avg_plf_var = (avg_act_plf - avg_tar_plf);
                    avg_ma_var = (avg_act_ma - avg_tar_ma);
                    avg_iga_var = (avg_act_iga - avg_tar_iga);
                    avg_ega_var = (avg_act_ega - avg_tar_ega);");
            WriteLiteral(@"

                    tbl += '<tfoot><tr>';
                    tbl += '<th rowspan=""1""  style=""width: 10%; font-weight: bold;"">Grand Total</th>';
                    tbl += '<td class=""text-right"" style=""font-weight: bold;""><b>' + total_capacity.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + total_tar_mu.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + total_exp_power.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + total_act_jmr_kwh_mu.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_jmr_var.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_e_var.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + total_revenue.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_tar_wind.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b");
            WriteLiteral(@">' + avg_act_wind.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_wind_var.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_tar_plf.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_act_plf.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_plf_var.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_tar_ma.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_act_ma.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_ma_var.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_tar_iga.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_act_iga.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_iga_var.toFixed(2) + '</b></td>';
           ");
            WriteLiteral(@"         tbl += '<td class=""text-right""><b>' + avg_tar_ega.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_act_ega.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_ega_var.toFixed(2) + '</b></td>';
                    tbl += '</tr></tfoot>';
                }
                else {
                    console.log(""Data not available"");

                }
                tbl += '</table>';
                //$(""#reportsDaily"").html(tbl);
                $(""#reportsDaily"").html("""").html(tbl);
                $.fn.DataTable.ext.pager.numbers_length = 6;
                $('#example1').DataTable({
                    dom: 'Bfrtip',
                    fixedHeader: true,
                    responsive: true,
                    scrollX: true,
                   lengthChange: false,
                    paging: true,
                    lengthChange: false,
                    searching: true,
                    order");
            WriteLiteral(@"ing: true,
                    info: true,
                    fixedColumns: {
                        left: 2
                    },
                    autoWidth: true,
                    pageLength: 50,
                    buttons: [
                        {
                            extend:'excel',
                            footer: true,
                            title:'Wind Performance Reports SPV Wise',
                            //titleAttr: 'Export Excel',
                            ""oSelectorOpts"": { filter: 'applied', order: 'current' },
                            exportOptions: {
                                columns: ':visible',
                                modifier: {
                                    page: 'all'
                                },
                                format: {
                                    header: function (data, columnIdx) {
                                        if (columnIdx == 1) {
                                    ");
            WriteLiteral(@"        return 'Capacity (MW)';
                                        }
                                        else if (columnIdx == 2) {
                                            return 'JMR Energy (in MU)  Tar';
                                        }
                                        else if (columnIdx == 3) {
                                            return 'JMR Energy (in MU)  Exp';
                                        }
                                        else if (columnIdx == 4) {
                                            return 'JMR Energy (in MU)  Act';
                                        }
                                        else if (columnIdx == 5) {
                                            return 'JMR Energy (in MU)  T.Var (%)';
                                        }
                                        else if (columnIdx == 6) {
                                            return 'JMR Energy (in MU)  E.Var (%)';
                             ");
            WriteLiteral(@"           }
                                        else if (columnIdx == 7) {
                                            return 'Revenue (MINR) ';
                                        }
                                        else if (columnIdx == 8) {
                                            return 'Wind Speed (m/s)  Tar';
                                        }
                                        else if (columnIdx == 9) {
                                            return 'Wind Speed (m/s)  Act ';
                                        }
                                        else if (columnIdx == 10) {
                                            return 'Wind Speed (m/s)  Var (%) ';
                                        }
                                        else if (columnIdx == 11) {
                                            return 'PLF (%)  Tar';
                                        }
                                        else if (columnIdx == 12) {
        ");
            WriteLiteral(@"                                    return 'PLF (%)  Act ';
                                        }
                                        else if (columnIdx == 13) {
                                            return 'PLF (%)  Var (%) ';
                                        }
                                        else if (columnIdx == 14) {
                                            return 'MA Actual (%)  Tar';
                                        }
                                        else if (columnIdx == 15) {
                                            return 'MA Actual (%)  Act ';
                                        }
                                        else if (columnIdx == 16) {
                                            return 'MA Actual (%)  Var (%) ';
                                        }
                                        else if (columnIdx == 17) {
                                            return 'IGA (%)  Tar';
                                  ");
            WriteLiteral(@"      }
                                        else if (columnIdx == 18) {
                                            return 'IGA (%)  Act ';
                                        }
                                        else if (columnIdx == 19) {
                                            return 'IGA (%)  Var (%) ';
                                        }
                                        else if (columnIdx == 20) {
                                            return 'EGA (%)  Tar';
                                        }
                                        else if (columnIdx == 21) {
                                            return 'EGA (%)  Act ';
                                        }
                                        else if (columnIdx == 22) {
                                            return 'EGA (%)  Var (%) ';
                                        }
                                        else {
                                            return data");
            WriteLiteral(@";
                                        }
                                    }
                                }
                            }
                        },
                        {
                            extend: 'csv',
                            footer: true,
                            title: 'Wind Performance Reports SPV Wise',
                            //titleAttr: 'Export Excel',
                            ""oSelectorOpts"": { filter: 'applied', order: 'current' },
                            exportOptions: {
                                columns: ':visible',
                                modifier: {
                                    page: 'all'
                                },
                                format: {
                                    header: function (data, columnIdx) {
                                        if (columnIdx == 1) {
                                            return 'Capacity (MW)';
                                  ");
            WriteLiteral(@"      }
                                        else if (columnIdx == 2) {
                                            return 'JMR Energy (in MU)  Tar';
                                        }
                                        else if (columnIdx == 3) {
                                            return 'JMR Energy (in MU)  Exp';
                                        }
                                        else if (columnIdx == 4) {
                                            return 'JMR Energy (in MU)  Act';
                                        }
                                        else if (columnIdx == 5) {
                                            return 'JMR Energy (in MU)  T.Var (%)';
                                        }
                                        else if (columnIdx == 6) {
                                            return 'JMR Energy (in MU)  E.Var (%)';
                                        }
                                        else if (colu");
            WriteLiteral(@"mnIdx == 7) {
                                            return 'Revenue (MINR) ';
                                        }
                                        else if (columnIdx == 8) {
                                            return 'Wind Speed (m/s)  Tar';
                                        }
                                        else if (columnIdx == 9) {
                                            return 'Wind Speed (m/s)  Act ';
                                        }
                                        else if (columnIdx == 10) {
                                            return 'Wind Speed (m/s)  Var (%) ';
                                        }
                                        else if (columnIdx == 11) {
                                            return 'PLF (%)  Tar';
                                        }
                                        else if (columnIdx == 12) {
                                            return 'PLF (%)  Act ';
      ");
            WriteLiteral(@"                                  }
                                        else if (columnIdx == 13) {
                                            return 'PLF (%)  Var (%) ';
                                        }
                                        else if (columnIdx == 14) {
                                            return 'MA Actual (%)  Tar';
                                        }
                                        else if (columnIdx == 15) {
                                            return 'MA Actual (%)  Act ';
                                        }
                                        else if (columnIdx == 16) {
                                            return 'MA Actual (%)  Var (%) ';
                                        }
                                        else if (columnIdx == 17) {
                                            return 'IGA (%)  Tar';
                                        }
                                        else if (columnIdx");
            WriteLiteral(@" == 18) {
                                            return 'IGA (%)  Act ';
                                        }
                                        else if (columnIdx == 19) {
                                            return 'IGA (%)  Var (%) ';
                                        }
                                        else if (columnIdx == 20) {
                                            return 'EGA (%)  Tar';
                                        }
                                        else if (columnIdx == 21) {
                                            return 'EGA (%)  Act ';
                                        }
                                        else if (columnIdx == 22) {
                                            return 'EGA (%)  Var (%) ';
                                        }
                                        else {
                                            return data;
                                        }
                     ");
            WriteLiteral(@"               }
                                }
                            }
                        },
                        {
                            extend: 'colvis',
                            //  columns: ':not(.noVis)',
                            columnText: function (dt, idx, title) {
                                if (idx == 1) {
                                    return 'Capacity (MW)';
                                }
                                else if (idx == 2) {
                                    return 'JMR Energy (in MU)  Tar';
                                }
                                else if (idx == 3) {
                                    return 'JMR Energy (in MU)  Exp';
                                }
                                else if (idx == 4) {
                                    return 'JMR Energy (in MU)  Act';
                                }
                                else if (idx == 5) {
                                ");
            WriteLiteral(@"    return 'JMR Energy (in MU)  T.Var (%)';
                                }
                                else if (idx == 6) {
                                    return 'JMR Energy (in MU)  E.Var (%)';
                                }
                                else if (idx == 7) {
                                    return 'Revenue (MINR) ';
                                }
                                else if (idx == 8) {
                                    return 'Wind Speed (m/s)  Tar';
                                }
                                else if (idx == 9) {
                                    return 'Wind Speed (m/s)  Act ';
                                }
                                else if (idx == 10) {
                                    return 'Wind Speed (m/s)  Var (%) ';
                                }
                                else if (idx == 11) {
                                    return 'PLF (%)  Tar';
                              ");
            WriteLiteral(@"  }
                                else if (idx == 12) {
                                    return 'PLF (%)  Act ';
                                }
                                else if (idx == 13) {
                                    return 'PLF (%)  Var (%) ';
                                }
                                else if (idx == 14) {
                                    return 'MA Actual (%)  Tar';
                                }
                                else if (idx == 15) {
                                    return 'MA Actual (%)  Act ';
                                }
                                else if (idx == 16) {
                                    return 'MA Actual (%)  Var (%) ';
                                }
                                else if (idx == 17) {
                                    return 'IGA (%)  Tar';
                                }
                                else if (idx == 18) {
                                  ");
            WriteLiteral(@"  return 'IGA (%)  Act ';
                                }
                                else if (idx == 19) {
                                    return 'IGA (%)  Var (%) ';
                                }
                                else if (idx == 20) {
                                    return 'EGA (%)  Tar';
                                }
                                else if (idx == 21) {
                                    return 'EGA (%)  Act ';
                                }
                                else if (idx == 22) {
                                    return 'EGA (%)  Var (%) ';
                                }
                                else {
                                    return title;
                                }
                            }
                        },
                       
                        {
                            text: '<span class=""fas fa-file-excel"" title=""Download from DB up to six decimal""></sp");
            WriteLiteral(@"an>',
                            className: 'btn ml-1   ',

                            action: function () {
                             ExportToExcelSPVWise()
                            },
                             format: {
                                    header: function (data, columnIdx) {
                                        if (columnIdx == 1) {
                                            return 'Capacity (MW)';
                                        }
                                        else if (columnIdx == 2) {
                                            return 'JMR Energy (in MU)  Tar';
                                        }
                                        else if (columnIdx == 3) {
                                            return 'JMR Energy (in MU)  Exp';
                                        }
                                        else if (columnIdx == 4) {
                                            return 'JMR Energy (in MU)  Act';
        ");
            WriteLiteral(@"                                }
                                        else if (columnIdx == 5) {
                                            return 'JMR Energy (in MU)  T.Var (%)';
                                        }
                                        else if (columnIdx == 6) {
                                            return 'JMR Energy (in MU)  E.Var (%)';
                                        }
                                        else if (columnIdx == 7) {
                                            return 'Revenue (MINR) ';
                                        }
                                        else if (columnIdx == 8) {
                                            return 'Wind Speed (m/s)  Tar';
                                        }
                                        else if (columnIdx == 9) {
                                            return 'Wind Speed (m/s)  Act ';
                                        }
                                      ");
            WriteLiteral(@"  else if (columnIdx == 10) {
                                            return 'Wind Speed (m/s)  Var (%) ';
                                        }
                                        else if (columnIdx == 11) {
                                            return 'PLF (%)  Tar';
                                        }
                                        else if (columnIdx == 12) {
                                            return 'PLF (%)  Act ';
                                        }
                                        else if (columnIdx == 13) {
                                            return 'PLF (%)  Var (%) ';
                                        }
                                        else if (columnIdx == 14) {
                                            return 'MA Actual (%)  Tar';
                                        }
                                        else if (columnIdx == 15) {
                                            return 'MA Actual (%)  ");
            WriteLiteral(@"Act ';
                                        }
                                        else if (columnIdx == 16) {
                                            return 'MA Actual (%)  Var (%) ';
                                        }
                                        else if (columnIdx == 17) {
                                            return 'IGA (%)  Tar';
                                        }
                                        else if (columnIdx == 18) {
                                            return 'IGA (%)  Act ';
                                        }
                                        else if (columnIdx == 19) {
                                            return 'IGA (%)  Var (%) ';
                                        }
                                        else if (columnIdx == 20) {
                                            return 'EGA (%)  Tar';
                                        }
                                        else if (columnI");
            WriteLiteral(@"dx == 21) {
                                            return 'EGA (%)  Act ';
                                        }
                                        else if (columnIdx == 22) {
                                            return 'EGA (%)  Var (%) ';
                                        }
                                        else {
                                            return data;
                                        }
                                    }
                                }
                        },
                          
                    ]
                });
                $("".dt-buttons"").addClass('btn-group flex-wrap');
                $("".dt-buttons > button"").addClass('btn btn-secondary');
                $("".dataTables_filter> label >input"").addClass('form-control form-control-sm');
                $(document).on(""click"", ""div.dt-button-collection > div > button"", function () {
                    if ($(this).hasClass(""active"")) {
");
            WriteLiteral(@"                        $(this).css(""background-color"", ""white"");
                    } else {
                        $(this).css(""background-color"", ""#31576d"");
                    }
                });
               // $('#example1').wrap(""<div class='scrolledTable'></div>"");
                document.getElementById(""loader"").style.display = 'none';

            }
        });


    }
  function ExportToExcelSiteWise() {

    console.log(exceldata2)
    result = exceldata2;

    var columns = [
       ""Site"",""Capacity"",""JMR Energy (in MU) Tar"",""JMR Energy (in MU) Exp"",""JMR Energy (in MU) Act"",""JMR Energy (in MU) T.var(%)"",""JMR Energy (in MU) E.var(%)"",""Revenue (MINR)"","" Wind Speed (m/s) Tar"",""Wind Speed (m/s) Act "",""Wind Speed (m/s) Var (%)"",""PLF (%) Tar"",
       ""PLF (%) Act "",""PLF (%) Var (%) "",""MA Actual (%) Tar"",""MA Actual (%) Act "",""MA Actual (%) Var (%) "",""IGA (%) Tar"",""IGA (%) Act "",""IGA (%) Var (%) "",""EGA (%) Tar"",""EGA (%) Act "",""EGA (%) Var (%) ""
    ];

    var rows = [];
");
            WriteLiteral(@"
    for (var i = 0; i < result.length; i++) {
        var row = [];
         var Energy_Dataset = [];
        var Wind_Dataset = [];
        var Levels = [];
       let target_energy = [];
                    let actual_energy = [];
                    let pas_energy_var = [];
                    let neg_energy_var = [];
                    let target_wind = [];
                    let actual_wind = [];
                    let pas_wind_var = [];
                    let neg_wind_var = [];
	                let total_capacity = 0;
                    let total_capTarMu = 0;
                    let total_exp_power = 0;
                    let total_tar_mu = 0;
                    let total_act_jmr_kwh_mu = 0;
                    let avg_jmr_var = 0;
                    let total_revenue = 0;
                    let total_capTarWind = 0;
                    let total_tar_wind = 0;
                    let total_act_wind = 0;
                    let avg_wind_var = 0;
                    let ");
            WriteLiteral(@"total_capTarPlf = 0;
                    let total_tar_plf = 0;
                    let total_act_plf = 0;
                    let avg_plf_var = 0;
                    let total_capTarMa = 0;
                    let total_tar_ma = 0;
                    let total_act_ma = 0;
                    let avg_ma_var = 0;
                    let total_capTarIga = 0;
                    let total_tar_iga = 0;
                    let total_act_iga = 0;
                    let avg_iga_var = 0;
                    let total_capTarEga = 0;
                    let total_tar_ega = 0;
                    let total_act_ega = 0;
                    let avg_ega_var = 0;
                    let total_capActWind = 0;
                    let total_capActPlf = 0;
                    let total_capActMa = 0;
                    let total_capActIga = 0;
                    let total_capActEga = 0;
                        let revenue = 0;
                        let jmr_var = 0;
                        let e_var ");
            WriteLiteral(@"= 0;
                        let wind_var = 0;
                        let plf_var = 0;
                        let ma_act_var = 0;
                        let iga_var = 0;
                        let ega_var = 0;
                        let tar_mu = 0;
                        tar_mu = result[i].tar_kwh_mu / 1000000;
                        revenue = ((result[i].act_jmr_kwh_mu - tar_mu) * result[i].total_tarrif);
                        if (result[i].act_jmr_kwh_mu != 0 || result[i].tar_kwh_mu != 0) {
                            jmr_var = ((result[i].act_jmr_kwh_mu - tar_mu) / tar_mu) * 100;
                        }
                        if (result[i].act_Wind != 0 || result[i].tar_wind != 0) {
                            wind_var = ((result[i].act_Wind.toFixed(2) - result[i].tar_wind.toFixed(2)) / result[i].tar_wind.toFixed(2)) * 100;
                        }
                        if (result[i].exp_power != 0) {
                            //e_var = ((result[i].act_jmr_kwh_mu - (result[");
            WriteLiteral(@"i].exp_power / 6) / 1000000) / ((result[i].exp_power / 6) / 1000000)) * 100;
                            e_var = (result[i].act_jmr_kwh_mu - result[i].exp_power) / (result[i].exp_power) * 100;
                            //if (result[i].site == ""Maragutti"") {
                            //    console.log(""Actual : "", result[i].act_kwh, ""Expected : "", result[i].expected_kwh, ""evar : "" + e_var);
                            //    //    console.log(temp_e_var);
                            //}
                        }

                        plf_var = (result[i].act_plf - result[i].tar_plf);
                        ma_act_var = (result[i].act_ma - result[i].tar_ma);
                        iga_var = (result[i].act_iga - result[i].tar_iga);
                        ega_var = (result[i].act_ega - result[i].tar_ega);

                        let pasitive;
                        let negative;
                        if (jmr_var < 0) {
                            negative = jmr_var;
                 ");
            WriteLiteral(@"       }
                        else {
                            pasitive = jmr_var;
                        }
                        let w_pasitive;
                        let w_negative;
                        if (wind_var < 0) {
                            w_negative = wind_var;
                        }
                        else {
                            w_pasitive = wind_var;
                        }

                        target_energy.push(result[i].tar_kwh_mu.toFixed(2));
                        actual_energy.push(result[i].act_jmr_kwh_mu.toFixed(2));
                        pas_energy_var.push(pasitive);
                        neg_energy_var.push(negative);
                        Levels.push(result[i].site);
                        target_wind.push(result[i].tar_wind.toFixed(2));
                        actual_wind.push(result[i].act_Wind.toFixed(2));
                        pas_wind_var.push(w_pasitive);
                        neg_wind_var.push(w_negative);
");
            WriteLiteral(@"
                        total_capacity += result[i].total_mw;
                        total_tar_mu += tar_mu;
                        total_act_jmr_kwh_mu += result[i].act_jmr_kwh_mu;
                        //total_exp_power += (result[i].exp_power / 6) / 1000000;
                        total_exp_power += result[i].exp_power;
                        total_revenue += revenue;
                        total_tar_wind += result[i].tar_wind;
                        total_act_wind += result[i].act_Wind;
                        total_tar_plf += result[i].tar_plf;
                        total_act_plf += result[i].act_plf;
                        total_tar_ma += result[i].tar_ma;
                        total_act_ma += result[i].act_ma;
                        total_tar_iga += result[i].tar_iga;
                        total_act_iga += result[i].act_iga
                        total_tar_ega += result[i].tar_ega;
                        total_act_ega += result[i].act_ega;
                        tota");
            WriteLiteral(@"l_capTarMu += tar_mu * result[i].total_mw;
                        total_capTarWind += result[i].tar_wind * result[i].total_mw;
                        total_capTarPlf += result[i].tar_plf * result[i].total_mw;
                        total_capTarMa += result[i].tar_ma * result[i].total_mw;
                        total_capTarIga += result[i].tar_iga * result[i].total_mw;
                        total_capTarEga += result[i].tar_ega * result[i].total_mw;
                        total_capActWind += result[i].act_Wind * result[i].total_mw;
                        total_capActPlf += result[i].act_plf * result[i].total_mw;
                        total_capActMa += result[i].act_ma * result[i].total_mw;
                        total_capActIga += result[i].act_iga * result[i].total_mw;
                        total_capActEga += result[i].act_ega * result[i].total_mw;

        row.push(result[i].site);
        row.push(result[i].total_mw);
        row.push(tar_mu);
        row.push(result[i].exp_power)");
            WriteLiteral(@";
        row.push(result[i].act_jmr_kwh_mu);
        row.push( jmr_var);
        row.push(e_var);
        row.push(revenue);
        row.push(result[i].tar_wind);
        row.push(result[i].act_Wind);
        row.push(wind_var);
        row.push(result[i].tar_plf);
        row.push(result[i].act_plf);
        row.push(plf_var);
        row.push( result[i].tar_ma);
        row.push(result[i].act_ma);
        row.push(ma_act_var);
        row.push(result[i].tar_iga);
        row.push(result[i].act_iga);
        row.push(iga_var);
        row.push(result[i].tar_ega);
        row.push( result[i].act_ega);
        row.push( ega_var);
        rows.push(row);



    }

    var data = [columns].concat(rows);

    var ws = XLSX.utils.aoa_to_sheet(data);
    var wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, ""Wind PerformanceSum SiteWise"");
    var wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'binary' });

    function s2ab(s) {
        var buf = new ArrayBuf");
            WriteLiteral(@"fer(s.length);
        var view = new Uint8Array(buf);
        for (var i = 0; i !== s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
        return buf;
    }

    saveAs(new Blob([s2ab(wbout)], { type: ""application/octet-stream"" }), ""Wind PerformanceSum SiteWise.xlsx"");

}
   // -----------------------------------------------

    // Daily Gen Report Site WIse
    function GetWindPRReportSiteWise() {
        document.getElementById(""loader"").style.display = 'flex';
        var site_ids = """);
#nullable restore
#line 1317 "D:\Haresh\Softel\Production code\DGR_Main\DGRA\DGRA_V1\Views\Home\WindPRReport.cshtml"
                   Write(Html.Raw(windSiteList.TrimEnd(',')));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""";
        let site = """";
        let spv = """";
        $('select#site option:selected').each(function () {
            site += $(this).val() + "","";
        });
        site = site != """" ? site.slice(0, -1) : site;

        $('select#spv option:selected').each(function () {
            spv += $(this).val() + "","";
        });
        spv = spv != """" ? spv.slice(0, -1) : spv;
        if (userRole == ""User"" && site == """") {
            site = site_ids;
        }
        var daterange = $('#daterange').val();
        var arr1 = new Array();
        arr1 = daterange.split(""-"");
        var fromDate = moment(arr1[0], 'DD/MM/YYYY').format('YYYY-MM-DD');
        var toDate = moment(arr1[1], 'DD/MM/YYYY').format('YYYY-MM-DD');
        var fyear = Fy;
        console.log(fyear);
        var reporthead = ""Site Wise Reports"";
        var Energy_Dataset = [];
        var Wind_Dataset = [];
        var Levels = [];
        //var Actual_Energy_Dataset = [];
        //var Energy_var_Dataset = [];
");
            WriteLiteral("        document.getElementById(\"loader\").style.display = \'flex\';\r\n        $.ajax({\r\n            type: \"GET\",\r\n            url: \'");
#nullable restore
#line 1348 "D:\Haresh\Softel\Production code\DGR_Main\DGRA\DGRA_V1\Views\Home\WindPRReport.cshtml"
             Write(Url.Action("GetWindPRReportSiteWise", "WindReport"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"' + '?fy=' + fyear + '&fromDate=' + fromDate + '&toDate=' + toDate + '&sitelist=' + site+'&spv='+spv,
            //url: ""/WindReport/GetWindPRReportSiteWise?fy="" + fyear+"" &fromDate="" + fromDate + ""&toDate="" + toDate,
            contentType: ""application/json; charset=utf-8"",
            datatype: ""JSON"",
            success: function (result, status, xhr) {
                console.log(result);
               // var tbl = '<div class=""text-center""><h5>' + reporthead + '</h5></div>';
                var tbl = '<table id=""example2""  class=""table table-bordered table-striped"" style=""width: 130%;"">';
                tbl += '<thead class=""tbl-head""><tr>';
                tbl += '<th rowspan=""2""  style=""width: 10%;"">Site</th><th  rowspan=""2"">Capacity<br> (MW)</th>';
                tbl += '<th colspan=""5"" class=""text-center"">JMR Energy (in MU)</th><th>(±)Revenue</th>';
                tbl += '<th colspan=""3"" class=""text-center"">Wind Speed (m/s)</th><th colspan=""3"" class=""text-center"">PLF (%)</th>';
  ");
            WriteLiteral(@"              tbl += '<th colspan=""3"" class=""text-center"">MA Actual (%)</th><th colspan=""3"" class=""text-center"">IGA (%)</th>';
                tbl += '<th colspan=""3"" class=""text-center"">EGA (%)</th></tr>';
               // tbl += '<tr><th>&nbsp;</th>';
                //tbl += '<th>(MW)</th>';
                tbl += '<tr><th>Tar</th>';
                tbl += '<th>Exp</th>';
                tbl += '<th>Act</th>';
                tbl += '<th>T.Var (%)</th>';
                tbl += '<th>E.Var (%)</th>';
                tbl += '<th>(MINR)</th>';
                tbl += '<th>Tar</th>';
                tbl += '<th>Act</th>';
                tbl += '<th>Var (%)</th>';
                tbl += '<th>Tar</th>';
                tbl += '<th>Act</th>';
                tbl += '<th>Var (%)</th>';
                tbl += '<th>Tar</th>';
                tbl += '<th>Act</th>';
                tbl += '<th>Var (%)</th>';
                tbl += '<th>Tar</th>';
                tbl += '<th>Act</th>';
            ");
            WriteLiteral(@"    tbl += '<th>Var (%)</th>';
                tbl += '<th>Tar</th>';
                tbl += '<th>Act</th>';
                tbl += '<th>Var (%)</th>';
                tbl += '</tr></thead>';
                console.log(result.length);
                if (result.length > 0) {
                    exceldata2 = result;
                    console.log(""Datatable"");
                    let target_energy = [];
                    let actual_energy = [];
                    let pas_energy_var = [];
                    let neg_energy_var = [];
                    let target_wind = [];
                    let actual_wind = [];
                    let pas_wind_var = [];
                    let neg_wind_var = [];
	                let total_capacity = 0;
                    let total_capTarMu = 0;
                    let total_exp_power = 0;
                    let total_tar_mu = 0;
                    let total_act_jmr_kwh_mu = 0;
                    let avg_jmr_var = 0;
                    let to");
            WriteLiteral(@"tal_revenue = 0;
                    let total_capTarWind = 0;
                    let total_tar_wind = 0;
                    let total_act_wind = 0;
                    let avg_wind_var = 0;
                    let total_capTarPlf = 0;
                    let total_tar_plf = 0;
                    let total_act_plf = 0;
                    let avg_plf_var = 0;
                    let total_capTarMa = 0;
                    let total_tar_ma = 0;
                    let total_act_ma = 0;
                    let avg_ma_var = 0;
                    let total_capTarIga = 0;
                    let total_tar_iga = 0;
                    let total_act_iga = 0;
                    let avg_iga_var = 0;
                    let total_capTarEga = 0;
                    let total_tar_ega = 0;
                    let total_act_ega = 0;
                    let avg_ega_var = 0;
                    let total_capActWind = 0;
                    let total_capActPlf = 0;
                    let total_cap");
            WriteLiteral(@"ActMa = 0;
                    let total_capActIga = 0;
                    let total_capActEga = 0;

                    for (var i = 0; i < result.length; i++) {
                        let revenue = 0;
                        let jmr_var = 0;
                        let e_var = 0;
                        let wind_var = 0;
                        let plf_var = 0;
                        let ma_act_var = 0;
                        let iga_var = 0;
                        let ega_var = 0;
                        let tar_mu = 0;
                        tar_mu = result[i].tar_kwh_mu / 1000000;
                        revenue = ((result[i].act_jmr_kwh_mu - tar_mu) * result[i].total_tarrif);
                        if (result[i].act_jmr_kwh_mu != 0 || result[i].tar_kwh_mu != 0) {
                            jmr_var = ((result[i].act_jmr_kwh_mu - tar_mu) / tar_mu) * 100;
                        }
                        if (result[i].act_Wind != 0 || result[i].tar_wind != 0) {
                 ");
            WriteLiteral(@"           wind_var = ((result[i].act_Wind.toFixed(2) - result[i].tar_wind.toFixed(2)) / result[i].tar_wind.toFixed(2)) * 100;
                        }
                        if (result[i].exp_power != 0) {
                            //e_var = ((result[i].act_jmr_kwh_mu - (result[i].exp_power /6) / 1000000) / ((result[i].exp_power /6) / 1000000)) * 100;
                            e_var = (result[i].act_jmr_kwh_mu - result[i].exp_power ) / (result[i].exp_power) * 100;
                            //if (result[i].site == ""Maragutti"") {
                            //    console.log(""Actual : "", result[i].act_kwh, ""Expected : "", result[i].expected_kwh, ""evar : "" + e_var);
                            //    //    console.log(temp_e_var);
                            //}
                        }

                        plf_var = (result[i].act_plf - result[i].tar_plf);
                        ma_act_var = (result[i].act_ma - result[i].tar_ma);
                        iga_var = (result[i].act_iga - r");
            WriteLiteral(@"esult[i].tar_iga);
                        ega_var = (result[i].act_ega - result[i].tar_ega);

                        let pasitive;
                        let negative;
                        if (jmr_var < 0) {
                            negative = jmr_var;
                        }
                        else {
                            pasitive = jmr_var;
                        }
                        let w_pasitive;
                        let w_negative;
                        if (wind_var < 0) {
                            w_negative = wind_var;
                        }
                        else {
                            w_pasitive = wind_var;
                        }

                        target_energy.push(result[i].tar_kwh_mu.toFixed(2));
                        actual_energy.push(result[i].act_jmr_kwh_mu.toFixed(2));
                        pas_energy_var.push(pasitive);
                        neg_energy_var.push(negative);
                        Level");
            WriteLiteral(@"s.push(result[i].site);
                        target_wind.push(result[i].tar_wind.toFixed(2));
                        actual_wind.push(result[i].act_Wind.toFixed(2));
                        pas_wind_var.push(w_pasitive);
                        neg_wind_var.push(w_negative);

                        total_capacity += result[i].total_mw;
                        total_tar_mu += tar_mu;
                        total_act_jmr_kwh_mu += result[i].act_jmr_kwh_mu;
                        total_exp_power += result[i].exp_power;
                        total_revenue += revenue;
                        total_tar_wind += result[i].tar_wind;
                        total_act_wind += result[i].act_Wind;
                        total_tar_plf += result[i].tar_plf;
                        total_act_plf += result[i].act_plf;
                        total_tar_ma += result[i].tar_ma;
                        total_act_ma += result[i].act_ma;
                        total_tar_iga += result[i].tar_iga;
       ");
            WriteLiteral(@"                 total_act_iga += result[i].act_iga
                        total_tar_ega += result[i].tar_ega;
                        total_act_ega += result[i].act_ega;
                        total_capTarMu += tar_mu * result[i].total_mw;
                        total_capTarWind += result[i].tar_wind * result[i].total_mw;
                        total_capTarPlf += result[i].tar_plf * result[i].total_mw;
                        total_capTarMa += result[i].tar_ma * result[i].total_mw;
                        total_capTarIga += result[i].tar_iga * result[i].total_mw;
                        total_capTarEga += result[i].tar_ega * result[i].total_mw;
                        total_capActWind += result[i].act_Wind * result[i].total_mw;
                        total_capActPlf += result[i].act_plf * result[i].total_mw;
                        total_capActMa += result[i].act_ma * result[i].total_mw;
                        total_capActIga += result[i].act_iga * result[i].total_mw;
                     ");
            WriteLiteral(@"   total_capActEga += result[i].act_ega * result[i].total_mw;

                        tbl += '<tr>';
                        tbl += '<td class=""text-left"">' + result[i].site + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].total_mw.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + tar_mu.toFixed(2) + '</td>';
                        //tbl += '<td class=""text-right"">' + ((result[i].exp_power / 6) / 1000000).toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].exp_power.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].act_jmr_kwh_mu.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + jmr_var.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + e_var.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + revenue.toFixed(2)+'</td>';
                        tbl += '<td class=""text");
            WriteLiteral(@"-right"">' + result[i].tar_wind.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].act_Wind.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + wind_var.toFixed(2)+'</td>';
                        tbl += '<td class=""text-right"">' + result[i].tar_plf.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].act_plf.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + plf_var.toFixed(2)+'</td>';
                        tbl += '<td class=""text-right"">' + result[i].tar_ma.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].act_ma.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + ma_act_var.toFixed(2)+'</td>';
                        tbl += '<td class=""text-right"">' + result[i].tar_iga.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].act_iga.toFixed(2) + '</td>';
   ");
            WriteLiteral(@"                     tbl += '<td class=""text-right"">' + iga_var.toFixed(2)+'</td>';
                        tbl += '<td class=""text-right"">' + result[i].tar_ega.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + result[i].act_ega.toFixed(2) + '</td>';
                        tbl += '<td class=""text-right"">' + ega_var.toFixed(2)+'</td>';

                        tbl += '</tr>';
                    }
                    let avg_tar_mu = 0;
                    let avg_tar_wind = 0;
                    let avg_e_var = 0;
                    let avg_tar_plf = 0;
                    let avg_tar_ma = 0;
                    let avg_tar_iga = 0;
                    let avg_tar_ega = 0
                    let avg_act_wind = 0;
                    let avg_act_plf = 0;
                    let avg_act_ma = 0;
                    let avg_act_iga = 0;
                    let avg_act_ega = 0;


                    if (total_capacity != 0) {
                        avg_tar_m");
            WriteLiteral(@"u = total_capTarMu / total_capacity;
                        avg_tar_wind = total_capTarWind / total_capacity;
                        avg_tar_plf = total_capTarPlf / total_capacity;
                        avg_tar_ma = total_capTarMa / total_capacity;
                        avg_tar_iga = total_capTarIga / total_capacity;
                        avg_tar_ega = total_capTarEga / total_capacity;
                        avg_act_wind = total_capActWind / total_capacity;
                        avg_act_plf = total_capActPlf / total_capacity;
                        avg_act_ma = total_capActMa / total_capacity;
                        avg_act_iga = total_capActIga / total_capacity;
                        avg_act_ega = total_capActEga / total_capacity;
                    }

                    if (total_tar_mu != 0) {
                        avg_jmr_var = (((total_act_jmr_kwh_mu - total_tar_mu) / total_tar_mu) * 100);
                    }
                    if (avg_tar_wind != 0) {
             ");
            WriteLiteral(@"           avg_wind_var = ((avg_act_wind.toFixed(2) - avg_tar_wind.toFixed(2)) / avg_tar_wind.toFixed(2)) * 100;
                    }
                    if (total_exp_power != 0) {
                        avg_e_var = (((total_act_jmr_kwh_mu.toFixed(2) - total_exp_power.toFixed(2)) / total_exp_power.toFixed(2)) * 100);
                    }

                    avg_plf_var = (avg_act_plf - avg_tar_plf);
                    avg_ma_var = (avg_act_ma - avg_tar_ma);
                    avg_iga_var = (avg_act_iga - avg_tar_iga);
                    avg_ega_var = (avg_act_ega - avg_tar_ega);

                    tbl += '<tfoot><tr>';
                    tbl += '<th rowspan=""1""  style=""width: 10%; font-weight: bold;"">Grand Total</th>';
                    tbl += '<td class=""text-right""><b>' + total_capacity.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + total_tar_mu.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + total_exp_power");
            WriteLiteral(@".toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + total_act_jmr_kwh_mu.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_jmr_var.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_e_var.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + total_revenue.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_tar_wind.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_act_wind.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_wind_var.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_tar_plf.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_act_plf.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_plf_var.toFixed(2) + '</b></td>';
              ");
            WriteLiteral(@"      tbl += '<td class=""text-right""><b>' + avg_tar_ma.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_act_ma.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_ma_var.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_tar_iga.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_act_iga.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_iga_var.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_tar_ega.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_act_ega.toFixed(2) + '</b></td>';
                    tbl += '<td class=""text-right""><b>' + avg_ega_var.toFixed(2) + '</b></td>';
                    tbl += '</tr></tfoot>';



                }
                else {
                    console.log(""Data not available"");

                ");
            WriteLiteral(@"}
                tbl += '</table>';
                //$(""#reportsDaily"").html(tbl);
                $(""#reportsDaily"").html("""").html(tbl);
                $('#example2').DataTable({
                    dom: 'Bfrtip',
                    fixedHeader: true,
                    responsive: true,
                    scrollX: true,
                    lengthChange: false,
                    autoWidth: true,
                    paging: true,
                    lengthChange: false,
                    searching: true,
                    ordering: true,
                    info: true,
                    autoWidth: true,
                    fixedColumns: {
                        left: 2
                    },
                    pageLength: 50,
                    buttons: [
                        {
                            extend: 'excel',
                            footer: true,
                            title: 'Wind Performance Reports Site Wise',
                            /");
            WriteLiteral(@"/titleAttr: 'Export Excel',
                            ""oSelectorOpts"": { filter: 'applied', order: 'current' },
                            exportOptions: {
                                columns: ':visible',
                                modifier: {
                                    page: 'all'
                                },
                                format: {
                                    header: function (data, columnIdx) {
                                        if (columnIdx == 1) {
                                            return 'Capacity (MW)';
                                        }
                                        else if (columnIdx == 2) {
                                            return 'JMR Energy (in MU)  Tar';
                                        }
                                        else if (columnIdx == 3) {
                                            return 'JMR Energy (in MU)  Exp';
                                        }
      ");
            WriteLiteral(@"                                  else if (columnIdx == 4) {
                                            return 'JMR Energy (in MU) Act';
                                        }
                                        else if (columnIdx == 5) {
                                            return 'JMR Energy (in MU) T.Var (%)';
                                        }
                                        else if (columnIdx == 6) {
                                            return 'JMR Energy (in MU) E.Var (%)';
                                        }
                                        else if (columnIdx == 7) {
                                            return 'Revenue (MINR) ';
                                        }
                                        else if (columnIdx == 8) {
                                            return 'Wind Speed (m/s) Tar';
                                        }
                                        else if (columnIdx == 9) {
              ");
            WriteLiteral(@"                              return 'Wind Speed (m/s) Act ';
                                        }
                                        else if (columnIdx == 10) {
                                            return 'Wind Speed (m/s) Var (%) ';
                                        }
                                        else if (columnIdx == 11) {
                                            return 'PLF (%) Tar';
                                        }
                                        else if (columnIdx == 12) {
                                            return 'PLF (%) Act ';
                                        }
                                        else if (columnIdx == 13) {
                                            return 'PLF (%) Var (%) ';
                                        }
                                        else if (columnIdx == 14) {
                                            return 'MA Actual (%) Tar';
                                        ");
            WriteLiteral(@"}
                                        else if (columnIdx == 15) {
                                            return 'MA Actual (%) Act ';
                                        }
                                        else if (columnIdx == 16) {
                                            return 'MA Actual (%) Var (%) ';
                                        }
                                        else if (columnIdx == 17) {
                                            return 'IGA (%) Tar';
                                        }
                                        else if (columnIdx == 18) {
                                            return 'IGA (%) Act ';
                                        }
                                        else if (columnIdx == 19) {
                                            return 'IGA (%) Var (%) ';
                                        }
                                        else if (columnIdx == 20) {
                                 ");
            WriteLiteral(@"           return 'EGA (%) Tar';
                                        }
                                        else if (columnIdx == 21) {
                                            return 'EGA (%) Act ';
                                        }
                                        else if (columnIdx == 22) {
                                            return 'EGA (%) Var (%) ';
                                        }
                                        else {
                                            return data;
                                        }
                                    }
                                }
                            }
                        },
                        {
                            extend: 'csv',
                            footer: true,
                            title: 'Wind Performance Reports Site Wise',
                            //titleAttr: 'Export Excel',
                            ""oSelectorOpts"": { filter: ");
            WriteLiteral(@"'applied', order: 'current' },
                            exportOptions: {
                                columns: ':visible',
                                modifier: {
                                    page: 'all'
                                },
                                format: {
                                    header: function (data, columnIdx) {
                                        if (columnIdx == 1) {
                                            return 'Capacity (MW)';
                                        }
                                        else if (columnIdx == 2) {
                                            return 'JMR Energy (in MU)  Tar';
                                        }
                                        else if (columnIdx == 3) {
                                            return 'JMR Energy (in MU)  Exp';
                                        }
                                        else if (columnIdx == 4) {
                      ");
            WriteLiteral(@"                      return 'JMR Energy (in MU) Act';
                                        }
                                        else if (columnIdx == 5) {
                                            return 'JMR Energy (in MU) T.Var (%)';
                                        }
                                        else if (columnIdx == 6) {
                                            return 'JMR Energy (in MU) E.Var (%)';
                                        }
                                        else if (columnIdx == 7) {
                                            return 'Revenue (MINR) ';
                                        }
                                        else if (columnIdx == 8) {
                                            return 'Wind Speed (m/s) Tar';
                                        }
                                        else if (columnIdx == 9) {
                                            return 'Wind Speed (m/s) Act ';
                     ");
            WriteLiteral(@"                   }
                                        else if (columnIdx == 10) {
                                            return 'Wind Speed (m/s) Var (%) ';
                                        }
                                        else if (columnIdx == 11) {
                                            return 'PLF (%) Tar';
                                        }
                                        else if (columnIdx == 12) {
                                            return 'PLF (%) Act ';
                                        }
                                        else if (columnIdx == 13) {
                                            return 'PLF (%) Var (%) ';
                                        }
                                        else if (columnIdx == 14) {
                                            return 'MA Actual (%) Tar';
                                        }
                                        else if (columnIdx == 15) {
            ");
            WriteLiteral(@"                                return 'MA Actual (%) Act ';
                                        }
                                        else if (columnIdx == 16) {
                                            return 'MA Actual (%) Var (%) ';
                                        }
                                        else if (columnIdx == 17) {
                                            return 'IGA (%) Tar';
                                        }
                                        else if (columnIdx == 18) {
                                            return 'IGA (%) Act ';
                                        }
                                        else if (columnIdx == 19) {
                                            return 'IGA (%) Var (%) ';
                                        }
                                        else if (columnIdx == 20) {
                                            return 'EGA (%) Tar';
                                        }
       ");
            WriteLiteral(@"                                 else if (columnIdx == 21) {
                                            return 'EGA (%) Act ';
                                        }
                                        else if (columnIdx == 22) {
                                            return 'EGA (%) Var (%) ';
                                        }
                                        else {
                                            return data;
                                        }
                                    }
                                }
                            }
                        },
                        {
                            extend: 'colvis',
                            //  columns: ':not(.noVis)',
                            columnText: function (dt, idx, title) {
                                if (idx == 1) {
                                    return 'Capacity (MW)';
                                }
                                else if");
            WriteLiteral(@" (idx == 2) {
                                    return 'JMR Energy (in MU)  Tar';
                                }
                                else if (idx == 3) {
                                    return 'JMR Energy (in MU)  Exp';
                                }
                                else if (idx == 4) {
                                    return 'JMR Energy (in MU) Act';
                                }
                                else if (idx == 5) {
                                    return 'JMR Energy (in MU) T.Var (%)';
                                }
                                else if (idx == 6) {
                                    return 'JMR Energy (in MU) E.Var (%)';
                                }
                                else if (idx == 7) {
                                    return 'Revenue (MINR) ';
                                }
                                else if (idx == 8) {
                                    return 'Wind");
            WriteLiteral(@" Speed (m/s) Tar';
                                }
                                else if (idx == 9) {
                                    return 'Wind Speed (m/s) Act ';
                                }
                                else if (idx == 10) {
                                    return 'Wind Speed (m/s) Var (%) ';
                                }
                                else if (idx == 11) {
                                    return 'PLF (%) Tar';
                                }
                                else if (idx == 12) {
                                    return 'PLF (%) Act ';
                                }
                                else if (idx == 13) {
                                    return 'PLF (%) Var (%) ';
                                }
                                else if (idx == 14) {
                                    return 'MA Actual (%) Tar';
                                }
                                else if ");
            WriteLiteral(@"(idx == 15) {
                                    return 'MA Actual (%) Act ';
                                }
                                else if (idx == 16) {
                                    return 'MA Actual (%) Var (%) ';
                                }
                                else if (idx == 17) {
                                    return 'IGA (%) Tar';
                                }
                                else if (idx == 18) {
                                    return 'IGA (%) Act ';
                                }
                                else if (idx == 19) {
                                    return 'IGA (%) Var (%) ';
                                }
                                else if (idx == 20) {
                                    return 'EGA (%) Tar';
                                }
                                else if (idx == 21) {
                                    return 'EGA (%) Act ';
                               ");
            WriteLiteral(@" }
                                else if (idx == 22) {
                                    return 'EGA (%) Var (%) ';
                                }
                                else {
                                    return title;
                                }
                            }
                        },
                         {
                            text: '<span class=""fas fa-file-excel"" title=""Download from DB up to six decimal""></span>',
                            className: 'btn ml-1   ',

                            action: function () {
                               ExportToExcelSiteWise();
                            },
                             format: {
                                    header: function (data, columnIdx) {
                                        if (columnIdx == 1) {
                                            return 'Capacity (MW)';
                                        }
                                        else i");
            WriteLiteral(@"f (columnIdx == 2) {
                                            return 'JMR Energy (in MU)  Tar';
                                        }
                                        else if (columnIdx == 3) {
                                            return 'JMR Energy (in MU)  Exp';
                                        }
                                        else if (columnIdx == 4) {
                                            return 'JMR Energy (in MU)  Act';
                                        }
                                        else if (columnIdx == 5) {
                                            return 'JMR Energy (in MU)  T.Var (%)';
                                        }
                                        else if (columnIdx == 6) {
                                            return 'JMR Energy (in MU)  E.Var (%)';
                                        }
                                        else if (columnIdx == 7) {
                                        ");
            WriteLiteral(@"    return 'Revenue (MINR) ';
                                        }
                                        else if (columnIdx == 8) {
                                            return 'Wind Speed (m/s)  Tar';
                                        }
                                        else if (columnIdx == 9) {
                                            return 'Wind Speed (m/s)  Act ';
                                        }
                                        else if (columnIdx == 10) {
                                            return 'Wind Speed (m/s)  Var (%) ';
                                        }
                                        else if (columnIdx == 11) {
                                            return 'PLF (%)  Tar';
                                        }
                                        else if (columnIdx == 12) {
                                            return 'PLF (%)  Act ';
                                        }
                  ");
            WriteLiteral(@"                      else if (columnIdx == 13) {
                                            return 'PLF (%)  Var (%) ';
                                        }
                                        else if (columnIdx == 14) {
                                            return 'MA Actual (%)  Tar';
                                        }
                                        else if (columnIdx == 15) {
                                            return 'MA Actual (%)  Act ';
                                        }
                                        else if (columnIdx == 16) {
                                            return 'MA Actual (%)  Var (%) ';
                                        }
                                        else if (columnIdx == 17) {
                                            return 'IGA (%)  Tar';
                                        }
                                        else if (columnIdx == 18) {
                                            ");
            WriteLiteral(@"return 'IGA (%)  Act ';
                                        }
                                        else if (columnIdx == 19) {
                                            return 'IGA (%)  Var (%) ';
                                        }
                                        else if (columnIdx == 20) {
                                            return 'EGA (%)  Tar';
                                        }
                                        else if (columnIdx == 21) {
                                            return 'EGA (%)  Act ';
                                        }
                                        else if (columnIdx == 22) {
                                            return 'EGA (%)  Var (%) ';
                                        }
                                        else {
                                            return data;
                                        }
                                    }
                                }
  ");
            WriteLiteral(@"                      },
                    ]
                });
                $("".dt-buttons"").addClass('btn-group flex-wrap');
                $("".dt-buttons > button"").addClass('btn btn-secondary');
                $("".dt-button-collection > div > button"").addClass('btn btn-secondary');
               // $(""button.dt-button.buttons-collection.buttons-colvis"").addClass('btn btn-light');
                $("".dataTables_filter> label >input"").addClass('form-control form-control-sm');
                $(document).on(""click"", ""div.dt-button-collection > div > button"", function () {
                    if ($(this).hasClass(""active"")) {
                        $(this).css(""background-color"", ""white"");
                    } else {
                        $(this).css(""background-color"", ""#31576d"");
                    }
                });
                //$(document).on(""click"", "".dt-button-collection "", function () {
                //    var collection = document.getElementsByClassName(""button");
            WriteLiteral(@"s-collection"");
                //    var firstElement = collection[0];
                //    var attributeValue = firstElement.getAttribute('aria-expanded');
                //    console.log(attributeValue + ""jjj"");
                //});

                document.getElementById(""loader"").style.display = 'none';
                //$('#example2').wrap(""<div class='scrolledTable'></div>"");

            }
        });
    }


</script>
");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public IHttpContextAccessor HttpContextAccessor { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<DGRA_V1.Models.CountryList> Html { get; private set; }
    }
}
#pragma warning restore 1591
