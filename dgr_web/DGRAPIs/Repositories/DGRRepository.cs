using DGRAPIs.Helper;
using DGRAPIs.Models;
using System;
using System.Web;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using DGRAPIs.Helper;
using DGRAPIs.Models;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json;
using System.Data;
using System.Security.Policy;
using System.Collections;
using System.Diagnostics;
using static System.Net.WebRequestMethods;
using Microsoft.Extensions.Configuration;
using DGRAPIs.BS;
using System.IO;
using System.Diagnostics;
using System.Reflection.Metadata;
using Org.BouncyCastle.Ocsp;
using Org.BouncyCastle.Asn1.Pkcs;
using System.Text;
using MimeKit;
using Microsoft.AspNetCore.Http;

namespace DGRAPIs.Repositories
{

    public class DGRRepository : GenericRepository
    {
        private readonly DatabaseProvider databaseProvider;
        private MYSQLDBHelper getDB;
        public int backend = 1;
        public int daily = 1;
        public int weekly = 2;
        public int solar = 1;
        public int wind = 2;


        public const string MA_Actual = "MA_Actual";
        public const string MA_Contractual = "MA_Contractual";
        public const string Internal_Grid = "Internal_Grid";
        public const string External_Grid = "External_Grid";
        private int approve_status = 0;
        private bool m_bSiteMasterLoaded = false;
        private static readonly string[] Months = new[]
        {
            "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
        };

        public DGRRepository(MYSQLDBHelper sqlDBHelper) : base(sqlDBHelper)
        {
            getDB = sqlDBHelper;
        }

        int currentLineNumber = new StackTrace(true).GetFrame(0).GetFileLineNumber();
        internal async Task<List<FinancialYear>> GetFinancialYear()
        {
            List<FinancialYear> _FinancialYear = new List<FinancialYear>();
            _FinancialYear.Add(new FinancialYear { financial_year = "2020-21" });
            _FinancialYear.Add(new FinancialYear { financial_year = "2021-22" });
            _FinancialYear.Add(new FinancialYear { financial_year = "2022-23" });
            _FinancialYear.Add(new FinancialYear { financial_year = "2023-24" });
            _FinancialYear.Add(new FinancialYear { financial_year = "2024-25" });
            return _FinancialYear;

        }
        internal async Task<List<WindDashboardData>> GetWindDashboardDataOld(string startDate, string endDate, string FY, string sites)
        {

            string filter = " (date >= '" + startDate + "'  and date<= '" + endDate + "')";
            if (!string.IsNullOrEmpty(sites) && sites != "All")
            {
                string[] siteSplit = sites.Split("~");
                if (siteSplit.Length > 0)
                {
                    string sitesnames = "";
                    for (int i = 0; i < siteSplit.Length; i++)
                    {
                        if (!string.IsNullOrEmpty(siteSplit[i]))
                        {
                            sitesnames += "'" + siteSplit[i] + "',";
                        }
                    }
                    sitesnames = sitesnames.TrimEnd(',');
                    filter += " and site in(" + sitesnames + ")";
                }

            }
            string qry = @"select Date,month(date)as month,year(date)as year,Site,(sum(wind_speed)/count(*))as Wind,sum(kwh)as KWH,(select  replace(line_loss,'%','')as line_loss from monthly_uploading_line_losses where fy='" + FY + "' and month=DATE_FORMAT(t1.date, '%b') and site=t1.site order by monthly_uploading_line_losses_id desc limit 1) as line_loss,sum(kwh)-(sum(kwh)*((select  replace(line_loss,'%','')as line_loss from monthly_uploading_line_losses where fy='" + FY + "' and month=DATE_FORMAT(t1.date, '%b') and site=t1.site order by monthly_uploading_line_losses_id desc limit 1)/100))as jmrkwh,(select (kwh*1000000)as tarkwh from daily_target_kpi where site=t1.site and date=t1.date order by daily_target_kpi_id desc limit 1)as tarkwh ,(select (sum(wind_speed)/(select count(*) from daily_target_kpi where site=t2.site and date=t2.date))as tarwind from daily_target_kpi t2  where site=t1.site and date=t1.date)as tarwind from daily_gen_summary t1 where  " + filter + " group by Site,date order by date asc";


            //t1 where t1.approve_status="+approve_status+" and " + filter + " group by Site,date order by date desc";


            //(date>='2021-04-01'  and date<='2022-03-31')
            List<WindDashboardData> _WindDashboardData = new List<WindDashboardData>();
            _WindDashboardData = await Context.GetData<WindDashboardData>(qry).ConfigureAwait(false);
            return _WindDashboardData;

        }

        internal async Task<List<WindDashboardData>> GetWindDashboardData(string startDate, string endDate, string FY, string sites,bool monthly = false)
        {
            string groupby = "";
            string groupby1 = "";
            string selfilter = "";
            string temp_viewtbl = "";
            string filter = "(t1.date >= '" + startDate + "'  and t1.date<= '" + endDate + "')";
            if (!string.IsNullOrEmpty(sites))
            {
                filter += " and t1.site_id in(" + sites + ")";

            }
            if (monthly == true)
            {
                groupby = " MONTH(t1.date) ";
                groupby1 = "MONTH(date) ";
                selfilter = "MONTH(date) as month";
                temp_viewtbl = "temp_view_month";
            }
            else {
                groupby = " t1.date ";
                groupby1 = "date ";
                selfilter = "date as tar_date ";
                temp_viewtbl = "temp_view3";
            }
            string qry1 = "create or replace view "+ temp_viewtbl + " as select t1.date, t1.site_id, t1.site, t1.kwh, t1.wind_speed from daily_target_kpi t1," +
                 " daily_gen_summary t2 where t1.date = t2.date and t1.site_id = t2.site_id and " + filter +
                 " group by t1.date, t1.site_id;";
            try
            {
                await Context.ExecuteNonQry<int>(qry1).ConfigureAwait(false);
            }
            catch (Exception)
            {
                //
            }
            string qry2 = " select site, site_id," + selfilter + ", sum(kwh) as tarkwh, sum(wind_speed)/count(wind_speed) as tarwind from "+ temp_viewtbl + " group by " + groupby1 +"" ;
            List<WindDashboardData> _WindDashboardData2 = new List<WindDashboardData>();
            _WindDashboardData2 = await Context.GetData<WindDashboardData>(qry2).ConfigureAwait(false);


            //string qry5 = "SELECT t1.Date,month(t1.date)as month,year(t1.date)as year,t1.Site,SUM(t1.kwh) as KWH,t2.line_loss,SUM(t1.kwh) - SUM(t1.kwh) * (t2.line_loss / 100) as jmrkwh,avg(t1.wind_speed) as Wind FROM `daily_gen_summary` as t1 left join monthly_uploading_line_losses as t2 on t2.site_id = t1.site_id and month_no = MONTH(t1.date) and fy='" + FY + "' left join site_master as t3 on t3.site_master_id = t1.site_id where " + filter + "  group by " + groupby + " order by t1.date asc";


            //v1Qry 
            string qry5 = "";
			qry5 = "SELECT t1.Date,month(t1.date) as month,year(t1.date) as year,fy,t1.Site,SUM(t1.kwh) as KWH,SUM(t1.jmrkwh) as jmrkwh,sum(t1.Wind)/count(t1.Wind) as Wind FROM(SELECT t1.Date, month(t1.date) as month, year(t1.date) as year,t2.fy, t1.Site, SUM(t1.kwh) as KWH, t2.line_loss, SUM(t1.kwh) - SUM(t1.kwh) * (t2.line_loss / 100) as jmrkwh, sum(t1.wind_speed)/count(t1.wind_speed) as Wind FROM `daily_gen_summary` as t1 left join monthly_uploading_line_losses as t2 on t2.site_id = t1.site_id and month_no = MONTH(t1.date) and year = year(t1.date)  left join site_master as t3 on t3.site_master_id = t1.site_id where " + filter + "   group by t1.site, t1.date  order by t1.site asc ,t1.date asc) as t1 group by " + groupby + " order by t1.Date";
            //if (monthly)
            //{
            //    qry5 = "SELECT t1.Date,month(t1.date) as month,year(t1.date) as year,fy,t1.Site,SUM(t1.kwh) as KWH,SUM(t1.jmrkwh) as jmrkwh,sum(t1.Wind)/count(t1.Wind) as Wind FROM(SELECT t1.Date, month(t1.date) as month, year(t1.date) as year,t2.fy, t1.Site, SUM(t1.kwh) as KWH, t2.line_loss, SUM(t1.kwh) - SUM(t1.kwh) * (t2.line_loss / 100) as jmrkwh, sum(t1.wind_speed)/count(t1.wind_speed) as Wind FROM `daily_gen_summary` as t1 left join monthly_uploading_line_losses as t2 on t2.site_id = t1.site_id and month_no = MONTH(t1.date) and year = year(t1.date)  left join site_master as t3 on t3.site_master_id = t1.site_id where " + filter + "   group by t1.site, t1.date  order by t1.site asc ,t1.date asc) as t1 group by " + groupby + " order by t1.Date";
            //}
            //else
            //{
            //    qry5 = "SELECT dr.date, IFNULL(jmr.month, MONTH(dr.date)) AS month, IFNULL(jmr.year, YEAR(dr.date)) AS year, IFNULL(jmr.fy, '-') AS fy, IFNULL(jmr.Site, '-') AS Site, IFNULL(jmr.jmrkwh, 0) AS jmrkwh, IFNULL(jmr.Wind, 0) AS Wind FROM( SELECT DISTINCT DATE_ADD('" + startDate + "', INTERVAL n DAY) AS date FROM( SELECT 0 AS n UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9 ) AS numbers ) AS dr LEFT JOIN( SELECT t1.Date, MONTH(t1.date) AS month, YEAR(t1.date) AS year, t1.fy, t1.Site, SUM(t1.kwh) AS KWH, SUM(t1.jmrkwh) AS jmrkwh, SUM(t1.Wind) / COUNT(t1.Wind) AS Wind FROM( SELECT t1.Date, MONTH(t1.date) AS month, YEAR(t1.date) AS year, t2.fy, t1.Site, SUM(t1.kwh) AS KWH, t2.line_loss, SUM(t1.kwh) - SUM(t1.kwh) * (t2.line_loss / 100) AS jmrkwh, SUM(t1.wind_speed) / COUNT(t1.wind_speed) AS Wind FROM `daily_gen_summary` AS t1 LEFT JOIN monthly_uploading_line_losses AS t2 ON t2.site_id = t1.site_id AND month_no = MONTH(t1.date) AND year = YEAR(t1.date) LEFT JOIN site_master AS t3 ON t3.site_master_id = t1.site_id WHERE" + filter +" GROUP BY t1.site, t1.date ORDER BY t1.site ASC, t1.date ASC ) AS t1 GROUP BY t1.date ) AS jmr ON dr.date = jmr.Date ORDER BY dr.date ASC; ";
            //}


			//v2 Qry
			//string qry5 = "SELECT t1.Date,month(t1.date) as month,year(t1.date) as year,t1.Site,SUM(t1.kwh) as KWH,SUM(t1.jmrkwh) as jmrkwh,sum(t1.Wind)/count(t1.Wind) as Wind FROM(SELECT t1.Date, month(t1.date) as month, year(t1.date) as year, t1.Site, SUM(t1.kwh) as KWH, t2.line_loss, SUM(t1.kwh) - SUM(t1.kwh) * (t2.line_loss / 100) as jmrkwh, sum(t1.wind_speed)/count(t1.wind_speed) as Wind FROM `daily_gen_summary` as t1 left join monthly_uploading_line_losses as t2 on t2.site_id = t1.site_id and month_no = MONTH(t1.date) and fy='" + FY + "' left join site_master as t3 on t3.site_master_id = t1.site_id where " + filter + "   group by t1.site, t1.date  order by t1.date asc) as t1 group by " + groupby ;
           

            List<WindDashboardData> _WindDashboardData = new List<WindDashboardData>();
            try
            {
                _WindDashboardData = await Context.GetData<WindDashboardData>(qry5).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                string msg = "Exception due to : " + e.ToString();
                string finalMsg = "";
            }

            string qry6 = " select site, total_mw from site_master group by site;";
            string qry7 = "select site, site_id," + selfilter + ",sum(wind_speed)/count(wind_speed) as tarwind from "+ temp_viewtbl + " group by " + groupby1 + ",site order by date;";
            string qry8 = "SELECT t1.Date,month(t1.date) as month,year(t1.date) as year,t1.Site,sum(t1.Wind)/count(t1.Wind) as Wind FROM(SELECT t1.Date, month(t1.date) as month, year(t1.date) as year, t1.Site, sum(t1.wind_speed)/count(t1.wind_speed) as Wind FROM `daily_gen_summary` as t1 left join monthly_uploading_line_losses as t2 on t2.site_id = t1.site_id and month_no = MONTH(t1.date) and year = year(t1.date)  left join site_master as t3 on t3.site_master_id = t1.site_id where " + filter + "   group by t1.site, t1.date  order by t1.date asc) as t1 group by " + groupby + ",site order by t1.Date"; 

            List<WindDashboardData> _WindDashboardData6 = new List<WindDashboardData>();
            _WindDashboardData6 = await Context.GetData<WindDashboardData>(qry6).ConfigureAwait(false);
            List<WindDashboardData> _WindDashboardData7 = new List<WindDashboardData>();
            _WindDashboardData7 = await Context.GetData<WindDashboardData>(qry7).ConfigureAwait(false);
            List<WindDashboardData> _WindDashboardData8 = new List<WindDashboardData>();
            _WindDashboardData8 = await Context.GetData<WindDashboardData>(qry8).ConfigureAwait(false);
            
            double total_capacity = 0;
            double total_capActWind = 0;
            double total_capTarWind = 0;
            //double wspeed = 0;
            //double wspeed_target = 0;
            var current = 0;
            var last= 0;
            var currentD = "";
            var lastD = "";

            foreach (WindDashboardData _windData in _WindDashboardData)
            {
                _windData.tar_date = _windData.Date;//.Date.ToString("yyyy-MM-dd");
                foreach (WindDashboardData _windData2 in _WindDashboardData2)
                {
                    if (monthly == true && _windData.month == _windData2.month)
                    {
                        _windData.tarkwh = _windData2.tarkwh;
                        //_windData.tarwind = _windData2.tarwind;
                    }
                    else
                    {
                        _windData.tar_date = Convert.ToDateTime(_windData.tar_date);
                        if (_windData.tar_date == _windData2.tar_date)
                        {
                            _windData.tarkwh = _windData2.tarkwh;
                            // _windData.tarwind = _windData2.tarwind;
                        }
                    }
                    //else if (_windData.tar_date == _windData2.tar_date)
                    //{
                    //    _windData.tarkwh = _windData2.tarkwh;
                    //    // _windData.tarwind = _windData2.tarwind;
                    //}
                }


            }

            foreach (WindDashboardData _windData in _WindDashboardData8)
            {
                _windData.tar_date = _windData.Date;
                foreach (WindDashboardData _windData2 in _WindDashboardData6)
                {
                    if (_windData.Site == _windData2.Site)
                    {
                        _windData.total_mw = _windData2.total_mw;
                    }

                }
                foreach (WindDashboardData _windData3 in _WindDashboardData7)
                {
                    if ((monthly == true) && (_windData.month == _windData3.month )&& (_windData.Site == _windData3.Site))
                    {
                        _windData.tarwind = _windData3.tarwind;
                    }
                    else if ((_windData.tar_date == _windData3.tar_date) && (_windData.Site == _windData3.Site))
                    {
                        _windData.tarwind = _windData3.tarwind;
                    }
                }              

            }

            int cnt = 0;

            foreach (WindDashboardData _windData in  _WindDashboardData8)
            {
                _windData.Date= _windData.Date.ToString();
                if (monthly == true)
               {
                    cnt++;
                    current = _windData.month;

                    if (cnt == 1)
                    {
                        last = current;
                    }
                    if (_WindDashboardData8.IndexOf(_windData) == _WindDashboardData8.Count - 1)
                    {
                        total_capacity += _windData.total_mw;
                        total_capActWind += _windData.Wind * _windData.total_mw;
                        total_capTarWind += _windData.tarwind * _windData.total_mw;

                    }
                    if (current != last || _WindDashboardData8.IndexOf(_windData) == _WindDashboardData8.Count - 1)
                    {
                        foreach (WindDashboardData _windData4 in _WindDashboardData)
                            {
                                if (last == _windData4.month)
                                {
                                    _windData4.tarwind = total_capTarWind / total_capacity;
                                    _windData4.Wind = total_capActWind / total_capacity;
                                }
                            }
                            total_capacity = 0;
                            total_capActWind = 0;
                            total_capTarWind = 0;

                        if (_WindDashboardData8.IndexOf(_windData) != _WindDashboardData8.Count - 1)
                        {
                            last = current;
                        }
                     

                    }

                    total_capacity += _windData.total_mw;
                    total_capActWind += _windData.Wind * _windData.total_mw;
                    total_capTarWind += _windData.tarwind * _windData.total_mw;

                    if (current != last && _WindDashboardData8.IndexOf(_windData) == _WindDashboardData8.Count - 1)
                    {
                        last = current;
                        foreach (WindDashboardData _windData4 in _WindDashboardData)
                        {
                            if (last == _windData4.month)
                            {
                                _windData4.tarwind = total_capTarWind / total_capacity;
                                _windData4.Wind = total_capActWind / total_capacity;
                            }
                        }
                    }
                }                      
                else
                {
                    cnt++;
                    currentD = _windData.Date;
                    if (cnt == 1)
                    {
                        lastD = currentD;
                    }
                    var win = _WindDashboardData8.IndexOf(_windData);
                    if (_WindDashboardData8.IndexOf(_windData) == _WindDashboardData8.Count - 1)
                    {
                        total_capacity += _windData.total_mw;
                        total_capActWind += _windData.Wind * _windData.total_mw;
                        total_capTarWind += _windData.tarwind * _windData.total_mw;

                    }
                    if (currentD != lastD || _WindDashboardData8.IndexOf(_windData) == _WindDashboardData8.Count - 1)
                    {
                        // if(_WindDashboardData8.IndexOf(_windData) == _WindDashboardData8.Count - 1 && )
                        foreach (WindDashboardData _windData4 in _WindDashboardData)
                        {
                            if (lastD == _windData4.tar_date.ToString()) 
                            {
                                _windData4.tarwind = total_capTarWind / total_capacity;
                                _windData4.Wind = total_capActWind / total_capacity;
                            }
                        }
                        total_capacity = 0;
                        total_capActWind = 0;
                        total_capTarWind = 0;
                        //cnt = 0;
                        if (_WindDashboardData8.IndexOf(_windData) != _WindDashboardData8.Count - 1)
                        {
                            lastD = currentD;
                        }
                    }
                   
                    total_capacity += _windData.total_mw;
                    total_capActWind += _windData.Wind * _windData.total_mw;
                    total_capTarWind += _windData.tarwind * _windData.total_mw;

                    if (currentD != lastD && _WindDashboardData8.IndexOf(_windData) == _WindDashboardData8.Count - 1)
                    {
                        lastD = currentD;
                        foreach (WindDashboardData _windData4 in _WindDashboardData)
                        {
                            if (lastD == _windData4.tar_date.ToString())
                            {
                                _windData4.tarwind = total_capTarWind / total_capacity;
                                _windData4.Wind = total_capActWind / total_capacity;
                            }
                        }
                    }



                }
            }
            return _WindDashboardData;

           /* string qry = @"select t1.site_id,t1.Date,month(t1.date) as month,year(t1.date) as year,t1.Site, (sum(t1.wind_speed) / count(*)) as Wind, sum(kwh_afterlineloss) as jmrkwh, (t2.kwh) as tarkwh, avg(t2.wind_speed) as tarwind from daily_gen_summary t1 left join daily_target_kpi as t2 on t2.site_id = t1.site_id and t2.date = t1.date and t2.fy = '" + FY + "' where " + filter + " group by "+ groupby + " order by t1.date asc";

            List<WindDashboardData1> _WindDashboardData = await Context.GetData<WindDashboardData1>(qry).ConfigureAwait(false);
            return _WindDashboardData;*/

           

        }

        internal async Task<List<WindDashboardData>> GetWindDashboardData_old_AdminApproval(string startDate, string endDate, string FY, string sites)
        {

            string filter = "(t1.date >= '" + startDate + "'  and t1.date<= '" + endDate + "')";
            if (!string.IsNullOrEmpty(sites) && sites != "All")
            {
                string[] siteSplit = sites.Split("~");
                if (siteSplit.Length > 0)
                {
                    string sitesnames = "";
                    for (int i = 0; i < siteSplit.Length; i++)
                    {
                        if (!string.IsNullOrEmpty(siteSplit[i]))
                        {
                            sitesnames += "'" + siteSplit[i] + "',";
                        }
                    }
                    sitesnames = sitesnames.TrimEnd(',');
                    filter += " and t1.site in(" + sitesnames + ")";
                }

            }

            string qry = @"select  Date,month,year, Site,(sum(wind)/count(*))as Wind,
 sum(kwh)as KWH,line_loss, sum(jmrkwh) as jmrkwh, tarkwh, avg(tarwind) as tarwind 
 from  tblwinddata t1 where  " + filter + " group by t1.Site,t1.date order by t1.date desc ;";


            return await Context.GetData<WindDashboardData>(qry).ConfigureAwait(false);

        }

        internal async Task<List<WindDashboardData>> GetWindDashboardDataByLastDay(string FY, string sites, string date)
        {



            //string filter = "(t1.date >= '" + startDate + "'  and t1.date<= '" + endDate + "') and t1.date='"+date+"' ";
            string filter = " t1.date='" + date + "' ";
            if (!string.IsNullOrEmpty(sites))
            {
                filter += " and t1.site_id in(" + sites + ")";

            }
            /*if (!string.IsNullOrEmpty(sites))
             {
                 string[] siteSplit = sites.Split("~");
                 if (siteSplit.Length > 0)
                 {
                     string sitesnames = "";
                     for (int i = 0; i < siteSplit.Length; i++)
                     {
                         if (!string.IsNullOrEmpty(siteSplit[i]))
                         {
                             sitesnames += "'" + siteSplit[i] + "',";
                         }
                     }
                     sitesnames = sitesnames.TrimEnd(',');
                     filter += " and t1.site in(" + sitesnames + ")";
                 }

             } */

            /*string qry = @"  select  t1.Date,month(t1.date)as month,year(t1.date)as year,t1.Site,  (sum(t1.wind_speed)/count(*))as Wind,
  sum(t1.kwh)as KWH, replace(t2.line_loss,'%','')as line_loss, sum(t1.kwh)-(sum(t1.kwh)* replace(t2.line_loss,'%','') /100) as jmrkwh,
  (t3.kwh*1000000)as tarkwh, avg(t3.wind_speed) as tarwind from  daily_gen_summary t1
  left join monthly_uploading_line_losses t2 on t2.site=t1.site and t2.month=DATE_FORMAT(t1.date, '%b') and fy='" + FY + "' left join daily_target_kpi t3 on t3.site=t1.site and t3.date=t1.date where " + filter + " group by t1.Site,t1.date order by t1.date desc";*/

            /*string qry = @"  select  t1.Date,month(t1.date)as month,year(t1.date)as year,t1.Site,  (sum(t1.wind_speed)/count(*))as Wind,
 sum(t1.kwh)as KWH, replace(t2.line_loss,'%','')as line_loss, sum(t1.kwh)-(sum(t1.kwh)* replace(t2.line_loss,'%','') /100) as jmrkwh,
 (t3.kwh*1000000)as tarkwh, avg(t3.wind_speed) as tarwind from  daily_gen_summary t1
 left join monthly_uploading_line_losses t2 on t2.site_id=t1.site_id and t2.month=DATE_FORMAT(t1.date, '%b') and fy='" + FY + "' left join daily_target_kpi t3 on t3.site_id=t1.site_id and t3.date=t1.date where " + filter + " group by t1.Site,t1.date order by t1.date desc";*/
            /* string qry = @"  select  t1.Date,month(t1.date)as month,year(t1.date)as year,t1.Site,  (sum(t1.wind_speed)/count(*))as Wind,
  sum(t1.kwh)as KWH, replace(t2.line_loss,'%','') as line_loss, sum(kwh_afterlineloss) as jmrkwh,
  (t3.kwh*1000000)as tarkwh, avg(t3.wind_speed) as tarwind from  daily_gen_summary t1
  left join monthly_uploading_line_losses t2 on t2.site_id=t1.site_id and t2.month=DATE_FORMAT(t1.date, '%b') and fy='" + FY + "' left join daily_target_kpi t3 on t3.site_id=t1.site_id and t3.date=t1.date where " + filter + " group by t1.Site,t1.date order by t1.date desc";*/

            string qry1 = "create or replace view temp_view_year as select t1.date, t1.site_id, t1.site, t1.kwh, t1.wind_speed from daily_target_kpi t1," +
                " daily_gen_summary t2 where t1.date = t2.date and t1.site_id = t2.site_id and " + filter +
                " group by t1.date, t1.site_id;";
            try
            {
                await Context.ExecuteNonQry<int>(qry1).ConfigureAwait(false);
            }
            catch (Exception)
            {
                //
            }
            string qry2 = " select Site, sum(kwh*1000000) as tarkwh, sum(wind_speed)/count(wind_speed) as tarwind from temp_view_year group by site ";
            List<WindDashboardData> _WindDashboardData2 = new List<WindDashboardData>();
            _WindDashboardData2 = await Context.GetData<WindDashboardData>(qry2).ConfigureAwait(false);



            //string qry5 = "SELECT t1.Date,month(t1.date)as month,year(t1.date)as year,t1.Site,SUM(t1.kwh) as KWH,t2.line_loss,SUM(t1.kwh) - SUM(t1.kwh) * (t2.line_loss / 100) as jmrkwh,(sum(t1.wind_speed)/count(t1.wind_speed)) as Wind,(t3.kwh*1000000)as tarkwh, avg(t3.wind_speed) as tarwind FROM `daily_gen_summary` as t1 left join monthly_uploading_line_losses as t2 on t2.site_id = t1.site_id and month_no = MONTH(t1.date) and fy='" + FY + "' left join daily_target_kpi t3 on t3.site_id=t1.site_id and t3.date=t1.date where " + filter + " group by t1.Site order by t1.date desc";
			string qry5 = "SELECT t1.Date,month(t1.date) as month,year(t1.date) as year,t1.Site,SUM(t1.kwh) as KWH,SUM(t1.jmrkwh) as jmrkwh, avg(t1.Wind) as Wind FROM(SELECT t1.Date,month(t1.date)as month,year(t1.date)as year,t1.Site,SUM(t1.kwh) as KWH,t2.line_loss,SUM(t1.kwh) - SUM(t1.kwh) * (t2.line_loss / 100) as jmrkwh,(sum(t1.wind_speed)/count(t1.wind_speed)) as Wind,(t3.kwh*1000000)as tarkwh, avg(t3.wind_speed) as tarwind FROM `daily_gen_summary` as t1 left join monthly_uploading_line_losses as t2 on t2.site_id = t1.site_id and month_no = MONTH(t1.date) and fy='" + FY + "' left join daily_target_kpi t3 on t3.site_id=t1.site_id and t3.date=t1.date where " + filter + " group by t1.Site order by t1.date desc) as t1 group by t1.date, t1.site";

            List<WindDashboardData> _WindDashboardData = new List<WindDashboardData>();
            _WindDashboardData = await Context.GetData<WindDashboardData>(qry5).ConfigureAwait(false);
            
			string qry6 = " select site, total_mw from site_master group by site";
            List<WindDashboardData> _WindDashboardData6 = new List<WindDashboardData>();
            _WindDashboardData6 = await Context.GetData<WindDashboardData>(qry6).ConfigureAwait(false);
            foreach (WindDashboardData _windData in _WindDashboardData)
            {
                foreach (WindDashboardData _windData2 in _WindDashboardData2)
                {
                    if (_windData.Site == _windData2.Site)
                    {
                        _windData.tarkwh = _windData2.tarkwh;
                        _windData.tarwind = _windData2.tarwind;
                    }
                }
                foreach (WindDashboardData _windData2 in _WindDashboardData6)
                {
                    if (_windData.Site == _windData2.Site)
                    {
                        _windData.total_mw = _windData2.total_mw;
                    }
			    }
            }

            return _WindDashboardData;
           // return _WindDashboardData;

        }

        internal async Task<List<WindDashboardData>> GetWindDashboardDataByCurrentMonth(string startDate, string endDate, string FY, string sites, string month)
        {

            string filter = " (t1.date >= '" + startDate + "'  and t1.date<= '" + endDate + "') and month(t1.date)=" + month + " ";
            string filter1 = "  (t1.date >= '" + startDate + "'  and t1.date<= '" + endDate + "') ";
            if (!string.IsNullOrEmpty(sites))
            {
                filter += " and t1.site_id in(" + sites + ") ";
                filter1 += " and t1.site_id in(" + sites + ") ";

            }
           
            
            /*string qry1 = "create or replace view temp_view9 as select t1.date, t1.site_id, t1.site, t1.kwh, t1.wind_speed from daily_target_kpi t1," +
                " daily_gen_summary t2 where t1.date = t2.date and t1.site_id = t2.site_id " + filter1 +
                " group by t1.date, t1.site_id;";
            try
            {
                await Context.ExecuteNonQry<int>(qry1).ConfigureAwait(false);
            }
            catch (Exception)
            {
                //
            }
            string qry2 = " select site, site_id, sum(kwh) as tarkwh, avg(wind_speed) as tarwind from temp_view9 group by site, month(date); ";
            List<WindDashboardData> _WindDashboardData2 = new List<WindDashboardData>();
            _WindDashboardData2 = await Context.GetData<WindDashboardData>(qry2).ConfigureAwait(false);

           
            string qry5 = "SELECT t1.Date,month(t1.date)as month,year(t1.date)as year,t1.Site,SUM(t1.kwh) as KWH,t2.line_loss,SUM(t1.kwh) - SUM(t1.kwh) * (t2.line_loss / 100) as jmrkwh,avg(t1.wind_speed) as Wind FROM `daily_gen_summary` as t1 left join monthly_uploading_line_losses as t2 on t2.site_id = t1.site_id and month_no = MONTH(t1.date) and fy='" + FY + "' left join site_master as t3 on t3.site_master_id = t1.site_id where " + filter + "  group by MONTH(t1.date) ,t1.site";

            

            List<WindDashboardData> _WindDashboardData = new List<WindDashboardData>();
            _WindDashboardData = await Context.GetData<WindDashboardData>(qry5).ConfigureAwait(false);
            foreach (WindDashboardData _windData in _WindDashboardData)
            {
                foreach (WindDashboardData _windData2 in _WindDashboardData2)
                {
                    if (_windData.Site == _windData2.Site)
                    {
                        _windData.tarkwh = _windData2.tarkwh;
                        _windData.tarwind = _windData2.tarwind;
                    }
                }
            }

            return _WindDashboardData;*/


            string qry1 = "create or replace view temp_view9 as select t1.date, t1.site_id, t1.site, t1.kwh, t1.wind_speed from daily_target_kpi t1," +
                 " daily_gen_summary t2 where t1.date = t2.date and t1.site_id = t2.site_id and " + filter1 +
                 " group by t1.date, t1.site_id;";

           
            try
            {
                await Context.ExecuteNonQry<int>(qry1).ConfigureAwait(false);
            }
            catch (Exception)
            {
                //
            }
            string qry2 = " select site, site_id,MONTH(date) as month, sum(kwh) as tarkwh, sum(wind_speed)/count(wind_speed) as tarwind from temp_view9 group by MONTH(date), site ";
            List<WindDashboardData> _WindDashboardData2 = new List<WindDashboardData>();
            _WindDashboardData2 = await Context.GetData<WindDashboardData>(qry2).ConfigureAwait(false);

            string qry5 = "SELECT t1.Date,month(t1.date) as month,year(t1.date) as year,t1.Site,SUM(t1.kwh) as KWH,SUM(t1.jmrkwh) as jmrkwh, avg(t1.Wind) as Wind FROM(SELECT t1.Date, month(t1.date) as month, year(t1.date) as year, t1.Site, SUM(t1.kwh) as KWH, t2.line_loss, SUM(t1.kwh) - SUM(t1.kwh) * (t2.line_loss / 100) as jmrkwh, (sum(wind_speed)/count(wind_speed)) as Wind FROM `daily_gen_summary` as t1 left join monthly_uploading_line_losses as t2 on t2.site_id = t1.site_id and month_no = MONTH(t1.date) and fy='" + FY + "' left join site_master as t3 on t3.site_master_id = t1.site_id where " + filter + "   group by t1.site, t1.date  order by t1.date asc) as t1 group by MONTH(t1.date), t1.site";
            List<WindDashboardData> _WindDashboardData = new List<WindDashboardData>();
            _WindDashboardData = await Context.GetData<WindDashboardData>(qry5).ConfigureAwait(false);

            string qry6 = " select site, total_mw from site_master group by site";
            List<WindDashboardData> _WindDashboardData6 = new List<WindDashboardData>();
            _WindDashboardData6 = await Context.GetData<WindDashboardData>(qry6).ConfigureAwait(false);


            foreach (WindDashboardData _windData in _WindDashboardData)
            {
                _windData.tar_date = _windData.Date.ToString("yyyy-MM-dd");
                foreach (WindDashboardData _windData2 in _WindDashboardData2)
                {
                    if (_windData.month == _windData2.month && _windData.Site == _windData2.Site)
                    {
                        _windData.tarkwh = _windData2.tarkwh;
                        _windData.tarwind = _windData2.tarwind;
                    }
                    
                }
                foreach (WindDashboardData _windData2 in _WindDashboardData6)
                {
                    if (_windData.Site == _windData2.Site)
                    {
                        _windData.total_mw = _windData2.total_mw;
                    }

                }
            }
            return _WindDashboardData;
        }
        internal async Task<List<WindDashboardData>> GetWindDashboardDataByYearly(string startDate, string endDate, string FY, string sites)
        {

            string[] datebuild = startDate.Split("-");
            startDate = datebuild[2] + "-" + datebuild[1] + "-" + datebuild[0];
            string filter = "(t1.date >= '" + startDate + "'  and t1.date<= '" + endDate + "')  ";
            string filter1 = " and (t1.date >= '" + startDate + "'  and t1.date<= '" + endDate + "')  ";
            string filter2 = "";
            /*if (!string.IsNullOrEmpty(sites) && sites != "All")
            {
                string[] siteSplit = sites.Split("~");
                if (siteSplit.Length > 0)
                {
                    string sitesnames = "";
                    for (int i = 0; i < siteSplit.Length; i++)
                    {
                        if (!string.IsNullOrEmpty(siteSplit[i]))
                        {
                            sitesnames += "'" + siteSplit[i] + "',";
                        }
                    }
                    sitesnames = sitesnames.TrimEnd(',');
                    filter += " and t1.site in(" + sitesnames + ")";
                }

            }*/
            if (!string.IsNullOrEmpty(sites))
            {
                filter += " and t1.site_id in(" + sites + ")";
                filter1 += " and t1.site_id in(" + sites + ")";
                filter2 += " where  t1.site_id IN(" + sites + ")";
            }
            
            string qry1 = "create or replace view temp_view_year as select t1.date, t1.site_id, t1.site, t1.kwh, t1.wind_speed from daily_target_kpi t1," +
                " daily_gen_summary t2 where t1.date = t2.date and t1.site_id = t2.site_id " + filter1 +
                " group by t1.date, t1.site_id;";
            try
            {
                await Context.ExecuteNonQry<int>(qry1).ConfigureAwait(false);
            }
            catch (Exception)
            {
                //
            }
            //string qry2 = " select year(date) as year, Site, sum(kwh) as tarkwh, sum(wind_speed)/count(wind_speed) as tarwind from temp_view_year group by site, year(date); "; // changes 23022023
            string qry2 = " select year(date) as year, Site, sum(kwh) as tarkwh, sum(wind_speed)/count(wind_speed) as tarwind from temp_view_year group by site; ";
            List<WindDashboardData> _WindDashboardData2 = new List<WindDashboardData>();
            _WindDashboardData2 = await Context.GetData<WindDashboardData>(qry2).ConfigureAwait(false);
            //changes 23022024
            //string qry5 = "SELECT t1.Date,month(t1.date) as month,year(t1.date) as year,t1.Site,SUM(t1.kwh) as KWH,SUM(t1.jmrkwh) as jmrkwh, avg(t1.Wind) as Wind FROM(SELECT t1.Date,month(t1.date)as month,year(t1.date)as year,t1.Site,SUM(t1.kwh) as KWH,t2.line_loss,SUM(t1.kwh) - SUM(t1.kwh) * (t2.line_loss / 100)as jmrkwh,(sum(t1.wind_speed)/count(t1.wind_speed)) as Wind FROM `daily_gen_summary` as t1 left join monthly_uploading_line_losses as t2 on t2.site_id = t1.site_id and month_no = MONTH(t1.date) and fy='" + FY + "' left join site_master as t3 on t3.site_master_id = t1.site_id where " + filter + " group by t1.site, t1.date  order by t1.date asc ) as t1 group by YEAR(t1.date) ,t1.site";
            //string qry5 = "SELECT t1.Date,month(t1.date) as month,year(t1.date) as year,t1.Site,SUM(t1.kwh) as KWH,SUM(t1.jmrkwh) as jmrkwh, avg(t1.Wind) as Wind FROM(SELECT t1.Date,month(t1.date)as month,year(t1.date)as year,t1.Site,SUM(t1.kwh) as KWH,t2.line_loss,SUM(t1.kwh) - SUM(t1.kwh) * (t2.line_loss / 100)as jmrkwh,(sum(t1.wind_speed)/count(t1.wind_speed)) as Wind FROM `daily_gen_summary` as t1 left join monthly_uploading_line_losses as t2 on t2.site_id = t1.site_id and month_no = MONTH(t1.date) and fy='" + FY + "' left join site_master as t3 on t3.site_master_id = t1.site_id where " + filter + " group by t1.site order by t1.date asc ) as t1 group by YEAR(t1.date) ,t1.site";
            //string qry5 = "SELECT t1.Date,month(t1.date) as month,year(t1.date) as year,t1.Site,SUM(t1.kwh) as KWH,SUM(t1.jmrkwh) as jmrkwh, avg(t1.Wind) as Wind FROM(SELECT t1.Date,month(t1.date)as month,year(t1.date)as year,t1.Site,SUM(t1.kwh) as KWH,t2.line_loss,SUM(t1.kwh) - SUM(t1.kwh) * (t2.line_loss / 100)as jmrkwh,(sum(t1.wind_speed)/count(t1.wind_speed)) as Wind FROM `daily_gen_summary` as t1 left join monthly_uploading_line_losses as t2 on t2.site_id = t1.site_id and month_no = MONTH(t1.date) and fy='" + FY + "' left join site_master as t3 on t3.site_master_id = t1.site_id where " + filter + " group by t1.site, t2.month_no order by  t1.date asc ) as t1 group by t1.site";
            //Wind Speed Issue Fix 
            string qry5 = "SELECT t1.Date,month(t1.date) as month,year(t1.date) as year,t1.Site,SUM(t1.kwh) as KWH,SUM(t1.jmrkwh) as jmrkwh, avg(t1.Wind) as Wind FROM(SELECT t1.Date,month(t1.date)as month,year(t1.date)as year,t1.Site,SUM(t1.kwh) as KWH,t2.line_loss,SUM(t1.kwh) - SUM(t1.kwh) * (t2.line_loss / 100)as jmrkwh,(sum(t1.wind_speed)/count(t1.wind_speed)) as Wind FROM `daily_gen_summary` as t1 left join monthly_uploading_line_losses as t2 on t2.site_id = t1.site_id and month_no = MONTH(t1.date) and fy='" + FY + "' left join site_master as t3 on t3.site_master_id = t1.site_id where " + filter + " group by t1.date, month(t1.date) ,year(t1.date),t1.site order by  t1.date asc ) as t1 group by t1.site";

            List<WindDashboardData> _WindDashboardData = new List<WindDashboardData>();
            _WindDashboardData = await Context.GetData<WindDashboardData>(qry5).ConfigureAwait(false);


            /*string qry = @"  select  t1.Date,month(t1.date)as month,year(t1.date)as year,t1.Site,  (sum(t1.wind_speed)/count(*))as Wind,
 sum(t1.kwh)as KWH, replace(t2.line_loss,'%','')as line_loss, sum(kwh_afterlineloss) as jmrkwh,
 (sum(t3.kwh)*1000000)as tarkwh, avg(t3.wind_speed) as tarwind from  daily_gen_summary t1
 left join monthly_uploading_line_losses t2 on t2.site_id=t1.site_id and t2.month=DATE_FORMAT(t1.date, '%b') and fy='" + FY + "' left join daily_target_kpi t3 on t3.site_id=t1.site_id and t3.date=t1.date where " + filter + " group by t1.Site,month(t1.date),year(t1.date) order by t1.date desc";



            List<WindDashboardData> _WindDashboardData = new List<WindDashboardData>();
            _WindDashboardData = await Context.GetData<WindDashboardData>(qry).ConfigureAwait(false);*/
            string qry6 = " select site, total_mw from site_master group by site";
            List<WindDashboardData> _WindDashboardData6 = new List<WindDashboardData>();
            _WindDashboardData6 = await Context.GetData<WindDashboardData>(qry6).ConfigureAwait(false);

            foreach (WindDashboardData _windData in _WindDashboardData)
            {
                foreach (WindDashboardData _windData2 in _WindDashboardData2)
                {
                    if (_windData.Site == _windData2.Site && _windData.year == _windData2.year)
                    {
                        _windData.tarkwh = _windData2.tarkwh;
                        _windData.tarwind = _windData2.tarwind;
                    } 
                }
                foreach (WindDashboardData _windData2 in _WindDashboardData6)
                {
                    if (_windData.Site == _windData2.Site)
                    {
                        _windData.total_mw = _windData2.total_mw;
                    }

                }

            }
            
            return _WindDashboardData;

        }

        internal async Task<List<SolarDashboardData>> GetSolarDashboardDataold(string startDate, string endDate, string FY, string sites)
        {

            string filter = "(date >= '" + startDate + "'  and date<= '" + endDate + "')";
            if (!string.IsNullOrEmpty(sites) && sites != "All")
            {
                string[] siteSplit = sites.Split("~");
                if (siteSplit.Length > 0)
                {
                    string sitesnames = "";
                    for (int i = 0; i < siteSplit.Length; i++)
                    {
                        if (!string.IsNullOrEmpty(siteSplit[i]))
                        {
                            sitesnames += "'" + siteSplit[i] + "',";
                        }
                    }
                    sitesnames = sitesnames.TrimEnd(',');
                    filter += " and site in(" + sitesnames + ")";
                }

            }
            string qry = @"select Date,month(date)as month,year(date)as year,Site,(sum(poa)/count(*))as IR,sum(inv_kwh)as inv_kwh,(select  replace(lineloss,'%','')as line_loss
from monthly_line_loss_solar where fy='" + FY + "' and month=DATE_FORMAT(t1.date, '%b') and site=t1.site order by monthly_line_loss_solar_id desc limit 1) as line_loss,sum(inv_kwh)-(sum(inv_kwh)*((select  replace(lineloss,'%','')as line_loss  from monthly_line_loss_solar where fy='" + FY + "' and month=DATE_FORMAT(t1.date, '%b')  and site=t1.site order by monthly_line_loss_solar_id desc limit 1)/100))as jmrkwh, (select (gen_nos*1000000)as tarkwh from daily_target_kpi_solar where site=t1.site and date=t1.date    order by daily_target_kpi_solar_id desc limit 1)as tarkwh , (select (sum(poa)/(select count(*) from daily_target_kpi_solar where site=t1.site and date=t2.date order by daily_target_kpi_solar_id desc limit 1))as tarwind  from daily_target_kpi_solar t2  where site=t1.site and date=t1.date)as tarIR from daily_gen_summary_solar t1 where " + filter + " group by Site,date order by date asc";

            //from daily_target_kpi_solar t2  where site=t1.site and date=t1.date)as tarIR from daily_gen_summary_solar t1 where t1.approve_status="+approve_status+" and " + filter + " group by Site,date order by date desc";

            return await Context.GetData<SolarDashboardData>(qry).ConfigureAwait(false);


        }
        internal async Task<List<SolarDashboardData>> GetSolarDashboardData(string startDate, string endDate, string FY, string sites,bool monthly =false)
        {
            string groupby = "";
            string groupby1 = "";
            string groupby2 = "";
            string selfilter = "";
            string temp_viewtbl = "";
            string filter = "(t1.date >= '" + startDate + "'  and t1.date<= '" + endDate + "')";
            string tenFilter = "t1.date >= '" + startDate + "' AND t1.date <= '" + endDate + "'";
            if (!string.IsNullOrEmpty(sites))
            {
                filter += " and t1.site_id in(" + sites + ")";

            }
            if (monthly == true)
            {
                groupby = " MONTH(t1.date) ";
                groupby1 = " MONTH(date)";
                groupby2 = "month";
                selfilter = "MONTH(date) as month";
                temp_viewtbl = "temp_view_month_solar";
            }
            else
            {
                groupby = " t1.date ";
                groupby1 = " date ";
               // groupby1 = " date , site ";
                selfilter = "date as Date ";
                groupby2 = "date";
                temp_viewtbl = "temp_view4";
            }
            string qry1 = "create or replace view "+ temp_viewtbl + " as select t1.date,t1.site_id, t1.sites as Site , t1.poa, gen_nos from daily_target_kpi_solar t1, daily_gen_summary_solar t2 where t1.date = t2.date and t1.site_id = t2.site_id and "
                + filter + " group by t1.date, t2.site_id;";

            try
            {
                await Context.ExecuteNonQry<int>(qry1).ConfigureAwait(false);
            }
            catch (Exception ex)
            {
                string msg = ex.Message;
            }
            //string qry2 = "select Site, site_id, "+ selfilter + " ,sum(gen_nos)*1000000 as tarkwh, sum(poa)/count(poa) as tarIR from " + temp_viewtbl + " group by " + groupby1 + "";
            string qry2 = "select Site, site_id, " + selfilter + " ,sum(gen_nos)*1000000 as tarkwh, sum(poa)/count(poa) as tarIR from " + temp_viewtbl + " group by " + groupby1 + "";
            List<SolarDashboardData> tempdata = new List<SolarDashboardData>();
            tempdata = await Context.GetData<SolarDashboardData>(qry2).ConfigureAwait(false);

            string qry = "";

            qry = "select date, month,year,fy,Site,line_loss, sum(jmrkwh) as jmrkwh from(SELECT t1.date, MONTH(t1.date) as month, year(t1.date) as year,t2.fy, t1.site as Site, SUM(t1.inv_kwh) as inv_kwh, t2.LineLoss as line_loss, SUM(t1.inv_kwh) - SUM(t1.inv_kwh) * (t2.LineLoss / 100) as jmrkwh, AVG(t1.poa) as IR FROM `daily_gen_summary_solar` as t1 left join monthly_line_loss_solar as t2 on year = year(t1.date) and month_no = MONTH(t1.date) and t2.site_id = t1.site_id  where " + filter + " group by  " + groupby + ", site order by t1.site asc, t1.date asc) as jmr group by " + groupby2 + " order by date asc";

            //if (monthly)
            //{
            //    qry = "select date, month,year,fy,Site,line_loss, sum(jmrkwh) as jmrkwh from(SELECT t1.date, MONTH(t1.date) as month, year(t1.date) as year,t2.fy, t1.site as Site, SUM(t1.inv_kwh) as inv_kwh, t2.LineLoss as line_loss, SUM(t1.inv_kwh) - SUM(t1.inv_kwh) * (t2.LineLoss / 100) as jmrkwh, AVG(t1.poa) as IR FROM `daily_gen_summary_solar` as t1 left join monthly_line_loss_solar as t2 on year = year(t1.date) and month_no = MONTH(t1.date) and t2.site_id = t1.site_id  where " + filter + " group by  " + groupby + ", site order by t1.site asc, t1.date asc) as jmr group by " + groupby2 + " order by date asc";
            //}
            //else
            //{
            //    qry = "SELECT dr.date, IFNULL(jmr.month, MONTH(dr.date)) AS month, IFNULL(jmr.year, YEAR(dr.date)) AS year, IFNULL(jmr.fy, '-') AS fy, IFNULL(jmr.Site, '-') AS Site, IFNULL(jmr.line_loss, 0) AS line_loss, IFNULL(jmr.jmrkwh, 0) AS jmrkwh FROM( SELECT DISTINCT DATE_ADD('" + startDate + "', INTERVAL n DAY) AS date FROM( SELECT 0 AS n UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9 ) AS numbers ) AS dr LEFT JOIN(SELECT t1.date, MONTH(t1.date) AS month, YEAR(t1.date) AS year, t2.fy, t1.site AS Site, SUM(t1.inv_kwh) AS inv_kwh, t2.LineLoss AS line_loss, SUM(t1.inv_kwh) -SUM(t1.inv_kwh) * (t2.LineLoss / 100) AS jmrkwh, AVG(t1.poa) AS IR FROM `daily_gen_summary_solar` AS t1 LEFT JOIN monthly_line_loss_solar AS t2 ON YEAR = YEAR(t1.date) AND MONTH_NO = MONTH(t1.date) AND t2.site_id = t1.site_id WHERE(" + tenFilter + ") GROUP BY t1.date, site ) AS jmr ON dr.date = jmr.date ORDER BY dr.date ASC;";
            //}

            //SELECT dr.date,  IFNULL(jmr.month, MONTH(dr.date)) AS month, IFNULL(jmr.year, YEAR(dr.date)) AS year, IFNULL(jmr.fy, '-') AS fy, IFNULL(jmr.Site, '-') AS Site, IFNULL(jmr.line_loss, 0) AS line_loss, IFNULL(jmr.jmrkwh, 0) AS jmrkwh FROM( SELECT DISTINCT DATE_ADD('2023-09-10', INTERVAL n DAY) AS date FROM( SELECT 0 AS n UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9 ) AS numbers ) AS dr LEFT JOIN( SELECT t1.date, MONTH(t1.date) AS month, YEAR(t1.date) AS year, t2.fy, t1.site AS Site, SUM(t1.inv_kwh) AS inv_kwh, t2.LineLoss AS line_loss, SUM(t1.inv_kwh) -SUM(t1.inv_kwh) * (t2.LineLoss / 100) AS jmrkwh, AVG(t1.poa) AS IR FROM `daily_gen_summary_solar` AS t1 LEFT JOIN monthly_line_loss_solar AS t2 ON YEAR = YEAR(t1.date) AND MONTH_NO = MONTH(t1.date) AND t2.site_id = t1.site_id WHERE(t1.date >= '2023-09-10' AND t1.date <= '2023-09-19') GROUP BY t1.date, site ) AS jmr ON dr.date = jmr.date ORDER BY dr.date ASC;

            //SELECT dr.date, IFNULL(jmr.month, MONTH(dr.date)) AS month, IFNULL(jmr.year, YEAR(dr.date)) AS year, IFNULL(jmr.fy, '-') AS fy, IFNULL(jmr.Site, '-') AS Site, IFNULL(jmr.line_loss, 0) AS line_loss, IFNULL(jmr.jmrkwh, 0) AS jmrkwh FROM( SELECT DISTINCT DATE_ADD('2023-09-10', INTERVAL n DAY) AS date FROM( SELECT 0 AS n UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9 ) AS numbers ) AS dr LEFT JOIN(SELECT t1.date, MONTH(t1.date) AS month, YEAR(t1.date) AS year, t2.fy, t1.site AS Site, SUM(t1.inv_kwh) AS inv_kwh, t2.LineLoss AS line_loss, SUM(t1.inv_kwh) -SUM(t1.inv_kwh) * (t2.LineLoss / 100) AS jmrkwh, AVG(t1.poa) AS IR FROM `daily_gen_summary_solar` AS t1 LEFT JOIN monthly_line_loss_solar AS t2 ON YEAR = YEAR(t1.date) AND MONTH_NO = MONTH(t1.date) AND t2.site_id = t1.site_id WHERE(t1.date >= '2023-09-10' AND t1.date '2023-09-19') GROUP BY t1.date, site) AS jmr ON dr.date = jmr.date ORDER BY dr.date ASC;


            //string qry = @" SELECT t1.date,MONTH(t1.date) as month, t1.site as Site,SUM(t1.inv_kwh) as inv_kwh,t2.LineLoss as line_loss,SUM(t1.inv_kwh) - SUM(t1.inv_kwh) * (t2.LineLoss / 100) as jmrkwh ,sum(t1.poa)/count(t1.poa) as IR FROM `daily_gen_summary_solar` as t1 left join monthly_line_loss_solar as t2 on t2.site_id = t1.site_id and month_no = MONTH(t1.date) and fy='" + FY + "' where " + filter + " group by "+ groupby + " order by t1.date asc ";

            //string qry = @" SELECT t1.date,MONTH(t1.date) as month, t1.site as Site,SUM(t1.inv_kwh) as inv_kwh,t2.LineLoss as line_loss,SUM(t1.inv_kwh) - SUM(t1.inv_kwh) * (t2.LineLoss / 100) as jmrkwh ,AVG(t1.poa) as IR FROM `daily_gen_summary_solar` as t1 left join monthly_line_loss_solar as t2 on t2.site_id = t1.site_id and month_no = MONTH(t1.date) and fy='" + FY + "' where " + filter + "  group by " + groupby + " order by t1.date asc ";



            List<SolarDashboardData> data = new List<SolarDashboardData>();
            try
            {
                data = await Context.GetData<SolarDashboardData>(qry).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                string msg = "Exception while fetching records for graph, due to : " + e.ToString();
                string new12 = "";
            }

            //string qry3 = " select site, ac_capacity from site_master_solar group by site";
            //List<SolarDashboardData> data3 = new List<SolarDashboardData>();
            //data3 = await Context.GetData<SolarDashboardData>(qry3).ConfigureAwait(false);

            foreach (SolarDashboardData _dataelement in data)
            {
                foreach (SolarDashboardData _tempdataelement in tempdata)
                {
                    try
                    {
                       // _tempdataelement.Date.ToString("yyyy-MM-dd");
                        if (monthly == true && _dataelement.month == _tempdataelement.month)
                        {
                            _dataelement.tarkwh = _tempdataelement.tarkwh;
                            // _dataelement.tarIR = _tempdataelement.tarIR;
                        }
                        else if (monthly == false )
                        {
                            //string tempDate = Convert.ToDateTime(_tempdataelement.Date).ToString("yyyy-MM-dd");
                            _dataelement.Date = Convert.ToDateTime(_dataelement.Date);
                            if (_dataelement.Date == _tempdataelement.Date)
                            {
                                _dataelement.tarkwh = _tempdataelement.tarkwh;
                                // _dataelement.tarIR = _tempdataelement.tarIR;
                            }
                        }
                        //else if (monthly == false && _dataelement.Date == Convert.ToDateTime(_tempdataelement.Date).ToString("yyyy-MM-dd"))
                        //{
                        //    _dataelement.tarkwh = _tempdataelement.tarkwh;
                        //    // _dataelement.tarIR = _tempdataelement.tarIR;
                        //}
                    }
                    catch (Exception ex)
                    {
                        string msg = ex.Message;
                    }
                }
            }
            string qry9 = "create or replace view temp_view_tar as select t1.date,t1.site_id, t1.sites as Site , t1.poa, gen_nos from daily_target_kpi_solar t1, daily_gen_summary_solar t2 where t1.date = t2.date and t1.site_id = t2.site_id and "
               + filter + " group by t1.date, t2.site_id;";

            await Context.ExecuteNonQry<int>(qry9).ConfigureAwait(false);
            string qry6 = "select site, ac_capacity from site_master_solar group by site;";
            string qry7 = "select Site, site_id, " + selfilter + " ,sum(poa)/count(poa) as tarIR from temp_view_tar group by " + groupby1 +",Site;"; 
            string qry8 = @" SELECT t1.date,MONTH(t1.date) as month, t1.site as Site , sum(t1.poa)/count(t1.poa) as IR FROM `daily_gen_summary_solar` as t1 left join monthly_line_loss_solar as t2 on year = year(t1.date) and month_no = MONTH(t1.date) and t2.site_id = t1.site_id where " + filter + "  group by " + groupby + ",site order by t1.date asc ";
           
            string g = @" SELECT t1.date,MONTH(t1.date) as month, t1.site as Site,SUM(t1.inv_kwh) as inv_kwh,t2.LineLoss as line_loss,SUM(t1.inv_kwh) - SUM(t1.inv_kwh) * (t2.LineLoss / 100) as jmrkwh ,sum(t1.poa)/count(t1.poa) as IR FROM `daily_gen_summary_solar` as t1 left join monthly_line_loss_solar as t2 on year = year(t1.date) and month_no = MONTH(t1.date) and t2.site_id = t1.site_id where " + filter + " group by " + groupby + " order by t1.date asc ";

            List<SolarDashboardData> _SolarDashboardData6 = new List<SolarDashboardData>();
            _SolarDashboardData6 = await Context.GetData<SolarDashboardData>(qry6).ConfigureAwait(false);
            List<SolarDashboardData> _SolarDashboardData7 = new List<SolarDashboardData>();
            _SolarDashboardData7 = await Context.GetData<SolarDashboardData>(qry7).ConfigureAwait(false);
            List<SolarDashboardData> _SolarDashboardData8 = new List<SolarDashboardData>();
            _SolarDashboardData8 = await Context.GetData<SolarDashboardData>(qry8).ConfigureAwait(false);

            double total_capacity = 0;
            double total_capActIR = 0;
            double total_capTarIR = 0;
            //double wspeed = 0;
            //double wspeed_target = 0;
            double current = 0;
            double last = 0;
            DateTime currentD = new DateTime() ;
            DateTime lastD = new DateTime() ;


            foreach (SolarDashboardData _solarData in _SolarDashboardData8)
            {
               // _solarData.Date = _solarData.Date.Date.ToString("yyyy-MM-dd");
                foreach (SolarDashboardData _solarData2 in _SolarDashboardData6)
                {
                    if (_solarData.Site == _solarData2.Site)
                    {
                        _solarData.ac_capacity = _solarData2.ac_capacity;
                    }

                }
                foreach (SolarDashboardData _solarData3 in _SolarDashboardData7)
                {
                    if ((monthly == true) && (_solarData.month == _solarData3.month) && (_solarData.Site == _solarData3.Site))
                    {
                        _solarData.tarIR = _solarData3.tarIR;
                    }
                    else if ((monthly == false) && (_solarData.Date == _solarData3.Date) && (_solarData.Site == _solarData3.Site))
                    {
                        _solarData.tarIR = _solarData3.tarIR;
                    }
                }
            }
            int cnt = 0;
            foreach (SolarDashboardData _solarData in _SolarDashboardData8)
            {
            // _solarData.Date = _solarData.Date;//.ToString();
                if (monthly == true)
                {
                    cnt++;
                    current = _solarData.month;
                    if (cnt == 1)
                    {
                        last = current;
                    }
                    if (_SolarDashboardData8.IndexOf(_solarData) == _SolarDashboardData8.Count - 1)
                    {
                        total_capacity += _solarData.ac_capacity;
                        total_capActIR += _solarData.IR * _solarData.ac_capacity;
                        total_capTarIR += _solarData.tarIR * _solarData.ac_capacity;
                    }
                    if (current != last ||_SolarDashboardData8.IndexOf(_solarData) == _SolarDashboardData8.Count - 1)
                    {
                        //total_capacity += _solarData.ac_capacity;
                        //total_capActIR += _solarData.IR * _solarData.ac_capacity;
                        //total_capTarIR += _solarData.tarIR * _solarData.ac_capacity;

                        foreach (SolarDashboardData _solarData4 in data)
                        {
                            if (last == _solarData4.month )
                            {
                                _solarData4.tarIR = total_capTarIR / total_capacity;
                                _solarData4.IR = total_capActIR / total_capacity;
                            }
                        }
                        total_capacity = 0;
                        total_capActIR = 0;
                        total_capTarIR = 0;

                        if (_SolarDashboardData8.IndexOf(_solarData) != _SolarDashboardData8.Count - 1)
                        {
                            last = current;
                        }                       
                    }

                    total_capacity += _solarData.ac_capacity;
                    total_capActIR += _solarData.IR * _solarData.ac_capacity;
                    total_capTarIR += _solarData.tarIR * _solarData.ac_capacity;

                    if (current != last  && _SolarDashboardData8.IndexOf(_solarData) == _SolarDashboardData8.Count - 1)
                    {
                        last = current;
                        foreach (SolarDashboardData _solarData4 in data)
                        {
                            if (last == _solarData4.month)
                            {
                                _solarData4.tarIR = total_capTarIR / total_capacity;
                                _solarData4.IR = total_capActIR / total_capacity;
                            }
                        }
                    }
                }                
                else
                {
                    cnt++;
                    currentD = _solarData.Date;

                    if (cnt == 1)
                    {
                        lastD = currentD;
                    }
                    if (_SolarDashboardData8.IndexOf(_solarData) == _SolarDashboardData8.Count - 1)
                    {
                        total_capacity += _solarData.ac_capacity;
                        total_capActIR += _solarData.IR * _solarData.ac_capacity;
                        total_capTarIR += _solarData.tarIR * _solarData.ac_capacity;
                    }
                    if (currentD != lastD || _SolarDashboardData8.IndexOf(_solarData) == _SolarDashboardData8.Count - 1)
                    {
                        foreach (SolarDashboardData _solarData4 in data)
                        {
                            if (lastD == _solarData4.Date)
                            {
                                _solarData4.tarIR = total_capTarIR / total_capacity;
                                _solarData4.IR = total_capActIR / total_capacity;
                            }
                        }
                        total_capacity = 0;
                        total_capActIR = 0;
                        total_capTarIR = 0;

                        if (_SolarDashboardData8.IndexOf(_solarData) != _SolarDashboardData8.Count - 1)
                        {
                            lastD = currentD;
                        }
                    }

                    total_capacity += _solarData.ac_capacity;
                    total_capActIR += _solarData.IR * _solarData.ac_capacity;
                    total_capTarIR += _solarData.tarIR * _solarData.ac_capacity;

                    if (currentD != lastD && _SolarDashboardData8.IndexOf(_solarData) == _SolarDashboardData8.Count - 1)
                    {
                        lastD = currentD;
                        foreach (SolarDashboardData _solarData4 in data)
                        {
                            if (lastD == _solarData4.Date)
                            {
                                _solarData4.tarIR = total_capTarIR / total_capacity;
                                _solarData4.IR = total_capActIR / total_capacity;
                            }
                        }

                    }
                    }              
            }


            return data;

            /* string qry = @"select t1.date,sum(inv_kwh) as inv_kwh,avg(t1.poa) as IR,(t2.gen_nos * 1000000) as tarkwh, avg(t2.poa) as tarIR from daily_gen_summary_solar t1 left join daily_target_kpi_solar t2 on t2.sites = t1.site and t2.date = t1.date where " + filter + " group by t1.date order by t1.date asc";

             List<SolarDashboardData1> _SolarDashboardData = await Context.GetData<SolarDashboardData1>(qry).ConfigureAwait(false);
             return _SolarDashboardData;*/



        }
        internal async Task<List<SolarDashboardData>> GetSolarDashboardData_old_AdminApproval(string startDate, string endDate, string FY, string sites)
        {

            string filter = "(t1.date >= '" + startDate + "'  and t1.date<= '" + endDate + "')";
            if (!string.IsNullOrEmpty(sites) && sites != "All")
            {
                string[] siteSplit = sites.Split("~");
                if (siteSplit.Length > 0)
                {
                    string sitesnames = "";
                    for (int i = 0; i < siteSplit.Length; i++)
                    {
                        if (!string.IsNullOrEmpty(siteSplit[i]))
                        {
                            sitesnames += "'" + siteSplit[i] + "',";
                        }
                    }
                    sitesnames = sitesnames.TrimEnd(',');
                    filter += " and t1.site in(" + sitesnames + ")";
                }

            }

            string qry = @"select Date,month,Site,sum(inv_kwh) as inv_kwh,avg(IR) as IR,
  line_loss,sum(jmrkwh) as jmrkwh,
  tarkwh, avg(tarIR) as tarIR from tblsolardata t1 where  " + filter + " group by t1.Site,t1.date order by t1.date desc ;";


            return await Context.GetData<SolarDashboardData>(qry).ConfigureAwait(false);




        }


        internal async Task<List<SolarDashboardData>> GetSolarDashboardDataByLastDay(string FY, string sites, string date)
        {

            /* string filter = " t1.date='" + date + "' ";

             if (!string.IsNullOrEmpty(sites))
             {
                 filter += " and t1.site_id in(" + sites + ")";

             }

             string qry = @" select t1.date,month(t1.date)as month,t1.site,sum(inv_kwh) as inv_kwh,avg(t1.poa) as IR,
 replace(t2.lineloss,'%','')as line_loss,sum(inv_kwh)-(sum(inv_kwh) * replace(t2.LineLoss,'%','') /100) as jmrkwh,
 (t3.gen_nos*1000000) as tarkwh, avg(t3.poa) as tarIR from daily_gen_summary_solar t1 
 left join monthly_line_loss_solar t2 on t2.site=t1.site and t2.month=DATE_FORMAT(t1.date, '%b') and t2.fy='" + FY + "' left join daily_target_kpi_solar t3 on t3.sites=t1.site and t3.date=t1.date  where " + filter + "  group by t1.Site,t1.date order by t1.date desc ";

             // t3 on t3.sites=t1.site and t3.date=t1.date  where t1.approve_status=" + approve_status + " and " + filter + "  group by t1.Site,t1.date order by t1.date desc ";


             return await Context.GetData<SolarDashboardData>(qry).ConfigureAwait(false);*/
            string filter = " t1.date='" + date + "' ";

            if (!string.IsNullOrEmpty(sites))
            {
                filter += " and t1.site_id in(" + sites + ")";

            }
            string qry1 = "create or replace view temp_view5 as select t1.date,t1.site_id, t1.sites as Site , t1.poa, gen_nos from daily_target_kpi_solar t1, daily_gen_summary_solar t2 where t1.date = t2.date and t1.sites = t2.site and "
                + filter + " group by t1.date, t2.site_id;";

            try
            {
                await Context.ExecuteNonQry<int>(qry1).ConfigureAwait(false);
            }
            catch (Exception ex)
            {
                string msg = ex.Message;
            }
            string qry2 = "select Site, site_id, sum(gen_nos)*1000000 as tarkwh, sum(poa)/count(poa) as tarIR from temp_view5 group by Site";
            List<SolarDashboardData> tempdata = new List<SolarDashboardData>();
            tempdata = await Context.GetData<SolarDashboardData>(qry2).ConfigureAwait(false);

            /*string qry = @" select t1.date,month(t1.date)as month,t1.Site,sum(inv_kwh) as inv_kwh,avg(t1.poa) as IR,
replace(t2.lineloss,'%','')as line_loss,sum(inv_kwh)-(sum(inv_kwh) * replace(t2.LineLoss,'%','') /100) as jmrkwh,
(t3.gen_nos*1000000) as tarkwh, avg(t3.poa) as tarIR from daily_gen_summary_solar t1 
left join monthly_line_loss_solar t2 on t2.site_id=t1.site_id and t2.month_no=MONTH(t1.date) and t2.fy='" + FY + "' left join daily_target_kpi_solar t3 on t3.site_id=t1.site_id and t3.date=t1.date  where " + filter + "  group by t1.site_id,t1.date order by t1.date desc ";*/

            string qry = @" SELECT t1.date,MONTH(t1.date) as month, t1.site as Site,SUM(t1.inv_kwh) as inv_kwh,t2.LineLoss as line_loss,SUM(t1.inv_kwh) - SUM(t1.inv_kwh) * (t2.LineLoss / 100) as jmrkwh ,sum(t1.poa)/count(t1.poa) as IR FROM `daily_gen_summary_solar` as t1 left join monthly_line_loss_solar as t2 on t2.site_id = t1.site_id and month_no = MONTH(t1.date) and fy='" + FY + "' where " + filter + "  group by t1.site_id,t1.date order by t1.date desc ";


            List<SolarDashboardData> data = new List<SolarDashboardData>();
            data = await Context.GetData<SolarDashboardData>(qry).ConfigureAwait(false);

            string qry3= " select site, ac_capacity from site_master_solar group by site";
            List<SolarDashboardData> data3 = new List<SolarDashboardData>();
           data3 = await Context.GetData<SolarDashboardData>(qry3).ConfigureAwait(false);

            foreach (SolarDashboardData _dataelement in data)
            {
                foreach (SolarDashboardData _tempdataelement in tempdata)
                {
                    if (_dataelement.Site == _tempdataelement.Site)
                    {
                        _dataelement.tarkwh = _tempdataelement.tarkwh;
                        _dataelement.tarIR = _tempdataelement.tarIR;
                    }

                }
                foreach (SolarDashboardData _tempdataelement in data3)
                {
                    if (_dataelement.Site == _tempdataelement.Site)
                    {
                        _dataelement.ac_capacity = _tempdataelement.ac_capacity;
                    }

                }
            }
            return data;


        }

        internal async Task<List<SolarDashboardData>> GetSolarDashboardDataByCurrentMonth(string startDate, string endDate, string FY, string sites, string month)
        {

            string filter = "(t1.date >= '" + startDate + "'  and t1.date<= '" + endDate + "') and month(t1.date)=" + month + " ";
          //  string filter = "(t1.date >= '" + startDate + "'  and t1.date<= '" + endDate + "') ";

            string filter1 = " and (t1.date >= '" + startDate + "'  and t1.date<= '" + endDate + "') ";
            if (!string.IsNullOrEmpty(sites))
            {
                filter += " and t1.site_id in(" + sites + ") ";
                filter1 += " and t2.site_id in(" + sites + ") ";
            }

          /*  string qry1 = "create or replace view temp_view6 as select t1.date,t1.site_id, site, t1.poa, gen_nos from daily_target_kpi_solar t1, daily_gen_summary_solar t2 where t1.date = t2.date and t1.sites = t2.site"
                + filter1 + " group by t1.date, t2.site_id;";


            try
            {
                await Context.ExecuteNonQry<int>(qry1).ConfigureAwait(false);
            }
            catch (Exception ex)
            {
                string msg = ex.Message;
            }
            string qry2 = "select site, site_id, sum(gen_nos) as tarkwh, avg(poa) as tarIR from temp_view6 group by site, month(date);";
            List<SolarDashboardData> _SolarDashboardData2 = new List<SolarDashboardData>();
            _SolarDashboardData2 = await Context.GetData<SolarDashboardData>(qry2).ConfigureAwait(false);

           

            string qry3 = @" select t1.date,month(t1.date)as month,t1.site,sum(inv_kwh) as inv_kwh,avg(t1.poa) as IR,
replace(t2.lineloss,'%','')as lineLoss,sum(inv_kwh)-(sum(inv_kwh) * replace(t2.LineLoss,'%','') /100) as jmrkwh,
(t3.gen_nos*1000000) as tarkwh, avg(t3.poa) as tarIR from daily_gen_summary_solar t1 
left join monthly_line_loss_solar t2 on t2.site=t1.site and t2.month_no=month(t1.date) and t2.fy='" + FY + "' left join daily_target_kpi_solar t3 on t3.sites=t1.site and t3.date=t1.date  where   " + filter + "  group by t1.Site,month(t1.date) order by t1.date desc ";*/

            
           /* List<SolarDashboardData> _SolarDashboardData = new List<SolarDashboardData>();
            _SolarDashboardData = await Context.GetData<SolarDashboardData>(qry3).ConfigureAwait(false);

            foreach (SolarDashboardData _solarData in _SolarDashboardData)
            {
                foreach (SolarDashboardData _solarData2 in _SolarDashboardData2)
                {
                    if (_solarData.Site == _solarData2.Site)
                    {
                        _solarData.tarkwh = _solarData2.tarkwh * 1000000;
                        _solarData.tarIR = _solarData2.tarIR;
                    }
                }
            }
            return _SolarDashboardData;*/


           /* string groupby = "";
            string groupby1 = "";
            string selfilter = "";
            string filter = "(t1.date >= '" + startDate + "'  and t1.date<= '" + endDate + "')";
            if (!string.IsNullOrEmpty(sites))
            {
                filter += " and t1.site_id in(" + sites + ")";

            }
            if (monthly == true)
            {
                groupby = " MONTH(t1.date) ";
                groupby1 = " MONTH(date)";
                selfilter = "MONTH(date) as month";
            }
            else
            {
                groupby = " t1.date ";
                groupby1 = " date ";
                selfilter = "date as Date ";
            }*/
            string qry1 = "create or replace view temp_view6 as select t1.date,t1.site_id, t1.sites as site , t1.poa, gen_nos from daily_target_kpi_solar t1, daily_gen_summary_solar t2 where t1.date = t2.date and t1.sites = t2.site  "
                + filter1 + " group by t1.date, t2.site_id;";

            try
            {
                await Context.ExecuteNonQry<int>(qry1).ConfigureAwait(false);
            }
            catch (Exception ex)
            {
                string msg = ex.Message;
            }
            string qry2 = "select site, site_id, MONTH(date) as month ,sum(gen_nos)*1000000 as tarkwh, sum(poa)/count(poa) as tarIR from temp_view6 group by MONTH(date),site";
            List<SolarDashboardData> tempdata = new List<SolarDashboardData>();
            tempdata = await Context.GetData<SolarDashboardData>(qry2).ConfigureAwait(false);
            string qry = @" SELECT t1.date,MONTH(t1.date) as month, t1.site as site,SUM(t1.inv_kwh) as inv_kwh,t2.LineLoss as line_loss,SUM(t1.inv_kwh) - SUM(t1.inv_kwh)* (t2.LineLoss / 100) as jmrkwh ,sum(t1.poa)/count(t1.poa) as IR FROM `daily_gen_summary_solar` as t1 left join monthly_line_loss_solar as t2 on t2.site_id = t1.site_id and month_no = MONTH(t1.date) and fy='" + FY + "' where " + filter + "  group by  MONTH(t1.date),site  order by t1.date asc ";


            List<SolarDashboardData> data = new List<SolarDashboardData>();
            data = await Context.GetData<SolarDashboardData>(qry).ConfigureAwait(false);

            string qry3 = " select site, ac_capacity from site_master_solar group by site";
            List<SolarDashboardData> data3 = new List<SolarDashboardData>();
            data3 = await Context.GetData<SolarDashboardData>(qry3).ConfigureAwait(false);

            foreach (SolarDashboardData _dataelement in data)
            {
                foreach (SolarDashboardData _tempdataelement in tempdata)
                {

                    if (_dataelement.month == _tempdataelement.month && _dataelement.Site == _tempdataelement.Site)
                    {
                        _dataelement.tarkwh = _tempdataelement.tarkwh;
                        _dataelement.tarIR = _tempdataelement.tarIR;
                    }
                    

                }
                foreach (SolarDashboardData _tempdataelement in data3)
                {
                    if (_dataelement.Site == _tempdataelement.Site)
                    {
                        _dataelement.ac_capacity = _tempdataelement.ac_capacity;
                    }

                }
            }
            return data;


        }

        internal async Task<List<SolarDashboardData>> GetSolarDashboardDataByYearly(string startDate, string endDate, string FY, string sites)
        {

            string[] datebuild = startDate.Split("-");
            startDate = datebuild[2] + "-" + datebuild[1] + "-" + datebuild[0];
            string filter = "(t1.date >= '" + startDate + "'  and t1.date<= '" + endDate + "')  ";
            string filter1 = " and (t1.date >= '" + startDate + "'  and t1.date<= '" + endDate + "')  ";
            if (!string.IsNullOrEmpty(sites))
            {
                filter += " and t1.site_id in(" + sites + ")";
                filter1 += " and t2.site_id in(" + sites + ")";

            }
            /*string qry = @" select t1.date,month(t1.date)as month,t1.site,sum(inv_kwh) as inv_kwh,avg(t1.poa) as IR,
replace(t2.lineloss,'%','')as line_loss,sum(inv_kwh)-(sum(inv_kwh) * replace(t2.LineLoss,'%','') /100) as jmrkwh,
(t3.gen_nos*1000000) as tarkwh, avg(t3.poa) as tarIR from daily_gen_summary_solar t1 
left join monthly_line_loss_solar t2 on t2.site=t1.site and t2.month=DATE_FORMAT(t1.date, '%b') and t2.fy='" + FY + "' left join daily_target_kpi_solar t3 on t3.sites=t1.site and t3.date=t1.date  where  " + filter + "  group by t1.Site,month(t1.date),year(t1.date)  order by t1.date desc "; */
            //t3 on t3.sites=t1.site and t3.date=t1.date  where t1.approve_status=" + approve_status + " and " + filter + "  group by t1.Site,month(t1.date),year(t1.date)  order by t1.date desc ";

             string qry1 = "create or replace view temp_view_year_solar as select t1.date, t2.site_id, t1.sites, t1.gen_nos, t1.poa from daily_target_kpi_solar t1," +
                 "daily_gen_summary_solar t2 where t1.date = t2.date and t1.site_id = t2.site_id " + filter1 +
               "group by t1.date, t2.site_id ";
             try
             {
                 await Context.ExecuteNonQry<int>(qry1).ConfigureAwait(false);
             }
             catch (Exception e)
             {
                 string ex = e.Message;
             }
             string qry2 = " select month(date) as month, sites as Site, sum(gen_nos) as tarkwh, sum(poa)/count(poa) as tarIR from temp_view_year_solar group by site_id; ";
             List<SolarDashboardData> _SolarDashboardData2 = new List<SolarDashboardData>();
             _SolarDashboardData2 = await Context.GetData<SolarDashboardData>(qry2).ConfigureAwait(false);


            /* string qry = @" select t1.date,month(t1.date)as month,t1.site,sum(t1.inv_kwh) as inv_kwh,sum(t1.poa)/count(t1.poa) as IR,
 replace(t2.LineLoss,'%','') as linLoss,sum(t1.inv_kwh)-(sum(t1.inv_kwh) * replace(t2.LineLoss,'%','') /100) as jmrkwh,
 (t3.gen_nos*1000000) as tarkwh, sum(t3.poa)/count(t3.poa) as tarIR from daily_gen_summary_solar t1 
 left join monthly_line_loss_solar t2 on t2.site=t1.site and t2.month_no=month(t1.date) and t2.fy='" + FY + "' " +
             " left join daily_target_kpi_solar t3 on t3.sites=t1.site and t3.date=t1.date  where  " + filter +
             " group by year(t1.date) , t1.Site order by t1.date desc ";*/

            // yearly jmrkwh calculation issue 
           /*string qry = @" select t1.date,month(t1.date) as month,t1.site,sum(t1.inv_kwh) as inv_kwh,sum(t1.poa) / count(t1.poa) as IR,
 replace(t2.LineLoss, '%', '') as linLoss,sum(t1.inv_kwh) - (sum(t1.inv_kwh) * replace(t2.LineLoss, '%', '') / 100) as jmrkwh,
 (t3.gen_nos * 1000000) as tarkwh, sum(t3.poa) / count(t3.poa) as tarIR from daily_gen_summary_solar t1 left join monthly_line_loss_solar t2 on t2.fy = '" + FY + "' and t2.month_no = month(t1.date) and t2.site_id = t1.site_id left join daily_target_kpi_solar t3 on t3.date = t1.date and t3.site_id = t1.site_id  where "  + filter + " group by year(t1.date) , t1.Site order by t1.date desc ";*/

           //string qry = @"  SELECT t1.date,month(t1.date) as month, t1.site,sum(t1.inv_kwh) as inv_kwh, sum(t1.jmrkwh) as jmrkwh,AVG(t1.IR) as IR,tarkwh, tarIR FROM(SELECT t1.date, month(t1.date) as month, year(t1.date) as year, t1.site, sum(t1.inv_kwh) as inv_kwh, replace(t2.LineLoss, '%', '') as linLoss, sum(t1.inv_kwh) - (sum(t1.inv_kwh) * replace(t2.LineLoss, '%', '') / 100) as jmrkwh, sum(t1.poa) / count(t1.poa) as IR,(t3.gen_nos * 1000000) as tarkwh,sum(t3.poa) / count(t3.poa) as tarIR from daily_gen_summary_solar t1 left join monthly_line_loss_solar t2 on t2.fy = '" + FY + "' and t2.month_no = month(t1.date) and t2.site_id = t1.site_id left join daily_target_kpi_solar t3 on t3.date = t1.date and t3.site_id = t1.site_id  where " + filter + " group by t1.site, t1.date  order by t1.date asc) as t1 group by YEAR(t1.date),t1.site";

           // New Changes 01 Feb Ir Issue  
            string qry = @"  SELECT t1.date,month(t1.date) as month, t1.site,sum(t1.inv_kwh) as inv_kwh, sum(t1.jmrkwh) as jmrkwh,AVG(t1.IR) as IR,tarkwh, tarIR FROM(SELECT t1.date, month(t1.date) as month, year(t1.date) as year, t1.site, sum(t1.inv_kwh) as inv_kwh, replace(t2.LineLoss, '%', '') as linLoss, sum(t1.inv_kwh) - (sum(t1.inv_kwh) * replace(t2.LineLoss, '%', '') / 100) as jmrkwh, sum(t1.poa) / count(t1.poa) as IR,(t3.gen_nos * 1000000) as tarkwh,sum(t3.poa) / count(t3.poa) as tarIR from daily_gen_summary_solar t1 left join monthly_line_loss_solar t2 on t2.fy = '" + FY + "' and t2.month_no = month(t1.date) and t2.site_id = t1.site_id left join daily_target_kpi_solar t3 on t3.date = t1.date and t3.site_id = t1.site_id  where " + filter + " group by t1.site, t1.date  order by t1.date asc) as t1 group by t1.site";

            //t3 on t3.sites=t1.site and t3.date=t1.date  where t1.approve_status=" + approve_status + " and " + filter + "  group by t1.Site,month(t1.date),year(t1.date)  order by t1.date desc ";

            List<SolarDashboardData> _SolarDashboardData = new List<SolarDashboardData>();
             _SolarDashboardData = await Context.GetData<SolarDashboardData>(qry).ConfigureAwait(false);

            string qry3 = " select site, ac_capacity from site_master_solar group by site";
            List<SolarDashboardData> data3 = new List<SolarDashboardData>();
            data3 = await Context.GetData<SolarDashboardData>(qry3).ConfigureAwait(false);

             foreach (SolarDashboardData _solarData in _SolarDashboardData)
             {
                 foreach (SolarDashboardData _solarData2 in _SolarDashboardData2)
                 {
                    // if (_solarData.Site == _solarData2.Site && _solarData.year == _solarData2.year)
                        if (_solarData.Site == _solarData2.Site && _solarData.month == _solarData2.month)
                        {
                         _solarData.tarkwh = _solarData2.tarkwh * 1000000;
                         _solarData.tarIR = _solarData2.tarIR;
                     }
                 }
                foreach (SolarDashboardData _tempdataelement in data3)
                {
                    if (_solarData.Site == _tempdataelement.Site)
                    {
                        _solarData.ac_capacity = _tempdataelement.ac_capacity;
                    }

                }
            }

             return _SolarDashboardData;

            /*string qry1 = "create or replace view temp_view7 as select t1.date,t1.site_id, t1.sites as Site , t1.poa, gen_nos from daily_target_kpi_solar t1, daily_gen_summary_solar t2 where t1.date = t2.date and t1.sites = t2.site "
                + filter1 + " group by t1.date, t2.site_id;";

            try
            {
                await Context.ExecuteNonQry<int>(qry1).ConfigureAwait(false);
            }
            catch (Exception ex)
            {
                string msg = ex.Message;
            }
            string qry2 = "select Site, month(date) as month,site_id, sum(gen_nos)*1000000 as tarkwh, avg(poa) as tarIR from temp_view7 group by site_id, month(date), year(date)";
            List<SolarDashboardData> tempdata = new List<SolarDashboardData>();
            tempdata = await Context.GetData<SolarDashboardData>(qry2).ConfigureAwait(false);
            string qry = @" SELECT t1.date,MONTH(t1.date) as month, t1.site as Site,SUM(t1.inv_kwh) as inv_kwh,t2.LineLoss as line_loss,SUM(t1.inv_kwh) - SUM(t1.inv_kwh) * (t2.LineLoss / 100) as jmrkwh ,AVG(t1.poa) as IR FROM `daily_gen_summary_solar` as t1 left join monthly_line_loss_solar as t2 on t2.site_id = t1.site_id and month_no = MONTH(t1.date) and fy='"+ FY + "' where " + filter + "  group by month(t1.date) order by t1.date desc ";


            List<SolarDashboardData> data = new List<SolarDashboardData>();
            data = await Context.GetData<SolarDashboardData>(qry).ConfigureAwait(false);

            foreach (SolarDashboardData _dataelement in data)
            {
                foreach (SolarDashboardData _tempdataelement in tempdata)
                {
                    if (_dataelement.Site == _tempdataelement.Site && _dataelement.month == _tempdataelement.month)
                    {
                        _dataelement.tarkwh = _tempdataelement.tarkwh;
                        _dataelement.tarIR = _tempdataelement.tarIR;
                    }

                }
            }
            return data;*/

        }

        internal async Task<List<WindSiteMaster>> GetWindSiteMaster(string site)
        {
            string filter = "";
            if (!string.IsNullOrEmpty(site))
            {
                filter += " where site_master_id IN(" + site + ") ";
            }
            string qry = "Select * from site_master"+ filter+ " order by site";
            return await Context.GetData<WindSiteMaster>(qry).ConfigureAwait(false);

        }
        internal async Task<List<WindLocationMaster>> GetWindLocationMaster(string site)
        {
            string filter = "";
            if (!string.IsNullOrEmpty(site))
            {
                filter += " and site_master_id IN(" + site + ") ";
            }
            string qry = "Select * from location_master where status = 1 " + filter;

            return await Context.GetData<WindLocationMaster>(qry).ConfigureAwait(false);

        }
        internal async Task<List<SolarSiteMaster>> GetSolarSiteMaster( string site)
        {
            string filter = "";
            if (!string.IsNullOrEmpty(site))
            {
                filter += " where site_master_solar_id IN(" + site + ") ";
            }
            string qry = "Select * from site_master_solar" + filter + " order by site ";
            return await Context.GetData<SolarSiteMaster>(qry).ConfigureAwait(false);

        }
        internal async Task<List<SolarLocationMaster>> GetSolarLocationMasterBySite(string site)
        {
            string qry = "Select location_master_solar_id,country,site,eg,ig,icr_inv,icr,inv,smb,string as strings,string_configuration,total_string_current,total_string_voltage,modules_quantity,wp,capacity,module_make,module_model_no,    module_type,string_inv_central_inv from location_master_solar where site_id IN (" + site + ") and status = 1 order by site,eg,CAST(SUBSTRING(ig, 6) AS SIGNED),CAST(SUBSTRING(icr, 5) AS SIGNED),CAST(SUBSTRING(inv, 5) AS SIGNED),CAST(SUBSTRING(smb, 5) AS SIGNED),CAST(SUBSTRING(string, 3) AS SIGNED);";


            List<SolarLocationMaster> _SolarLocationMaster = new List<SolarLocationMaster>();
            _SolarLocationMaster = await Context.GetData<SolarLocationMaster>(qry).ConfigureAwait(false);
            return _SolarLocationMaster;
           // return await Context.GetData<SolarLocationMaster>("Select location_master_solar_id,country,site,eg,ig,icr_inv,icr,inv,smb,string as strings,string_configuration,total_string_current,total_string_voltage,modules_quantity,wp,capacity,module_make,module_model_no,    module_type from location_master_solar where site IN (" + site + ")").ConfigureAwait(false);

        }
        internal async Task<List<SolarLocationMaster>> GetSolarLocationMaster()
        {

            return await Context.GetData<SolarLocationMaster>("Select  location_master_solar_id,country,site,eg,ig,icr_inv,icr,inv,smb,string as strings,string_configuration,total_string_current,total_string_voltage,modules_quantity,wp,capacity,module_make,module_model_no,    module_type  from location_master_solar where status = 1 ").ConfigureAwait(false);

        }
        
        internal async Task<List<SolarLocationMaster>> GetSolarLocationMasterForFileUpload(string siteName)
        {

            return await Context.GetData<SolarLocationMaster>("Select  location_master_solar_id,country,site,eg,ig,icr_inv,icr,inv,smb,string as strings,string_configuration,total_string_current,total_string_voltage,modules_quantity,wp,capacity,module_make,module_model_no,    module_type  from location_master_solar where status = 1 AND site = '" + siteName + "'").ConfigureAwait(false);

        }
        internal async Task<List<WindDailyGenReports>> GetWindDailyGenerationReport(string fromDate, string toDate, string country, string state, string spv, string site, string wtg, string reportType)
        {

            string filter = " (date >= '" + fromDate + "'  and date<= '" + toDate + "') ";
            //string tmrFilter = "DATE(Time_stamp) >= '" + fromDate + "' AND DATE(Time_stamp) <= '" + toDate + "' ";
            string tmrFilter = "det.data_date >= '" + fromDate + "' AND det.data_data <= '" + toDate + "' ";
            if (!string.IsNullOrEmpty(site))
            {
                filter += "and site_master_id IN(" + site + ") ";
                tmrFilter += " AND det.site_id IN (" + site + ")";
            }
            else
            {
                if (!string.IsNullOrEmpty(state))
                {

                    string[] siteSplit = state.Split(",");
                    if (siteSplit.Length > 0)
                    {
                        string statenames = "";
                        for (int i = 0; i < siteSplit.Length; i++)
                        {
                            if (!string.IsNullOrEmpty(siteSplit[i]))
                            {
                                statenames += "'" + siteSplit[i] + "',";
                            }
                        }
                        statenames = statenames.TrimEnd(',');
                        //filter += " and site in(" + sitesnames + ")";

                        filter += " and t1.state IN(" + statenames + ") ";
                        tmrFilter += " AND sm.state IN(" + statenames + ") ";

                    }

                }
                if (!string.IsNullOrEmpty(spv) && spv != "All")
                {

                    string[] spvSplit = spv.Split(",");
                    if (spvSplit.Length > 0)
                    {
                        string spvnames = "";
                        for (int i = 0; i < spvSplit.Length; i++)
                        {
                            if (!string.IsNullOrEmpty(spvSplit[i]))
                            {
                                spvnames += "'" + spvSplit[i] + "',";
                            }
                        }
                        spvnames = spvnames.TrimEnd(',');
                        //filter += " and site in(" + sitesnames + ")";

                        filter += " and t2.spv IN(" + spvnames + ") ";
                        tmrFilter += " AND sm.spv IN(" + spvnames + ")";
                        //filter += " where state='" + state + "' and spv='" + spv + "'";
                    }

                }

            }
            if (!string.IsNullOrEmpty(wtg) && wtg != "All")
            {

                string[] wtgSplit = wtg.Split(",");
                if (wtgSplit.Length > 0)
                {
                    string wtgnames = "";
                    for (int i = 0; i < wtgSplit.Length; i++)
                    {
                        if (!string.IsNullOrEmpty(wtgSplit[i]))
                        {
                            wtgnames += "'" + wtgSplit[i] + "',";
                        }
                    }
                    wtgnames = wtgnames.TrimEnd(',');
                    //filter += " and site in(" + sitesnames + ")";

                    filter += " and t1.wtg IN(" + wtgnames + ") ";
                    //tmrFilter += " AND WTGs IN(" + wtgnames + ") AND( manual_bd != '' OR manual_bd IS NOT NULL)"; //changed all_bd -> manual_bd
                    tmrFilter += " AND det.wtg IN(" + wtgnames + ")"; //changed all_bd -> manual_bd
                    //filter += " where state='" + state + "' and spv='" + spv + "'";
                }

            }
            string groupBy = "";
            string join = "";

            if (reportType == "WTG")
            {
                filter += " group by t1.date, t1.wtg ";
                //tmrFilter += " GROUP BY date(Time_stamp), WTGs, manual_bd "; //changed all_bd -> manual_bd 
                groupBy = " det.wtg ";
                join = " tml.wtg = gen.wtg ";

            }
            if (reportType == "Site")
            {
                filter += " group by t1.date, t1.site ";
                //tmrFilter += " GROUP BY date(Time_stamp), site, manual_bd "; // changed all_bd -> manual_bd
                groupBy = " det.site ";
                join = " tml.site_id = gen.site_id ";

            }
            string qry = "";
            //qry = @"SELECT (date),t2.country,t1.state,t2.spv,t1.site,t2.capacity_mw ,t1.wtg,wind_speed,kwh,plf,ma_actual,ma_contractual,iga,ega,ega_b,ega_c,grid_hrs,lull_hrs,production_hrs ,unschedule_hrs,unschedule_num, schedule_hrs,schedule_num,others,others_num,igbdh,igbdh_num,egbdh,egbdh_num ,load_shedding,load_shedding_num FROM daily_gen_summary t1 left join site_master t2 on t1.site_id = t2.site_master_id where   " + filter;
            filter += " ORDER BY t1.site, t1.date, t1.wtg";
            //DATE_FORMAT(t1.date, '%d-%m-%Y') AS date
            //qry = "SELECT t1.date, t2.country, t1.state, t2.spv, t1.site, t2.capacity_mw, t1.wtg, t1.wind_speed, t1.kwh, t1.plf, t1.ma_actual, t1.ma_contractual, t1.iga, t1.ega, t1.ega_b, t1.ega_c, t1.grid_hrs, t1.lull_hrs, t1.production_hrs, t1.unschedule_hrs, t1.unschedule_num, t1.schedule_hrs, t1.schedule_num, t1.others, t1.others_num, t1.igbdh, t1.igbdh_num, t1.egbdh, t1.egbdh_num, t1.load_shedding, t1.load_shedding_num, (t1.unschedule_num + t1.schedule_num + t1.others_num + t1.igbdh_num + t1.egbdh_num + t1.load_shedding_num) AS total_hrs, COALESCE(usmh.loss, 0) AS usmh_loss, COALESCE(smh.loss, 0) AS smh_loss, COALESCE(others.loss, 0) AS others_loss, COALESCE(IGBDH.loss, 0) AS igbdh_loss, COALESCE(EGBDH.loss, 0) AS egbdh_loss, COALESCE(loadShedding.loss, 0) AS loadShedding_loss, (COALESCE(usmh.loss,0) + COALESCE(smh.loss,0) + COALESCE(others.loss, 0) + COALESCE(IGBDH.loss, 0) + COALESCE(EGBDH.loss, 0) + COALESCE(loadShedding.loss, 0)) AS total_loss FROM daily_gen_summary t1 LEFT JOIN site_master t2 ON t1.site_id = t2.site_master_id LEFT JOIN(SELECT t4.site, t5.spv as spv, t4.WTGs, t4.all_bd, SUM(t4.loss_kw) AS loss FROM `uploading_file_tmr_data` t4 LEFT JOIN site_master t5 ON t4.site_id = t5.site_master_id WHERE " + tmrFilter + ") AS usmh ON t1.site = usmh.site AND t1.wtg = usmh.WTGs AND usmh.all_bd = 'usmh' LEFT JOIN(SELECT t4.site, t5.spv as spv, t4.WTGs, t4.all_bd, SUM(t4.loss_kw) AS loss FROM `uploading_file_tmr_data` t4 LEFT JOIN site_master t5 ON t4.site_id = t5.site_master_id WHERE " + tmrFilter + ") AS smh ON t1.site = smh.site AND t1.wtg = smh.WTGs AND smh.all_bd = 'smh' LEFT JOIN(SELECT t4.site, t5.spv as spv, t4.WTGs, t4.all_bd, SUM(t4.loss_kw) AS loss FROM `uploading_file_tmr_data` t4 LEFT JOIN site_master t5 ON t4.site_id = t5.site_master_id WHERE " + tmrFilter + ") AS others ON t1.site = others.site AND t1.wtg = others.WTGs AND others.all_bd = 'Others' LEFT JOIN(SELECT t4.site, t5.spv as spv, t4.WTGs, t4.all_bd, SUM(t4.loss_kw) AS loss FROM `uploading_file_tmr_data` t4 LEFT JOIN site_master t5 ON t4.site_id = t5.site_master_id WHERE " + tmrFilter + ") AS IGBDH ON t1.site = IGBDH.site AND t1.wtg = IGBDH.WTGs AND IGBDH.all_bd = 'IGBDH' LEFT JOIN(SELECT t4.site, t5.spv as spv, t4.WTGs, t4.all_bd, SUM(t4.loss_kw) AS loss FROM `uploading_file_tmr_data` t4 LEFT JOIN site_master t5 ON t4.site_id = t5.site_master_id WHERE " + tmrFilter + ") AS EGBDH ON t1.site = EGBDH.site AND t1.wtg = IGBDH.WTGs AND EGBDH.all_bd = 'EGBDH' LEFT JOIN(SELECT t4.site, t5.spv as spv, t4.WTGs, t4.all_bd, SUM(t4.loss_kw) AS loss FROM `uploading_file_tmr_data` t4 LEFT JOIN site_master t5 ON t4.site_id = t5.site_master_id WHERE " + tmrFilter + ") AS loadShedding ON t1.site = loadShedding.site AND t1.wtg = loadShedding.WTGs AND loadShedding.all_bd = 'Load Shedding' WHERE " + filter;

            //qry = "select * from ( SELECT t1.date,t2.country,t1.state,t2.spv,t1.site,t2.capacity_mw ,t1.wtg,wind_speed,kwh,plf,ma_actual,ma_contractual,iga,ega,ega_b,ega_c,grid_hrs,lull_hrs,production_hrs ,unschedule_hrs,unschedule_num, schedule_hrs,schedule_num,others,others_num,igbdh,igbdh_num,egbdh,egbdh_num ,load_shedding,load_shedding_num FROM daily_gen_summary t1 left join site_master t2 on t1.site_id = t2.site_master_id where "+ filter + ") as gen left Join(select Time_stamp,site as tmlSite,WTGs, usmh_loss, smh_loss, others_loss, igbdh_loss, egbdh_loss, loadShedding_loss from(select Time_stamp, site_id, site, WTGs, sum(usmh_loss) as usmh_loss, sum(smh_loss) as smh_loss, sum(others_loss) as others_loss, sum(igbdh_loss) as igbdh_loss, sum(egbdh_loss) as egbdh_loss, sum(loadShedding_loss) as loadShedding_loss from(SELECT Time_stamp,site_id, sm.site, WTGs, CASE WHEN all_bd = 'USMH' THEN sum(loss_kw) ELSE 0 END AS usmh_loss, CASE WHEN all_bd = 'SMH' THEN sum(loss_kw) ELSE 0 END AS smh_loss, CASE WHEN all_bd = 'Others' THEN sum(loss_kw) ELSE 0 END AS others_loss, CASE WHEN all_bd = 'IGBDH' THEN sum(loss_kw) ELSE 0 END AS igbdh_loss, CASE WHEN all_bd = 'EGBDH' THEN sum(loss_kw) ELSE 0 END AS egbdh_loss, CASE WHEN all_bd = 'Load Shedding' THEN sum(loss_kw) ELSE 0 END AS loadShedding_loss FROM uploading_file_tmr_data left join site_master as sm on uploading_file_tmr_data.site_id = sm.site_master_id  where " + tmrFilter + " ) as tabletml group by date(Time_stamp), " + groupBy + ") as tml) as tml on  date(tml.Time_stamp) = gen.date and " + join +"; ";
            
            qry = "select * from ( SELECT t1.date,t2.country,t1.state,t2.spv,t1.site,t2.capacity_mw ,t1.wtg,wind_speed,kwh,plf,ma_actual,ma_contractual,iga,ega,ega_b,ega_c,grid_hrs,lull_hrs,production_hrs ,unschedule_hrs,unschedule_num, schedule_hrs,schedule_num,others,others_num,igbdh,igbdh_num,egbdh,egbdh_num ,load_shedding,load_shedding_num FROM daily_gen_summary t1 left join site_master t2 on t1.site_id = t2.site_master_id where "+ filter + ") as gen left Join(select Time_stamp,site as tmlSite,WTGs, usmh_loss, smh_loss, others_loss, igbdh_loss, egbdh_loss, loadShedding_loss from(select Time_stamp, site_id, site, WTGs, sum(usmh_loss) as usmh_loss, sum(smh_loss) as smh_loss, sum(others_loss) as others_loss, sum(igbdh_loss) as igbdh_loss, sum(egbdh_loss) as egbdh_loss, sum(loadShedding_loss) as loadShedding_loss from(SELECT Time_stamp,site_id, sm.site, WTGs, CASE WHEN manual_bd = 'USMH' THEN sum(loss_kw) ELSE 0 END AS usmh_loss, CASE WHEN manual_bd = 'SMH' THEN sum(loss_kw) ELSE 0 END AS smh_loss, CASE WHEN manual_bd = 'OthersHour' THEN sum(loss_kw) ELSE 0 END AS others_loss, CASE WHEN manual_bd = 'IGBD' THEN sum(loss_kw) ELSE 0 END AS igbdh_loss, CASE WHEN manual_bd = 'EGBD' THEN sum(loss_kw) ELSE 0 END AS egbdh_loss, CASE WHEN manual_bd = 'LoadShedding' THEN sum(loss_kw) ELSE 0 END AS loadShedding_loss FROM uploading_file_tmr_data left join site_master as sm on uploading_file_tmr_data.site_id = sm.site_master_id  where " + tmrFilter + " ) as tabletml group by date(Time_stamp), " + groupBy + ") as tml) as tml on  date(tml.Time_stamp) = gen.date and " + join +"; ";
            //qry = $"select gen.*, tml.usmh_loss, tml.smh_loss, tml.others_loss, tml.igbd_loss AS igbdh_loss, tml.egbd_loss AS egbdh_loss, tml.loadshedding_loss AS loadShedding_loss from ( SELECT t1.date,t2.country,t1.state,t2.spv,t1.site, t1.site_id,t2.capacity_mw ,t1.wtg, wind_speed, kwh, plf, ma_actual, ma_contractual, iga, ega, ega_b, ega_c, grid_hrs, lull_hrs, production_hrs, unschedule_hrs, unschedule_num, schedule_hrs, schedule_num, others, others_num, igbdh, igbdh_num, egbdh, egbdh_num, load_shedding, load_shedding_num FROM daily_gen_summary t1 LEFT JOIN site_master t2 on t1.site_id = t2.site_master_id WHERE {filter}) as gen LEFT JOIN(SELECT det.site_id, det.data_date, det.wtg_id, det.wtg, (det.usmh_loss +det.healthcheck_loss) AS usmh_loss, det.smh_loss, det.others_loss, det.igbd_loss, det.egbd_loss, det.loadshedding_loss, det.pcd_loss, det.lull_loss, det.nc_loss, det.setup_loss, det.initialization_loss, det.startup_loss FROM daily_expected_vs_actual AS det LEFT JOIN site_master AS sm ON det.site_id = sm.site_master_id  WHERE {tmrFilter} GROUP BY {groupBy}) as tml ON tml.data_date = gen.date and {join} and tml.site_id = gen.site_id; ";
            //DGR_v3 new daily basis table.
            qry = $@"SELECT
	gen.*,
    tml.usmh_loss,
    tml.smh_loss,
    tml.others_loss,
    tml.igbd_loss AS igbdh_loss,
    tml.egbd_loss AS egbdh_loss,
    tml.loadshedding_loss AS loadShedding_loss
FROM 
	(SELECT
     	t1.date,
     	t2.country,
     	t1.state,
     	t2.spv,
     	t1.site,
     	t1.site_id,
     	t2.capacity_mw,
     	t1.wtg,
     	wind_speed,
     	kwh,
     	plf,
     	ma_actual,
     	ma_contractual,
     	iga,
     	ega,
     	ega_b,
     	ega_c,
     	grid_hrs,
     	lull_hrs,
     	production_hrs,
     	unschedule_hrs,
     	unschedule_num,
     	schedule_hrs,
     	schedule_num,
     	others,
     	others_num,
     	igbdh,
     	igbdh_num,
     	egbdh,
     	egbdh_num,
     	load_shedding,
     	load_shedding_num
	FROM
     	daily_gen_summary t1
    LEFT JOIN 
     	site_master t2 on t1.site_id = t2.site_master_id 
    WHERE {filter}
    ) AS gen
LEFT JOIN
	(SELECT 
     	det.site_id,
     	det.data_date,
     	det.wtg_id,
     	det.wtg,
     	(det.usmh_loss + det.healthcheck_loss) AS usmh_loss,
     	det.smh_loss,
     	det.others_loss,
     	det.igbd_loss,
     	det.egbd_loss,
     	det.loadshedding_loss,
     	det.pcd_loss,
     	det.lull_loss,
     	det.nc_loss,
     	det.setup_loss,
     	det.initialization_loss,
     	det.startup_loss 
     FROM 
     	daily_expected_vs_actual det
     LEFT JOIN
     	site_master sm
     ON 
     	det.site_id = sm.site_master_id  
     WHERE 
     	det.data_date >= '{fromDate}' AND det.data_date <= '{toDate}' AND det.site_id IN({site}) GROUP BY {groupBy}
    ) as tml
ON tml.data_date = gen.date AND {join} AND tml.site_id = gen.site_id; ";

            List <WindDailyGenReports> _windDailyGenReports = new List<WindDailyGenReports>();
             _windDailyGenReports = await Context.GetData<WindDailyGenReports>(qry).ConfigureAwait(false);
            return _windDailyGenReports;
        }

        internal async Task<List<SolarDailyGenReports>> GetSolarDailyGenerationReport(string fromDate, string toDate, string country, string state, string spv, string site, string inv, string reportType)
        {

            string filter = " (date >= '" + fromDate + "'  and date<= '" + toDate + "') ";
            if (!string.IsNullOrEmpty(site))
            {
                filter += "and site_master_solar_id IN(" + site + ") ";
            }
            else
            {
                if (!string.IsNullOrEmpty(state))
                {

                    string[] siteSplit = state.Split(",");
                    if (siteSplit.Length > 0)
                    {
                        string statenames = "";
                        for (int i = 0; i < siteSplit.Length; i++)
                        {
                            if (!string.IsNullOrEmpty(siteSplit[i]))
                            {
                                statenames += "'" + siteSplit[i] + "',";
                            }
                        }
                        statenames = statenames.TrimEnd(',');
                        //filter += " and site in(" + sitesnames + ")";

                        filter += " and t1.state IN(" + statenames + ") ";
                    }

                }
                if (!string.IsNullOrEmpty(spv) && spv != "All")
                {

                    string[] spvSplit = spv.Split(",");
                    if (spvSplit.Length > 0)
                    {
                        string spvnames = "";
                        for (int i = 0; i < spvSplit.Length; i++)
                        {
                            if (!string.IsNullOrEmpty(spvSplit[i]))
                            {
                                spvnames += "'" + spvSplit[i] + "',";
                            }
                        }
                        spvnames = spvnames.TrimEnd(',');
                        //filter += " and site in(" + sitesnames + ")";

                        filter += " and spv IN(" + spvnames + ") ";
                        //filter += " where state='" + state + "' and spv='" + spv + "'";
                    }

                }

            }
            if (!string.IsNullOrEmpty(inv) && inv != "All")
            {

                string[] invSplit = inv.Split(",");
                if (invSplit.Length > 0)
                {
                    string invnames = "";
                    for (int i = 0; i < invSplit.Length; i++)
                    {
                        if (!string.IsNullOrEmpty(invSplit[i]))
                        {
                            invnames += "'" + invSplit[i] + "',";
                        }
                    }
                    invnames = invnames.TrimEnd(',');
                    //filter += " and site in(" + sitesnames + ")";

                    filter += " and location_name IN(" + invnames + ") ";
                    //filter += " where state='" + state + "' and spv='" + spv + "'";
                }

            }
            if (reportType == "INV")
            {
                filter += " group by location_name ";
            }
            if (reportType == "Site")
            {
                filter += " group by t1.site ";
            }
            /*string qry = @"SELECT date,t2.country,t1.state,t2.spv,t1.site, t1.location_name as Inverter,
                    dc_capacity, ac_capacity,
                    ghi, poa, expected_kwh, inv_kwh, plant_kwh, inv_pr, plant_pr,
                    inv_plf_ac as inv_plf, plant_plf_ac as plant_plf, ma as ma_actual ,iga,ega,prod_hrs,total_bd_hrs,usmh_bs,
                    smh_bd, oh_bd, igbdh_bd, egbdh_bd, load_shedding_bd, total_bd_hrs, usmh, smh, oh, igbdh, egbdh,
                    
                    load_shedding, total_losses FROM daily_gen_summary_solar t1 left join
                    site_master_solar t2 on t1.site_id = t2.site_master_solar_id
                    where   " + filter;*/

           string qry = @"SELECT date, t2.country,t1.state,t2.spv,t1.site, t3.inverter as Inverter, t3.dc_capacity, t3.ac_capacity, ghi, poa, expected_kwh, inv_kwh, plant_kwh, inv_pr, plant_pr, inv_plf_ac as inv_plf, plant_plf_ac as plant_plf, ma as ma_actual ,iga,ega,ega_b,ega_c,prod_hrs,total_bd_hrs,usmh_bs, smh_bd, oh_bd, igbdh_bd, egbdh_bd, load_shedding_bd, total_bd_hrs, usmh, smh, oh, igbdh, egbdh, load_shedding, total_losses FROM daily_gen_summary_solar t1 left join site_master_solar t2 on t1.site_id = t2.site_master_solar_id left join solar_ac_dc_capacity as t3 on t3.site_id = t1.site_id and t3.inverter=t1.location_name where " + filter + " ORDER BY t1.site, date";
            List<SolarDailyGenReports> _windDailyGenReports = new List<SolarDailyGenReports>();
            _windDailyGenReports = await Context.GetData<SolarDailyGenReports>(qry).ConfigureAwait(false);
            return _windDailyGenReports;
            /* string filter = "(t1.date >= '" + fromDate + "'  and t1.date<= '" + toDate + "')";

             string qry = @"SELECT year(date)as year,month(date)as month,date,t2.country,t1.state,t2.spv,t1.site,t2.capacity_mw
 ,t1.wtg,wind_speed,kwh,plf,ma_actual,ma_contractual,iga,ega,grid_hrs,lull_hrs
 ,unschedule_hrs,schedule_hrs,others,igbdh,egbdh,load_shedding	 FROM daily_gen_summary t1 left join
 site_master t2 on t1.site=t2.site 
 where   " + filter;

             //where t1.approve_status="+approve_status+" and " + filter;
             return await Context.GetData<WindDailyGenReports>(qry).ConfigureAwait(false);*/
        }

        internal async Task<List<WindDailyGenReports1>> GetWindDailyGenSummaryReport1(string fromDate, string toDate, string country, string state, string spv, string site, string wtg, string month)
        {


            /// Not Use
            string filter = "";
            int chkfilter = 0;
            if (!string.IsNullOrEmpty(fromDate) && fromDate != "All")
            {
                filter += "(t1.date >= '" + fromDate + "'  and t1.date<= '" + toDate + "')";
                chkfilter = 1;
            }
            if (!string.IsNullOrEmpty(country) && country != "All~")
            {
                if (chkfilter == 1) { filter += " and "; }
                string[] spcountry = country.Split("~");
                filter += "t2.country in (";
                string countrys = "";
                for (int i = 0; i < spcountry.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spcountry[i].ToString()))
                    {
                        countrys += "'" + spcountry[i].ToString() + "',";
                    }
                }
                filter += countrys.TrimEnd(',') + ")";
                chkfilter = 1;
            }
            if (!string.IsNullOrEmpty(state) && state != "All~")
            {
                if (chkfilter == 1) { filter += " and "; }
                // filter += "t1.state in (" + state + ")";
                string[] spstate = state.Split("~");
                filter += "t1.state in (";
                string states = "";
                for (int i = 0; i < spstate.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spstate[i].ToString()))
                    {
                        states += "'" + spstate[i].ToString() + "',";
                    }
                }
                filter += states.TrimEnd(',') + ")";

                chkfilter = 1;
            }
            if (!string.IsNullOrEmpty(spv) && spv != "All~")
            {
                if (chkfilter == 1) { filter += " and "; }
                // filter += "t2.spv in (" + spv + ")";
                string[] spspv = spv.Split("~");
                filter += "t2.spv in (";
                string spvs = "";
                for (int i = 0; i < spspv.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spspv[i].ToString()))
                    {
                        spvs += "'" + spspv[i].ToString() + "',";
                    }
                }
                filter += spvs.TrimEnd(',') + ")";

                chkfilter = 1;
            }
            if (!string.IsNullOrEmpty(site) && site != "All~")
            {
                if (chkfilter == 1) { filter += " and "; }
                // filter += "t1.site in (" + site + ")";
                string[] spsite = site.Split("~");
                filter += "t1.site in (";
                string sites = "";
                for (int i = 0; i < spsite.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spsite[i].ToString()))
                    {
                        sites += "'" + spsite[i].ToString() + "',";
                    }
                }
                filter += sites.TrimEnd(',') + ")";
                chkfilter = 1;
            }
            if (!string.IsNullOrEmpty(wtg) && wtg != "All~")
            {
                if (chkfilter == 1) { filter += " and "; }
                // filter += "t1.wtg in (" + wtg + ")";
                string[] spwtg = wtg.Split("~");
                filter += "t1.wtg in (";
                string wtgs = "";
                for (int i = 0; i < spwtg.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spwtg[i].ToString()))
                    {
                        wtgs += "'" + spwtg[i].ToString() + "',";
                    }
                }
                filter += wtgs.TrimEnd(',') + ")";
            }
            if (!string.IsNullOrEmpty(month) && month != "All~")
            {
                if (chkfilter == 1) { filter += " and "; }

                string[] spmonth = month.Split("~");
                filter += "month(date) in (";
                string months = "";
                for (int i = 0; i < spmonth.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spmonth[i].ToString()))
                    {
                        months += "" + spmonth[i].ToString() + ",";
                    }
                }
                filter += months.TrimEnd(',') + ")";
            }
            //  (t1.date >= '2021-12-01'  and t1.date <= '2021-12-02')
            //and t2.country in ('India')
            //and t1.state in('TS')
            //and t2.spv in ('CWP Ananthpur')
            //and t1.site in ('Zaheerabad')
            //and t1.wtg in('ZHB04')


            string qry = @"SELECT year(date)as year,month(date)as month,date,t2.country,t1.state,t2.spv,t1.site
            ,t1.wtg,wind_speed as wind_speed,kwh as kwh,plf as plf,ma_actual as ma_actual,ma_contractual as ma_contractual,iga as iga,ega as ega,ega_b as ega_b, ega_c as ega_c, production_hrs as grid_hrs,lull_hrs as lull_hrs
            ,unschedule_hrs as unschedule_hrs,schedule_hrs as schedule_hrs,others as others,igbdh as igbdh,egbdh as egbdh,load_shedding as load_shedding	 FROM daily_gen_summary t1 left join
            site_master t2 on t1.site=t2.site 
            where    " + filter + " group by t1.date, t1.state, t2.spv, t1.site, t1.wtg";

            // where  t1.approve_status="+approve_status+" and " + filter + " group by t1.date, t1.state, t2.spv, t1.site, t1.wtg";




            //string qry = "select * from view_getwinddailygensummaryreport1 where "+filter+ " group by t1.date, t1.state, t2.spv, t1.site, t1.wtg ";
            return await Context.GetData<WindDailyGenReports1>(qry).ConfigureAwait(false);

        }

        internal async Task<List<WindDailyGenReports2>> GetWindDailyGenSummaryReport2(string fromDate, string toDate, string country, string state, string spv, string site, string wtg, string month)
        {
            //sitewisewinddaily

            string filter = " (date >= '" + fromDate + "'  and date<= '" + toDate + "') and t2.country = '" + country + "' ";
            string tmrFilter = "det.data_date >= '" + fromDate + "' AND det.data_date <= '" + toDate + "' ";
            int chkfilter = 0;
            if (!string.IsNullOrEmpty(state))
            {

                string[] siteSplit = state.Split(",");
                if (siteSplit.Length > 0)
                {
                    string statenames = "";
                    for (int i = 0; i < siteSplit.Length; i++)
                    {
                        if (!string.IsNullOrEmpty(siteSplit[i]))
                        {
                            statenames += "'" + siteSplit[i] + "',";
                        }
                    }
                    statenames = statenames.TrimEnd(',');
                    //filter += " and site in(" + sitesnames + ")";

                    filter += " and t1.state IN(" + statenames + ") ";
                    tmrFilter += " AND sm.state IN(" + statenames + ")";

                }

            }
            if (!string.IsNullOrEmpty(spv) && spv != "All~")
            {

                string[] spvSplit = spv.Split(",");
                if (spvSplit.Length > 0)
                {
                    string spvnames = "";
                    for (int i = 0; i < spvSplit.Length; i++)
                    {
                        if (!string.IsNullOrEmpty(spvSplit[i]))
                        {
                            spvnames += "'" + spvSplit[i] + "',";
                        }
                    }
                    spvnames = spvnames.TrimEnd(',');
                    filter += "and t2.spv IN(" + spvnames + ") ";
                    tmrFilter += " AND sm.spv IN(" + spvnames + ")";
                }

            }
            if (!string.IsNullOrEmpty(site) && site != "All~")
            {

                filter += " and t1.site_id in (" + site + ")";
                tmrFilter += " AND det.site_id IN (" + site + ")";

                chkfilter = 1;
            }
            if (!string.IsNullOrEmpty(wtg) && wtg != "All~")
            {

                string[] wtgSplit = wtg.Split(",");
                if (wtgSplit.Length > 0)
                {
                    string wtgnames = "";
                    for (int i = 0; i < wtgSplit.Length; i++)
                    {
                        if (!string.IsNullOrEmpty(wtgSplit[i]))
                        {
                            wtgnames += "'" + wtgSplit[i] + "',";
                        }
                    }
                    wtgnames = wtgnames.TrimEnd(',');
                    filter += " and t1.wtg IN(" + wtgnames + ") ";
                    tmrFilter += " AND det.wtg IN(" + wtgnames + ") ";
                }
            }
            //if (!string.IsNullOrEmpty(month) && month != "All~")
            //{


            //    string[] spmonth = month.Split("~");
            //    filter += " and month(date) in (";
            //    tmrFilter += " and month(t4.date) in (";
            //    string months = "";
            //    for (int i = 0; i < spmonth.Length; i++)
            //    {
            //        if (!string.IsNullOrEmpty(spmonth[i].ToString()))
            //        {
            //            months += "" + spmonth[i].ToString() + ",";
            //        }
            //    }
            //    filter += months.TrimEnd(',') + ")";
            //    tmrFilter += months.TrimEnd(',') + ")";
            //}

            tmrFilter += " GROUP BY  det.data_date,det.site_id"; // all_bd -> manual_bd
            string qry = "";
            //qry = @"SELECT year(date)as year,DATE_FORMAT(date,'%M') as month,date,t2.country,t1.state,t2.spv,t1.site, t2.total_mw ,(sum(wind_speed)/count(*)) as wind_speed, sum(kwh) as kwh, (sum(plf)/count(*))as plf, (sum(ma_actual)/count(*))as ma_actual, (sum(ma_contractual)/count(*))as ma_contractual, (sum(iga)/count(*))as iga, (sum(ega)/count(*))as ega, (sum(ega_b)/count(*))as ega_b, (sum(ega_c)/count(*))as ega_c, sum(production_hrs)as grid_hrs, sum(lull_hrs)as lull_hrs, sum(unschedule_num) as unschedule_num, sum(schedule_num) as schedule_num, sum (others_num) as others_num, sum(igbdh_num) as igbdh_num, sum(egbdh_num) as egbdh_num, sum(load_shedding_num) as load_shedding_num	 FROM daily_gen_summary t1 left join site_master t2 on t1.site_id=t2.site_master_id where " + filter + " group by t1.date, t1.state, t2.spv, t1.site ";
            //qry = "SELECT year(t1.date)as year,DATE_FORMAT(t1.date,'%M') as month,t1.date,t2.country,t1.state,t2.spv,t1.site, t2.total_mw ,(sum(t1.wind_speed)/count(*)) as wind_speed, sum(t1.kwh) as kwh, (sum(t1.plf)/count(*))as plf, (sum(t1.ma_actual)/count(*))as ma_actual, (sum(t1.ma_contractual)/count(*))as ma_contractual, (sum(t1.iga)/count(*))as iga, (sum(t1.ega)/count(*))as ega, (sum(t1.ega_b)/count(*))as ega_b, (sum(t1.ega_c)/count(*))as ega_c, sum(t1.production_hrs)as grid_hrs, sum(t1.lull_hrs)as lull_hrs, sum(t1.unschedule_num) as unschedule_num, sum(t1.schedule_num) as schedule_num, sum(t1.others_num) as others_num, sum(t1.igbdh_num) as igbdh_num, sum(t1.egbdh_num) as egbdh_num, sum(t1.load_shedding_num) as load_shedding_num, (SUM(t1.unschedule_num) + SUM(t1.schedule_num) + SUM(t1.others_num) + SUM(t1.igbdh_num) + SUM(t1.egbdh_num) + SUM(t1.load_shedding_num)) AS total_hrs , COALESCE(usmh.loss, 0) AS usmh_loss, COALESCE(smh.loss, 0) AS smh_loss, COALESCE(others.loss, 0) AS others_loss, COALESCE(IGBDH.loss, 0) AS igbdh_loss, COALESCE(EGBDH.loss, 0) AS egbdh_loss, COALESCE(loadShedding.loss, 0) AS loadShedding_loss, (COALESCE(usmh.loss,0) + COALESCE(smh.loss,0) + COALESCE(others.loss, 0) + COALESCE(IGBDH.loss, 0) + COALESCE(EGBDH.loss, 0) + COALESCE(loadShedding.loss, 0)) AS total_loss FROM daily_gen_summary t1 left join site_master t2 on t1.site_id=t2.site_master_id LEFT JOIN (SELECT t4.site, t5.spv as spv, t4.WTGs, t4.all_bd, SUM(t4.loss_kw) AS loss FROM `uploading_file_tmr_data` t4 LEFT JOIN site_master t5 ON t4.site_id = t5.site_master_id WHERE " + tmrFilter + ") AS usmh ON t1.site = usmh.site AND usmh.all_bd = 'USMH' LEFT JOIN ( SELECT t4.site, t5.spv as spv, t4.WTGs, t4.all_bd, SUM(t4.loss_kw) AS loss FROM `uploading_file_tmr_data` t4 LEFT JOIN site_master t5 ON t4.site_id = t5.site_master_id WHERE " + tmrFilter + ") AS smh ON t1.site = smh.site AND smh.all_bd = 'SMH' LEFT JOIN ( SELECT t4.site, t5.spv as spv, t4.WTGs, t4.all_bd, SUM(t4.loss_kw) AS loss FROM `uploading_file_tmr_data` t4 LEFT JOIN site_master t5 ON t4.site_id = t5.site_master_id WHERE " + tmrFilter + ") AS others ON t1.site = others.site AND others.all_bd = 'Others' LEFT JOIN ( SELECT t4.site, t5.spv as spv, t4.WTGs, t4.all_bd, SUM(t4.loss_kw) AS loss FROM `uploading_file_tmr_data` t4 LEFT JOIN site_master t5 ON t4.site_id = t5.site_master_id WHERE " + tmrFilter + ") AS IGBDH ON t1.site = IGBDH.site AND IGBDH.all_bd = 'IGBDH' LEFT JOIN ( SELECT t4.site, t5.spv as spv, t4.WTGs, t4.all_bd, SUM(t4.loss_kw) AS loss FROM `uploading_file_tmr_data` t4 LEFT JOIN site_master t5 ON t4.site_id = t5.site_master_id WHERE " + tmrFilter + ") AS EGBDH ON t1.site = EGBDH.site AND EGBDH.all_bd = 'EGBDH' LEFT JOIN ( SELECT t4.site, t5.spv as spv, t4.WTGs, t4.all_bd, SUM(t4.loss_kw) AS loss FROM `uploading_file_tmr_data` t4 LEFT JOIN site_master t5 ON t4.site_id = t5.site_master_id WHERE " + tmrFilter + ") AS loadShedding ON t1.site = loadShedding.site AND loadShedding.all_bd = 'Load Shedding' WHERE " + filter + " group by t1.date, t1.state, t2.spv, t1.site ORDER BY t1.site, t1.date, t1.wtg;";

            //qry = "select * from (SELECT year(t1.date)as year,DATE_FORMAT(t1.date,'%M') as month,t1.date,t2.country,t1.state,t2.spv,t1.site, t2.total_mw ,(sum(t1.wind_speed)/count(*)) as wind_speed, sum(t1.kwh) as kwh, (sum(t1.plf)/count(*))as plf, (sum(t1.ma_actual)/count(*))as ma_actual, (sum(t1.ma_contractual)/count(*))as ma_contractual, (sum(t1.iga)/count(*))as iga, (sum(t1.ega)/count(*))as ega, (sum(t1.ega_b)/count(*))as ega_b, (sum(t1.ega_c)/count(*))as ega_c, sum(t1.production_hrs)as grid_hrs, sum(t1.lull_hrs)as lull_hrs, sum(t1.unschedule_num) as unschedule_num, sum(t1.schedule_num) as schedule_num, sum(t1.others_num) as others_num, sum(t1.igbdh_num) as igbdh_num, sum(t1.egbdh_num) as egbdh_num, sum(t1.load_shedding_num) as load_shedding_num, (SUM(t1.unschedule_num) + SUM(t1.schedule_num) + SUM(t1.others_num) + SUM(t1.igbdh_num) + SUM(t1.egbdh_num) + SUM(t1.load_shedding_num)) AS total_hrs  FROM daily_gen_summary t1 left join site_master t2 on t1.site_id = t2.site_master_id where " + filter + "  group by t1.state, t2.spv, t1.site ,t1.date ORDER BY t1.site, year, t1.wtg) as gen left Join (select Time_stamp, site as tmlSite, usmh_loss, smh_loss, others_loss, egbdh_loss, loadShedding_loss from(select Time_stamp,site_id, site, WTGs, sum(usmh_loss) as usmh_loss, sum(smh_loss) as smh_loss, sum(others_loss) as others_loss, sum(igbdh_loss) as igbdh_loss, sum(egbdh_loss) as egbdh_loss, sum(loadShedding_loss) as loadShedding_loss from(SELECT Time_stamp,site_id, sm.site, WTGs, CASE WHEN all_bd = 'USMH' THEN sum(loss_kw) ELSE 0 END AS usmh_loss, CASE WHEN all_bd = 'SMH' THEN sum(loss_kw) ELSE 0 END AS smh_loss, CASE WHEN all_bd = 'Others' THEN sum(loss_kw) ELSE 0 END AS others_loss, CASE WHEN all_bd = 'IGBDH' THEN sum(loss_kw) ELSE 0 END AS igbdh_loss, CASE WHEN all_bd = 'EGBDH' THEN sum(loss_kw) ELSE 0 END AS egbdh_loss, CASE WHEN all_bd = 'Load Shedding' THEN sum(loss_kw) ELSE 0 END AS loadShedding_loss FROM uploading_file_tmr_data left join site_master as sm on uploading_file_tmr_data.site_id = sm.site_master_id  where " + tmrFilter + ") as tabletml group by site ,date(Time_stamp)) as tml) as tml on tml.tmlSite = gen.site and date(tml.Time_stamp) = gen.date;";

            //qry = "select * from (SELECT year(t1.date)as year,DATE_FORMAT(t1.date,'%M') as month,t1.date,t2.country,t1.state,t2.spv,t1.site, t2.total_mw ,(sum(t1.wind_speed)/count(*)) as wind_speed, sum(t1.kwh) as kwh, (sum(t1.plf)/count(*))as plf, (sum(t1.ma_actual)/count(*))as ma_actual, (sum(t1.ma_contractual)/count(*))as ma_contractual, (sum(t1.iga)/count(*))as iga, (sum(t1.ega)/count(*))as ega, (sum(t1.ega_b)/count(*))as ega_b, (sum(t1.ega_c)/count(*))as ega_c, sum(t1.production_hrs)as grid_hrs, sum(t1.lull_hrs)as lull_hrs, sum(t1.unschedule_num) as unschedule_num, sum(t1.schedule_num) as schedule_num, sum(t1.others_num) as others_num, sum(t1.igbdh_num) as igbdh_num, sum(t1.egbdh_num) as egbdh_num, sum(t1.load_shedding_num) as load_shedding_num, (SUM(t1.unschedule_num) + SUM(t1.schedule_num) + SUM(t1.others_num) + SUM(t1.igbdh_num) + SUM(t1.egbdh_num) + SUM(t1.load_shedding_num)) AS total_hrs  FROM daily_gen_summary t1 left join site_master t2 on t1.site_id = t2.site_master_id where " + filter + "  group by t1.state, t2.spv, t1.site ,t1.date ORDER BY t1.date, t1.site) as gen left Join (select Time_stamp, site as tmlSite, usmh_loss, smh_loss, others_loss,igbdh_loss, egbdh_loss, loadShedding_loss from(select Time_stamp,site_id, site, WTGs, sum(usmh_loss) as usmh_loss, sum(smh_loss) as smh_loss, sum(others_loss) as others_loss, sum(igbdh_loss) as igbdh_loss, sum(egbdh_loss) as egbdh_loss, sum(loadShedding_loss) as loadShedding_loss from(SELECT Time_stamp,site_id, sm.site, WTGs, CASE WHEN manual_bd = 'USMH' THEN sum(loss_kw) ELSE 0 END AS usmh_loss, CASE WHEN manual_bd = 'SMH' THEN sum(loss_kw) ELSE 0 END AS smh_loss, CASE WHEN manual_bd = 'OthersHour' THEN sum(loss_kw) ELSE 0 END AS others_loss, CASE WHEN manual_bd = 'IGBD' THEN sum(loss_kw) ELSE 0 END AS igbdh_loss, CASE WHEN manual_bd = 'EGBD' THEN sum(loss_kw) ELSE 0 END AS egbdh_loss, CASE WHEN manual_bd = 'LoadShedding' THEN sum(loss_kw) ELSE 0 END AS loadShedding_loss FROM uploading_file_tmr_data left join site_master as sm on uploading_file_tmr_data.site_id = sm.site_master_id  where " + tmrFilter + ") as tabletml group by site ,date(Time_stamp)) as tml) as tml on tml.tmlSite = gen.site and date(tml.Time_stamp) = gen.date;";

            //DGR_v3 new daily basis table.
            qry = $@"SELECT gen.*, tml.usmh_loss, tml.smh_loss, tml.others_loss, tml.igbd_loss AS igbdh_loss, tml.egbd_loss AS egbdh_loss, tml.loadshedding_loss AS loadShedding_loss FROM 
(SELECT year(t1.date)as year,DATE_FORMAT(t1.date,'%M') as month,t1.date,t2.country,t1.state,t2.spv,t1.site,t1.site_id, t2.total_mw ,(sum(t1.wind_speed)/count(*)) as wind_speed, sum(t1.kwh) as kwh, (sum(t1.plf)/count(*))as plf, (sum(t1.ma_actual)/count(*))as ma_actual, (sum(t1.ma_contractual)/count(*))as ma_contractual, (sum(t1.iga)/count(*))as iga, (sum(t1.ega)/count(*))as ega, (sum(t1.ega_b)/count(*))as ega_b, (sum(t1.ega_c)/count(*))as ega_c, sum(t1.production_hrs)as grid_hrs, sum(t1.lull_hrs)as lull_hrs, sum(t1.unschedule_num) as unschedule_num, sum(t1.schedule_num) as schedule_num, sum(t1.others_num) as others_num, sum(t1.igbdh_num) as igbdh_num, sum(t1.egbdh_num) as egbdh_num, sum(t1.load_shedding_num) as load_shedding_num, (SUM(t1.unschedule_num) + SUM(t1.schedule_num) + SUM(t1.others_num) + SUM(t1.igbdh_num) + SUM(t1.egbdh_num) + SUM(t1.load_shedding_num)) AS total_hrs  FROM daily_gen_summary t1 left join site_master t2 on t1.site_id = t2.site_master_id where {filter} group by t1.state, t2.spv, t1.site ,t1.date ORDER BY t1.date, t1.site) as gen 
LEFT JOIN (SELECT det.site_id AS site_id, det.data_date AS data_date, (SUM(det.usmh_loss) + SUM(det.healthcheck_loss)) AS usmh_loss, SUM(det.smh_loss) AS smh_loss, SUM(det.others_loss) AS others_loss, SUM(det.igbd_loss) AS igbd_loss, SUM(det.egbd_loss) AS egbd_loss, SUM(det.loadshedding_loss) AS loadshedding_loss FROM daily_expected_vs_actual det LEFT JOIN site_master sm ON det.site_id = sm.site_master_id WHERE {tmrFilter}) AS tml on tml.site_id = gen.site_id and tml.data_date = gen.date;";


            //where  t1.approve_status="+approve_status+" and " + filter + " group by t1.date, t1.state, t2.spv, t1.site ";

            return await Context.GetData<WindDailyGenReports2>(qry).ConfigureAwait(false);

        }

        internal async Task<List<SolarDailyGenReports2>> GetSolarDailyGenSummaryReport2(string fromDate, string toDate, string country, string state, string spv, string site, string inv, string month)
        {
            //sitewisewinddaily

            string filter = " (t1.date >= '" + fromDate + "'  and t1.date<= '" + toDate + "') ";
            string trackerFilter = " t1.date >= '" + fromDate + "' AND t1.date <= '" + toDate + "' ";
            if (!string.IsNullOrEmpty(state))
            {

                string[] siteSplit = state.Split(",");
                if (siteSplit.Length > 0)
                {
                    string statenames = "";
                    for (int i = 0; i < siteSplit.Length; i++)
                    {
                        if (!string.IsNullOrEmpty(siteSplit[i]))
                        {
                            statenames += "'" + siteSplit[i] + "',";
                        }
                    }
                    statenames = statenames.TrimEnd(',');
                    //filter += " and site in(" + sitesnames + ")";

                    filter += " and t1.state IN(" + statenames + ") ";
                    trackerFilter += " AND t2.state IN(" + statenames + ") ";
                }
            }
            if (!string.IsNullOrEmpty(spv) && spv != "All~")
            {
                string[] spvSplit = spv.Split(",");
                if (spvSplit.Length > 0)
                {
                    string spvnames = "";
                    for (int i = 0; i < spvSplit.Length; i++)
                    {
                        if (!string.IsNullOrEmpty(spvSplit[i]))
                        {
                            spvnames += "'" + spvSplit[i] + "',";
                        }
                    }
                    spvnames = spvnames.TrimEnd(',');
                    filter += " and t2.spv IN(" + spvnames + ") ";
                    trackerFilter += " AND t2.spv IN(" + spvnames + ") ";
                }
            }
            if (!string.IsNullOrEmpty(site) && site != "All~")
            {
                filter += " and site_master_solar_id in (" + site + ")";
                trackerFilter += " AND t1.site_id IN(" + site + ") ";
            }
            if (!string.IsNullOrEmpty(inv) && inv != "All~")
            {
                string[] invSplit = inv.Split(",");
                if (invSplit.Length > 0)
                {
                    string invnames = "";
                    for (int i = 0; i < invSplit.Length; i++)
                    {
                        if (!string.IsNullOrEmpty(invSplit[i]))
                        {
                            invnames += "'" + invSplit[i] + "',";
                        }
                    }
                    invnames = invnames.TrimEnd(',');
                    filter += " and location_name IN(" + invnames + ") ";
                    //trackerFilter += " AND t1.site_id IN(" + site + ") ";

                }
            }
            if (!string.IsNullOrEmpty(month) && month != "All~")
            {
                string[] spmonth = month.Split("~");
                filter += " and month(date) in (";
                string months = "";
                for (int i = 0; i < spmonth.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spmonth[i].ToString()))
                    {
                        months += "" + spmonth[i].ToString() + ",";
                    }
                }
                filter += months.TrimEnd(',') + ")";
                trackerFilter += " AND month(date) IN(" + months.TrimEnd(',') + ") ";
            }

            //string qry = @"SELECT year(t1.date)as year,DATE_FORMAT(t1.date,'%M') as month,t1.date,t2.country,t1.state,t2.spv,t1.site, t2.dc_capacity, t2.ac_capacity, sum(t1.expected_kwh) as expected_kwh, sum(t1.ghi)/count(t1.ghi) as ghi, sum(t1.poa)/count(t1.poa) as poa, sum(t1.inv_kwh) as inv_kwh, sum(t1.plant_kwh) as plant_kwh, sum(t1.inv_pr)/count(t1.inv_pr) as inv_pr, sum(t1.plant_pr)/count(t1.plant_pr) as plant_pr, (sum(t1.inv_plf_ac)/count(t1.inv_plf_ac))as inv_plf, (sum(t1.plant_plf_ac)/count(t1.plant_plf_ac))as plant_plf, (sum(t1.ma)/count(*))as ma_actual, (sum(t1.iga)/count(*))as iga, (sum(t1.ega)/count(*))as ega, (sum(t1.ega_b)/count(*))as ega_b, (sum(t1.ega_c)/count(*))as ega_c, sum(t1.prod_hrs)as prod_hrs, sum(t1.lull_hrs_bd)as lull_hrs_bd, sum(t1.usmh_bs)as usmh_bs, sum(t1.smh_bd)as smh_bd, sum(t1.oh_bd) as oh_bd, sum(t1.igbdh_bd) as igbdh_bd, sum(t1.egbdh_bd)as egbdh_bd, sum(t1.load_shedding_bd)as load_shedding_bd, sum(t1.total_bd_hrs)as total_bd_hrs, sum(t1.usmh)as usmh, sum(t1.smh)as smh, sum(t1.oh)as oh, sum(t1.igbdh)as igbdh, sum(t1.egbdh)as egbdh, sum(t1.load_shedding)as load_shedding, sum(t3.tracker_loss) as tracker_losses, (sum(t1.total_losses) + tracker_loss) as total_losses FROM daily_gen_summary_solar t1 left join site_master_solar t2 on t1.site_id=t2.site_master_solar_id LEFT JOIN uploading_file_tracker_loss t3 ON t1.site_id = t3.site_id where " + filter + " group by t1.date, t1.state, t2.spv, t1.site ";
			string qry = @"SELECT year(t1.date)as year,DATE_FORMAT(t1.date,'%M') as month,t1.date,t2.country,t1.state,t2.spv,t1.site, t2.dc_capacity, t2.ac_capacity, sum(t1.expected_kwh) as expected_kwh, sum(t1.ghi)/count(t1.ghi) as ghi, sum(t1.poa)/count(t1.poa) as poa, sum(t1.inv_kwh) as inv_kwh, sum(t1.plant_kwh) as plant_kwh, sum(CASE WHEN t1.inv_pr >= 60 and t1.inv_pr <= 90 THEN t1.inv_pr END)/count(CASE WHEN t1.inv_pr >= 60 and t1.inv_pr <= 90 THEN t1.inv_pr END) as inv_pr, sum(CASE WHEN t1.plant_pr >= 60 and t1.plant_pr <= 90 THEN t1.plant_pr END)/count(CASE WHEN t1.plant_pr >= 60 and t1.plant_pr <= 90 THEN t1.plant_pr END) as plant_pr, (sum(t1.inv_plf_ac)/count(t1.inv_plf_ac))as inv_plf, (sum(t1.plant_plf_ac)/count(t1.plant_plf_ac))as plant_plf, (sum(t1.ma)/count(*))as ma_actual, (sum(t1.iga)/count(*))as iga, (sum(t1.ega)/count(*))as ega, (sum(t1.ega_b)/count(*))as ega_b, (sum(t1.ega_c)/count(*))as ega_c, sum(t1.prod_hrs)as prod_hrs, sum(t1.lull_hrs_bd)as lull_hrs_bd, sum(t1.usmh_bs)as usmh_bs, sum(t1.smh_bd)as smh_bd, sum(t1.oh_bd) as oh_bd, sum(t1.igbdh_bd) as igbdh_bd, sum(t1.egbdh_bd)as egbdh_bd, sum(t1.load_shedding_bd)as load_shedding_bd, sum(t1.total_bd_hrs)as total_bd_hrs, sum(t1.usmh)as usmh, sum(t1.smh)as smh, sum(t1.oh)as oh, sum(t1.igbdh)as igbdh, sum(t1.egbdh)as egbdh, sum(t1.load_shedding)as load_shedding, sum(t1.total_losses) as total_losses FROM daily_gen_summary_solar t1 left join site_master_solar t2 on t1.site_id=t2.site_master_solar_id where " + filter + " group by t1.date, t1.state, t2.spv, t1.site  ORDER BY t1.date, t1.site";


            //where  t1.approve_status="+approve_status+" and " + filter + " group by t1.date, t1.state, t2.spv, t1.site ";
            List<SolarDailyGenReports2> _solarDailyGenReport = new List<SolarDailyGenReports2>();
            string functionName = "GetSolarDailyGenSummaryReport2";

            try
            {
                _solarDailyGenReport = await Context.GetData<SolarDailyGenReports2>(qry).ConfigureAwait(false);
            }
            catch(Exception e)
            {
                string msg = "Exception while fetching records from daily_gen_summary_solar and site_master_solar tables, due to : " + e.ToString();
                ////API_ErrorLog(msg);
                LogError(0,1,5, functionName, msg, backend);
            }

            if(_solarDailyGenReport.Count > 0)
            {
                //SELECT t1.site, t1.site_id, t2.country, t2.doc, t2.spv, t2.state, t1.date, SUM(t1.tracker_loss) AS tracker_losses FROM `uploading_file_tracker_loss` t1 LEFT JOIN site_master_solar t2 ON t1.site_id = t2.site_master_solar_id WHERE t1.date >= "2023-05-04" AND t1.date = "2023-05-04" AND t1.site_id IN(11) GROUP BY t1.site_id;
                string trackerQry = "SELECT t1.date, t1.site, SUM(t1.tracker_loss) AS tracker_losses, t2.state FROM uploading_file_tracker_loss t1 LEFT JOIN site_master_solar t2 ON t1.site_id = t2.site_master_solar_id WHERE " + trackerFilter + " GROUP BY t1.date, t1.site_id ";
                List<SolarDailyGenReports2> _trackerData = new List<SolarDailyGenReports2>();
                try
                {
                    _trackerData = await Context.GetData<SolarDailyGenReports2>(trackerQry).ConfigureAwait(false);
                }
                catch(Exception e)
                {
                    string msg = "Exception while fetching records from uploading_file_tracker_loss table, due to : " + e.ToString();
                    //API_ErrorLog(msg);
                    LogError(0, 1, 5, functionName, msg, backend);
                }

                foreach (var data in _solarDailyGenReport)
                {
                    foreach (var trackerData in _trackerData)
                    {
                        if (data.site == trackerData.site && data.date == trackerData.date)
                        {
                            data.tracker_losses = trackerData.tracker_losses;
                            data.total_losses = data.total_losses;// + data.tracker_losses;
                            //data.total_losses = data.total_losses + data.tracker_losses;
                        }
                    }
                }

            }

            return _solarDailyGenReport;

        }

        //  GetWindMonthlyYearlyGenSummaryReport1 Function name Renamed
        internal async Task<List<WindDailyGenReports1>> GetWindMonthlyGenerationReport(string fy, string month, string country, string state, string spv, string site, string wtg, string reportType)
        {

            string filter = "";
            string tmrFilter = "";
            int chkfilter = 0;
            if((!string.IsNullOrEmpty(spv) && spv != "All~") || (!string.IsNullOrEmpty(site) && site != "All~") || (!string.IsNullOrEmpty(month) && !string.IsNullOrEmpty(fy)) || (!string.IsNullOrEmpty(state) && state != "All~") || (!string.IsNullOrEmpty(wtg) && wtg != "All~"))
            {
               filter += " WHERE ";
                tmrFilter += " WHERE ";
            }
            if (!string.IsNullOrEmpty(site) && site != "All~")
            {
                if (chkfilter == 1) 
                { 
                    filter += " and ";
                    tmrFilter += " AND ";
                }
                // filter += "t1.site in (" + site + ")";
                string[] spsite = site.Split(",");
                filter += " t1.site_id in (";
                string sites = "";
                for (int i = 0; i < spsite.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spsite[i].ToString()))
                    {
                        sites += spsite[i].ToString() + ",";
                    }
                }
                filter += sites.TrimEnd(',') + ")";
                tmrFilter += " det.site_id IN(" + sites.TrimEnd(',') + ")";
                chkfilter = 1;
            }
            
            if (!string.IsNullOrEmpty(month) && !string.IsNullOrEmpty(fy))
            {
                if (chkfilter == 1) 
                { 
                    filter += " AND ";
                    tmrFilter += " AND ";
                }
                filter += " (";
                tmrFilter += " (";

                string[] spmonth = month.Split(",");
                string months = "";

                for (int i = 0; i < spmonth.Length; i++)
                {
                    if (i > 0)
                    {
                        filter += " or ";
                        tmrFilter += " OR ";
                    }
                    int monthno = Int32.Parse(spmonth[i]);
                    string year = (Int32.Parse(fy) + 1).ToString();
                    string Qyear = (monthno > 3) ? fy : year;
                    filter += "( month(date) = " + spmonth[i] + " and year(date) = '" + Qyear + "' )";
                    tmrFilter += " (MONTH(data_date) = " + spmonth[i] + " AND YEAR(data_date) = " + Qyear + ") ";
                }
                filter += ") ";
                tmrFilter += ") ";
                chkfilter = 1;
            }
            else if (!string.IsNullOrEmpty(month))
            {
                if (chkfilter == 1)
                {
                    filter += " AND ";
                    tmrFilter += " AND ";
                }
                filter += " month(date) in ( " + month + " )";
                tmrFilter += " MONTH(data_date) IN(" + month + ")";
                chkfilter = 1;
            }
            if (!string.IsNullOrEmpty(state) && state != "All~")
            {
                if (chkfilter == 1) 
                { 
                    filter += " and ";
                    tmrFilter += " AND ";

                }
                // filter += "t1.state in (" + state + ")";
                string[] spstate = state.Split(",");
                filter += " t1.state in (";
                tmrFilter += " sm.state in (";
                string states = "";
                for (int i = 0; i < spstate.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spstate[i].ToString()))
                    {
                        states += "'" + spstate[i].ToString() + "',";
                    }
                }
                filter += states.TrimEnd(',') + ")";
                tmrFilter += states.TrimEnd(',') + ")";

                chkfilter = 1;
            }
            if (!string.IsNullOrEmpty(spv) && spv != "All~")
            {
                if (chkfilter == 1) 
                {
                    filter += " and ";
                    tmrFilter += " AND ";
                }
                // filter += "t2.spv in (" + spv + ")";
                string[] spspv = spv.Split(",");
                filter += " t2.spv in (";
                string spvs = "";
                for (int i = 0; i < spspv.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spspv[i].ToString()))
                    {
                        spvs += "'" + spspv[i].ToString() + "',";
                    }
                }
                filter += spvs.TrimEnd(',') + ")";
                tmrFilter += " sm.spv IN(" + spvs.TrimEnd(',') + ")";
                chkfilter = 1;
            }
            if (!string.IsNullOrEmpty(wtg) && wtg != "All~")
            {
                if (chkfilter == 1) 
                { 
                    filter += " and ";
                    tmrFilter += " AND ";
                }
                // filter += "t1.wtg in (" + wtg + ")";
                string[] spwtg = wtg.Split(",");
                filter += "t1.wtg in (";
                string wtgs = "";
                for (int i = 0; i < spwtg.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spwtg[i].ToString()))
                    {
                        wtgs += "'" + spwtg[i].ToString() + "',";
                    }
                }
                filter += wtgs.TrimEnd(',') + ")";
                tmrFilter += " det.wtg IN(" + wtgs.TrimEnd(',') + ")";
            }

            //            string qry = @"SELECT year(date)as year,DATE_FORMAT(date,'%M') as month,date,t2.country,t1.state,t2.spv,t1.site,
            //t1.wtg
            //,(sum(wind_speed)/count(*))as wind_speed,
            //sum(kwh) as kwh,
            //(sum(plf)/count(*))as plf,
            //(sum(ma_actual)/count(*))as ma_actual,
            //(sum(ma_contractual)/count(*))as ma_contractual,
            //(sum(iga)/count(*))as iga,
            //(sum(ega)/count(*))as ega,
            //sum(production_hrs)as grid_hrs,
            //sum(lull_hrs)as lull_hrs
            //,sum(unschedule_hrs)as unschedule_hrs,
            //sum(schedule_hrs)as schedule_hrs,
            //sum(others) as others,
            //sum(igbdh)as igbdh,
            //sum(egbdh)as egbdh,
            //sum(load_shedding)as load_shedding	 FROM daily_gen_summary t1 left join
            //site_master t2 on t1.site=t2.site 
            //where   " + filter + " group by t1.state, t2.spv, t1.wtg , month(t1.date)";
            //string qry = @"SELECT year(t1.date)as year,DATE_FORMAT(t1.date,'%M') as month,CONCAT(Year(t1.date),'-',DATE_FORMAT(t1.date,'%M'),'-','01'),t2.country,t1.state,t2.spv,t1.site,
            //string qry = ""; 
            
            //qry = @"SELECT year(t1.date)as year,DATE_FORMAT(t1.date,'%M') as month,t2.country,t1.state,t2.spv,t1.site, t1.wtg ,(sum(wind_speed)/count(*))as wind_speed, sum(kwh) as kwh, (sum(plf)/count(*))as plf, (sum(ma_actual)/count(*))as ma_actual, (sum(ma_contractual)/count(*))as ma_contractual, (sum(iga)/count(*))as iga, (sum(ega)/count(*))as ega, (sum(ega_b)/count(*))as ega_b, (sum(ega_c)/count(*))as ega_c,  sum(production_hrs)as grid_hrs, sum(lull_hrs)as lull_hrs ,sum(unschedule_num) as unschedule_hrs, sum(schedule_num) as schedule_hrs, sum(others_num) as others, sum(igbdh_num) as igbdh, sum(egbdh_num) as egbdh, sum(load_shedding_num) as load_shedding FROM daily_gen_summary t1 left join  site_master t2 on t1.site_id=t2.site_master_id " + filter + " group by t1.state, t2.spv, t1.wtg, month(t1.date)";
           
            //qry = "SELECT year(t1.date)as year,DATE_FORMAT(t1.date,'%M') as month, DATE_FORMAT(t1.date,'%m') as month_no,t2.country,t1.state,t2.spv,t1.site, t1.wtg ,(sum(wind_speed)/count(*))as wind_speed, sum(kwh) as kwh, (sum(plf)/count(*))as plf, (sum(ma_actual)/count(*))as ma_actual, (sum(ma_contractual)/count(*))as ma_contractual, (sum(iga)/count(*))as iga, (sum(ega)/count(*))as ega, (sum(ega_b)/count(*))as ega_b, (sum(ega_c)/count(*))as ega_c,  sum(production_hrs)as grid_hrs, sum(lull_hrs)as lull_hrs ,sum(unschedule_num) as unschedule_hrs, sum(schedule_num) as schedule_hrs, sum(others_num) as others, sum(igbdh_num) as igbdh, sum(egbdh_num) as egbdh, sum(load_shedding_num) as load_shedding, (SUM(t1.unschedule_num) + SUM(t1.schedule_num) + SUM(t1.others_num) + SUM(t1.igbdh_num) + SUM(t1.egbdh_num) + SUM(t1.load_shedding_num)) AS total_hrs, COALESCE(usmh.loss, 0) AS usmh_loss, COALESCE(smh.loss, 0) AS smh_loss, COALESCE(others.loss, 0) AS others_loss, COALESCE(IGBDH.loss, 0) AS igbdh_loss, COALESCE(EGBDH.loss, 0) AS egbdh_loss, COALESCE(loadShedding.loss, 0) AS loadShedding_loss, (COALESCE(usmh.loss,0) + COALESCE(smh.loss,0) + COALESCE(others.loss, 0) + COALESCE(IGBDH.loss, 0) + COALESCE(EGBDH.loss, 0) + COALESCE(loadShedding.loss, 0)) AS total_loss FROM daily_gen_summary t1 left join site_master t2 on t1.site_id = t2.site_master_id LEFT JOIN(SELECT t4.site, t5.spv as spv, t4.WTGs, t4.all_bd, SUM(t4.loss_kw) AS loss FROM `uploading_file_tmr_data` t4 LEFT JOIN site_master t5 ON t4.site_id = t5.site_master_id  " + tmrFilter + ") AS usmh ON t1.site = usmh.site AND usmh.all_bd = 'USMH' LEFT JOIN(SELECT t4.site, t5.spv as spv, t4.WTGs, t4.all_bd, SUM(t4.loss_kw) AS loss FROM `uploading_file_tmr_data` t4 LEFT JOIN site_master t5 ON t4.site_id = t5.site_master_id  " + tmrFilter + ") AS smh ON t1.site = smh.site AND smh.all_bd = 'SMH' LEFT JOIN(SELECT t4.site, t5.spv as spv, t4.WTGs, t4.all_bd, SUM(t4.loss_kw) AS loss FROM `uploading_file_tmr_data` t4 LEFT JOIN site_master t5 ON t4.site_id = t5.site_master_id  " + tmrFilter + ") AS others ON t1.site = others.site AND others.all_bd = 'Others' LEFT JOIN(SELECT t4.site, t5.spv as spv, t4.WTGs, t4.all_bd, SUM(t4.loss_kw) AS loss FROM `uploading_file_tmr_data` t4 LEFT JOIN site_master t5 ON t4.site_id = t5.site_master_id  " + tmrFilter + ") AS IGBDH ON t1.site = IGBDH.site AND IGBDH.all_bd = 'IGBDH' LEFT JOIN(SELECT t4.site, t5.spv as spv, t4.WTGs, t4.all_bd, SUM(t4.loss_kw) AS loss FROM `uploading_file_tmr_data` t4 LEFT JOIN site_master t5 ON t4.site_id = t5.site_master_id  " + tmrFilter + ") AS EGBDH ON t1.site = EGBDH.site AND EGBDH.all_bd = 'EGBDH' LEFT JOIN(SELECT t4.site, t5.spv as spv, t4.WTGs, t4.all_bd, SUM(t4.loss_kw) AS loss FROM `uploading_file_tmr_data` t4 LEFT JOIN site_master t5 ON t4.site_id = t5.site_master_id  " + tmrFilter + ") AS loadShedding ON t1.site = loadShedding.site AND loadShedding.all_bd = 'Load Shedding' " + filter + " group by t1.state, t2.spv, t1.wtg , month(t1.date) ORDER BY t1.site, year, month_no, t1.wtg; ";

            string tmlQry = "";

            //tmlQry = "select * from ( SELECT year(t1.date)as year,DATE_FORMAT(t1.date,'%M') as month, DATE_FORMAT(t1.date,'%m') as month_no,t2.country,t1.state,t2.spv,t1.site, t1.wtg ,(sum(wind_speed)/count(*))as wind_speed, sum(kwh) as kwh, (sum(plf)/count(*))as plf, (sum(ma_actual)/count(*))as ma_actual, (sum(ma_contractual)/count(*))as ma_contractual, (sum(iga)/count(*))as iga, (sum(ega)/count(*))as ega, (sum(ega_b)/count(*))as ega_b, (sum(ega_c)/count(*))as ega_c,  sum(production_hrs)as grid_hrs, sum(lull_hrs)as lull_hrs ,sum(unschedule_num) as unschedule_hrs, sum(schedule_num) as schedule_hrs, sum(others_num) as others, sum(igbdh_num) as igbdh, sum(egbdh_num) as egbdh, sum(load_shedding_num) as load_shedding, (SUM(t1.unschedule_num) + SUM(t1.schedule_num) + SUM(t1.others_num) + SUM(t1.igbdh_num) + SUM(t1.egbdh_num) + SUM(t1.load_shedding_num)) AS total_hrs FROM daily_gen_summary t1 left join site_master t2 on t1.site_id = t2.site_master_id where "+ filter + "  group by t1.state, t2.spv, t1.wtg , month(t1.date) ORDER BY t1.site, year, month_no, t1.wtg) as gen left Join (select WTGs, usmh_loss, smh_loss, others_loss, igbdh_loss, egbdh_loss, loadShedding_loss from(select site_id, site, WTGs, sum(usmh_loss) as usmh_loss, sum(smh_loss) as smh_loss, sum(others_loss) as others_loss, sum(igbdh_loss) as igbdh_loss, sum(egbdh_loss) as egbdh_loss, sum(loadShedding_loss) as loadShedding_loss from(SELECT site_id, sm.site, WTGs, CASE WHEN all_bd = 'USMH' THEN sum(loss_kw) ELSE 0 END AS usmh_loss, CASE WHEN all_bd = 'SMH' THEN sum(loss_kw) ELSE 0 END AS smh_loss, CASE WHEN all_bd = 'Others' THEN sum(loss_kw) ELSE 0 END AS others_loss, CASE WHEN all_bd = 'IGBDH' THEN sum(loss_kw) ELSE 0 END AS igbdh_loss, CASE WHEN all_bd = 'EGBDH' THEN sum(loss_kw) ELSE 0 END AS egbdh_loss, CASE WHEN all_bd = 'Load Shedding' THEN sum(loss_kw) ELSE 0 END AS loadShedding_loss FROM uploading_file_tmr_data left join site_master as sm on uploading_file_tmr_data.site_id = sm.site_master_id  where  " + tmrFilter + " GROUP BY WTGs, all_bd) as tabletml group by WTGs) as tml) as tml on tml.WTGs = gen.wtg; ";
            
            //tmlQry = "select * from ( SELECT year(t1.date)as year,DATE_FORMAT(t1.date,'%M') as month, DATE_FORMAT(t1.date,'%m') as month_no,t2.country,t1.state,t2.spv,t1.site, t1.wtg ,(sum(wind_speed)/count(*))as wind_speed, sum(kwh) as kwh, (sum(plf)/count(*))as plf, (sum(ma_actual)/count(*))as ma_actual, (sum(ma_contractual)/count(*))as ma_contractual, (sum(iga)/count(*))as iga, (sum(ega)/count(*))as ega, (sum(ega_b)/count(*))as ega_b, (sum(ega_c)/count(*))as ega_c,  sum(production_hrs)as grid_hrs, sum(lull_hrs)as lull_hrs ,sum(unschedule_num) as unschedule_hrs, sum(schedule_num) as schedule_hrs, sum(others_num) as others, sum(igbdh_num) as igbdh, sum(egbdh_num) as egbdh, sum(load_shedding_num) as load_shedding, (SUM(t1.unschedule_num) + SUM(t1.schedule_num) + SUM(t1.others_num) + SUM(t1.igbdh_num) + SUM(t1.egbdh_num) + SUM(t1.load_shedding_num)) AS total_hrs FROM daily_gen_summary t1 left join site_master t2 on t1.site_id = t2.site_master_id  "+ filter + "  group by t1.state, t2.spv, t1.wtg , month(t1.date) ORDER BY t1.site, year, month_no, t1.wtg) as gen left Join (select WTGs, usmh_loss, smh_loss, others_loss, igbdh_loss, egbdh_loss, loadShedding_loss from(select site_id, site, WTGs, sum(usmh_loss) as usmh_loss, sum(smh_loss) as smh_loss, sum(others_loss) as others_loss, sum(igbdh_loss) as igbdh_loss, sum(egbdh_loss) as egbdh_loss, sum(loadShedding_loss) as loadShedding_loss from(SELECT site_id, sm.site, WTGs, CASE WHEN manual_bd = 'USMH' THEN sum(loss_kw) ELSE 0 END AS usmh_loss, CASE WHEN manual_bd = 'SMH' THEN sum(loss_kw) ELSE 0 END AS smh_loss, CASE WHEN manual_bd = 'OthersHour' THEN sum(loss_kw) ELSE 0 END AS others_loss, CASE WHEN manual_bd = 'IGBD' THEN sum(loss_kw) ELSE 0 END AS igbdh_loss, CASE WHEN manual_bd = 'EGBD' THEN sum(loss_kw) ELSE 0 END AS egbdh_loss, CASE WHEN manual_bd = 'LoadShedding' THEN sum(loss_kw) ELSE 0 END AS loadShedding_loss FROM uploading_file_tmr_data left join site_master as sm on uploading_file_tmr_data.site_id = sm.site_master_id   " + tmrFilter + " GROUP BY WTGs, manual_bd) as tabletml group by WTGs) as tml) as tml on tml.WTGs = gen.wtg; ";

            //DGR_v3 new daily basis table.
            tmlQry = $@"select gen.*, tml.usmh_loss, tml.smh_loss, tml.others_loss, tml.igbd_loss AS igbdh_loss, tml.egbd_loss AS egbdh_loss, tml.loadshedding_loss AS loadShedding_loss from ( SELECT year(t1.date)as year,DATE_FORMAT(t1.date,'%M') as month, DATE_FORMAT(t1.date,'%m') as month_no,t2.country,t1.state,t2.spv,t1.site, t1.wtg ,(sum(wind_speed)/count(*))as wind_speed, sum(kwh) as kwh, (sum(plf)/count(*))as plf, (sum(ma_actual)/count(*))as ma_actual, (sum(ma_contractual)/count(*))as ma_contractual, (sum(iga)/count(*))as iga, (sum(ega)/count(*))as ega, (sum(ega_b)/count(*))as ega_b, (sum(ega_c)/count(*))as ega_c,  sum(production_hrs)as grid_hrs, sum(lull_hrs)as lull_hrs ,sum(unschedule_num) as unschedule_hrs, sum(schedule_num) as schedule_hrs, sum(others_num) as others, sum(igbdh_num) as igbdh, sum(egbdh_num) as egbdh, sum(load_shedding_num) as load_shedding, (SUM(t1.unschedule_num) + SUM(t1.schedule_num) + SUM(t1.others_num) + SUM(t1.igbdh_num) + SUM(t1.egbdh_num) + SUM(t1.load_shedding_num)) AS total_hrs FROM daily_gen_summary t1 left join site_master t2 on t1.site_id = t2.site_master_id {filter} group by t1.state, t2.spv, t1.wtg , month(t1.date) ORDER BY t1.site, year, month_no, t1.wtg) as gen 
LEFT JOIN (SELECT det.site_id AS site_id, det.wtg_id AS wtg_id, det.wtg AS wtg, det.data_date AS data_date, (SUM(det.usmh_loss) + SUM(det.healthcheck_loss)) AS usmh_loss, SUM(det.smh_loss) AS smh_loss, SUM(det.others_loss) AS others_loss, SUM(det.igbd_loss) AS igbd_loss, SUM(det.egbd_loss) AS egbd_loss, SUM(det.loadshedding_loss) AS loadshedding_loss FROM daily_expected_vs_actual det LEFT JOIN site_master sm ON det.site_id = sm.site_master_id {tmrFilter} GROUP BY det.wtg) AS tml on tml.wtg = gen.wtg;";



            //where t1.approve_status="+approve_status+" and " + filter + " group by t1.state, t2.spv, t1.wtg , month(t1.date)";
            List<WindDailyGenReports1> data = await Context.GetData<WindDailyGenReports1>(tmlQry).ConfigureAwait(false);


            
            return data;

        }

        internal async Task<List<WindDailyGenReports2>> GetWindMonthlyYearlyGenSummaryReport2(string fy, string month, string country, string state, string spv, string site, string wtg)
        {
            string filter = "";
            string tmrFilter = "";
            string filter1 = "";
            int chkfilter = 0;

            if ((!string.IsNullOrEmpty(spv) && spv != "All~") || (!string.IsNullOrEmpty(site) && site != "All~") || (!string.IsNullOrEmpty(month) && !string.IsNullOrEmpty(fy)) || (!string.IsNullOrEmpty(state) && state != "All~") || (!string.IsNullOrEmpty(wtg) && wtg != "All~"))
            {
                filter += " WHERE ";
                tmrFilter += " WHERE ";
            }

            if (!string.IsNullOrEmpty(site) && site != "All~")
            {
                //if (chkfilter == 1) { filter += " and "; }
                // filter += "t1.site in (" + site + ")";'
                if (chkfilter == 1)
                {
                    filter += " and ";
                    tmrFilter += " AND ";
                }
                string[] spsite = site.Split(",");
                filter += " t1.site_id in (";
                string sites = "";
                for (int i = 0; i < spsite.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spsite[i].ToString()))
                    {
                        sites += spsite[i].ToString() + ",";
                    }
                }
                filter += sites.TrimEnd(',') + ")";
                tmrFilter += " det.site_id IN(" + sites.TrimEnd(',') + ")";
                chkfilter = 1;
            }

            if (!string.IsNullOrEmpty(month) && !string.IsNullOrEmpty(fy))
            {

                if (chkfilter == 1)
                {
                    filter += " and ";
                    tmrFilter += " AND ";
                }
                filter += "  (";
                tmrFilter += "  (";

                string[] spmonth = month.Split(",");
                string months = "";

                for (int i = 0; i < spmonth.Length; i++)
                {
                    if (i > 0)
                    {
                        filter += " or ";
                        tmrFilter += " OR ";
                    }
                    int monthno = Int32.Parse(spmonth[i]);
                    string year = (Int32.Parse(fy) + 1).ToString();
                    string Qyear = (monthno > 3) ? fy : year;
                    filter += "( month(date) = " + spmonth[i] + " and year(date) = '" + Qyear + "' )";
                    tmrFilter += "( MONTH(det.data_date) = " + spmonth[i] + " AND YEAR(det.data_date) = " + Qyear + " )";
                }
                filter += ") ";
                tmrFilter += ") ";

                chkfilter = 1;
            }
            else if (!string.IsNullOrEmpty(month))
            {
                if (chkfilter == 1)
                {
                    filter += " and ";
                    tmrFilter += " AND ";
                }

                filter += "  month(date) in ( " + month + " )";
                tmrFilter += "  MONTH(det.data_date) IN(" + month + " )";
                chkfilter = 1;
            }
            //if (!string.IsNullOrEmpty(country) && country != "All~")
            //{
            //    if (chkfilter == 1) { filter += " and "; }
            //    string[] spcountry = country.Split("~");
            //    filter += "t2.country in (";
            //    string countrys = "";
            //    for (int i = 0; i < spcountry.Length; i++)
            //    {
            //        if (!string.IsNullOrEmpty(spcountry[i].ToString()))
            //        {
            //            countrys += "'" + spcountry[i].ToString() + "',";
            //        }
            //    }
            //    filter += countrys.TrimEnd(',') + ")";
            //    chkfilter = 1;
            //}
            if (!string.IsNullOrEmpty(state) && state != "All~")
            {
                //if (chkfilter == 1) { filter += " and "; }
                // filter += "t1.state in (" + state + ")";
                if (chkfilter == 1)
                {
                    filter += " and ";
                    tmrFilter += " AND ";
                }
                string[] spstate = state.Split(",");
                filter += "  t1.state in (";
                tmrFilter += "  sm.state in (";
                string states = "";
                for (int i = 0; i < spstate.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spstate[i].ToString()))
                    {
                        states += "'" + spstate[i].ToString() + "',";
                    }
                }
                filter += states.TrimEnd(',') + ")";
                tmrFilter += states.TrimEnd(',') + ")";

                chkfilter = 1;
            }
            if (!string.IsNullOrEmpty(spv) && spv != "All~")
            {
                //if (chkfilter == 1) { filter += " and "; }
                // filter += "t2.spv in (" + spv + ")";
                if (chkfilter == 1)
                {
                    filter += " and ";
                    tmrFilter += " AND ";
                }
                string[] spspv = spv.Split(",");
                filter += "  t2.spv in (";
               // filter1 += " and t2.spv in (";
                string spvs = "";
                for (int i = 0; i < spspv.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spspv[i].ToString()))
                    {
                        spvs += "'" + spspv[i].ToString() + "',";
                    }
                }
                filter += spvs.TrimEnd(',') + ")";
                tmrFilter += "  sm.spv IN(" + spvs.TrimEnd(',') + ")";
                // filter1 += spvs.TrimEnd(',') + ")";
                chkfilter = 1;
            }
            
            if (!string.IsNullOrEmpty(wtg) && wtg != "All~")
            {
                //if (chkfilter == 1) { filter += " and "; }
                // filter += "t1.wtg in (" + wtg + ")";
                if (chkfilter == 1)
                {
                    filter += " and ";
                    tmrFilter += " AND ";
                }
                string[] spwtg = wtg.Split(",");
                filter += "  t1.wtg in (";
                string wtgs = "";
                for (int i = 0; i < spwtg.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spwtg[i].ToString()))
                    {
                        wtgs += "'" + spwtg[i].ToString() + "',";
                    }
                }
                filter += wtgs.TrimEnd(',') + ")";
                tmrFilter += "  det.wtg IN(" + wtgs.TrimEnd(',') + ")";
                chkfilter = 1;

            }
            tmrFilter += " GROUP BY MONTH(det.data_date), det.site_id"; //changed all_bd -> manual_bd;

            //string qry = @"SELECT year(date)as year,DATE_FORMAT(date,'%M') as month,date,t2.country,t1.state,t2.spv,t1.site,
            string qry = "";
            //qry = @"SELECT year(date)as year,DATE_FORMAT(date,'%M') as month,date,t2.country,t1.state,t2.spv,t1.site, t2.total_mw ,(sum(wind_speed)/count(*))as wind_speed, sum(kwh) as kwh, (sum(plf)/count(*))as plf, (sum(ma_actual)/count(*))as ma_actual, (sum(ma_contractual)/count(*))as ma_contractual, (sum(iga)/count(*))as iga, (sum(ega)/count(*))as ega, (sum(ega_b)/count(*))as ega_b, (sum(ega_c)/count(*))as ega_c,  sum(production_hrs)as grid_hrs, sum(lull_hrs)as lull_hrs ,sum(unschedule_num) as unschedule_hrs, sum(schedule_num) as schedule_hrs, sum(others_num) as others, sum(igbdh_num) as igbdh, sum(egbdh_num) as egbdh, sum(load_shedding_num) as load_shedding	 FROM daily_gen_summary t1 left join site_master t2 on t1.site=t2.site " + filter + " group by t1.state, t2.spv, t1.site , month(t1.date)";

            //qry = "SELECT year(date)as year,DATE_FORMAT(date,'%M') as month,date,t2.country,t1.state,t2.spv,t1.site, t2.total_mw ,(sum(wind_speed)/count(*))as wind_speed, sum(kwh) as kwh, (sum(plf)/count(*))as plf, (sum(ma_actual)/count(*))as ma_actual, (sum(ma_contractual)/count(*))as ma_contractual, (sum(iga)/count(*))as iga, (sum(ega)/count(*))as ega, (sum(ega_b)/count(*))as ega_b, (sum(ega_c)/count(*))as ega_c,  sum(production_hrs)as grid_hrs, sum(lull_hrs)as lull_hrs ,sum(unschedule_num) as unschedule_hrs, sum(schedule_num) as schedule_hrs, sum(others_num) as others, sum(igbdh_num) as igbdh, sum(egbdh_num) as egbdh, sum(load_shedding_num) as load_shedding, (SUM(t1.unschedule_num) + SUM(t1.schedule_num) + SUM(t1.others_num) + SUM(t1.igbdh_num) + SUM(t1.egbdh_num) + SUM(t1.load_shedding_num)) AS total_hrs, COALESCE(usmh.loss, 0) AS usmh_loss, COALESCE(smh.loss, 0) AS smh_loss, COALESCE(others.loss, 0) AS others_loss, COALESCE(IGBDH.loss, 0) AS igbdh_loss, COALESCE(EGBDH.loss, 0) AS egbdh_loss, COALESCE(loadShedding.loss, 0) AS loadShedding_loss, (COALESCE(usmh.loss,0) + COALESCE(smh.loss,0) + COALESCE(others.loss, 0) + COALESCE(IGBDH.loss, 0) + COALESCE(EGBDH.loss, 0) + COALESCE(loadShedding.loss, 0)) AS total_loss FROM daily_gen_summary t1 left join site_master t2 on t1.site_id = t2.site_master_id LEFT JOIN(SELECT t4.site, t5.spv as spv, t4.WTGs, t4.all_bd, SUM(t4.loss_kw) AS loss FROM `uploading_file_tmr_data` t4 LEFT JOIN site_master t5 ON t4.site_id = t5.site_master_id  " + tmrFilter + ") AS usmh ON t1.site = usmh.site AND usmh.all_bd = 'USMH' LEFT JOIN(SELECT t4.site, t5.spv as spv, t4.WTGs, t4.all_bd, SUM(t4.loss_kw) AS loss FROM `uploading_file_tmr_data` t4 LEFT JOIN site_master t5 ON t4.site_id = t5.site_master_id  " + tmrFilter + ") AS smh ON t1.site = smh.site AND smh.all_bd = 'SMH' LEFT JOIN(SELECT t4.site, t5.spv as spv, t4.WTGs, t4.all_bd, SUM(t4.loss_kw) AS loss FROM `uploading_file_tmr_data` t4 LEFT JOIN site_master t5 ON t4.site_id = t5.site_master_id  " + tmrFilter + ") AS others ON t1.site = others.site AND others.all_bd = 'Others' LEFT JOIN(SELECT t4.site, t5.spv as spv, t4.WTGs, t4.all_bd, SUM(t4.loss_kw) AS loss FROM `uploading_file_tmr_data` t4 LEFT JOIN site_master t5 ON t4.site_id = t5.site_master_id  " + tmrFilter + ") AS IGBDH ON t1.site = IGBDH.site AND IGBDH.all_bd = 'IGBDH' LEFT JOIN(SELECT t4.site, t5.spv as spv, t4.WTGs, t4.all_bd, SUM(t4.loss_kw) AS loss FROM `uploading_file_tmr_data` t4 LEFT JOIN site_master t5 ON t4.site_id = t5.site_master_id  " + tmrFilter + ") AS EGBDH ON t1.site = EGBDH.site AND EGBDH.all_bd = 'EGBDH' LEFT JOIN(SELECT t4.site, t5.spv as spv, t4.WTGs, t4.all_bd, SUM(t4.loss_kw) AS loss FROM `uploading_file_tmr_data` t4 LEFT JOIN site_master t5 ON t4.site_id = t5.site_master_id  " + tmrFilter + ") AS loadShedding ON t1.site = loadShedding.site AND loadShedding.all_bd = 'Load Shedding' " + filter + " group by t1.state, t2.spv, t1.site , month(t1.date) ORDER BY t1.site, t1.date, t1.wtg; ";

            //qry = "select * from ( SELECT year(t1.date)as year,DATE_FORMAT(t1.date,'%M') as month, DATE_FORMAT(t1.date,'%m') as month_no,t2.country,t1.state,t2.spv,t1.site, t1.wtg ,t2.total_mw ,(sum(wind_speed)/count(*))as wind_speed, sum(kwh) as kwh, (sum(plf)/count(*))as plf, (sum(ma_actual)/count(*))as ma_actual, (sum(ma_contractual)/count(*))as ma_contractual, (sum(iga)/count(*))as iga, (sum(ega)/count(*))as ega, (sum(ega_b)/count(*))as ega_b, (sum(ega_c)/count(*))as ega_c,  sum(production_hrs)as grid_hrs, sum(lull_hrs)as lull_hrs ,sum(unschedule_num) as unschedule_hrs, sum(schedule_num) as schedule_hrs, sum(others_num) as others, sum(igbdh_num) as igbdh, sum(egbdh_num) as egbdh, sum(load_shedding_num) as load_shedding, (SUM(t1.unschedule_num) + SUM(t1.schedule_num) + SUM(t1.others_num) + SUM(t1.igbdh_num) + SUM(t1.egbdh_num) + SUM(t1.load_shedding_num)) AS total_hrs FROM daily_gen_summary t1 left join site_master t2 on t1.site_id = t2.site_master_id where " + filter + "  group by t1.state, t2.spv, t1.site , month(t1.date) ORDER BY t1.site, year, month_no, t1.wtg) as gen left Join (select site as tmlSite, usmh_loss, smh_loss, others_loss, igbdh_loss, egbdh_loss, loadShedding_loss from(select site_id, site, WTGs, sum(usmh_loss) as usmh_loss, sum(smh_loss) as smh_loss, sum(others_loss) as others_loss, sum(igbdh_loss) as igbdh_loss, sum(egbdh_loss) as egbdh_loss, sum(loadShedding_loss) as loadShedding_loss from(SELECT site_id, sm.site, WTGs, CASE WHEN all_bd = 'USMH' THEN sum(loss_kw) ELSE 0 END AS usmh_loss, CASE WHEN all_bd = 'SMH' THEN sum(loss_kw) ELSE 0 END AS smh_loss, CASE WHEN all_bd = 'Others' THEN sum(loss_kw) ELSE 0 END AS others_loss, CASE WHEN all_bd = 'IGBDH' THEN sum(loss_kw) ELSE 0 END AS igbdh_loss, CASE WHEN all_bd = 'EGBDH' THEN sum(loss_kw) ELSE 0 END AS egbdh_loss, CASE WHEN all_bd = 'Load Shedding' THEN sum(loss_kw) ELSE 0 END AS loadShedding_loss FROM uploading_file_tmr_data left join site_master as sm on uploading_file_tmr_data.site_id = sm.site_master_id where  " + tmrFilter + ") as tabletml group by site ) as tml) as tml on tml.tmlSite = gen.site;";
            
            //qry = "select * from ( SELECT year(t1.date)as year,DATE_FORMAT(t1.date,'%M') as month, DATE_FORMAT(t1.date,'%m') as month_no,t2.country,t1.state,t2.spv,t1.site, t1.wtg ,t2.total_mw ,(sum(wind_speed)/count(*))as wind_speed, sum(kwh) as kwh, (sum(plf)/count(*))as plf, (sum(ma_actual)/count(*))as ma_actual, (sum(ma_contractual)/count(*))as ma_contractual, (sum(iga)/count(*))as iga, (sum(ega)/count(*))as ega, (sum(ega_b)/count(*))as ega_b, (sum(ega_c)/count(*))as ega_c,  sum(production_hrs)as grid_hrs, sum(lull_hrs)as lull_hrs ,sum(unschedule_num) as unschedule_hrs, sum(schedule_num) as schedule_hrs, sum(others_num) as others, sum(igbdh_num) as igbdh, sum(egbdh_num) as egbdh, sum(load_shedding_num) as load_shedding, (SUM(t1.unschedule_num) + SUM(t1.schedule_num) + SUM(t1.others_num) + SUM(t1.igbdh_num) + SUM(t1.egbdh_num) + SUM(t1.load_shedding_num)) AS total_hrs FROM daily_gen_summary t1 left join site_master t2 on t1.site_id = t2.site_master_id " + filter + "  group by t1.state, t2.spv, t1.site , month(t1.date) ORDER BY t1.site, year, month_no, t1.wtg) as gen left Join (select site as tmlSite, usmh_loss, smh_loss, others_loss, igbdh_loss, egbdh_loss, loadShedding_loss from(select site_id, site, WTGs, sum(usmh_loss) as usmh_loss, sum(smh_loss) as smh_loss, sum(others_loss) as others_loss, sum(igbdh_loss) as igbdh_loss, sum(egbdh_loss) as egbdh_loss, sum(loadShedding_loss) as loadShedding_loss from(SELECT site_id, sm.site, WTGs, CASE WHEN manual_bd = 'USMH' THEN sum(loss_kw) ELSE 0 END AS usmh_loss, CASE WHEN manual_bd = 'SMH' THEN sum(loss_kw) ELSE 0 END AS smh_loss, CASE WHEN manual_bd = 'OthersHour' THEN sum(loss_kw) ELSE 0 END AS others_loss, CASE WHEN manual_bd = 'IGBD' THEN sum(loss_kw) ELSE 0 END AS igbdh_loss, CASE WHEN manual_bd = 'EGBD' THEN sum(loss_kw) ELSE 0 END AS egbdh_loss, CASE WHEN manual_bd = 'LoadShedding' THEN sum(loss_kw) ELSE 0 END AS loadShedding_loss FROM uploading_file_tmr_data left join site_master as sm on uploading_file_tmr_data.site_id = sm.site_master_id   " + tmrFilter + ") as tabletml group by site ) as tml) as tml on tml.tmlSite = gen.site;";

            //DGR_v3 new daily basis table.
            qry = $@"SELECT gen.*, tml.usmh_loss, tml.smh_loss, tml.others_loss, tml.igbd_loss AS igbdh_loss, tml.egbd_loss AS egbdh_loss, tml.loadshedding_loss AS loadShedding_loss FROM ( SELECT year(t1.date)as year,DATE_FORMAT(t1.date,'%M') as month, DATE_FORMAT(t1.date,'%m') as month_no,t2.country,t1.state,t2.spv,t1.site, t1.site_id, t1.wtg ,t2.total_mw ,(sum(wind_speed)/count(*))as wind_speed, sum(kwh) as kwh, (sum(plf)/count(*))as plf, (sum(ma_actual)/count(*))as ma_actual, (sum(ma_contractual)/count(*))as ma_contractual, (sum(iga)/count(*))as iga, (sum(ega)/count(*))as ega, (sum(ega_b)/count(*))as ega_b, (sum(ega_c)/count(*))as ega_c,  sum(production_hrs)as grid_hrs, sum(lull_hrs)as lull_hrs ,sum(unschedule_num) as unschedule_hrs, sum(schedule_num) as schedule_hrs, sum(others_num) as others, sum(igbdh_num) as igbdh, sum(egbdh_num) as egbdh, sum(load_shedding_num) as load_shedding, (SUM(t1.unschedule_num) + SUM(t1.schedule_num) + SUM(t1.others_num) + SUM(t1.igbdh_num) + SUM(t1.egbdh_num) + SUM(t1.load_shedding_num)) AS total_hrs FROM daily_gen_summary t1 left join site_master t2 on t1.site_id = t2.site_master_id {filter} group by t1.state, t2.spv, t1.site , month(t1.date) ORDER BY t1.site, year, month_no, t1.wtg) AS gen 
LEFT JOIN (SELECT det.site_id AS site_id, det.data_date AS data_date, (SUM(det.usmh_loss) + SUM(det.healthcheck_loss)) AS usmh_loss, SUM(det.smh_loss) AS smh_loss, SUM(det.others_loss) AS others_loss, SUM(det.igbd_loss) AS igbd_loss, SUM(det.egbd_loss) AS egbd_loss, SUM(det.loadshedding_loss) AS loadshedding_loss FROM daily_expected_vs_actual det LEFT JOIN site_master sm ON det.site_id = sm.site_master_id {tmrFilter}) AS tml on tml.site_id = gen.site_id;";
            //where  t1.approve_status="+approve_status+" and " + filter + " group by t1.state, t2.spv, t1.site , month(t1.date)";

            return await Context.GetData<WindDailyGenReports2>(qry).ConfigureAwait(false);

        }
        // WTG WIse
        internal async Task<List<WindDailyGenReports1>> GetWindYearlyGenSummaryReport1(string fromDate, string toDate, string country, string state, string spv, string site, string wtg, string month)
        {
            string filter = "";
            string tmrFilter = "";
            int chkfilter = 0;
            //if ((!string.IsNullOrEmpty(spv) && spv != "All~") || (!string.IsNullOrEmpty(site) && site != "All~") || (!string.IsNullOrEmpty(month) && month != "All~") || (!string.IsNullOrEmpty(state) && state != "All~") || (!string.IsNullOrEmpty(wtg) && wtg != "All~"))
            //{
            //    filter += " WHERE ";
            //    tmrFilter += " WHERE ";
            //}

            if (!string.IsNullOrEmpty(fromDate) && fromDate != "All")
            {
                filter += "(t1.date >= '" + fromDate + "'  and t1.date<= '" + toDate + "')";
                tmrFilter += "det.data_date >= '" + fromDate + "' AND det.data_date <= '" + toDate + "' ";
                chkfilter = 1;
            }
            if (!string.IsNullOrEmpty(state) && state != "All~")
            {
                if (chkfilter == 1)
                { 
                    filter += " and ";
                    tmrFilter += " and ";
                }
                // filter += "t1.state in (" + state + ")";
                string[] spstate = state.Split(",");
                filter += "t1.state in (";
                tmrFilter += "sm.state in (";
                string states = "";
                for (int i = 0; i < spstate.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spstate[i].ToString()))
                    {
                        states += "'" + spstate[i].ToString() + "',";
                    }
                }
                filter += states.TrimEnd(',') + ")";
                tmrFilter += states.TrimEnd(',') + ")";

                chkfilter = 1;
            }
            if (!string.IsNullOrEmpty(spv) && spv != "All~")
            {
                if (chkfilter == 1)
                {
                    filter += " and ";
                    tmrFilter += " and ";
                }                // filter += "t2.spv in (" + spv + ")";
                string[] spspv = spv.Split(",");
                filter += "t2.spv in (";
                string spvs = "";
                for (int i = 0; i < spspv.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spspv[i].ToString()))
                    {
                        spvs += "'" + spspv[i].ToString() + "',";
                    }
                }
                filter += spvs.TrimEnd(',') + ")";
                tmrFilter += " sm.spv IN(" + spvs.TrimEnd(',') + ")";
                chkfilter = 1;
            }
            if (!string.IsNullOrEmpty(site) && site != "All~")
            {
                if (chkfilter == 1)
                {
                    filter += " and ";
                    tmrFilter += " and ";
                }                // filter += "t1.site in (" + site + ")";
                string[] spsite = site.Split(",");
                filter += "t1.site_id in (";
                string sites = "";
                for (int i = 0; i < spsite.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spsite[i].ToString()))
                    {
                        sites += spsite[i].ToString() + ",";
                    }
                }
                filter += sites.TrimEnd(',') + ")";
                tmrFilter += "  det.site_id IN(" + sites.TrimEnd(',') + ")";
                chkfilter = 1;
            }
            if (!string.IsNullOrEmpty(wtg) && wtg != "All~")
            {
                if (chkfilter == 1)
                {
                    filter += " and ";
                    tmrFilter += " and ";
                }                // filter += "t1.wtg in (" + wtg + ")";
                string[] spwtg = wtg.Split(",");
                filter += "t1.wtg in (";
                string wtgs = "";
                for (int i = 0; i < spwtg.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spwtg[i].ToString()))
                    {
                        wtgs += "'" + spwtg[i].ToString() + "',";
                    }
                }
                filter += wtgs.TrimEnd(',') + ")";
                tmrFilter += "  det.wtg IN(" + wtgs.TrimEnd(',') + ")";
            }
            if (!string.IsNullOrEmpty(month) && month != "All~")
            {
                if (chkfilter == 1)
                {
                    filter += " and ";
                    tmrFilter += " and ";
                }
                if (chkfilter == 1) { filter += " and "; }

                string[] spmonth = month.Split("~");
                filter += "month(date) in (";
                string months = "";
                for (int i = 0; i < spmonth.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spmonth[i].ToString()))
                    {
                        months += "" + spmonth[i].ToString() + ",";
                    }
                }
                filter += months.TrimEnd(',') + ")";
                tmrFilter += "  MONTH(det.data_date) = IN(" + months.TrimEnd(',') + ")";
            }


            string qry = "";
            
            //qry = @"SELECT year(date) as year,DATE_FORMAT(date,'%M') as month,date,t2.country,t1.state,t2.spv,t1.site, t1.wtg ,(sum(wind_speed)/count(*)) as wind_speed, sum(kwh) as kwh, (sum(plf)/count(*)) as plf, (sum(ma_actual)/count(*)) as ma_actual, (sum(ma_contractual)/count(*)) as ma_contractual, (sum(iga)/count(*)) as iga, (sum(ega)/count(*)) as ega, (sum(ega_b)/count(*))as ega_b, (sum(ega_c)/count(*))as ega_c,  sum(production_hrs) as grid_hrs, sum(lull_hrs) as lull_hrs ,sum(unschedule_num) as unschedule_hrs, sum(schedule_num) as schedule_hrs, sum(others_num) as others, sum(igbdh_num) as igbdh, sum(egbdh_num) as egbdh, sum(load_shedding_num) as load_shedding FROM daily_gen_summary t1 left join site_master t2 on t1.site_id=t2.site_master_id  where   " + filter + " group by t1.state, t2.spv, t1.wtg ";

            //qry = "SELECT year(date) as year,DATE_FORMAT(date,'%M') as month,date,t2.country,t1.state,t2.spv,t1.site, t1.wtg ,(sum(wind_speed)/count(*)) as wind_speed, sum(kwh) as kwh, (sum(plf)/count(*)) as plf, (sum(ma_actual)/count(*)) as ma_actual, (sum(ma_contractual)/count(*)) as ma_contractual, (sum(iga)/count(*)) as iga, (sum(ega)/count(*)) as ega, (sum(ega_b)/count(*))as ega_b, (sum(ega_c)/count(*))as ega_c,  sum(production_hrs) as grid_hrs, sum(lull_hrs) as lull_hrs ,sum(unschedule_num) as unschedule_hrs, sum(schedule_num) as schedule_hrs, sum(others_num) as others, sum(igbdh_num) as igbdh, sum(egbdh_num) as egbdh, sum(load_shedding_num) as load_shedding, (SUM(t1.unschedule_num) + SUM(t1.schedule_num) + SUM(t1.others_num) + SUM(t1.igbdh_num) + SUM(t1.egbdh_num) + SUM(t1.load_shedding_num)) AS total_hrs, COALESCE(usmh.loss, 0) AS usmh_loss, COALESCE(smh.loss, 0) AS smh_loss, COALESCE(others.loss, 0) AS others_loss, COALESCE(IGBDH.loss, 0) AS igbdh_loss, COALESCE(EGBDH.loss, 0) AS egbdh_loss, COALESCE(loadShedding.loss, 0) AS loadShedding_loss, (COALESCE(usmh.loss,0) + COALESCE(smh.loss,0) + COALESCE(others.loss, 0) + COALESCE(IGBDH.loss, 0) + COALESCE(EGBDH.loss, 0) + COALESCE(loadShedding.loss, 0)) AS total_loss FROM daily_gen_summary t1 LEFT JOIN site_master t2 ON t1.site_id = t2.site_master_id LEFT JOIN(SELECT t4.site, t5.spv as spv, t4.WTGs, t4.all_bd, SUM(t4.loss_kw) AS loss FROM `uploading_file_tmr_data` t4 LEFT JOIN site_master t5 ON t4.site_id = t5.site_master_id " + tmrFilter + " GROUP BY t4.WTGs, t4.all_bd ) AS usmh ON t1.site = usmh.site AND t1.wtg = usmh.WTGs AND usmh.all_bd = 'usmh' LEFT JOIN(SELECT t4.site, t5.spv as spv, t4.WTGs, t4.all_bd, SUM(t4.loss_kw) AS loss FROM `uploading_file_tmr_data` t4 LEFT JOIN site_master t5 ON t4.site_id = t5.site_master_id " + tmrFilter + " GROUP BY t4.WTGs, t4.all_bd ) AS smh ON t1.site = smh.site AND t1.wtg = smh.WTGs AND smh.all_bd = 'smh' LEFT JOIN(SELECT t4.site, t5.spv as spv, t4.WTGs, t4.all_bd, SUM(t4.loss_kw) AS loss FROM `uploading_file_tmr_data` t4 LEFT JOIN site_master t5 ON t4.site_id = t5.site_master_id " + tmrFilter + " GROUP BY t4.WTGs, t4.all_bd ) AS others ON t1.site = others.site AND t1.wtg = others.WTGs AND others.all_bd = 'Others' LEFT JOIN(SELECT t4.site, t5.spv as spv, t4.WTGs, t4.all_bd, SUM(t4.loss_kw) AS loss FROM `uploading_file_tmr_data` t4 LEFT JOIN site_master t5 ON t4.site_id = t5.site_master_id " + tmrFilter + " GROUP BY t4.WTGs, t4.all_bd ) AS IGBDH ON t1.site = IGBDH.site AND t1.wtg = IGBDH.WTGs AND IGBDH.all_bd = 'IGBDH' LEFT JOIN(SELECT t4.site, t5.spv as spv, t4.WTGs, t4.all_bd, SUM(t4.loss_kw) AS loss FROM `uploading_file_tmr_data` t4 LEFT JOIN site_master t5 ON t4.site_id = t5.site_master_id " + tmrFilter + " GROUP BY t4.WTGs, t4.all_bd ) AS EGBDH ON t1.site = EGBDH.site AND t1.wtg = IGBDH.WTGs AND EGBDH.all_bd = 'EGBDH' LEFT JOIN(SELECT t4.site, t5.spv as spv, t4.WTGs, t4.all_bd, SUM(t4.loss_kw) AS loss FROM `uploading_file_tmr_data` t4 LEFT JOIN site_master t5 ON t4.site_id = t5.site_master_id " + tmrFilter + " GROUP BY t4.WTGs, t4.all_bd ) AS loadShedding ON t1.site = loadShedding.site AND t1.wtg = loadShedding.WTGs AND loadShedding.all_bd = 'Load Shedding' " + filter + " group by t1.site_id, t2.spv, t1.wtg ORDER BY t1.site, t1.date, t1.wtg;";

            //qry = "select * from ( SELECT year(date) as year,DATE_FORMAT(date,'%M') as month,date,t2.country,t1.state,t2.spv,t1.site, t1.wtg ,(sum(wind_speed)/count(*)) as wind_speed, sum(kwh) as kwh, (sum(plf)/count(*)) as plf, (sum(ma_actual)/count(*)) as ma_actual, (sum(ma_contractual)/count(*)) as ma_contractual, (sum(iga)/count(*)) as iga, (sum(ega)/count(*)) as ega, (sum(ega_b)/count(*))as ega_b, (sum(ega_c)/count(*))as ega_c,  sum(production_hrs) as grid_hrs, sum(lull_hrs) as lull_hrs ,sum(unschedule_num) as unschedule_hrs, sum(schedule_num) as schedule_hrs, sum(others_num) as others, sum(igbdh_num) as igbdh, sum(egbdh_num) as egbdh, sum(load_shedding_num) as load_shedding, (SUM(t1.unschedule_num) + SUM(t1.schedule_num) + SUM(t1.others_num) + SUM(t1.igbdh_num) + SUM(t1.egbdh_num) + SUM(t1.load_shedding_num)) AS total_hrs FROM daily_gen_summary t1 left join site_master t2 on t1.site_id = t2.site_master_id where " + filter + "  group by t1.state, t2.spv, t1.wtg ORDER BY t1.site, year, t1.wtg) as gen left Join(select WTGs, usmh_loss, smh_loss, others_loss, igbdh_loss, egbdh_loss, loadShedding_loss from(select site_id, site, WTGs, sum(usmh_loss) as usmh_loss, sum(smh_loss) as smh_loss, sum(others_loss) as others_loss, sum(igbdh_loss) as igbdh_loss, sum(egbdh_loss) as egbdh_loss, sum(loadShedding_loss) as loadShedding_loss from(SELECT site_id, sm.site, WTGs, CASE WHEN all_bd = 'USMH' THEN sum(loss_kw) ELSE 0 END AS usmh_loss, CASE WHEN all_bd = 'SMH' THEN sum(loss_kw) ELSE 0 END AS smh_loss, CASE WHEN all_bd = 'Others' THEN sum(loss_kw) ELSE 0 END AS others_loss, CASE WHEN all_bd = 'IGBDH' THEN sum(loss_kw) ELSE 0 END AS igbdh_loss, CASE WHEN all_bd = 'EGBDH' THEN sum(loss_kw) ELSE 0 END AS egbdh_loss, CASE WHEN all_bd = 'Load Shedding' THEN sum(loss_kw) ELSE 0 END AS loadShedding_loss FROM uploading_file_tmr_data left join site_master as sm on uploading_file_tmr_data.site_id = sm.site_master_id where  " + tmrFilter + " GROUP BY WTGs, all_bd) as tabletml group by WTGs) as tml) as tml on tml.WTGs = gen.wtg; ";
            
            //qry = "select * from ( SELECT year(date) as year,DATE_FORMAT(date,'%M') as month,date,t2.country,t1.state,t2.spv,t1.site, t1.wtg ,(sum(wind_speed)/count(*)) as wind_speed, sum(kwh) as kwh, (sum(plf)/count(*)) as plf, (sum(ma_actual)/count(*)) as ma_actual, (sum(ma_contractual)/count(*)) as ma_contractual, (sum(iga)/count(*)) as iga, (sum(ega)/count(*)) as ega, (sum(ega_b)/count(*))as ega_b, (sum(ega_c)/count(*))as ega_c,  sum(production_hrs) as grid_hrs, sum(lull_hrs) as lull_hrs ,sum(unschedule_num) as unschedule_hrs, sum(schedule_num) as schedule_hrs, sum(others_num) as others, sum(igbdh_num) as igbdh, sum(egbdh_num) as egbdh, sum(load_shedding_num) as load_shedding, (SUM(t1.unschedule_num) + SUM(t1.schedule_num) + SUM(t1.others_num) + SUM(t1.igbdh_num) + SUM(t1.egbdh_num) + SUM(t1.load_shedding_num)) AS total_hrs FROM daily_gen_summary t1 left join site_master t2 on t1.site_id = t2.site_master_id where " + filter + "  group by t1.state, t2.spv, t1.wtg ORDER BY t1.site, year, t1.wtg) as gen left Join(select WTGs, usmh_loss, smh_loss, others_loss, igbdh_loss, egbdh_loss, loadShedding_loss from(select site_id, site, WTGs, sum(usmh_loss) as usmh_loss, sum(smh_loss) as smh_loss, sum(others_loss) as others_loss, sum(igbdh_loss) as igbdh_loss, sum(egbdh_loss) as egbdh_loss, sum(loadShedding_loss) as loadShedding_loss from(SELECT site_id, sm.site, WTGs, CASE WHEN manual_bd = 'USMH' THEN sum(loss_kw) ELSE 0 END AS usmh_loss, CASE WHEN manual_bd = 'SMH' THEN sum(loss_kw) ELSE 0 END AS smh_loss, CASE WHEN manual_bd = 'OthersHour' THEN sum(loss_kw) ELSE 0 END AS others_loss, CASE WHEN manual_bd = 'IGBD' THEN sum(loss_kw) ELSE 0 END AS igbdh_loss, CASE WHEN manual_bd = 'EGBD' THEN sum(loss_kw) ELSE 0 END AS egbdh_loss, CASE WHEN manual_bd = 'LoadShedding' THEN sum(loss_kw) ELSE 0 END AS loadShedding_loss FROM uploading_file_tmr_data left join site_master as sm on uploading_file_tmr_data.site_id = sm.site_master_id where  " + tmrFilter + " GROUP BY WTGs, manual_bd) as tabletml group by WTGs) as tml) as tml on tml.WTGs = gen.wtg; ";

            //DGR_v3 new daily basis table.
            qry = @$"SELECT gen.*, tml.usmh_loss, tml.smh_loss, tml.others_loss, tml.igbd_loss AS igbdh_loss, tml.egbd_loss AS egbdh_loss, tml.loadshedding_loss AS loadShedding_loss FROM ( SELECT year(date) as year,DATE_FORMAT(date,'%M') as month,date,t2.country,t1.state,t2.spv,t1.site, t1.wtg ,(sum(wind_speed)/count(*)) as wind_speed, sum(kwh) as kwh, (sum(plf)/count(*)) as plf, (sum(ma_actual)/count(*)) as ma_actual, (sum(ma_contractual)/count(*)) as ma_contractual, (sum(iga)/count(*)) as iga, (sum(ega)/count(*)) as ega, (sum(ega_b)/count(*))as ega_b, (sum(ega_c)/count(*))as ega_c,  sum(production_hrs) as grid_hrs, sum(lull_hrs) as lull_hrs ,sum(unschedule_num) as unschedule_hrs, sum(schedule_num) as schedule_hrs, sum(others_num) as others, sum(igbdh_num) as igbdh, sum(egbdh_num) as egbdh, sum(load_shedding_num) as load_shedding, (SUM(t1.unschedule_num) + SUM(t1.schedule_num) + SUM(t1.others_num) + SUM(t1.igbdh_num) + SUM(t1.egbdh_num) + SUM(t1.load_shedding_num)) AS total_hrs FROM daily_gen_summary t1 left join site_master t2 on t1.site_id = t2.site_master_id where {filter} group by t1.state, t2.spv, t1.wtg ORDER BY t1.site, year, t1.wtg) as gen 
LEFT JOIN(SELECT det.site_id AS site_id, det.wtg_id AS witg_id, det.wtg AS wtg, det.data_date AS data_date, (SUM(det.usmh_loss) + SUM(det.healthcheck_loss)) AS usmh_loss, SUM(det.smh_loss) AS smh_loss, SUM(det.others_loss) AS others_loss, SUM(det.igbd_loss) AS igbd_loss, SUM(det.egbd_loss) AS egbd_loss, SUM(det.loadshedding_loss) AS loadshedding_loss FROM daily_expected_vs_actual det LEFT JOIN site_master sm ON det.site_id = sm.site_master_id WHERE {tmrFilter} GROUP BY det.wtg) AS tml on tml.wtg = gen.wtg;";
            //where  t1.approve_status=" + approve_status + " and " + filter + " group by t1.state, t2.spv, t1.wtg ";
            try
            {
                return await Context.GetData<WindDailyGenReports1>(qry).ConfigureAwait(false);
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }

        internal async Task<List<WindDailyGenReports2>> GetWindYearlyGenSummaryReport2(string fromDate, string toDate, string country, string state, string spv, string site, string wtg, string month)
        {
            string filter = "";
            string tmrFilter = "";
            //if ((!string.IsNullOrEmpty(spv) && spv != "All~") || (!string.IsNullOrEmpty(site) && site != "All~") || (!string.IsNullOrEmpty(month) && month != "All~") || (!string.IsNullOrEmpty(state) && state != "All~") || (!string.IsNullOrEmpty(wtg) && wtg != "All~"))
            //{
            //    filter += " WHERE ";
            //    tmrFilter += " WHERE ";
            //}
            int chkfilter = 0;
            if (!string.IsNullOrEmpty(fromDate) && fromDate != "All")
            {
                filter += "(t1.date >= '" + fromDate + "'  and t1.date<= '" + toDate + "')";
                tmrFilter += "det.data_date >= '" + fromDate + "' AND det.data_date <= '" + toDate + "' ";
                chkfilter = 1;
            }
            if (!string.IsNullOrEmpty(state) && state != "All~")
            {
                if (chkfilter == 1) 
                { 
                    filter += " and ";
                    tmrFilter += " and ";
                }
                // filter += "t1.state in (" + state + ")";
                string[] spstate = state.Split(",");
                filter += "t1.state in (";
                tmrFilter += "sm.state in (";
                string states = "";
                for (int i = 0; i < spstate.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spstate[i].ToString()))
                    {
                        states += "'" + spstate[i].ToString() + "',";
                    }
                }
                filter += states.TrimEnd(',') + ")";
                tmrFilter += states.TrimEnd(',') + ")";

                chkfilter = 1;
            }
            if (!string.IsNullOrEmpty(spv) && spv != "All~")
            {
                if (chkfilter == 1)
                {
                    filter += " and ";
                    tmrFilter += " AND ";
                }                // filter += "t2.spv in (" + spv + ")";
                string[] spspv = spv.Split(",");
                filter += "t2.spv in (";
                string spvs = "";
                for (int i = 0; i < spspv.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spspv[i].ToString()))
                    {
                        spvs += "'" + spspv[i].ToString() + "',";
                    }
                }
                filter += spvs.TrimEnd(',') + ")";
                tmrFilter += " sm.spv IN(" + spvs.TrimEnd(',') + ")";

                chkfilter = 1;
            }
            if (!string.IsNullOrEmpty(site) && site != "All~")
            {
                if (chkfilter == 1)
                {
                    filter += " and ";
                    tmrFilter += " AND ";
                }
                // filter += "t1.site in (" + site + ")";
                string[] spsite = site.Split("~");
                filter += "t1.site_id in (";
                string sites = "";
                for (int i = 0; i < spsite.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spsite[i].ToString()))
                    {
                        sites += spsite[i].ToString() + ",";
                    }
                }
                filter += sites.TrimEnd(',') + ")";
                tmrFilter += " det.site_id IN(" + sites.TrimEnd(',') + ")";
                chkfilter = 1;
            }
            if (!string.IsNullOrEmpty(wtg) && wtg != "All~")
            {
                if (chkfilter == 1)
                {
                    filter += " and ";
                    tmrFilter += " AND ";
                }
                // filter += "t1.wtg in (" + wtg + ")";
                string[] spwtg = wtg.Split(",");
                filter += "t1.wtg in (";
                string wtgs = "";
                for (int i = 0; i < spwtg.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spwtg[i].ToString()))
                    {
                        wtgs += "'" + spwtg[i].ToString() + "',";
                    }
                }
                filter += wtgs.TrimEnd(',') + ")";
                tmrFilter += "  det.wtg IN(" + wtgs.TrimEnd(',') + ")";
                chkfilter = 1;

            }
            if (!string.IsNullOrEmpty(month) && month != "All~")
            {
                if (chkfilter == 1)
                {
                    filter += " and ";
                    tmrFilter += " AND ";
                }

                string[] spmonth = month.Split("~");
                filter += "month(date) in (";
                string months = "";
                for (int i = 0; i < spmonth.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spmonth[i].ToString()))
                    {
                        months += "" + spmonth[i].ToString() + ",";
                    }
                }
                filter += months.TrimEnd(',') + ")";
                tmrFilter += "  MONTH(data_date) IN(" + months.TrimEnd(',') + ")";
                chkfilter = 1;

            }
            tmrFilter += "GROUP BY det.site_id"; //changed all_bd -> manual_bd;

            string qry = ""; 
            
            //qry= @"SELECT year(date)as year,DATE_FORMAT(date,'%M') as month,date,t2.country,t1.state,t2.spv,t1.site, t2.total_mw ,(sum(wind_speed)/count(*))as wind_speed, sum(kwh) as kwh, (sum(plf)/count(*))as plf, (sum(ma_actual)/count(*))as ma_actual, (sum(ma_contractual)/count(*))as ma_contractual, (sum(iga)/count(*))as iga, (sum(ega)/count(*))as ega, (sum(ega_b)/count(*))as ega_b,  (sum(ega_c)/count(*))as ega_c,  sum(production_hrs)as grid_hrs, sum(lull_hrs)as lull_hrs ,sum(unschedule_num) as unschedule_hrs, sum(schedule_num)as schedule_hrs, sum(others_num)as others, sum(igbdh_num) as igbdh, sum(egbdh_num) as egbdh, sum(load_shedding_num) as load_shedding	 FROM daily_gen_summary t1 left join site_master t2 on t1.site_id=t2.site_master_id  where    " + filter + " group by t1.state, t2.spv, t1.site  ";

            //qry = "SELECT year(t1.date)as year,DATE_FORMAT(t1.date,'%M') as month,t1.date,t2.country,t1.state,t2.spv,t1.site, t2.total_mw ,(sum(t1.wind_speed)/count(*)) as wind_speed, sum(t1.kwh) as kwh, (sum(t1.plf)/count(*))as plf, (sum(t1.ma_actual)/count(*))as ma_actual, (sum(t1.ma_contractual)/count(*))as ma_contractual, (sum(t1.iga)/count(*))as iga, (sum(t1.ega)/count(*))as ega, (sum(t1.ega_b)/count(*))as ega_b, (sum(t1.ega_c)/count(*))as ega_c, sum(t1.production_hrs)as grid_hrs, sum(t1.lull_hrs)as lull_hrs, sum(t1.unschedule_num) as unschedule_hrs, sum(t1.schedule_num) as schedule_hrs, sum(t1.others_num) as others, sum(t1.igbdh_num) as igbdh, sum(t1.egbdh_num) as egbdh, sum(t1.load_shedding_num) as load_shedding, (SUM(t1.unschedule_num) + SUM(t1.schedule_num) + SUM(t1.others_num) + SUM(t1.igbdh_num) + SUM(t1.egbdh_num) + SUM(t1.load_shedding_num)) AS total_hrs , COALESCE(usmh.loss, 0) AS usmh_loss, COALESCE(smh.loss, 0) AS smh_loss, COALESCE(others.loss, 0) AS others_loss, COALESCE(IGBDH.loss, 0) AS igbdh_loss, COALESCE(EGBDH.loss, 0) AS egbdh_loss, COALESCE(loadShedding.loss, 0) AS loadShedding_loss, (COALESCE(usmh.loss,0) + COALESCE(smh.loss,0) + COALESCE(others.loss, 0) + COALESCE(IGBDH.loss, 0) + COALESCE(EGBDH.loss, 0) + COALESCE(loadShedding.loss, 0)) AS total_loss FROM daily_gen_summary t1 left join site_master t2 on t1.site_id = t2.site_master_id LEFT JOIN(SELECT t4.site, t5.spv as spv, t4.WTGs, t4.all_bd, SUM(t4.loss_kw) AS loss FROM `uploading_file_tmr_data` t4 LEFT JOIN site_master t5 ON t4.site_id = t5.site_master_id  " + tmrFilter + ") AS usmh ON t1.site = usmh.site AND usmh.all_bd = 'USMH' LEFT JOIN(SELECT t4.site, t5.spv as spv, t4.WTGs, t4.all_bd, SUM(t4.loss_kw) AS loss FROM `uploading_file_tmr_data` t4 LEFT JOIN site_master t5 ON t4.site_id = t5.site_master_id  " + tmrFilter + ") AS smh ON t1.site = smh.site AND smh.all_bd = 'SMH' LEFT JOIN(SELECT t4.site, t5.spv as spv, t4.WTGs, t4.all_bd, SUM(t4.loss_kw) AS loss FROM `uploading_file_tmr_data` t4 LEFT JOIN site_master t5 ON t4.site_id = t5.site_master_id  " + tmrFilter + ") AS others ON t1.site = others.site AND others.all_bd = 'Others' LEFT JOIN(SELECT t4.site, t5.spv as spv, t4.WTGs, t4.all_bd, SUM(t4.loss_kw) AS loss FROM `uploading_file_tmr_data` t4 LEFT JOIN site_master t5 ON t4.site_id = t5.site_master_id  " + tmrFilter + ") AS IGBDH ON t1.site = IGBDH.site AND IGBDH.all_bd = 'IGBDH' LEFT JOIN(SELECT t4.site, t5.spv as spv, t4.WTGs, t4.all_bd, SUM(t4.loss_kw) AS loss FROM `uploading_file_tmr_data` t4 LEFT JOIN site_master t5 ON t4.site_id = t5.site_master_id  " + tmrFilter + ") AS EGBDH ON t1.site = EGBDH.site AND EGBDH.all_bd = 'EGBDH' LEFT JOIN(SELECT t4.site, t5.spv as spv, t4.WTGs, t4.all_bd, SUM(t4.loss_kw) AS loss FROM `uploading_file_tmr_data` t4 LEFT JOIN site_master t5 ON t4.site_id = t5.site_master_id  " + tmrFilter + ") AS loadShedding ON t1.site = loadShedding.site AND loadShedding.all_bd = 'Load Shedding'  " + filter + " group by t1.site ORDER BY t1.site, t1.date, t1.wtg; ";

            //qry = "select * from ( SELECT year(t1.date)as year,DATE_FORMAT(t1.date,'%M') as month,t1.date,t2.country,t1.state,t2.spv,t1.site, t2.total_mw ,(sum(t1.wind_speed)/count(*)) as wind_speed, sum(t1.kwh) as kwh, (sum(t1.plf)/count(*))as plf, (sum(t1.ma_actual)/count(*))as ma_actual, (sum(t1.ma_contractual)/count(*))as ma_contractual, (sum(t1.iga)/count(*))as iga, (sum(t1.ega)/count(*))as ega, (sum(t1.ega_b)/count(*))as ega_b, (sum(t1.ega_c)/count(*))as ega_c, sum(t1.production_hrs)as grid_hrs, sum(t1.lull_hrs)as lull_hrs, sum(t1.unschedule_num) as unschedule_hrs, sum(t1.schedule_num) as schedule_hrs, sum(t1.others_num) as others, sum(t1.igbdh_num) as igbdh, sum(t1.egbdh_num) as egbdh, sum(t1.load_shedding_num) as load_shedding, (SUM(t1.unschedule_num) + SUM(t1.schedule_num) + SUM(t1.others_num) + SUM(t1.igbdh_num) + SUM(t1.egbdh_num) + SUM(t1.load_shedding_num)) AS total_hrs  FROM daily_gen_summary t1 left join site_master t2 on t1.site_id = t2.site_master_id where " + filter + "  group by t1.state, t2.spv, t1.site ORDER BY t1.site) as gen left Join(select site as tmlSite, usmh_loss, smh_loss, others_loss, igbdh_loss, egbdh_loss, loadShedding_loss from(select site_id, site, WTGs, sum(usmh_loss) as usmh_loss, sum(smh_loss) as smh_loss, sum(others_loss) as others_loss, sum(igbdh_loss) as igbdh_loss, sum(egbdh_loss) as egbdh_loss, sum(loadShedding_loss) as loadShedding_loss from(SELECT site_id, sm.site, WTGs, CASE WHEN manual_bd = 'USMH' THEN sum(loss_kw) ELSE 0 END AS usmh_loss, CASE WHEN manual_bd = 'SMH' THEN sum(loss_kw) ELSE 0 END AS smh_loss, CASE WHEN manual_bd = 'OthersHour' THEN sum(loss_kw) ELSE 0 END AS others_loss, CASE WHEN manual_bd = 'IGBD' THEN sum(loss_kw) ELSE 0 END AS igbdh_loss, CASE WHEN manual_bd = 'EGBD' THEN sum(loss_kw) ELSE 0 END AS egbdh_loss, CASE WHEN manual_bd = 'LoadShedding' THEN sum(loss_kw) ELSE 0 END AS loadShedding_loss FROM uploading_file_tmr_data left join site_master as sm on uploading_file_tmr_data.site_id = sm.site_master_id  where " + tmrFilter + ") as tabletml group by site ) as tml) as tml on tml.tmlSite = gen.site ;";
            //DGR_v3 new daily basis table.

            qry = $@"SELECT gen.*, tml.usmh_loss, tml.smh_loss, tml.others_loss, tml.igbd_loss AS igbdh_loss, tml.egbd_loss AS egbdh_loss, tml.loadshedding_loss AS loadShedding_loss FROM ( SELECT year(t1.date)as year,DATE_FORMAT(t1.date,'%M') as month,t1.date,t2.country,t1.state,t2.spv,t1.site, t1.site_id, t2.total_mw ,(sum(t1.wind_speed)/count(*)) as wind_speed, sum(t1.kwh) as kwh, (sum(t1.plf)/count(*))as plf, (sum(t1.ma_actual)/count(*))as ma_actual, (sum(t1.ma_contractual)/count(*))as ma_contractual, (sum(t1.iga)/count(*))as iga, (sum(t1.ega)/count(*))as ega, (sum(t1.ega_b)/count(*))as ega_b, (sum(t1.ega_c)/count(*))as ega_c, sum(t1.production_hrs)as grid_hrs, sum(t1.lull_hrs)as lull_hrs, sum(t1.unschedule_num) as unschedule_hrs, sum(t1.schedule_num) as schedule_hrs, sum(t1.others_num) as others, sum(t1.igbdh_num) as igbdh, sum(t1.egbdh_num) as egbdh, sum(t1.load_shedding_num) as load_shedding, (SUM(t1.unschedule_num) + SUM(t1.schedule_num) + SUM(t1.others_num) + SUM(t1.igbdh_num) + SUM(t1.egbdh_num) + SUM(t1.load_shedding_num)) AS total_hrs  FROM daily_gen_summary t1 left join site_master t2 on t1.site_id = t2.site_master_id where {filter} group by t1.state, t2.spv, t1.site ORDER BY t1.site) as gen 
LEFT JOIN (SELECT det.site_id AS site_id, det.data_date AS data_date, (SUM(det.usmh_loss) + SUM(det.healthcheck_loss)) AS usmh_loss, SUM(det.smh_loss) AS smh_loss, SUM(det.others_loss) AS others_loss, SUM(det.igbd_loss) AS igbd_loss, SUM(det.egbd_loss) AS egbd_loss, SUM(det.loadshedding_loss) AS loadshedding_loss FROM daily_expected_vs_actual det LEFT JOIN site_master sm ON det.site_id = sm.site_master_id WHERE {tmrFilter}) AS tml ON tml.site_id = gen.site_id;";

            //where  t1.approve_status=" + approve_status + " and " + filter + " group by t1.state, t2.spv, t1.site  ";
            try
            {
                return await Context.GetData<WindDailyGenReports2>(qry).ConfigureAwait(false);
            }
            catch (Exception)
            {
                throw;
            }

        }

        internal async Task<List<WindDailyBreakdownReport>> GetWindDailyBreakdownReport(string fromDate, string toDate, string country, string state, string spv, string site, string wtg)
        {
            string filter = "";
            int chkfilter = 0;
            if (!string.IsNullOrEmpty(fromDate) && fromDate != "All")
            {
                filter += "(date >= '" + fromDate + "'  and date<= '" + toDate + "')";
                chkfilter = 1;
            }
            if (!string.IsNullOrEmpty(country) && country != "All" && string.IsNullOrEmpty(site))
            {
                if (chkfilter == 1) { filter += " and "; }
                string[] spcountry = country.Split(",");
                filter += "t3.country in (";
                string countrys = "";
                for (int i = 0; i < spcountry.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spcountry[i].ToString()))
                    {
                        countrys += "'" + spcountry[i].ToString() + "',";
                    }
                }
                filter += countrys.TrimEnd(',') + ")";
                chkfilter = 1;
            }
            if (!string.IsNullOrEmpty(state) && state != "All")
            {
                if (chkfilter == 1) { filter += " and "; }
                // filter += "t1.state in (" + state + ")";
                string[] spstate = state.Split(",");
                filter += "t3.state in (";
                string states = "";
                for (int i = 0; i < spstate.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spstate[i].ToString()))
                    {
                        states += "'" + spstate[i].ToString() + "',";
                    }
                }
                filter += states.TrimEnd(',') + ")";

                chkfilter = 1;
            }
            if (!string.IsNullOrEmpty(spv) && spv != "All")
            {
                if (chkfilter == 1) { filter += " and "; }
                // filter += "t2.spv in (" + spv + ")";
                string[] spspv = spv.Split(",");
                filter += "t3.spv in (";
                string spvs = "";
                for (int i = 0; i < spspv.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spspv[i].ToString()))
                    {
                        spvs += "'" + spspv[i].ToString() + "',";
                    }
                }
                filter += spvs.TrimEnd(',') + ")";

                chkfilter = 1;
            }
            if (!string.IsNullOrEmpty(site) && site != "All")
            {
                if (chkfilter == 1) { filter += " and "; }
                // filter += "t1.site in (" + site + ")";
                string[] spsite = site.Split(",");
                filter += "t1.site_id in (";
                string sites = "";
                for (int i = 0; i < spsite.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spsite[i].ToString()))
                    {
                        sites += "" + spsite[i].ToString() + ",";
                    }
                }
                filter += sites.TrimEnd(',') + ")";
                chkfilter = 1;
            }
            if (!string.IsNullOrEmpty(wtg) && wtg != "All")
            {
                if (chkfilter == 1) { filter += " and "; }
                // filter += "t1.wtg in (" + wtg + ")";
                string[] spwtg = wtg.Split(",");
                filter += "t1.wtg in (";
                string wtgs = "";
                for (int i = 0; i < spwtg.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spwtg[i].ToString()))
                    {
                        wtgs += "'" + spwtg[i].ToString() + "',";
                    }
                }
                filter += wtgs.TrimEnd(',') + ")";

            }
            
            List<WindDailyBreakdownReport> _windBDList = new List<WindDailyBreakdownReport>();
            List<WindDailyBreakdownReport> _windBDList2 = new List<WindDailyBreakdownReport>();


            string fetchQry1 = "SELECT date,t1.wtg,bd_type,stop_from,stop_to,total_stop,error_description,action_taken,t3.country,t3.state,t3.spv, t2.site,t4.bd_type_name FROM uploading_file_breakdown t1 left join location_master t2 on t2.wtg=t1.wtg and t2.status =1 left join site_master t3 on t3.site_master_id=t2.site_master_id left join bd_type as t4 on t4.bd_type_id=t1.bd_type WHERE " + filter + " AND t1.approve_status = 1 and t1.import_batch_id = 0 ORDER BY t1.date ASC";
            string functionName = "GetWindDailyBDReport";
            try
            {
                _windBDList = await Context.GetData<WindDailyBreakdownReport>(fetchQry1).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                string msg = "Exception while getting data form uploading_file_breakdown, due to : " + e.ToString();
                //API_ErrorLog(msg);
                LogError(0, 2, 5, functionName, msg, backend);
            }


            string fetchQry2 = "SELECT date,t1.wtg,bd_type,stop_from,stop_to,total_stop,error_description,action_taken,t3.country,t3.state,t3.spv, t2.site,t4.bd_type_name FROM uploading_file_breakdown t1 left join location_master t2 on t2.wtg=t1.wtg and t2.status =1 left join site_master t3 on t3.site_master_id=t2.site_master_id left join bd_type as t4 on t4.bd_type_id=t1.bd_type left join import_batches t5 on t5.import_batch_id = t1.import_batch_id WHERE " + filter + " AND t5.is_approved = 1 ORDER BY t1.date ASC";

                try
                {
                    _windBDList2 = await Context.GetData<WindDailyBreakdownReport>(fetchQry2).ConfigureAwait(false);
                }
                catch(Exception e)
                {
                    string msg = "Exception while getting data form uploading_file_breakdown, due to : " + e.ToString();
                    //API_ErrorLog(msg);
                LogError(0, 2, 5, functionName, msg, backend);
            }

            _windBDList.AddRange(_windBDList2);

            return _windBDList;
        }
        internal async Task<List<SolarDailyGenSummary>> GetSolarDailyGenSummary()
        {
            string qry = @"SELECT *, (SELECT dc_capacity FROM solar_ac_dc_capacity where inverter=t1.location_name)as dc_capacity, (SELECT ac_capacity FROM solar_ac_dc_capacity where inverter=t1.location_name) as ac_capacity  FROM daily_gen_summary_solar t1 ";

            //FROM daily_gen_summary_solar t1 where t1.approve_status=" + approve_status + "";

            return await Context.GetData<SolarDailyGenSummary>(qry).ConfigureAwait(false);

        }

        internal async Task<List<WindDailyGenReports>> GetWindWtgFromdailyGenSummary(string state, string site)
        {
            string filter = "";
            int chkfilter = 0;

            if (!string.IsNullOrEmpty(state) && state != "All" && state != "All~")
            {
                if (chkfilter == 1) { filter += " and "; }
                chkfilter = 1;

                string[] spstate = state.Split("~");
                filter += "state in (";
                string states = "";
                for (int i = 0; i < spstate.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spstate[i].ToString()))
                    {
                        states += "'" + spstate[i].ToString() + "',";
                    }
                }
                filter += states.TrimEnd(',') + ")";

            }
            if (!string.IsNullOrEmpty(site) && site != "All" && site != "All~")
            {
                if (chkfilter == 1) { filter += " and "; }
                chkfilter = 1;

                string[] spsite = site.Split("~");
                filter += "site in (";
                string sites = "";
                for (int i = 0; i < spsite.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spsite[i].ToString()))
                    {
                        sites += "'" + spsite[i].ToString() + "',";
                    }
                }
                filter += sites.TrimEnd(',') + ")";

            }
            if (!string.IsNullOrEmpty(filter))
            {
                filter = " where " + filter;

            }
            string qry = @"select distinct wtg from daily_gen_summary " + filter;
            return await Context.GetData<WindDailyGenReports>(qry).ConfigureAwait(false);

        }
        internal async Task<List<WindPerformanceReports>> GetWindPerformanceReportSiteWise_2(string fromDate, string toDate, string site)
        {

            string datefilter1 = " and (t1.date >= '" + fromDate + "'  and t1.date<= '" + toDate + "') ";
            string filter = "";
            string filter1 = "";
            if (!string.IsNullOrEmpty(site))
            {
                filter += " and t1.site_id IN(" + site + ")";
                filter1 += " where  t1.site_id IN(" + site + ")";
            }
            string qry1 = "create or replace view temp_view as select t1.date, t1.site_id, t2.site, t3.spv,t1.kwh, t1.wind_speed, t1.plf, t1.ma, t1.iga, t1.ega, t1.ega_b, t1.ega_c" +
                " from daily_target_kpi t1, daily_gen_summary t2, site_master t3 " +
                "where t1.site_id = t2.site_id and t1.date = t2.date and t1.site_id = t3.site_master_id " +
                 datefilter1 + filter+
                " group by t1.date, t3.spv, t2.site_id order by site_id; ";
            try
            {
                await Context.ExecuteNonQry<int>(qry1).ConfigureAwait(false);
            }
            catch (Exception)
            {
                string st = "temp";
            }

            string qry2 = " select site, sum(kwh) as tar_kwh, sum(kwh) as tar_kwh_mu, sum(wind_speed)/count(wind_speed) as tar_wind," +
                " sum(plf) / count(plf) as tar_plf, sum(ma) / count(ma) as tar_ma, sum(iga) / count(iga) as tar_iga, " +
                " sum(ega) / count(ega) as tar_ega from temp_view";
            List<WindPerformanceReports> tempdata = new List<WindPerformanceReports>();
            tempdata = await Context.GetData<WindPerformanceReports>(qry2).ConfigureAwait(false);

            string qry5 = "create or replace view temp_view2 as SELECT t1.date,t3.site,t3.spv,(t3.total_mw * 1000) as capacity,t3.total_tarrif,SUM(t1.kwh) as kwh,t2.line_loss,SUM(t1.kwh) - SUM(t1.kwh) * (t2.line_loss / 100) as kwh_afterloss,((SUM(t1.kwh) - SUM(t1.kwh) * (t2.line_loss / 100)) / ((t3.total_mw * 1000) * 24)) * 100 as plf_afterloss FROM `daily_gen_summary` as t1 left join monthly_uploading_line_losses as t2 on t2.site_id = t1.site_id and month_no = MONTH(t1.date) left join site_master as t3 on t3.site_master_id = t1.site_id " + filter1 + "group by t1.date ,t1.site";
            try
            {
                await Context.ExecuteNonQry<int>(qry5).ConfigureAwait(false);
            }
            catch (Exception)
            {
                string st = "temp";

            }

            string qry6 = "SELECT site, total_tarrif, sum(kwh_afterloss)/ 1000000 as act_jmr_kwh_mu, avg(plf_afterloss) as act_plf FROM `temp_view2` where date between '"+ fromDate + "' and '"+ toDate + "' ";
            List<WindPerformanceReports> newdata = new List<WindPerformanceReports>();
            newdata = await Context.GetData<WindPerformanceReports>(qry6).ConfigureAwait(false);
            string qry7 = "SELECT SUM(a.revenue) as revenue FROM(select t1.*, ((t2.kwh_afterloss - t1.kwh) * total_tarrif) / 1000000 as revenue from temp_view as t1 join temp_view2 as t2 on t2.site = t1.site and t1.date = t2.date) as a";
           
            List<WindPerformanceReports> newdata1 = new List<WindPerformanceReports>();
            newdata1 = await Context.GetData<WindPerformanceReports>(qry7).ConfigureAwait(false);

            string strPerformanceQuery = "select AVG(t1.wind_speed) as act_wind,AVG(t1.plf) as act_plf,AVG(t1.ma_actual) as act_ma,AVG(t1.iga) as act_iga,AVG(t1.ega) as act_ega,SUM(t1.kwh_afterlineloss) as act_jmr_kwh,SUM(t1.kwh_afterlineloss / 1000000) as act_jmr_kwh_mu,SUM(t1.kwh) as total_mw,avg(t2.wind_speed) as tar_wind,AVG(t2.plf) as tar_plf,AVG(t2.ma) as tar_ma,AVG(t2.iga) as tar_iga,AVG(t2.ega) as tar_ega,SUM(t2.kwh * 1000000) as tar_kwh,SUM(t2.kwh) as tar_kwh_mu,SUM(t3.	total_tarrif) as total_tarrif from daily_gen_summary as t1 join daily_target_kpi as t2 on t2.date = t1.date left join site_master as t3 on t3.site_master_id=t1.site_id where t1.date >= '" + fromDate + "'  and t1.date <= '" + toDate + "'" + filter;

            List<WindPerformanceReports> data = new List<WindPerformanceReports>();
            data =await Context.GetData<WindPerformanceReports>(strPerformanceQuery).ConfigureAwait(false);
            foreach (WindPerformanceReports _dataelement in data)
            {
                foreach (WindPerformanceReports _tempdataelement in tempdata)
                {
                    //if (_dataelement.site == _tempdataelement.site)
                    //{
                        _dataelement.tar_kwh_mu = _tempdataelement.tar_kwh_mu;
                        _dataelement.tar_kwh = _tempdataelement.tar_kwh;
                        _dataelement.tar_wind = _tempdataelement.tar_wind;
                        _dataelement.tar_iga = _tempdataelement.tar_iga;
                        _dataelement.tar_ma = _tempdataelement.tar_ma;
                        _dataelement.tar_plf = _tempdataelement.tar_plf;
                        _dataelement.tar_ega = _tempdataelement.tar_ega;
                    //}
                }
                foreach (WindPerformanceReports _tempdataelement in newdata)
                {
                   
                        _dataelement.act_jmr_kwh_mu = _tempdataelement.act_jmr_kwh_mu;
                        _dataelement.act_plf = _tempdataelement.act_plf;
                        _dataelement.total_tarrif = _tempdataelement.total_tarrif;

                }

            }
            data[0].revenue = newdata1[0].revenue;
            return data ;// await Context.GetData<WindPerformanceReports>(strPerformanceQuery).ConfigureAwait(false);
        }
		 internal async Task<List<SolarUploadingFileBreakDown>> GetSolarMajorBreakdownData(string fromDate, string toDate, string site,string spv)
        {
            string filtersite = "";
            string spvsiteList = "";
            if (!string.IsNullOrEmpty(spv) && spv != "All" && string.IsNullOrEmpty(site))
            {

                string[] spspv = spv.Split(",");
                filtersite += "  spv in (";
                string spvs = "";
                for (int i = 0; i < spspv.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spspv[i].ToString()))
                    {
                        spvs += "'" + spspv[i].ToString() + "',";
                    }
                }
                filtersite += spvs.TrimEnd(',') + ")";

                string masterquery = "SELECT site_master_solar_id FROM `site_master_solar` where " + filtersite;
                List<SolarSiteMaster> sitelist = new List<SolarSiteMaster>();
                sitelist = await Context.GetData<SolarSiteMaster>(masterquery).ConfigureAwait(false);
                for (var i = 0; i < sitelist.Count; i++)
                {
                    spvsiteList += "'" + sitelist[i].site_master_solar_id + "',";
                }
                spvsiteList = spvsiteList.TrimEnd(',');
                //spvsiteList = spvsiteList.Trim('"');
            }
            string filter = "";
            string filter2 = "";
            if (!string.IsNullOrEmpty(site))
            {
                filter += "AND t1.site_id in (" + site + ")";
                filter2 += " site_id in (" + site + ") and date >= '" + fromDate + "' and date <= '" + toDate + "'";
            }
            if (!string.IsNullOrEmpty(spv) && string.IsNullOrEmpty(site))
            {
                filter += "AND t1.site_id in (" + spvsiteList + ")";
                filter2 += " site_id in (" + spvsiteList + ") and date >= '" + fromDate + "' and date <= '" + toDate + "'";

            }
            filter += " AND t1.date >= '" + fromDate + "' and t1.date <= '" + toDate + "'"; /*group by site_id,bd_type*/
            filter2 += " date >= '" + fromDate + "' and date <= '" + toDate + "'"; /*group by site_id,bd_type*/


            string qry = "SELECT t1.date, t1.site ,t1.bd_type_id, t1.bd_type , t1.bd_remarks ,t1.icr , t1.inv, (HOUR(t1.total_bd) + MINUTE(t1.total_bd) / 60 + SECOND(t1.total_bd) / 3600) as total_bd  FROM uploading_file_breakdown_solar t1 left join `import_batches` as t2 on t2.import_batch_id = t1.import_batch_id where t2.is_approved = 1 and  t1.bd_type_id in (1,2) AND t1.total_bd > '00:30:00'and (((t1.inv='Nil'and t1.smb='Nil' and t1.strings='Nil')) OR ((t1.smb='Nil' and t1.strings='Nil')))" + filter;

            string qry2 = "SELECT date, site ,bd_type_id, bd_type , bd_remarks, if(count(if(icr = 'Nil',NULL,icr)) = 0 ,'All',count(if(icr = 'Nil',NULL,icr))) as icr_cnt, if(count(if(inv = 'Nil',NULL,inv)) = 0 ,'All',count(if(inv = 'Nil',NULL,inv))) as inv_cnt, sum(total_bd) as total_bd  FROM (SELECT t1.date, t1.site ,t1.bd_type_id, t1.bd_type , t1.bd_remarks  , t1.icr ,t1.inv, (HOUR(t1.total_bd) + MINUTE(t1.total_bd) / 60 + SECOND(t1.total_bd) / 3600) as total_bd from uploading_file_breakdown_solar t1 left join `import_batches` as t2 on t2.import_batch_id = t1.import_batch_id where t2.is_approved = 1 and t1.total_bd > '00:30:00'and NOT t1.bd_type_id in (1, 2) and(( (t1.inv ='Nil'and t1.smb ='Nil' and t1.strings ='Nil')) OR (( t1.smb='Nil' and t1.strings='Nil'))))as custom where" + filter2 + " GROUP BY bd_type_id, date, site ;";
            
            //string qry2 = "SELECT date, site ,bd_type_id, bd_type , bd_remarks, count(icr) as icr_cnt, count(if(inv = 'Nil',NULL,inv)) as inv_cnt, sum(total_bd) as total_bd  FROM (SELECT date, site ,bd_type_id, bd_type , bd_remarks  , icr ,inv, (HOUR(total_bd) + MINUTE(total_bd) / 60 + SECOND(total_bd) / 3600) as total_bd from uploading_file_breakdown_solar where `total_bd` > '00:30:00' AND NOT bd_type_id in (1, 2))as custom where" + filter2 + " GROUP BY bd_type_id, date; ";
            //string qry = "Select date, site_name, SEC_TO_TIME(sum(TIME_TO_SEC(total_stop))) as total_stop,count(wtg_id) as wtg_cnt,wtg,bd_type,bd_type_id,error_description,action_taken from uploading_file_breakdown";

            List<SolarUploadingFileBreakDown>_bdData = new List<SolarUploadingFileBreakDown>();
            _bdData = await Context.GetData<SolarUploadingFileBreakDown>(qry).ConfigureAwait(false);

            List<SolarUploadingFileBreakDown> _bdData2 = new List<SolarUploadingFileBreakDown>();
            try
            {
                _bdData2 = await Context.GetData<SolarUploadingFileBreakDown>(qry2).ConfigureAwait(false);

            }catch (Exception e)
            {
                string excpMsg = e.Message;
            }

            // List<WindUploadingFileBreakDown> _bdData3 = new List<WindUploadingFileBreakDown>();
            _bdData.AddRange(_bdData2); ;


            //  return await Context.GetData<WindUploadingFileBreakDown>(qry + filter).ConfigureAwait(false);
            return _bdData;


            // string filter = "";
            //// fromDate = "2022-04-22";
            // //toDate = "2022-04-28";
            // if (!string.IsNullOrEmpty(fromDate))
            // {
            //     filter += " date>='" + fromDate + "' ";
            // }
            // if (!string.IsNullOrEmpty(fromDate))
            // {
            //     filter += " and date<='" + toDate + "' ";
            // }
            // if (!string.IsNullOrEmpty(site))
            // {
            //     filter += " and site_id in (" + site + ")";
            // }
            // //filter += " and smb='Nil' and strings='Nil' ";
            // filter += " and smb='Nil' and strings='Nil' and MINUTE(total_bd) >= MINUTE('00:30') ";

            // //string query = " select date, site, icr, inv,bd_type,from_bd,to_bd ,total_bd, bd_remarks from uploading_file_breakdown_solar where " + filter+ "";
            // string query = " select * from uploading_file_breakdown_solar where " + filter + "";

            //string query = "select date, site,icr, count(icr) as icr_cnt,inv, count(inv) as inv_cnt,bd_type,from_bd,to_bd ,SEC_TO_TIME(sum(TIME_TO_SEC(total_bd))) as total_bd, bd_remarks from uploading_file_breakdown_solar where "+ filter + " group by site_id,bd_type";

            //List<SolarUploadingFileBreakDown> data = new List<SolarUploadingFileBreakDown>();
            //data = await Context.GetData<SolarUploadingFileBreakDown>(query).ConfigureAwait(false);
            //return data;
        }
        internal async Task<List<SolarPerformanceReports2>> GetSolarPerformanceReportSiteWise_2(string fromDate, string toDate, string site, int cnt)
        {


            string tempTbl = "temp_view_new"+ cnt;
            string tempTbl1 = "temp_view_tbl" + cnt;

            string datefilter1 = " and (t1.date >= '" + fromDate + "'  and t1.date<= '" + toDate + "') ";
            string filter = "";
            string filter1 = "";
            if (!string.IsNullOrEmpty(site))
            {
                filter += " and t1.site_id IN(" + site + ")";
                filter1 += " where  t1.site_id IN(" + site + ")";
            }

            string qry1 = "create or replace view "+tempTbl+" as select t1.date, t1.site_id, t2.site, t1.gen_nos, t1.ghi, t1.poa, t1.plf,t1.pr, t1.ma, " +
                "t1.iga, t1.ega from daily_target_kpi_solar t1, daily_gen_summary_solar t2 where t1.date = t2.date and t1.site_id = t2.site_id " +
               datefilter1 + " group by t1.date, t1.site_id;";
            try
            {
                await Context.ExecuteNonQry<int>(qry1).ConfigureAwait(false);
            }
            catch (Exception)
            {
                string st = "temp";
            }
            string qry2 = " select site, site_id, sum(gen_nos) as tar_kwh," +
                " sum(ghi)/count(ghi) as tar_ghi, sum(poa)/count(poa) as tar_poa, sum(plf)/count(plf) as tar_plf," +
                " sum(pr)/count(pr) as tar_pr, sum(ma)/count(ma) as tar_ma, sum(iga)/count(iga) as tar_iga, sum(ega)/count(ega) as tar_ega " +
                "from " + tempTbl + "";// group by site, month(date); ";
            List<SolarPerformanceReports2> tempdata = new List<SolarPerformanceReports2>();
            tempdata = await Context.GetData<SolarPerformanceReports2>(qry2).ConfigureAwait(false);

            string qry5 = "create or replace view "+ tempTbl1 + " as SELECT t1.date,t3.site,(t3.ac_capacity*1000) as capacity,t3.total_tarrif,SUM(t1.inv_kwh) as kwh,t2.LineLoss,SUM(t1.inv_kwh)-SUM(t1.inv_kwh)*(t2.LineLoss/100) as kwh_afterloss,((SUM(t1.inv_kwh)-SUM(t1.inv_kwh)*(t2.LineLoss/100))/((t3.ac_capacity*1000)*24))*100 as plf_afterloss FROM `daily_gen_summary_solar` as t1 left join monthly_line_loss_solar as t2 on t2.site_id= t1.site_id and month_no=MONTH(t1.date) left join site_master_solar as t3 on t3.site_master_solar_id = t1.site_id " + filter1 + " group by t1.date ,t1.site";
            try
            {
                await Context.ExecuteNonQry<int>(qry5).ConfigureAwait(false);
            }
            catch (Exception)
            {
                string st = "temp";
            }

            

            string qry6 = "SELECT site, total_tarrif, sum(kwh_afterloss)/ 1000000 as act_kwh, avg(plf_afterloss) as act_plf  FROM "+tempTbl1+" where date between '" + fromDate + "' and '" + toDate + "' ";
            List<SolarPerformanceReports2> newdata = new List<SolarPerformanceReports2>();

            newdata = await Context.GetData<SolarPerformanceReports2>(qry6).ConfigureAwait(false);
            string qry7 = "SELECT SUM(a.revenue) as revenue FROM(select t1.*, ((t2.kwh_afterloss/1000000 - t1.gen_nos) * total_tarrif) as revenue from " + tempTbl + " as t1 join " + tempTbl1+" as t2 on t2.site = t1.site and t1.date = t2.date) as a";
            List<SolarPerformanceReports2> newdata1 = new List<SolarPerformanceReports2>();

            newdata1 = await Context.GetData<SolarPerformanceReports2>(qry7).ConfigureAwait(false);

            string strPerformanceQuery = "select AVG(t1.ghi) as act_ghi,AVG(t1.poa) as act_poa,AVG(t1.inv_plf_ac) as act_plf,AVG(t1.ma) as act_ma,AVG(t1.iga) as act_iga,AVG(t1.ega) as act_ega,SUM(t1.inv_kwh_afterloss) as act_kwh,SUM(t1.inv_kwh_afterloss / 1000000) as act_kwh_mu,SUM(t1.inv_kwh) as total_mw,avg(t2.ghi) as tar_ghi, avg(t2.poa) as tar_poa, AVG(t2.pr) as tar_pr, AVG(t2.plf) as tar_plf,AVG(t2.ma) as tar_ma,AVG(t2.iga) as tar_iga,AVG(t2.ega) as tar_ega,SUM(t2.gen_nos) * 1000000 as tar_kwh,SUM(t2.gen_nos) as tar_kwh_mu,SUM(t3.total_tarrif) as total_tarrif from daily_gen_summary_solar as t1 join daily_target_kpi_solar as t2 on t2.date = t1.date left join site_master_solar as t3 on t3.site_master_solar_id=t1.site_id  where t1.date >= '" + fromDate + "'  and t1.date <= '" + toDate + "'"+filter;


            List<SolarPerformanceReports2> data = new List<SolarPerformanceReports2>();
            data = await Context.GetData<SolarPerformanceReports2>(strPerformanceQuery).ConfigureAwait(false);

            foreach (SolarPerformanceReports2 _dataelement in data)
            {
                foreach (SolarPerformanceReports2 _tempdataelement in tempdata)
                {
                    //if (_dataelement.site == _tempdataelement.site)
                   // {
                        _dataelement.tar_kwh = _tempdataelement.tar_kwh*1000000;
                       _dataelement.tar_kwh_mu = _tempdataelement.tar_kwh;
                       _dataelement.tar_ega = _tempdataelement.tar_ega;
                        _dataelement.tar_ghi = _tempdataelement.tar_ghi;
                        _dataelement.tar_iga = _tempdataelement.tar_iga;
                        _dataelement.tar_ma = _tempdataelement.tar_ma;
                        _dataelement.tar_plf = _tempdataelement.tar_plf;
                        _dataelement.tar_poa = _tempdataelement.tar_poa;
                        _dataelement.tar_pr = _tempdataelement.tar_pr;
                    //}

                }
                foreach (SolarPerformanceReports2 _tempdataelement in newdata)
                {
                    //if (_dataelement.site == _tempdataelement.site)
                    //{
                        _dataelement.act_kwh = _tempdataelement.act_kwh*1000000;
                        _dataelement.act_kwh_mu = _tempdataelement.act_kwh;
                    _dataelement.act_plf = _tempdataelement.act_plf;

                    //}
                }


            }
            data[0].revenue = newdata1[0].revenue;
            return data;
           // return await Context.GetData<SolarPerformanceReports2>(strPerformanceQuery).ConfigureAwait(false);
        }
        /*internal async Task<List<WindPerformanceReports>> GetWindPerformanceReportSiteWise_3(string fromDate, string toDate, string site)
        {



            string strPerformanceQuery = "select AVG(t1.wind_speed) as act_wind,AVG(t1.plf) as act_plf,AVG(t1.ma_actual) as act_ma,AVG(t1.iga) as act_iga,AVG(t1.ega) as act_ega,SUM(t1.kwh_afterlineloss) as act_jmr_kwh,SUM(t1.kwh_afterlineloss / 1000000) as act_jmr_kwh_mu,SUM(t1.kwh) as total_mw,avg(t2.wind_speed) as tar_wind,AVG(t2.plf) as tar_plf,AVG(t2.ma) as tar_ma,AVG(t2.iga) as tar_iga,AVG(t2.ega) as tar_ega,SUM(t2.kwh * 1000000) as tar_kwh,SUM(t2.kwh) as tar_kwh_mu from daily_gen_summary as t1 join daily_target_kpi as t2 on t2.date = t1.date where t1.date >= '" + fromDate + "'  and t1.date <= '" + toDate + "' and t1.site_id IN(" + site + ")";

            return await Context.GetData<WindPerformanceReports>(strPerformanceQuery).ConfigureAwait(false);
        }
        internal async Task<List<WindPerformanceReports>> GetWindPerformanceReportSiteWise_4(string fromDate, string toDate, string site)
        {



           
            string strPerformanceQuery = "select AVG(t1.wind_speed) as act_wind,AVG(t1.plf) as act_plf,AVG(t1.ma_actual) as act_ma,AVG(t1.iga) as act_iga,AVG(t1.ega) as act_ega,SUM(t1.kwh_afterlineloss) as act_jmr_kwh,SUM(t1.kwh_afterlineloss / 1000000) as act_jmr_kwh_mu,SUM(t1.kwh) as total_mw,avg(t2.wind_speed) as tar_wind,AVG(t2.plf) as tar_plf,AVG(t2.ma) as tar_ma,AVG(t2.iga) as tar_iga,AVG(t2.ega) as tar_ega,SUM(t2.kwh * 1000000) as tar_kwh,SUM(t2.kwh) as tar_kwh_mu from daily_gen_summary as t1 join daily_target_kpi as t2 on t2.date = t1.date where t1.date >= '" + fromDate + "'  and t1.date <= '" + toDate + "' and t1.site_id IN(" + site + ")";

            return await Context.GetData<WindPerformanceReports>(strPerformanceQuery).ConfigureAwait(false);
        }*/
        internal async Task<List<WindPerformanceReports>> GetWindPerformanceReportSiteWise(string fy, string fromDate, string todate,string site,string spv)
        {
            // int chkfilter = 0;
            string filtersite = "";
            string spvsiteList = "";
            if (!string.IsNullOrEmpty(spv) && spv != "All" && string.IsNullOrEmpty(site))
            {
              
                string[] spspv = spv.Split(",");
                filtersite += "  spv in (";
                string spvs = "";
                for (int i = 0; i < spspv.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spspv[i].ToString()))
                    {
                        spvs += "'" + spspv[i].ToString() + "',";
                    }
                }
                filtersite += spvs.TrimEnd(',') + ")";

                string masterquery = "SELECT site_master_id FROM `site_master` where " + filtersite;
                List<WindSiteMaster> sitelist = new List<WindSiteMaster>();
                sitelist = await Context.GetData<WindSiteMaster>(masterquery).ConfigureAwait(false);
                for (var i = 0; i < sitelist.Count; i++)
                {
                    spvsiteList +="'"+sitelist[i].site_master_id + "',";
                }
                spvsiteList = spvsiteList.TrimEnd(',');
                //spvsiteList = spvsiteList.Trim('"');
            }
            
            string datefilter1 = " and (t1.date >= '" + fromDate + "'  and t1.date<= '" + todate + "') ";

            string filter = "";
            string tmlFilter = " t1.data_date >= '" + fromDate + "' AND t1.data_date <= '" + todate + "'";
            if (!string.IsNullOrEmpty(site))
            {
                filter += " and t1.site_id IN(" + site + ") ";
                tmlFilter += " AND t1.site_id IN(" + site + ")";
            }
            if (!string.IsNullOrEmpty(spv) && string.IsNullOrEmpty(site))
            {
                filter += " and t1.site_id IN(" + spvsiteList + ") ";
                tmlFilter += " AND t1.site_id IN(" + site + ")";

            }

            string qry1 = "create or replace view temp_view as select t1.date, t1.site_id, t2.site, t3.spv,t1.kwh, t1.wind_speed, t1.plf, t1.ma, t1.iga, t1.ega" +
                " from daily_target_kpi t1, daily_gen_summary t2, site_master t3 " +
                "where t1.site_id = t2.site_id and t1.date = t2.date and t1.site_id = t3.site_master_id " +
                 datefilter1 +
                " group by t1.date, t3.spv, t2.site_id order by site_id; ";
            try
            {
                await Context.ExecuteNonQry<int>(qry1).ConfigureAwait(false);
            }
            catch (Exception ex)
            {
                string st = "temp";
            }
            

            string qry2 = " select site,spv, sum(kwh)*100000 as tarkwh, sum(kwh) as tar_kwh_mu, sum(wind_speed)/count(wind_speed) as tar_wind," +
                " sum(plf) / count(plf) as tar_plf, sum(ma) / count(ma) as tar_ma, sum(iga) / count(iga) as tar_iga, " +
                " sum(ega) / count(ega) as tar_ega from temp_view group by site  ";



            List<WindPerformanceReports> tempdata = new List<WindPerformanceReports>();
            tempdata = await Context.GetData<WindPerformanceReports>(qry2).ConfigureAwait(false);

            string qry5 = "create or replace view temp_view2 as SELECT t1.date,t1.site,(t3.total_mw*1000) as capacity,SUM(t1.kwh) as kwh,t2.line_loss,SUM(t1.kwh)-SUM(t1.kwh)*(t2.line_loss/100) as kwh_afterloss,((SUM(t1.kwh)-SUM(t1.kwh)*(t2.line_loss/100))/((t3.total_mw*1000)*24))*100 as plf_afterloss FROM `daily_gen_summary` as t1 left join monthly_uploading_line_losses as t2 on t2.site_id= t1.site_id and month_no=MONTH(t1.date) and year = year(t1.date) left join site_master as t3 on t3.site_master_id = t1.site_id group by t1.date ,t1.site";
            try
            {
                await Context.ExecuteNonQry<int>(qry5).ConfigureAwait(false);
            }
            catch (Exception)
            {
                string st = "temp";

            }
            string qry6 = "SELECT site , sum(kwh_afterloss)/1000000 as act_jmr_kwh_mu, avg(plf_afterloss) as act_plf FROM `temp_view2` where date between '" + fromDate + "' and '"+ todate + "' group by site";

            List<WindPerformanceReports> newdata = new List<WindPerformanceReports>();
            newdata = await Context.GetData<WindPerformanceReports>(qry6).ConfigureAwait(false);

            string qry = @" select site,
            (select total_mw from site_master where site=t1.site)as total_mw, 
            (select (sum(kwh)*1000000)as tarkwh from daily_target_kpi
             where site=t1.site and (date >= '" + fromDate + "'  and date<= '" + todate + "') )as tar_kwh ,(SELECT sum(kwh)as tarkwh FROM daily_target_kpi where fy='" + fy + "' and (date >= '" + fromDate + "'  and date<= '" + todate + "') and site=t1.site)as tar_kwh_mu,  (sum(kwh)-(sum(kwh)*((select  replace(line_loss,'%','')as line_loss  from monthly_uploading_line_losses where fy='" + fy + "' and month=DATE_FORMAT(t1.date, '%b') and site=t1.site order by monthly_uploading_line_losses_id desc limit 1)/100))) as act_jmr_kwh,  (sum(kwh)-(sum(kwh)*((select  replace(line_loss,'%','')as line_loss  from monthly_uploading_line_losses where fy='" + fy + "' and month=DATE_FORMAT(t1.date, '%b')  and site=t1.site order by monthly_uploading_line_losses_id desc limit 1)/100)))/1000000 as act_jmr_kwh_mu, (SELECT total_tarrif FROM site_master where site=t1.site)as total_tarrif,  (select (sum(wind_speed)/count(*)) as tarwind from daily_target_kpi t2  where  site=t1.site and (date >= '" + fromDate + "'  and date<= '" + todate + "'))as tar_wind, (sum(wind_speed)/count(*))as act_Wind, (SELECT (sum(plf)/count(*)) FROM daily_target_kpi where site=t1.site  and fy='" + fy + "' and (date >= '" + fromDate + "'  and date<= '" + todate + "'))as tar_plf, (sum(plf)/count(*))as act_plf,  (SELECT (sum(ma)/count(*)) FROM daily_target_kpi where site=t1.site  and fy='" + fy + "' and (date >= '" + fromDate + "'  and date<= '" + todate + "'))as tar_ma, (avg(ma_actual)) as act_ma,  (SELECT (sum(iga)/count(*)) FROM daily_target_kpi where site=t1.site  and fy= '" + fy + "' and (date >= '" + fromDate + "'  and date<= '" + todate + "'))as tar_iga, (sum(iga)/count(*)) as act_iga,   (SELECT (sum(ega)/count(*)) FROM daily_target_kpi where site=t1.site  and fy='" + fy + "' and (date >= '" + fromDate + "'  and date<= '" + todate + "'))as tar_ega, (sum(ega)/count(*)) as act_ega from daily_gen_summary t1 where  (date >= '" + fromDate + "'  and date<= '" + todate + "') "+ filter + " group by site";

            //daily_gen_summary t1 where t1.approve_status=" + approve_status + " and (date >= '" + fromDate + "'  and date<= '" + todate + "') group by site";
            List<WindPerformanceReports> data = new List<WindPerformanceReports>();
            try
            {
                data = await Context.GetData<WindPerformanceReports>(qry).ConfigureAwait(false);
            }
            catch(Exception e)
            {
                string msg = "Exception while retrieving data for UI display, due to : " + e.ToString();
            }
            List<WindPerformanceReports> tmlData = new List<WindPerformanceReports>();
            //string tmlQry = "SELECT t1.site, t1.site_id, t1.WTGs, t2.spv, SUM(t1.exp_power_kw) as exp_power FROM `uploading_file_tmr_data` t1 LEFT JOIN site_master t2 ON t1.site_id = t2.site_master_id WHERE " + tmlFilter + " GROUP BY t1.site_id";

            string tmlQry = $"SELECT t1.site_id, SUM(t1.adjusted_expected) AS exp_power, t2.site, t2.spv FROM daily_expected_vs_actual t1 LEFT JOIN site_master t2 ON t1.site_id = t2.site_master_id WHERE {tmlFilter} GROUP BY t1.site_id;";
            try
            {
                tmlData = await Context.GetData<WindPerformanceReports>(tmlQry).ConfigureAwait(false);
            }
            catch(Exception e)
            {

            }
            foreach (WindPerformanceReports _dataelement in data)
            {
                foreach (WindPerformanceReports _tempdataelement in tempdata)
                {
                    if (_dataelement.site == _tempdataelement.site)
                    {
                        _dataelement.tar_kwh_mu = _tempdataelement.tar_kwh_mu;
                        _dataelement.tar_kwh = _tempdataelement.tar_kwh;
                        _dataelement.tar_wind = _tempdataelement.tar_wind;
                        _dataelement.tar_iga = _tempdataelement.tar_iga;
                        _dataelement.tar_ma = _tempdataelement.tar_ma;
                        _dataelement.tar_plf = _tempdataelement.tar_plf;
                        _dataelement.tar_ega = _tempdataelement.tar_ega;
                    }
                }
                foreach (WindPerformanceReports _tempdataelement in newdata)
                {
                    if (_dataelement.site == _tempdataelement.site)
                    {
                        _dataelement.act_jmr_kwh_mu = _tempdataelement.act_jmr_kwh_mu;
                        _dataelement.act_plf = _tempdataelement.act_plf;
                        
                    }
                }
                foreach (WindPerformanceReports _tempdataelement in tmlData)
                {
                    if (_dataelement.site == _tempdataelement.site)
                    {
                        _dataelement.exp_power = _tempdataelement.exp_power;                        
                    }
                }
            }
            return data; //await Context.GetData<WindPerformanceReports>(qry).ConfigureAwait(false);

        }

        internal async Task<List<WindPerformanceReports>> GetWindPerformanceReportBySPVWise(string fy, string fromDate, string todate,string site,string spv)
        {
            string filtersite = "";
            string spvsiteList = "";
            string tmlFilter = "";
            if (!string.IsNullOrEmpty(spv) && spv != "All" && string.IsNullOrEmpty(site))
            {
                string[] spspv = spv.Split(",");
                filtersite += "  spv in (";
                string spvs = "";
                
                for (int i = 0; i < spspv.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spspv[i].ToString()))
                    {
                        spvs += "'" + spspv[i].ToString() + "',";
                    }
                }
                filtersite += spvs.TrimEnd(',') + ")";
                tmlFilter += " t2.spv IN(" + spvs.TrimEnd(',') + ")";
                string masterquery = "SELECT site_master_id FROM `site_master` where " + filtersite;
                List<WindSiteMaster> sitelist = new List<WindSiteMaster>();
                sitelist = await Context.GetData<WindSiteMaster>(masterquery).ConfigureAwait(false);
                for (var i = 0; i < sitelist.Count; i++)
                {
                    spvsiteList += "'" + sitelist[i].site_master_id + "',";
                }
                spvsiteList = spvsiteList.TrimEnd(',');
                //spvsiteList = spvsiteList.Trim('"');
            }

            string datefilter1 = " and (t1.date >= '" + fromDate + "'  and t1.date<= '" + todate + "') ";
            string filter = "";
            string filter2 = "";
            
            if (!string.IsNullOrEmpty(site))
            {
                filter += " and t1.site_id IN(" + site + ") ";
                filter2 += " where site_master_id IN(" + site + ") ";
                tmlFilter += " t1.site_id IN(" + site + ")";
            }
            if (!string.IsNullOrEmpty(spv) && string.IsNullOrEmpty(site))
            {
                //filter += " and t1.site_id IN(" + spvsiteList + ") ";
                //tmlFilter += " t1.site_id IN(" + site + ")";
                filter += " and t1.site_id IN(" + spvsiteList + ") ";
                filter2 += " where site_master_id IN(" + spvsiteList + ") ";
                if (tmlFilter == "")
                {
                    tmlFilter += " t1.site_id IN(" + spvsiteList + ")";
                }
                else
                {
                    tmlFilter += " AND t1.site_id IN(" + spvsiteList + ")";
                }
            }
            string qry1 = "create or replace view temp_viewSPV as select t1.date, t1.site_id, t2.site, t3.spv,t1.kwh, t1.wind_speed, t1.plf, t1.ma, t1.iga, t1.ega" +
                " from daily_target_kpi t1, daily_gen_summary t2, site_master t3 " +
                "where t1.site_id = t2.site_id and t1.date = t2.date and t1.site_id = t3.site_master_id " +
                 datefilter1 +
                " group by t1.date, t3.spv, t2.site_id order by site_id; ";
            string functionName = "GetWindPerformanceReportBySPVWise";
            try
            {
                await Context.ExecuteNonQry<int>(qry1).ConfigureAwait(false);
                //API_InformationLog("GetWindPerformanceReportBySPVWise function Created temp_viewSPV ");
            }
            catch (Exception e)
            {
                string st = "GetWindPerformanceReportBySPVWise function returned Exception in creating temp_viewSpv " + e.Message;
                //API_ErrorLog( st);
                LogError(0, 2, 5, functionName, st, backend);
            }

            string qry2 = " select spv, sum(kwh)*100000 as tar_kwh, sum(kwh) as tar_kwh_mu, sum(wind_speed)/count(wind_speed) as tar_wind," +
                " sum(plf) / count(plf) as tar_plf, sum(ma) / count(ma) as tar_ma, sum(iga) / count(iga) as tar_iga, " +
                " sum(ega) / count(ega) as tar_ega from temp_viewSPV group by spv  ";
            List<WindPerformanceReports> tempdata = new List<WindPerformanceReports>();
            try
            {
                tempdata = await Context.GetData<WindPerformanceReports>(qry2).ConfigureAwait(false);
                //API_InformationLog("GetWindPerformanceReportBySPVWise function selected data from tempview_SPV");
            }catch (Exception e)
            {
                string msg = "GetWindPerformanceReportBySPVWise function returned Exception in selecting fromtemp_viewSPV " + e.Message;
                //API_ErrorLog(msg);
                LogError(0, 2, 5, functionName, msg, backend);
            }

            string qry5 = "create or replace view temp_viewSPV2 as SELECT t1.date,t3.site,t3.spv,(t3.total_mw*1000) as capacity,SUM(t1.kwh) as kwh,t2.line_loss,SUM(t1.kwh)-SUM(t1.kwh)*(t2.line_loss/100) as kwh_afterloss,((SUM(t1.kwh)-SUM(t1.kwh)*(t2.line_loss/100))/((t3.total_mw*1000)*24))*100 as plf_afterloss FROM `daily_gen_summary` as t1 left join monthly_uploading_line_losses as t2 on t2.site_id= t1.site_id and month_no=MONTH(t1.date) and year=year(t1.date)  left join site_master as t3 on t3.site_master_id = t1.site_id group by t1.date ,t1.site";
            try
            {
                await Context.ExecuteNonQry<int>(qry5).ConfigureAwait(false);
                //API_InformationLog("GetWindPerformanceReportBySPVWise function Created tempView_SPV2");
            }
            catch (Exception e)
            {
                string msg = "GetWindPerformanceReportBySPVWise function returned Exception while creating tempview_SPV2 :" + e.Message;
                //API_ErrorLog( msg);
                LogError(0, 2, 5, functionName, msg, backend);

            }
            string qry6 = "SELECT spv , sum(kwh_afterloss)/1000000 as act_jmr_kwh_mu, avg(plf_afterloss) as act_plf FROM `temp_viewSPV2` where date between '" + fromDate + "' and '" + todate + "' group by spv";

            List<WindPerformanceReports> newdata = new List<WindPerformanceReports>();
            try
            {
                newdata = await Context.GetData<WindPerformanceReports>(qry6).ConfigureAwait(false);
                //API_InformationLog("GetWindPerformanceReportBySPVWise function selected from tempview_SPV2");

            }catch(Exception e){
                string msg = "GetWindPerformanceReportBySPVWise function returned Exception while selecting from tempView_SPV2 :" + e.Message;
                //API_ErrorLog(msg);
                LogError(0, 2, 5, functionName, msg, backend);
            }

            string qry7 = "select spv,SUM(total_mw)  as total_mw from site_master " + filter2 + " group by spv ";

            List<WindPerformanceReports> newdata2 = new List<WindPerformanceReports>();
            try
            {
                newdata2 = await Context.GetData<WindPerformanceReports>(qry7).ConfigureAwait(false);
                //API_InformationLog("GetWindPerformanceReportBySPVWise function selected data from site_master table");
            }catch(Exception e)
            {
                string msg = "GetWindPerformanceReportBySPVWise function returned Exception while selecting data from site_master table ";
                //API_ErrorLog(msg);
                LogError(0, 2, 5, functionName, msg, backend);
            }


            string qry = @" select  t1.site,t2.spv,
(select total_mw from site_master where site=t1.site)as total_mw, 
(select (sum(kwh)*1000000)as tarkwh from daily_target_kpi
 where site=t1.site and (date >= '" + fromDate + "'  and date<= '" + todate + "') )as tar_kwh ," +
 "(SELECT sum(kwh)as tarkwh FROM daily_target_kpi where fy='" + fy + "' and (date >= '" + fromDate + "'  and date<= '" + todate + "') and site=t1.site)as tar_kwh_mu, " +
 " (sum(kwh)-(sum(kwh)*((select  replace(line_loss,'%','')as line_loss  from monthly_uploading_line_losses where fy='" + fy + "' " +
 "and month_no=month(t1.date) and site=t1.site order by monthly_uploading_line_losses_id desc limit 1)/100))) as act_jmr_kwh, " +
 " (sum(kwh)-(sum(kwh)*((select  replace(line_loss,'%','')as line_loss  from monthly_uploading_line_losses " +
 "where fy='" + fy + "' and month_no=month(t1.date)  and site=t1.site order by monthly_uploading_line_losses_id desc limit 1)/100)))/1000000 as act_jmr_kwh_mu, " +
 "(SELECT total_tarrif FROM site_master where site=t1.site)as total_tarrif,  " +
 "(select (sum(wind_speed)/count(*))as tarwind from daily_target_kpi t2  where  site=t1.site and (date >= '" + fromDate + "'  and date<= '" + todate + "'))as tar_wind, " +
 "(sum(wind_speed)/count(*))as act_Wind, (SELECT (sum(plf)/count(*)) FROM daily_target_kpi where site=t1.site  and fy='" + fy + "' and (date >= '" + fromDate + "'  and date<= '" + todate + "'))as tar_plf, " +
 "(sum(plf)/count(*))as act_plf,  (SELECT (sum(ma)/count(*))  FROM daily_target_kpi where site=t1.site  and fy='" + fy + "' and (date >= '" + fromDate + "'  and date<= '" + todate + "'))as tar_ma," +
 " (sum(ma_actual)/count(*)) as act_ma,  (SELECT (sum(iga)/count(*)) FROM daily_target_kpi where site=t1.site  and fy= '" + fy + "' and (date >= '" + fromDate + "'  and date<= '" + todate + "'))as tar_iga," +
 " (sum(iga)/count(*)) as act_iga,   (SELECT (sum(ega)/count(*)) FROM daily_target_kpi where site=t1.site  and fy='" + fy + "' and (date >= '" + fromDate + "'  and date<= '" + todate + "'))as tar_ega, " +
 "(sum(ega)/count(*)) as act_ega from daily_gen_summary t1  left join site_master t2 on t1.site=t2.site where   (date >= '" + fromDate + "'  and date<= '" + todate + "') "+ filter + " group by spv";

            List<WindPerformanceReports> data = new List<WindPerformanceReports>();
            try
            {
                data = await Context.GetData<WindPerformanceReports>(qry).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                string msg = "Exception while retriving data for displaying due to : " + e.ToString();
                LogError(0, 2, 5, functionName, msg, backend);
            }
            List<WindPerformanceReports> tmlData = new List<WindPerformanceReports>();
            //SELECT t1.site, t1.site_id, t1.WTGs, t2.spv FROM `uploading_file_tmr_data` t1 LEFT JOIN site_master t2 ON t1.site_id = t2.site_master_id WHERE DATE(t1.Time_stamp) >= "2023-04-06" AND DATE(t1.Time_stamp) <= "2023-04-06" GROUP BY t2.spv;
            //string tmlQry = "SELECT t1.site, t1.site_id, t1.WTGs, t2.spv, SUM(t1.exp_power_kw) as exp_power FROM `uploading_file_tmr_data` t1 LEFT JOIN site_master t2 ON t1.site_id = t2.site_master_id WHERE DATE(t1.Time_stamp) >= '" + fromDate + "' AND DATE(t1.Time_stamp) <= '" + todate + "' GROUP BY t2.spv";
            //SELECT t1.site_id, SUM(t1.expected_power) AS exp_power, t2.spv FROM `daily_expected_vs_actual` t1 LEFT JOIN site_master t2 ON t1.site_id = t2.site_master_id WHERE t1.data_date >= "2024-02-23" AND t1.data_date <= "2024-02-23" AND t1.site_id IN(227) GROUP BY t2.spv;
            string tmlQry = $"SELECT t1.site_id, SUM(t1.adjusted_expected) AS exp_power, t2.spv FROM daily_expected_vs_actual t1 LEFT JOIN site_master t2 ON t1.site_id = t2.site_master_id WHERE t1.data_date >= '{fromDate}' AND t1.data_date <= '{todate}' AND {tmlFilter} GROUP BY t2.spv;";
            try
            {
                tmlData = await Context.GetData<WindPerformanceReports>(tmlQry).ConfigureAwait(false);
            }catch(Exception e)
            {
                string msg = "Exception while retriving expected power data from tml table due to : " + e.ToString();
                LogError(0, 2, 5, functionName, msg, backend);
            }

            foreach (WindPerformanceReports _dataelement in data)
            {
                foreach (WindPerformanceReports _tempdataelement in tempdata)
                {
                    if (_dataelement.spv == _tempdataelement.spv)
                    {
                        _dataelement.tar_kwh_mu = _tempdataelement.tar_kwh_mu;
                        _dataelement.tar_kwh = _tempdataelement.tar_kwh;
                        _dataelement.tar_wind = _tempdataelement.tar_wind;
                        _dataelement.tar_iga = _tempdataelement.tar_iga;
                        _dataelement.tar_ma = _tempdataelement.tar_ma;
                        _dataelement.tar_plf = _tempdataelement.tar_plf;
                        _dataelement.tar_ega = _tempdataelement.tar_ega;
                    }
                }
                foreach (WindPerformanceReports _tempdataelement in newdata)
                {
                    if (_dataelement.spv == _tempdataelement.spv)
                    {
                        _dataelement.act_jmr_kwh_mu = _tempdataelement.act_jmr_kwh_mu;
                        _dataelement.act_plf = _tempdataelement.act_plf;

                    }
                }
                foreach (WindPerformanceReports _tempdataelement in newdata2)
                {
                    if (_dataelement.spv == _tempdataelement.spv)
                    {
                        _dataelement.total_mw = _tempdataelement.total_mw;
                       

                    }
                }
                foreach (WindPerformanceReports _tempdataelement in tmlData)
                {
                    if (_dataelement.spv == _tempdataelement.spv)
                    {
                        _dataelement.exp_power = _tempdataelement.exp_power;
                       

                    }
                }
            }
            //API_InformationLog("GetWindPerformanceReportBySPVWise function returned data successfully. End of function");

            return data;// await Context.GetData<WindPerformanceReports>(qry).ConfigureAwait(false);

        }

        public async Task<List<SolarSiteMaster>> GetSolarSiteData(string state, string spv, string site)
        {
            string filter = "";
            if (!string.IsNullOrEmpty(site) || !string.IsNullOrEmpty(state) || !string.IsNullOrEmpty(spv))
            {
                filter += " where ";
            }
            if (!string.IsNullOrEmpty(site))
            {
                filter += " site_master_solar_id IN(" + site + ")";
            }

            if (!string.IsNullOrEmpty(state) && state != "All")
            {

                string[] siteSplit = state.Split(",");
                if (siteSplit.Length > 0)
                {
                    string statenames = "";
                    for (int i = 0; i < siteSplit.Length; i++)
                    {
                        if (!string.IsNullOrEmpty(siteSplit[i]))
                        {
                            statenames += "'" + siteSplit[i] + "',";
                        }
                    }
                    statenames = statenames.TrimEnd(',');
                    //filter += " and site in(" + sitesnames + ")";

                    filter += " state IN(" + statenames + ")";
                }

            }
            if (!string.IsNullOrEmpty(spv) && spv != "All")
            {

                string[] spvSplit = spv.Split(",");
                if (spvSplit.Length > 0)
                {
                    string spvnames = "";
                    for (int i = 0; i < spvSplit.Length; i++)
                    {
                        if (!string.IsNullOrEmpty(spvSplit[i]))
                        {
                            spvnames += "'" + spvSplit[i] + "',";
                        }
                    }
                    spvnames = spvnames.TrimEnd(',');
                    //filter += " and site in(" + sitesnames + ")";

                    filter += " and spv IN(" + spvnames + ")";
                    //filter += " where state='" + state + "' and spv='" + spv + "'";
                }

            }
            string query = "SELECT * FROM `site_master_solar`" + filter+ " order by site ";
            List<SolarSiteMaster> _sitelist = new List<SolarSiteMaster>();
            _sitelist = await Context.GetData<SolarSiteMaster>(query).ConfigureAwait(false);
            return _sitelist;


        }
        internal async Task<List<SolarDailyBreakdownReport>> GetSolarDailyBreakdownReport(string fromDate, string toDate, string country, string state, string spv, string site, string inv)
        {
            string filter = "";
            int chkfilter = 0;
            if (!string.IsNullOrEmpty(fromDate) && fromDate != "All")
            {
                filter += "(date >= '" + fromDate + "'  and date<= '" + toDate + "')";
                chkfilter = 1;
            }
            //if (!string.IsNullOrEmpty(country) && country != "All~")
            //{
            //    if (chkfilter == 1) { filter += " and "; }
            //    //string[] spcountry = country.Split(",");
            //    //filter += "t2.country in (";
            //    //string countrys = "";
            //    //for (int i = 0; i < spcountry.Length; i++)
            //    //{
            //    //    if (!string.IsNullOrEmpty(spcountry[i].ToString()))
            //    //    {
            //    //        countrys += "'" + spcountry[i].ToString() + "',";
            //    //    }
            //    //}
            //    //filter += countrys.TrimEnd(',') + ")";
            //    filter += "t2.country = " + country;
            //    chkfilter = 1;
            //}
            if (!string.IsNullOrEmpty(state) && state != "All~")
            {
                if (chkfilter == 1) { filter += " and "; }
                // filter += "t1.state in (" + state + ")";
                string[] spstate = state.Split(",");
                filter += "t2.state in (";
                string states = "";
                for (int i = 0; i < spstate.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spstate[i].ToString()))
                    {
                        states += "'" + spstate[i].ToString() + "',";
                    }
                }
                filter += states.TrimEnd(',') + ")";

                chkfilter = 1;
            }
            if (!string.IsNullOrEmpty(spv) && spv != "All~")
            {
                if (chkfilter == 1) { filter += " and "; }

                string[] spspv = spv.Split(",");
                filter += "t2.spv in (";
                string spvs = "";
                for (int i = 0; i < spspv.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spspv[i].ToString()))
                    {
                        spvs += "'" + spspv[i].ToString() + "',";
                    }
                }
                filter += spvs.TrimEnd(',') + ")";

                chkfilter = 1;
            }
            if (!string.IsNullOrEmpty(site) && site != "All~")
            {
                if (chkfilter == 1) { filter += " and "; }

                string[] spsite = site.Split(",");
                filter += "t1.site_id in (";
                string sites = "";
                for (int i = 0; i < spsite.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spsite[i].ToString()))
                    {
                        sites += spsite[i].ToString() + ",";
                    }
                }
                filter += sites.TrimEnd(',') + ")";
                chkfilter = 1;
            }
            if (!string.IsNullOrEmpty(inv) && inv != "")
            {
                if (chkfilter == 1) { filter += " and "; }

                string[] spinv = inv.Split(",");
                filter += " CONCAT(t1.icr,'/',t1.inv) in (";
                string invs = "";
                for (int i = 0; i < spinv.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spinv[i].ToString()))
                    {
                        invs += "'" + spinv[i].ToString() + "',";
                        //invs += "+spinv[i].ToString() + '",";
                    }
                }
                filter += invs.TrimEnd(',') + ")";
                chkfilter = 1;
            }
            List<SolarDailyBreakdownReport> _solarBDList1 = new List<SolarDailyBreakdownReport>();


            string fetchQry1 = "SELECT date,t2.country,t2.state,t2.spv,t2.site,bd_type,icr,inv,smb,strings, from_bd,to_bd,total_bd as total_stop,bd_remarks, action_taken FROM uploading_file_breakdown_solar t1 left join site_master_solar t2 on t2.site_master_solar_id=t1.site_id  WHERE " + filter + " AND t1.approve_status = 1 and t1.import_batch_id= 0 ORDER BY t1.date ASC";

            _solarBDList1 = await Context.GetData<SolarDailyBreakdownReport>(fetchQry1).ConfigureAwait(false);

            List<SolarDailyBreakdownReport> _solarBDList = new List<SolarDailyBreakdownReport>();
           

                string fetchQry = "SELECT date,t2.country,t2.state,t2.spv,t2.site,bd_type,icr,inv,smb,strings, from_bd,to_bd,total_bd as total_stop,bd_remarks, action_taken FROM uploading_file_breakdown_solar t1 left join site_master_solar t2 on t2.site_master_solar_id=t1.site_id left join import_batches t5 on t5.import_batch_id = t1.import_batch_id WHERE " + filter + " AND t5.is_approved = 1 ORDER BY t1.date ASC";
            string functionName = "GetSolarDailyBreakdownReport";
                try
                {
                    _solarBDList = await Context.GetData<SolarDailyBreakdownReport>(fetchQry).ConfigureAwait(false);
                }
                catch (Exception e)
                {
                    string msg = "Exception while getting data form uploading_file_breakdown, due to : " + e.ToString();
                   //API_ErrorLog(msg);
                    LogError(0, 1, 5, functionName, msg, backend);
                }

            _solarBDList1.AddRange(_solarBDList);

            return _solarBDList1;
        }
        internal async Task<int> MailSend(string fname)
        {
            PPT_InformationLog("From DGR Repository : Inside MailSend function for Weekly Mail Send : with parameter : " + fname + " : " + DateTime.Now);
            //MAILING FUNCTIONALITY

            string info = ("MailSend function called from repository for "+ fname);

            int site_type = 0;
            if (fname.Contains("Solar"))
            {
                site_type = solar;
            }
            if (fname.Contains("Wind"))
            {
                site_type = wind;
            }
            int mailSentRes = 0;
            try
            {
                mailSentRes = await checkMaillog(weekly, site_type);
            }
            catch (Exception e)
            {
                string msg1 = "Exception while function call of weekly email, due to :" + e.ToString();
                PPT_ErrorLog(msg1);
            }

            //await LogInfo(0, 0, 0, functionName, info, backend);

            if (mailSentRes == 0)
            {
                MailSettings _settings = new MailSettings();
                var MyConfig = new ConfigurationBuilder().AddJsonFile("appsettings.json").Build();
                _settings.Mail = MyConfig.GetValue<string>("MailSettings:Mail");
                //_settings.Mail = "kasrsanket@gmail.com";
                //_settings.DisplayName = "Sanket Kar";
                _settings.DisplayName = MyConfig.GetValue<string>("MailSettings:DisplayName");
                //_settings.Password = "lozirdytywjlvcxd";
                _settings.Password = MyConfig.GetValue<string>("MailSettings:Password");
                //_settings.Host = "smtp.gmail.com";
                _settings.Host = MyConfig.GetValue<string>("MailSettings:Host");
                //_settings.Port = 587;
                _settings.Port = MyConfig.GetValue<int>("MailSettings:Port");


                string Msg = "Weekly PR Report Generated";
                // private MailServiceBS mailService;
                List<string> AddTo = new List<string>();
                List<string> AddCc = new List<string>();
                MailRequest request = new MailRequest();

                PPT_InformationLog("From DGR Repository : Inside MailSend function for Weekly Mail Send : Weekly mail Reading mail Msg file path:- " + DateTime.Now + fname);
                string qry = "";
                if (fname.Contains("Solar"))
                {
                //int val = await checkMaillog(weekly, solar);
                //if (val == 1)
                //{
                //    PPT_InformationLog("MailSend function : Solar Weekly Mail already sent.");
                //    return 1;
                //}

                PPT_InformationLog("From DGR Repository : Inside MailSend function for Weekly Mail Send : Weekly Mail File contains soalr " + fname);
                    qry = "select useremail from login where To_Weekly_Solar = 1  AND active_user = 1;";
                    try
                    {
                        List<UserLogin> data2 = await Context.GetData<UserLogin>(qry).ConfigureAwait(false);
                        foreach (var item in data2)
                        {
                            AddTo.Add(item.useremail);
                            PPT_InformationLog("From DGR Repository : Inside MailSend function for Weekly Mail Send : Solar Weekly Mail Added to email id :" + item.useremail);
                        }
                    }
                    catch (Exception e)
                    {
                        string msg = e.ToString();
                        PPT_ErrorLog("From DGR Repository: Inside MailSend function for Weekly Mail Send : Exception Caught while fetching and adding To emails : Due to : " + msg);
                    }
                    qry = "select useremail from login where Cc_Weekly_Solar = 1  AND active_user = 1;";
                    try
                    {
                        List<UserLogin> data3 = await Context.GetData<UserLogin>(qry).ConfigureAwait(false);
                        if (data3 != null)
                        {
                            foreach (var item in data3)
                            {
                                AddCc.Add(item.useremail);
                                PPT_InformationLog("From DGR Repository : Inside MailSend function for Weekly Mail Send : Solar  Weekly Mail Added CC email id :" + item.useremail);
                            }
                        }
                        else
                        {
                            PPT_InformationLog("From DGR Repository : Inside MailSend function for Weekly Mail Send : Solar  Weekly Mail CC email List is Empty");

                        }
                    }
                    catch (Exception e)
                    {
                        string msg = e.ToString();
                        PPT_ErrorLog("From DGR Repository: Inside MailSend function for Weekly Mail Send : Exception Caught while fetching and adding CC emails : Due to : " + msg);
                    }
                }
                else
                {
                 //int val = await checkMaillog(weekly,wind);
                 //if (val == 1)
                 //{
                 //   PPT_InformationLog("MailSend function : Wind Weekly Mail already sent.");
                 //   return 1;
                 //}
 
                 PPT_InformationLog("From DGR Repository : Inside MailSend function for Weekly Mail Send : Weekly Mail File contains wind");
                    qry = "select useremail from login where To_Weekly_Wind = 1  AND active_user = 1;";
                    try
                    {
                        List<UserLogin> data2 = await Context.GetData<UserLogin>(qry).ConfigureAwait(false);
                        foreach (var item in data2)
                        {
                            AddTo.Add(item.useremail);
                            PPT_InformationLog("From DGR Repository : Inside MailSend function for Weekly Mail Send : Wind Weekly Mail Added to email id :" + item.useremail);
                        }
                    }
                    catch (Exception e)
                    {
                        string msg = e.ToString();
                        PPT_ErrorLog("From DGR Repository: Inside MailSend function for Weekly Mail Send : Exception Caught while fetching and adding To emails : Due to : " + msg);
                    }
                    qry = "select useremail from login where Cc_Weekly_Wind = 1 AND active_user = 1;";
                    try
                    {
                        List<UserLogin> data3 = await Context.GetData<UserLogin>(qry).ConfigureAwait(false);
                        if (data3 != null)
                        {
                            foreach (var item in data3)
                            {
                                AddCc.Add(item.useremail);
                                PPT_InformationLog("From DGR Repository : Inside MailSend function for Weekly Mail Send : Wind Weekly Mail Added CC email id :" + item.useremail);
                            }
                        }
                        else
                        {
                            PPT_InformationLog("From DGR Repository : Inside MailSend function for Weekly Mail Send : Wind Weekly Mail  CC email list is Empty ");
                        }
                    }
                    catch (Exception e)
                    {
                        string msg = e.ToString();
                        PPT_ErrorLog("From DGR Repository: Inside MailSend function for Weekly Mail Send : Exception Caught while fetching and adding CC emails : Due to : " + msg);
                    }
                }
                //AddTo.Add("tanvi@softeltech.in");
                request.ToEmail = AddTo;
                request.CcEmail = AddCc;
                string subject = "";
                if (fname.Contains("Solar"))
                {
                    subject = "Solar Weekly Reports";
                    info = "Inside MailSend function for Weekly Mail Send : Weekly Mail Subject selected : " + subject;
                    PPT_InformationLog("From DGR Repository : Inside MailSend function for Weekly Mail Send : Weekly Mail Subject selected : " + subject);
                    //LogInfo(0, 0, 0, functionName,info, backend);

                }
                else
                {
                    subject = "Wind Weekly Reports";
                    PPT_InformationLog("From DGR Repository : Inside MailSend function for Weekly Mail Send : Weekly Mail Subject selected : " + subject);
                    info = "Inside MailSend function for Weekly Mail Send : Weekly Mail Subject selected : " + subject;
                    //LogInfo(0, 0, 0, functionName,info, backend);

                }
                request.Subject = subject;
                request.Body = Msg;
                //var file = "C:\\Users\\tanvi kinjale\\Downloads\\" + fname + ".pptx";
                var file = "C:\\inetpub\\wwwroot\\DGR_WEB\\pptupload\\" + fname + ".pptx";
                PPT_InformationLog("Weekly Mail Reading file path:- " + file);

                try
                {
                    var formFile = new FormFile(System.IO.File.OpenRead(file), 0, new FileInfo(file).Length, null, Path.GetFileName(file));
                    List<IFormFile> list = new List<IFormFile>();
                    list.Add(formFile);
                    request.Attachments = list;
                    if (list.Count > 0)
                    {
                        PPT_InformationLog("List of files attached : " + list[0].ToString());
                        info = "List of files attached : " + list[0].ToString();
                        //LogInfo(0, 0, 0, functionName, info, backend);

                    }
                    else
                    {
                        info = "List of Attachments is empty";
                        //LogInfo(0, 0, 0, functionName, info, backend);
                        PPT_InformationLog("List of Attachments is empty  ");
                    }
                    PPT_InformationLog("From DGR Repository : Inside MailSend function for Weekly Mail Send : Weekly Mail File opened for reading at path :" + file);
                    info = "Weekly Mail File opened for reading at path :" + file;
                    //LogInfo(0, 0, 0, functionName, info, backend);


                }
                catch (Exception ex)
                {
                    PPT_ErrorLog("From DGR Repository : Inside MailSend function for Weekly Mail Send : Weekly Mail File read failed exception :" + ex.Message);
                    info = "Weekly Mail File read failed exception: " + ex.Message;
                    //LogInfo(0, 0, 0, functionName, info, backend);

                }
                try
                {
                    var res = await MailService.SendEmailAsync(request, _settings,0);
                    PPT_InformationLog("From DGR Repository : Inside MailSend function for Weekly Mail Send : Weekly Mail SendEmailAsync function completed");
                    info = "Weekly Mail SendEmailAsync function completed";
                    //LogInfo(0, 0, 0, functionName, info, backend);

                }
                catch (Exception e)
                {
                    string msg = e.Message;
                    PPT_ErrorLog("From DGR Repository : Inside MailSend function for Weekly Mail Send : Weekly Mail SendEmailAsync function failed exception :" + e.Message);
                    info = "Weekly Mail SendEmailAsync function failed exception :" + e.Message;
                    //LogInfo(0, 0, 0, functionName, info, backend);

                }
                return 1;
            }
            else
            {
                return 1;
            }

        }
        internal async Task<int> PPTCreate()
        {
            PPT_InformationLog("From DGR Repository : Inside PPTCreate function for Wind Weekly Mail Send : Inside Method. " + DateTime.Now);
            //LogInfo(0, 2, 0, "PPTCreate", "Inside Method", backend);

            string msg = "WindWeeklyReport_" + DateTime.Now.ToString("yyyy-MM-dd");
            MailSend(msg);
            PPT_InformationLog("From DGR Repository : Inside PPTCreate function for Wind Weekly Mail Send : MailSend() function Called with Parameter : " + msg + " : " + DateTime.Now);
            //LogInfo(0, 2, 0, "PPTCreate", "MailSend() function Called with Parameter : " + msg , backend);

            return 1;
        }
        internal async Task<int> PPTCreate_Solar()
        {
            PPT_InformationLog("From DGR Repository : Inside PPTCreate_Solar function for Solar Weekly Mail Send : Inside Method. " + DateTime.Now);
            //LogInfo(0, 1, 0, "PPTCreate_Solar", "Inside Method", backend);

            string msg = "SolarWeeklyReport_" + DateTime.Now.ToString("yyyy-MM-dd");
            MailSend(msg);
            PPT_InformationLog("From DGR Repository : Inside PPTCreate_Solar function for Solar Weekly Mail Send : MailSend() function Called with Parameter : " + msg + " : " + DateTime.Now);
            //LogInfo(0, 1, 0, "PPTCreate_Solar", "MailSend() function Called with Parameter : " + msg, backend);

            return 1;
        }
        internal async Task<int> InsertDailyTargetKPI(List<WindDailyTargetKPI> set)
        {
            //pending : add activity log

            //check for existing records with date and site reference to delete existing records before inserting fresh data
            string delqry = "delete from daily_target_kpi where";
            string qry = "insert into daily_target_kpi (fy, date, site, site_id, wind_speed, kwh, ma, iga, ega, plf,p_50,p_75,p_90) values ";
            string values = "";

            foreach (var unit in set)
            {
                values += "('" + unit.FY + "','" + unit.Date + "','" + unit.Site + "','" + unit.site_id + "','" + unit.WindSpeed + "','" + unit.kWh + "','" + unit.MA + "','" + unit.IGA + "','" + unit.EGA + "','" + unit.PLF + "','" + unit.P50 + "','" + unit.P75 + "', '" +unit.P90+ "'),";

                delqry += " site_id = " + unit.site_id + " and date = '" + unit.Date + "' and fy = '" + unit.FY + "' or";
            }
            qry += values;
            await Context.ExecuteNonQry<int>(delqry.Substring(0, (delqry.Length - 2)) + ";").ConfigureAwait(false);
            return await Context.ExecuteNonQry<int>(qry.Substring(0, (qry.Length - 1)) + ";").ConfigureAwait(false);
        }
        internal async Task<int> InsertMonthlyTargetKPI(List<WindMonthlyTargetKPI> set)
        {
            //pending : add log activity
            //pending : delete existing data and insert fresh data 
            //string delqry = "delete from monthly_target_kpi where";
            string fetchQry = "select monthly_target_kpi_id, site_id, year, month_no from monthly_target_kpi;";
            List<WindMonthlyTargetKPI> tableData = new List<WindMonthlyTargetKPI>();
            tableData = await Context.GetData<WindMonthlyTargetKPI>(fetchQry).ConfigureAwait(false);
            WindMonthlyTargetKPI existingRecord = new WindMonthlyTargetKPI();
            int val = 0;
            string qry = "insert into monthly_target_kpi (fy, month, month_no, year, site,site_id, wind_speed, kwh, ma, iga, ega, plf, p_50, p_75, p_90) values";
            string updateQry = "INSERT INTO monthly_target_kpi(monthly_target_kpi_id, wind_speed, kwh, ma, iga, ega, plf, p_50, p_75, p_90) VALUES";
            string insertValues = "";
            string updateValues = "";
            foreach (var unit in set)
            {
                existingRecord = tableData.Find(tSite => tSite.site_id.Equals(unit.site_id) && tSite.year.Equals(unit.year) && tSite.month_no.Equals(unit.month_no));
                if (existingRecord == null)
                {
                    insertValues += "('" + unit.fy + "','" + unit.month + "','" + unit.month_no + "','" + unit.year + "','" + unit.site + "','" + unit.site_id + "','" + unit.windSpeed + "','" + unit.kwh + "','" + unit.ma + "','" + unit.iga + "','" + unit.ega + "','" + unit.plf + "','" + unit.P50 + "','"+ unit.P75 +"','" +unit.P90+ "'),";
                }
                else
                {
                    //delqry += " (site_id = " + unit.site_id + " and year = " + unit.year + " and month = '" + unit.month + "') or";
                    updateValues += "(" + existingRecord.monthly_target_kpi_id + ",'" + unit.windSpeed + "','" + unit.kwh + "','" + unit.ma + "','" + unit.iga + "','" + unit.ega + "','" + unit.plf + "','"+unit.P50+"','"+unit.P75+"','"+unit.P90+"'),";
                }
            }
            qry += insertValues;
            updateQry += string.IsNullOrEmpty(updateValues) ? "" : updateValues.Substring(0, (updateValues.Length - 1)) + " ON DUPLICATE KEY UPDATE monthly_target_kpi_id = VALUES(monthly_target_kpi_id), wind_speed = VALUES(wind_speed), kwh = VALUES(kwh), ma = VALUES(ma), iga = VALUES(iga), ega = VALUES(ega), plf = VALUES(plf), p_50 =  VALUES(p_50), p_75 =  VALUES(p_75), p_90 =  VALUES(p_90);";
            if (!(string.IsNullOrEmpty(insertValues)))
            {
                val = await Context.ExecuteNonQry<int>(qry.Substring(0, (qry.Length - 1)) + ";").ConfigureAwait(false);
            }
            if (!(string.IsNullOrEmpty(updateValues)))
            {
                val = await Context.ExecuteNonQry<int>(updateQry).ConfigureAwait(false);
            }
            return val;
        }
        internal async Task<int> InsertMonthlyUploadingLineLosses(List<WindMonthlyUploadingLineLosses> set)
        {
            //pending : add log activity
            //pending : if record exists update it then call the CalculateAndUpdatePLFandKWHAfterLineLoss 
            //fetching table data
            string fetchQry = "select monthly_uploading_line_losses_id, site_id, year, month_no from monthly_uploading_line_losses;";
            List<WindMonthlyUploadingLineLosses> tableData = new List<WindMonthlyUploadingLineLosses>();
            tableData = await Context.GetData<WindMonthlyUploadingLineLosses>(fetchQry).ConfigureAwait(false);
            WindMonthlyUploadingLineLosses existingRecord = new WindMonthlyUploadingLineLosses();
            int val = 0;
            string updateQry = "INSERT INTO monthly_uploading_line_losses(monthly_uploading_line_losses_id, line_loss) VALUES";
            string qry = " insert into monthly_uploading_line_losses (fy, site, site_id, month, month_no, year, line_loss) values";
            string insertValues = "";
            string updateValues = "";
            foreach (var unit in set)
            {
                //checking if excel sheet row already exists as a record in db table and storing matching entries in an object
                existingRecord = tableData.Find(tSite => tSite.site_id.Equals(unit.site_id) && tSite.year.Equals(unit.year) && tSite.month_no.Equals(unit.month_no));
                if (existingRecord == null)
                {
                    insertValues += "('" + unit.fy + "','" + unit.site + "','" + unit.site_id + "','" + unit.month + "','" + unit.month_no + "','" + unit.year + "','" + unit.lineLoss + "'),";
                }
                else
                {
                    updateValues += "(" + existingRecord.monthly_uploading_line_losses_id + ",'" + unit.lineLoss + "'),";
                }
            }
            qry += insertValues;
            updateQry += string.IsNullOrEmpty(updateValues) ? "" : updateValues.Substring(0, (updateValues.Length - 1)) + " ON DUPLICATE KEY UPDATE monthly_uploading_line_losses_id = VALUES(monthly_uploading_line_losses_id), line_loss = VALUES(line_loss);";
            if (!(string.IsNullOrEmpty(insertValues)))
            {
                val = await Context.ExecuteNonQry<int>(qry.Substring(0, (qry.Length - 1)) + ";").ConfigureAwait(false);
            }
            if (!(string.IsNullOrEmpty(updateValues)))
            {
                val = await Context.ExecuteNonQry<int>(updateQry).ConfigureAwait(false);
            }
            return val;
        }
        internal async Task<int> InsertWindJMR(List<WindMonthlyJMR> set)
        {
            ////pending : add activity log
            ////delete existing records with reference to site_id, month and year

            string fetchQry = "select monthly_jmr_id, site_id as siteId, JMR_Year as jmrYear, JMR_Month_no as jmrMonth_no from monthly_jmr";
            List<WindMonthlyJMR> tableData = new List<WindMonthlyJMR>();
            tableData = await Context.GetData<WindMonthlyJMR>(fetchQry).ConfigureAwait(false);
            WindMonthlyJMR existingRecord = new WindMonthlyJMR();
            int val = 0;
            string qry = "insert into monthly_jmr (FY, Site, site_id, Controller_KWH_INV, Scheduled_Units_kWh, Export_kWh, Import_kWh, Net_Export_kWh, netBillableKwh, Export_kVAh, Import_kVAh, Export_kVArh_lag, Import_kVArh_lag, Export_kVArh_lead, Import_kVArh_lead, JMR_date, JMR_Month, JMR_Month_no, JMR_Year, LineLoss, Line_Loss_percentage, RKVH_percentage) values";
            string updateQry = "INSERT INTO monthly_jmr(monthly_jmr_id, Controller_KWH_INV, Scheduled_Units_kWh, Export_kWh, Import_kWh, Net_Export_kWh, netBillableKwh, Export_kVAh, Import_kVAh, Export_kVArh_lag, Import_kVArh_lag, Export_kVArh_lead, Import_kVArh_lead, JMR_date, LineLoss, Line_Loss_percentage, RKVH_percentage) VALUES";
            string insertValues = "";
            string updateValues = "";
            foreach (var unit in set)
            {
                existingRecord = tableData.Find(tSite => tSite.siteId.Equals(unit.siteId) && tSite.jmrYear.Equals(unit.jmrYear) && tSite.jmrMonth_no.Equals(unit.jmrMonth_no));
                if (existingRecord == null)
                {
                    insertValues += "('" + unit.fy + "','" + unit.site + "','" + unit.siteId + "','" + unit.controllerKwhInv + "','" + unit.scheduledUnitsKwh + "','" + unit.exportKwh + "','" + unit.importKwh + "','" + unit.netExportKwh + "','" + unit.netBillableKwh + "','" + unit.exportKvah + "','" + unit.importKvah + "','" + unit.exportKvarhLag + "','" + unit.importKvarhLag + "','" + unit.exportKvarhLead + "', '" + unit.importKvarhLead + "', '" + unit.jmrDate + "','" + unit.jmrMonth + "','" + unit.jmrMonth_no + "', '" + unit.jmrYear + "', '" + unit.lineLoss + "', '" + unit.lineLossPercent + "', '" + unit.rkvhPercent + "'),";
                }
                else
                {
                    updateValues += "(" + existingRecord.monthly_jmr_id + ",'" + unit.controllerKwhInv + "','" + unit.scheduledUnitsKwh + "','" + unit.exportKwh + "','" + unit.importKwh + "','" + unit.netExportKwh + "','" + unit.netBillableKwh + "','" + unit.exportKvah + "','" + unit.importKvah + "','" + unit.exportKvarhLag + "','" + unit.importKvarhLag + "','" + unit.exportKvarhLead + "','" + unit.importKvarhLead + "','" + unit.jmrDate + "','" + unit.lineLoss + "','" + unit.lineLossPercent + "','" + unit.rkvhPercent + "'),";
                }
            }
            qry += insertValues;
            updateQry += string.IsNullOrEmpty(updateValues) ? "" : updateValues.Substring(0, (updateValues.Length - 1)) + " ON DUPLICATE KEY UPDATE monthly_jmr_id = VALUES(monthly_jmr_id), Controller_KWH_INV = VALUES(Controller_KWH_INV), Scheduled_Units_kWh = VALUES(Scheduled_Units_kWh), Export_kWh = VALUES(Export_kWh), Import_kWh = VALUES(Import_kWh), Net_Export_kWh = VALUES(Net_Export_kWh),  netBillableKwh = VALUES(netBillableKwh), Export_kVAh = VALUES(Export_kVAh), Import_kVAh = VALUES(Import_kVAh), Export_kVArh_lag = VALUES(Export_kVArh_lag), Import_kVArh_lag = VALUES(Import_kVArh_lag), Export_kVArh_lead = VALUES(Export_kVArh_lead), Import_kVArh_lead = VALUES(Import_kVArh_lead), JMR_date = VALUES(JMR_date), LineLoss = VALUES(LineLoss), Line_Loss_percentage = VALUES(Line_Loss_percentage), RKVH_percentage = VALUES(RKVH_percentage);";

            if (!(string.IsNullOrEmpty(insertValues)))
            {
                val = await Context.ExecuteNonQry<int>(qry.Substring(0, (qry.Length - 1)) + ";").ConfigureAwait(false);
            }
            if (!(string.IsNullOrEmpty(updateValues)))
            {
                val = await Context.ExecuteNonQry<int>(updateQry).ConfigureAwait(false);
            }
            return val;
        }
        internal async Task<int> InsertWindDailyLoadShedding(List<WindDailyLoadShedding> set)
        {
            //pending : add activity log
            //deletes existing records with reference to site_id and date
            string delqry = "delete from daily_load_shedding where";
            //await Context.ExecuteNonQry<int>(delqry).ConfigureAwait(false);

            //inserting new client data into wind:daily_load_shedding  
            string qry = " insert into daily_load_shedding (site_id, Site, Date, Start_Time, End_Time, Total_Time, Permissible_Load_MW, Gen_loss_kWh) values";
            string values = "";

            foreach (var unit in set)
            {
                values += "('" + unit.site_id + "','" + unit.site + "','" + unit.date + "','" + unit.startTime + "','" + unit.endTime + "','" + unit.totalTime + "','" + unit.permLoad + "','" + unit.genShedding + "'),";
                delqry += " site_id = " + unit.site_id + " and Date = '" + unit.date + "' or";
            }
            qry += values;
            await Context.ExecuteNonQry<int>(delqry.Substring(0, (delqry.Length - 2)) + ";").ConfigureAwait(false);
            return await Context.ExecuteNonQry<int>(qry.Substring(0, (qry.Length - 1)) + ";").ConfigureAwait(false);
        }
        internal async Task<int> InsertSolarDailyTargetKPI(List<SolarDailyTargetKPI> set)
        {
            //check for existing records with date and site reference to delete existing records before inserting fresh data
            string delQry = "delete from daily_target_kpi_solar where";
            string qry = "insert into daily_target_kpi_solar (fy, date, sites, site_id, ghi, poa, gen_nos, ma, iga, ega, pr, plf, Toplining_kWh, Toplining_MA, Toplining_IGA, Toplining_EGA, Toplining_PR, Toplining_PLF, Plant_kWh, Plant_PR, Plant_PLF, Inv_kWh, Inv_PR, Inv_PLF,p_50,p_75,p_90) values ";
            string insertValues = "";

            foreach (var unit in set)
            {
                insertValues += "('" + unit.FY + "','" + unit.Date + "','" + unit.Sites + "','" + unit.site_id + "','" + unit.GHI + "','" + unit.POA + "','" + unit.kWh + "','" + unit.MA + "','" + unit.IGA + "','" + unit.EGA + "','" + unit.PR + "','" + unit.PLF + "','" + unit.Toplining_kWh + "','" + unit.Toplining_MA + "','" + unit.Toplining_IGA + "','" + unit.Toplining_EGA + "','" + unit.Toplining_PR + "','" + unit.Toplining_PLF + "','" + unit.Plant_kWh + "','" + unit.Plant_PR + "','" + unit.Plant_PLF + "','" + unit.Inv_kWh + "','" + unit.Inv_PR + "','" + unit.Inv_PLF + "','" + unit.P50 + "','" + unit.P75 + "','" + unit.P90 + "'),";

                delQry += " sites= '" + unit.Sites + "' and date = '" + unit.Date + "' and fy = '" + unit.FY + "' or";
            }
            qry += insertValues;
            await Context.ExecuteNonQry<int>(delQry.Substring(0, (delQry.Length - 2)) + ";").ConfigureAwait(false);
            return await Context.ExecuteNonQry<int>(qry.Substring(0, (qry.Length - 1)) + ";").ConfigureAwait(false);

        }
        internal async Task<int> InsertSolarMonthlyTargetKPI(List<SolarMonthlyTargetKPI> set)
        {
            string fetchQry = "select monthly_target_kpi_solar_id, site_id, year, month_no from monthly_target_kpi_solar";
            List<SolarMonthlyTargetKPI> tableData = new List<SolarMonthlyTargetKPI>();
            tableData = await Context.GetData<SolarMonthlyTargetKPI>(fetchQry).ConfigureAwait(false);
            SolarMonthlyTargetKPI existingRecord = new SolarMonthlyTargetKPI();
            int val = 0;
            string updateQry = "insert into monthly_target_kpi_solar (monthly_target_kpi_solar_id, ghi, poa, gen_nos, ma, iga, ega, pr, plf, p_50,p_75,p_90) values";
            string qry = "insert into monthly_target_kpi_solar (fy, month, month_no, year, sites, site_id, ghi, poa, gen_nos, ma, iga, ega, pr, plf,p_50, p_75, p_90) values";
            string insertValues = "";
            string updateValues = "";
            foreach (var unit in set)
            {
                existingRecord = tableData.Find(tSite => (tSite.Site_Id == unit.Site_Id && tSite.year == unit.year && tSite.month_no == unit.month_no));
                if (existingRecord == null)
                {
                    insertValues += "('" + unit.FY + "','" + unit.Month + "','" + unit.month_no + "','" + unit.year + "','" + unit.Sites + "','" + unit.Site_Id + "','" + unit.GHI + "','" + unit.POA + "','" + unit.kWh + "','" + unit.MA + "','" + unit.IGA + "','" + unit.EGA + "','" + unit.PR + "','" + unit.PLF + "','" + unit.P50 + "','" + unit.P75 + "','" + unit.P90 + "'),";
                }
                else
                {
                    updateValues += "(" + existingRecord.monthly_target_kpi_solar_id + ",'" + unit.GHI + "','" + unit.POA + "','" + unit.kWh + "','" + unit.MA + "','" + unit.IGA + "','" + unit.EGA + "','" + unit.PR + "','" + unit.PLF + "','" + unit.P50 + "','" + unit.P75 + "','" + unit.P90 + "'),";
                }
            }
            qry += insertValues;
            updateQry += string.IsNullOrEmpty(updateValues) ? "" : updateValues.Substring(0, (updateValues.Length - 1)) + " ON DUPLICATE KEY UPDATE monthly_target_kpi_solar_id = VALUES(monthly_target_kpi_solar_id), ghi = VALUES(ghi), poa = VALUES(poa), gen_nos = VALUES(gen_nos), ma = VALUES(ma), iga = VALUES(iga), ega = VALUES(ega), pr = VALUES(pr), plf = VALUES(plf), p_50 = VALUES(p_50), p_75 = VALUES(p_75), p_90 = VALUES(p_90);";
            if (!(string.IsNullOrEmpty(insertValues)))
            {
                val = await Context.ExecuteNonQry<int>(qry.Substring(0, (qry.Length - 1)) + ";").ConfigureAwait(false);
            }
            if (!(string.IsNullOrEmpty(updateValues)))
            {
                val = await Context.ExecuteNonQry<int>(updateQry).ConfigureAwait(false);
            }
            return val;
        }
        internal async Task<int> InsertSolarMonthlyUploadingLineLosses(List<SolarMonthlyUploadingLineLosses> set)
        {
            string fetchQry = "select monthly_line_loss_solar_id, site_id, year, month_no from monthly_line_loss_solar";
            List<SolarMonthlyUploadingLineLosses> tableData = new List<SolarMonthlyUploadingLineLosses>();
            tableData = await Context.GetData<SolarMonthlyUploadingLineLosses>(fetchQry).ConfigureAwait(false);
            SolarMonthlyUploadingLineLosses existingRecord = new SolarMonthlyUploadingLineLosses();

            int val = 0;
            string updateQry = "INSERT INTO monthly_line_loss_solar(monthly_line_loss_solar_id, LineLoss) VALUES";
            string qry = " insert into monthly_line_loss_solar (fy, site, site_id, month, month_no, year, LineLoss) values";
            string insertValues = "";
            string updateValues = "";
            foreach (var unit in set)
            {
                //checking if excel sheet row already exists as a record in db table and storing matching entries in an object
                existingRecord = tableData.Find(tSite => (tSite.Site_Id == unit.Site_Id && tSite.year == unit.year && tSite.month_no == unit.month_no));
                if (existingRecord == null)
                {
                    insertValues += "('" + unit.FY + "','" + unit.Sites + "','" + unit.Site_Id + "','" + unit.Month + "','" + unit.month_no + "','" + unit.year + "','" + unit.LineLoss + "'),";
                }
                else
                {
                    updateValues += "(" + existingRecord.monthly_line_loss_solar_id + ",'" + unit.LineLoss + "'),";
                }

            }
            qry += insertValues;
            updateQry += string.IsNullOrEmpty(updateValues) ? "" : updateValues.Substring(0, (updateValues.Length - 1)) + " ON DUPLICATE KEY UPDATE monthly_line_loss_solar_id = VALUES(monthly_line_loss_solar_id), LineLoss = VALUES(LineLoss);";
            if (!(string.IsNullOrEmpty(insertValues)))
            {
                val = await Context.ExecuteNonQry<int>(qry.Substring(0, (qry.Length - 1)) + ";").ConfigureAwait(false);
            }
            if (!(string.IsNullOrEmpty(updateValues)))
            {
                val = await Context.ExecuteNonQry<int>(updateQry).ConfigureAwait(false);
            }
            return val;
        }
        internal async Task<int> InsertSolarJMR(List<SolarMonthlyJMR> set)
        {
            //pending : add activity log
            //prepared update query because existing queries cannot be deleted and orphan existing id-primaryKey entries
            //grabs db site_master table data into local object list
            string fetchQry = "select monthly_jmr_solar_id, site_id, JMR_Year, month_no as JMR_Month_no from monthly_jmr_solar";
            List<SolarMonthlyJMR> tableData = await Context.GetData<SolarMonthlyJMR>(fetchQry).ConfigureAwait(false);
            int val = 0;
            //stores an existing record from the database which matches with a record in the client dataset
            SolarMonthlyJMR existingRecord = new SolarMonthlyJMR();
            string updateQry = "INSERT INTO monthly_jmr_solar(monthly_jmr_solar_id, Controller_KWH_INV, Scheduled_Units_kWh, Export_kWh, Import_kWh, Net_Export_kWh, Net_Billable_kWh, Export_kVAh, Import_kVAh, Export_kVArh_lag, Import_kVArh_lag, Export_kVArh_lead, Import_kVArh_lead, JMR_date, LineLoss, Line_Loss_percentage, RKVH_percentage) VALUES";
            string qry = " insert into monthly_jmr_solar (FY, Site, site_id, Controller_KWH_INV, Scheduled_Units_kWh, Export_kWh, Import_kWh, Net_Export_kWh, Net_Billable_kWh, Export_kVAh, Import_kVAh, Export_kVArh_lag, Import_kVArh_lag, Export_kVArh_lead, Import_kVArh_lead, JMR_date, JMR_Month, JMR_Year, LineLoss, Line_Loss_percentage, RKVH_percentage) values";
            string insertValues = "";
            string updateValues = "";
            foreach (var unit in set)
            {
                //checks if db table contains site record that matches a record in client dataset
                existingRecord = tableData.Find(tSite => tSite.site_id.Equals(unit.site_id) && tSite.JMR_Year.Equals(unit.JMR_Year) && tSite.JMR_Month_no.Equals(unit.JMR_Month_no));

                if (existingRecord == null)
                {
                    insertValues += "('" + unit.FY + "','" + unit.Site + "','" + unit.site_id + "','" + unit.Controller_KWH_INV + "','" + unit.Scheduled_Units_kWh + "','" + unit.Export_kWh + "','" + unit.Import_kWh + "','" + unit.Net_Export_kWh + "','" + unit.Net_Billable_kWh + "','" + unit.Export_kVAh + "','" + unit.Import_kVAh + "','" + unit.Export_kVArh_lag + "','" + unit.Import_kVArh_lag + "','" + unit.Export_kVArh_lead + "','" + unit.Import_kVArh_lead + "','" + unit.JMR_date + "','" + unit.JMR_Month + "','" + unit.JMR_Year + "','" + unit.LineLoss + "','" + unit.Line_Loss_percentage + "','" + unit.RKVH_percentage + "'),";
                }
                else
                {
                    //if match is found
                    updateValues += "(" + existingRecord.monthly_jmr_solar_id + ",'" + unit.Controller_KWH_INV + "','" + unit.Scheduled_Units_kWh + "','" + unit.Export_kWh + "','" + unit.Import_kWh + "','" + unit.Net_Export_kWh + "','" + unit.Export_kVAh + "','" + unit.Import_kVAh + "','" + unit.Export_kVArh_lag + "','" + unit.Import_kVArh_lag + "','" + unit.Export_kVArh_lead + "','" + unit.Import_kVArh_lead + "','" + unit.JMR_date + "','" + unit.LineLoss + "','" + unit.Line_Loss_percentage + "','" + unit.RKVH_percentage + "'),";
                }
            }
            qry += insertValues;
            updateQry += string.IsNullOrEmpty(updateValues) ? "" : updateValues.Substring(0, (updateValues.Length - 1)) + " ON DUPLICATE KEY UPDATE monthly_jmr_solar_id = VALUES(monthly_jmr_solar_id), Controller_KWH_INV = VALUES(Controller_KWH_INV), Scheduled_Units_kWh = VALUES(Scheduled_Units_kWh), Export_kWh = VALUES(Export_kWh), Import_kWh = VALUES(Import_kWh), Net_Export_kWh = VALUES(Net_Export_kWh), Export_kVAh = VALUES(Export_kVAh), Import_kVAh = VALUES(Import_kVAh), Export_kVArh_lag = VALUES(Export_kVArh_lag), Import_kVArh_lag = VALUES(Import_kVArh_lag), Export_kVArh_lead = VALUES(Export_kVArh_lead), Import_kVArh_lead = VALUES(Import_kVArh_lead), JMR_date = VALUES(JMR_date), LineLoss = VALUES(LineLoss), Line_Loss_percentage = VALUES(Line_Loss_percentage), RKVH_percentage = VALUES(RKVH_percentage);";

            if (!(string.IsNullOrEmpty(insertValues)))
            {
                val = await Context.ExecuteNonQry<int>(qry.Substring(0, (qry.Length - 1)) + ";").ConfigureAwait(false);
            }
            if (!(string.IsNullOrEmpty(updateValues)))
            {
                val = await Context.ExecuteNonQry<int>(updateQry).ConfigureAwait(false);
            }
            return val;
        }
        internal async Task<int> InsertSolarDailyLoadShedding(List<SolarDailyLoadShedding> set)
        {
            string delqry = "delete from daily_load_shedding_solar where";
            //await Context.ExecuteNonQry<int>(delqry).ConfigureAwait(false);

            //inserting new client data into wind:daily_load_shedding  
            string qry = " insert into daily_load_shedding_solar (Site, Site_ID, Date, Start_Time, End_Time, Total_Time, Permissible_Load_MW, Gen_loss_kWh) values";
            string values = "";

            foreach (var unit in set)
            {
                //|| string.IsNullOrEmpty((string)unit.Permissible_Load_MW)
                if (unit.Permissible_Load_MW is null || unit.Permissible_Load_MW is DBNull)
                {
                    values += "('" + unit.Site + "','" + unit.Site_Id + "','" + unit.Date + "','" + unit.Start_Time + "','" + unit.End_Time + "','" + unit.Total_Time + "', null,'" + unit.Gen_loss_kWh + "'),";
                    delqry += " Site_ID = " + unit.Site_Id + " and Date = '" + unit.Date + "' or";
                }
                else
                {
                    values += "('" + unit.Site + "','" + unit.Site_Id + "','" + unit.Date + "','" + unit.Start_Time + "','" + unit.End_Time + "','" + unit.Total_Time + "','" + unit.Permissible_Load_MW + "','" + unit.Gen_loss_kWh + "'),";
                    delqry += " Site_ID = " + unit.Site_Id + " and Date = '" + unit.Date + "' or";
                }
            }
            qry += values;
            await Context.ExecuteNonQry<int>(delqry.Substring(0, (delqry.Length - 2)) + ";").ConfigureAwait(false);
            return await Context.ExecuteNonQry<int>(qry.Substring(0, (qry.Length - 1)) + ";").ConfigureAwait(false);
        }
        internal async Task<int> InsertSolarInvAcDcCapacity(List<SolarInvAcDcCapacity> set)
        {
            string fetchQry = "select capacity_id, inverter, site_id from solar_ac_dc_capacity ;";
            List<SolarInvAcDcCapacity> tableData = new List<SolarInvAcDcCapacity>();
            tableData = await Context.GetData<SolarInvAcDcCapacity>(fetchQry).ConfigureAwait(false);
            SolarInvAcDcCapacity existingRecord = new SolarInvAcDcCapacity();
            int val = 0;
            string updateQry = "INSERT INTO solar_ac_dc_capacity(capacity_id, dc_capacity, ac_capacity) VALUES";
            string qry = " insert into solar_ac_dc_capacity (site, site_id, inverter, dc_capacity, ac_capacity) values";
            string insertValues = "";
            string updateValues = "";
            foreach (var unit in set)
            {
                //checking if excel sheet row already exists as a record in db table and storing matching entries in an object
                existingRecord = tableData.Find(tSite => (tSite.site_id == unit.site_id && tSite.inverter == unit.inverter));
                if (existingRecord == null)
                {
                    insertValues += "('" + unit.site + "','" + unit.site_id + "','" + unit.inverter + "','" + unit.dc_capacity + "','" + unit.ac_capacity + "'),";
                }
                else
                {
                    updateValues += "(" + existingRecord.capacity_id + ",'" + unit.dc_capacity + "','" + unit.ac_capacity + "'),";
                }

            }
            qry += insertValues;
            updateQry += string.IsNullOrEmpty(updateValues) ? "" : updateValues.Substring(0, (updateValues.Length - 1)) + " ON DUPLICATE KEY UPDATE capacity_id = VALUES(capacity_id), dc_capacity = VALUES(dc_capacity), ac_capacity = VALUES(ac_capacity);";
            if (!(string.IsNullOrEmpty(insertValues)))
            {
                val = await Context.ExecuteNonQry<int>(qry.Substring(0, (qry.Length - 1)) + ";").ConfigureAwait(false);
            }
            if (!(string.IsNullOrEmpty(updateValues)))
            {
                val = await Context.ExecuteNonQry<int>(updateQry).ConfigureAwait(false);
            }
            return val;
        }
        internal async Task<int> InsertSolarDailyBDloss(List<SolarDailyBDloss> solarDailyBDloss)
        {

            string qry = "";
            int recordcount = 0;
            for (int i = 0; i < solarDailyBDloss.Count; i++)
            {
                recordcount++;
                string dates = Convert.ToDateTime(solarDailyBDloss[i].Date).ToString("yyyy-MM-dd");
                string Tar_Plant_PR = Convert.ToString(solarDailyBDloss[i].Tar_Plant_PR);


                qry += "insert into daily_bd_loss_solar (date,site,bd_type,ext_bd,igbd,icr,inv,smb,strings,stop_from,stop_to,total_stop,bd_ir,capacity,act_plant_pr,plant_gen_loss,remarks,action) values ('" + dates + "','" + solarDailyBDloss[i].Site + "','" + solarDailyBDloss[i].BD_Type + "','" + solarDailyBDloss[i].Ext_BD + "','" + solarDailyBDloss[i].IGBD + "','" + solarDailyBDloss[i].ICR + "','" + solarDailyBDloss[i].INV + "','" + solarDailyBDloss[i].SMB + "','" + solarDailyBDloss[i].Strings + "','" + solarDailyBDloss[i].From + "','" + solarDailyBDloss[i].To + "','" + solarDailyBDloss[i].Total_Stop + "','" + solarDailyBDloss[i].BD_IR_POA + "','" + solarDailyBDloss[i].Capacity_kwp + "','" + Tar_Plant_PR.TrimEnd('%') + "','" + solarDailyBDloss[i].Plant_Gen_Loss + "','" + solarDailyBDloss[i].Remarks + "','" + solarDailyBDloss[i].Action_Taken + "');";
                if (recordcount == 100)
                {

                    await Context.ExecuteNonQry<int>(qry).ConfigureAwait(false);
                    qry = "";
                    recordcount = 0;
                }
            }
            return await Context.ExecuteNonQry<int>(qry).ConfigureAwait(false);

        }
        internal async Task<int> importMetaData(ImportBatch meta, string userName, int userId)
        {
            string query = "";
            meta.importFilePath = meta.importFilePath.Replace("\\", "\\\\");

            //query = "insert into import_log (file_name, import_type, log_filename) values ('" + meta.importFilePath + "','" + meta.importType + "','" + meta.importLogName + "');";
            //query = "insert into import_batches (file_name, import_type, log_filename, site_id, import_date, imported_by, import_by_name) values ('" + meta.importFilePath + "','" + meta.importType + "','" + meta.importLogName + "','" + meta.importSiteId + "',NOW(),'" + userId + "','" + userName + "');";
           // return await Context.ExecuteNonQry<int>(query).ConfigureAwait(false);

            query = "insert into import_batches (file_name, import_type, import_file_type, data_date, log_filename, site_id, import_date, imported_by, import_by_name) values ('" + meta.importFilePath + "','" + meta.importType + "','" + meta.importFileType + "','" + meta.automationDataDate + "','" + meta.importLogName + "','" + meta.importSiteId + "',NOW(),'" + userId + "','" + userName + "');";
            return await Context.ExecuteNonQry<int>(query).ConfigureAwait(false);
        }
        internal async Task<int> InsertSolarUploadingPyranoMeter1Min(List<SolarUploadingPyranoMeter1Min> set, int batchId)
        {
            //API_InformationLog("InsertSolarUploadingPyranoMeter1Min: Batch Id <" + batchId + ">");
            string delqry = "delete from uploading_pyranometer_1_min_solar where DATE(date_time) = DATE('" + set[0].date_time + "') and site_id=" + set[0].site_id + ";";
            await Context.ExecuteNonQry<int>(delqry).ConfigureAwait(false);
            //API_InformationLog("Delete Pyranometer : <" + delqry + ">");

            string qry = " insert into uploading_pyranometer_1_min_solar(site_id, date_time, ghi_1, ghi_2, poa_1, poa_2, poa_3, poa_4, poa_5, poa_6, poa_7, avg_ghi, avg_poa, amb_temp, mod_temp, import_batch_id) values";
            string values = "";
            foreach (var unit in set)
            {
                values += "('" + unit.site_id + "','" + unit.date_time + "','" + unit.ghi_1 + "','" + unit.ghi_2 + "','" + unit.poa_1 + "','" + unit.poa_2 + "','" + unit.poa_3 + "','" + unit.poa_4 + "','" + unit.poa_5 + "','" + unit.poa_6 + "','" + unit.poa_7 + "','" + unit.avg_ghi + "','" + unit.avg_poa + "','" + unit.amb_temp + "','" + unit.mod_temp + "','" + batchId + "'),";
            }
            qry += values;
            //API_InformationLog("Insert 1Min Pyranometer : <" + qry + ">");
            // return await Context.ExecuteNonQry<int>(qry.Substring(0, (qry.Length - 1)) + ";").ConfigureAwait(false);
            return await Context.ExecuteNonQry<int>(qry.Substring(0, (qry.Length - 1)) + ";").ConfigureAwait(false);
        }
        internal async Task<int> InsertSolarUploadingPyranoMeter15Min(List<SolarUploadingPyranoMeter15Min> set, int batchId)
        {
            string delqry = "delete from uploading_pyranometer_15_min_solar where DATE(date_time) = DATE('" + set[0].date_time + "') and site_id=" + set[0].site_id + ";";
            await Context.ExecuteNonQry<int>(delqry).ConfigureAwait(false);
            string qry = " insert into uploading_pyranometer_15_min_solar(site_id, date_time, ghi_1, ghi_2, poa_1, poa_2, poa_3, poa_4, poa_5, poa_6, poa_7, avg_ghi, avg_poa, amb_temp, mod_temp, import_batch_id) values";
            string values = "";

            foreach (var unit in set)
            {
                values += "('" + unit.site_id + "','" + unit.date_time + "','" + unit.ghi_1 + "','" + unit.ghi_2 + "','" + unit.poa_1 + "','" + unit.poa_2 + "','" + unit.poa_3 + "','" + unit.poa_4 + "','" + unit.poa_5 + "','" + unit.poa_6 + "','" + unit.poa_7 + "','" + unit.avg_ghi + "','" + unit.avg_poa + "','" + unit.amb_temp + "','" + unit.mod_temp + "','" + batchId + "'),";
            }
            qry += values;
            return await Context.ExecuteNonQry<int>(qry.Substring(0, (qry.Length - 1)) + ";").ConfigureAwait(false);
        }
        internal async Task<int> InsertSolarUploadingFileGeneration(List<SolarUploadingFileGeneration> set, int batchId)
        {
            string delqry = "delete from uploading_file_generation_solar  where date = '" + set[0].date + "' and site_id='" + set[0].site_id + "';";
            await Context.ExecuteNonQry<int>(delqry).ConfigureAwait(false);
            // breakdown data delete
            dynamic date = set[0].date;
            int id = set[0].site_id;
            int temp = await DeleteBreakdownDataFromUploading(date, id);

            // Trackerloss
            string deleteQry1 = "DELETE FROM uploading_file_tracker_loss WHERE site_id = " + set[0].site_id + " and date = '" + set[0].date + "';";
            string deleteQry2 = "DELETE FROM upload_status WHERE site_id = " + set[0].site_id + " and data_date = '" + set[0].date + "';";

            try
            {
                await Context.ExecuteNonQry<int>(deleteQry1).ConfigureAwait(false);
                await Context.ExecuteNonQry<int>(deleteQry2).ConfigureAwait(false);
            }
            catch(Exception e)
            {
                string msg = "Exception due while deleting tracker_loss records from table, due to :" + e.ToString();
                //return 0;
            }
            string qry = " insert into uploading_file_generation_solar (date, site, site_id, inverter, inv_act, plant_act, pi, import_batch_id) values";
            string values = "";
            string uploadStatusValues = "";
            foreach (var unit in set)
            {
                try
                {
                    values += "('" + unit.date + "','" + unit.site + "','" + unit.site_id + "','" + unit.inverter + "','" + unit.inv_act + "','" + unit.plant_act + "','" + unit.pi + "','" + batchId + "'),";
                    uploadStatusValues = $"(2, {unit.site_id}, CURDATE(), '{unit.date}', 0, {batchId}, 0, 0, 0, 0, 0, 0, 0, 0),";
                }
                catch(Exception e)
                {

                }

            }
            qry += values;
            //DGR_v3 function hereafter..
            // Upload status query for  heat map 
            string query1 = "insert into upload_status (type, site_id,  import_date, data_date, uploaded_by, import_batch_id, TML_uploaded, automation, pyranometer1min, pyranometer15min, approve_count, expected_TML, actual_TML, wtg_count) values ";
            try
            {
                query1 += uploadStatusValues;
                await Context.ExecuteNonQry<int>(query1.Substring(0, (query1.Length - 1)) + ";").ConfigureAwait(false);
            }
            catch (Exception e)
            {
                string msg = "Exception due while deleting tracker_loss records from table, due to :" + e.ToString();
                //return 0;
            }

            return await Context.ExecuteNonQry<int>(qry.Substring(0, (qry.Length - 1)) + ";").ConfigureAwait(false);
        }
        internal async Task<int> DeleteBreakdownDataFromUploading(dynamic date, int id)
        {
            string delqry = "delete from uploading_file_breakdown_solar where date = '" + date + "' and site_id=" + id + ";";
            int result1;
            int temp;
            try
            {
                result1 = await Context.ExecuteNonQry<int>(delqry).ConfigureAwait(false);
                temp = 1;
            }
            catch (Exception e)
            {
                string errMsg = e.Message;
                temp = 0;
                throw;
            }
            return temp;
        }
        internal async Task<int> InsertSolarUploadingFileBreakDown(List<SolarUploadingFileBreakDown> set, int batchId)
        {//Updated
            int result = 0;
            if(set.Count > 0)
            {
                dynamic date = set[0].date;
                int id = set[0].site_id;
                int temp = await DeleteBreakdownDataFromUploading(date, id);
                if (temp == 1)
                { 
                    string qry = " insert into uploading_file_breakdown_solar (date, site, site_id, ext_int_bd, igbd, icr, inv, smb, strings, from_bd, to_bd, total_bd, bd_remarks, bd_type, bd_type_id, action_taken, import_batch_id) values";
                    string values = "";

                    foreach (var unit in set)
                    {
                        values += "('" + unit.date + "','" + unit.site + "','" + unit.site_id + "','" + unit.ext_int_bd + "','" + unit.igbd + "','" + unit.icr + "','" + unit.inv + "','" + unit.smb + "','" + unit.strings + "','" + unit.from_bd + "','" + unit.to_bd + "','" + unit.total_bd + "','" + unit.bd_remarks + "','" + unit.bd_type + "','" + unit.bd_type_id + "','" + unit.action_taken + "','" + batchId + "'),";
                    }
                    qry += values;
                    string tempQry = qry.Substring(0, (qry.Length - 1)) + ";";
                    try
                    {
                        result = await Context.ExecuteNonQry<int>(tempQry).ConfigureAwait(false);
                    }catch (Exception e)
                    {
                        string msg = e.Message;
                        throw;
                    }
                }
            }
            return result;

            //bool response = false;
            //string qry = "";

            //foreach (var solarUploadingFileBreakDown in listSolarUploadingFileBreakDown)
            //{
            //    qry += "insert into uploading_file_generation_solar (date,site,ext_int_bd,icr,inv,smb,strings,from_bd,to_bd,bd_remarks,bd_type,action_taken) values ('" + solarUploadingFileBreakDown.date + "','" + solarUploadingFileBreakDown.site + "','" + solarUploadingFileBreakDown.ext_int_bd + "','" + solarUploadingFileBreakDown.icr + "','" + solarUploadingFileBreakDown.inv + "','" + solarUploadingFileBreakDown.smb + "','" + solarUploadingFileBreakDown.strings + "','" + solarUploadingFileBreakDown.from_bd + "','" + solarUploadingFileBreakDown.to_bd + "','" + solarUploadingFileBreakDown.bd_remarks + "','" + solarUploadingFileBreakDown.bd_type + "','" + solarUploadingFileBreakDown.action_taken + "');";

            //    await Context.ExecuteNonQry<int>(qry).ConfigureAwait(false);
            //    response = true;
            //}
            //return response;

        }
        internal async Task<int> InsertWindUploadingFileGeneration(List<WindUploadingFileGeneration> set, int batchId)
        {
            int finalResult = 0;
            int finalResultbreakdown = 0;
            int deleteRes = 0;
            int deletebreakRes = 0;
            int insertRes = 0;
            if(set.Count > 0)
            {
                string functionName = "InsertWindUploadingFileGeneration";
                string delqry = "delete from uploading_file_generation where date = '" + set[0].date + "' and site_id='" + set[0].site_id + "';";
                try
                {
                    deleteRes = await Context.ExecuteNonQry<int>(delqry).ConfigureAwait(false);
                    finalResult = 1;
                }
                catch(Exception e)
                {
                    string msg = "Exception while deleting old records from uploading_file_generation table, due to : " + ToString();
                    //API_ErrorLog(msg);
                    LogError(0, 2, 5, functionName, msg, backend);
                    return finalResult;
                }
                string delqrybreakdown = "delete from uploading_file_breakdown where date = '" + set[0].date + "' and site_id='" + set[0].site_id + "';";
                try
                {
                    deletebreakRes = await Context.ExecuteNonQry<int>(delqrybreakdown).ConfigureAwait(false);
                    finalResultbreakdown = 1;
                }
                catch (Exception e)
                {
                    string msg = "Exception while deleting records from uploading_file_breakdown, due to : " + e.ToString();
                    //API_ErrorLog(msg);
                    LogError(0, 2, 5, functionName, msg, backend);
                    return finalResultbreakdown;
                }
                if (finalResult == 1)
                {
                    string qry = " insert into uploading_file_generation (site_name, site_id, date, wtg, wtg_id, wind_speed, grid_hrs, operating_hrs, lull_hrs, kwh, import_batch_id) values";
                    string values = "";
                    int siteId = 0;
                    string data_date = "";
                    try
                    {
                        foreach (var unit in set)
                        {
                            siteId = unit.site_id;
                            data_date = Convert.ToString(unit.date);
                            values += "('" + unit.site_name + "','" + unit.site_id + "','" + unit.date + "','" + unit.wtg + "','" + unit.wtg_id + "','" + unit.wind_speed + "','" + unit.grid_hrs + "','" + unit.operating_hrs + "','" + unit.lull_hrs + "','" + unit.kwh + "','" + batchId + "'),";
                        }
                        qry += values;
                    }
                    catch (Exception e)
                    {

                    }

                    try
                    {
                        insertRes =  await Context.ExecuteNonQry<int>(qry.Substring(0, (qry.Length - 1)) + ";").ConfigureAwait(false);
                        finalResult = 2;

                        string query1 = "insert into upload_status (type, site_id,  import_date, data_date, uploaded_by, import_batch_id, TML_uploaded, automation, pyranometer1min, pyranometer15min, approve_count, expected_TML, actual_TML, wtg_count) values ('1','" + siteId + "',CURDATE() ,'" + data_date + "','0','" + batchId + "','0','0','0','0','0','0','0','0')";
                        try
                        {
                            await Context.ExecuteNonQry<int>(query1).ConfigureAwait(false);
                        }
                        catch (Exception e)
                        {
                            string msg = "Exception due while deleting tracker_loss records from table, due to :" + e.ToString();
                            //return 0;
                        }
                        /*string selstatus = "SELECT upload_status_id FROM `upload_status` where type= 1 and import_batch_id = '" + batchId + "'";
                        try
                        {
                            var _Upload_status = await Context.GetData<WindUploadStatus>(qry).ConfigureAwait(false);
                            if (_Upload_status.Count > 0)
                            {
                                string upqry = "update upload_status";
                                await Context.ExecuteNonQry<int>(upqry).ConfigureAwait(false);
                            }
                            else
                            {

                            }
                        }
                        catch (Exception e)
                        {
                            string msg = "check upload_status table data : " + e.ToString();
                        }*/
                    }
                    catch(Exception e)
                    {
                        string msg = "Exception while inserting data in uploading_file_generation, due to : " + e.ToString();
                        //API_ErrorLog(msg);
                        LogError(0, 2, 5, functionName, msg, backend);
                        return finalResult;
                    }
                }
            }

            return finalResult;
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="import_type"></param>
        /// <param name="site_id"></param>
        /// <param name="import_date"></param>
        /// <returns>-1=Record doesnt exist
        /// 0=Record not approved
        /// 1=Record is approved
        /// 2=Record is rejected</returns>
        internal async Task<int> GetBatchStatus(int import_type, int site_id, string import_date)
        //internal async Task<List<ImportBatchStatus>> GetBatchStatus(int import_type, int site_id, string import_date)
        {
            try
            {
                //string qry = "select import_batch_id, is_approved from import_batches where import_type ='" + import_type + "' and  site_id ='" + site_id + "' and   import_date ='" + import_date + "'";
                string tableName = "daily_gen_summary_solar";
                if (import_type == 1)    //Wind
                {
                    tableName = "daily_gen_summary";
                }
                string qry = "select approve_status as is_approved from " + tableName + " where site_id ='" + site_id + "' and date='" + import_date + "' limit 1";

                //int import_batch_id = 0;
                int import_batch_status = -1;
                //List<ImportBatchStatus> _ImportBatchStatus = new List<ImportBatchStatus>();
                List<ImportBatchStatus> _ImportBatchStatus = await Context.GetData<ImportBatchStatus>(qry).ConfigureAwait(false);
                //_ImportBatchStatus = await Context.GetData<ImportBatchStatus>(qry).ConfigureAwait(false);
                foreach (ImportBatchStatus ImportBatch in _ImportBatchStatus)
                {
                    //import_batch_id = ImportBatch.import_batch_id;
                    import_batch_status = ImportBatch.is_approved;
                    break;
                }
                return import_batch_status;

                //List<ImportBatchStatus> _ImportBatchStatus = new List<ImportBatchStatus>();
                //_ImportBatchStatus = await Context.GetData<ImportBatchStatus>(qry).ConfigureAwait(false);
                //return _ImportBatchStatus;
            }
            catch (Exception ex)
            {
                string errMsg = ex.Message;
                throw;
            }
        
        }
        internal async Task<BatchIdImport> GetBatchId(string logFileName)
        {

            try
            {
                string qry = "select import_batch_id from import_batches where log_filename ='" + logFileName + "'";
                DataTable dt = await Context.FetchData(qry).ConfigureAwait(false);
                BatchIdImport obj = new BatchIdImport();
                obj.import_batch_id = (int)dt.Rows[0]["import_batch_id"];
                return obj;
            }
            catch (Exception ex)
            {
                throw;
            }
        }
        async Task<int> DeleteFromSolarDailyGenSummary(int id)
        {
            int temp;
            try
            {
                string qry6 = "delete from daily_gen_summary_solar where import_batch_id = " + id + ";";
                await Context.ExecuteNonQry<int>(qry6).ConfigureAwait(false);
                //solarDailyGenSummary = true;
                temp = 1;
            }
            catch (Exception e)
            {
                string errMsg = e.Message;
                temp = 0;
                throw;
            }
            return temp;
        }
        internal async Task<int> DeleteRecordsAfterFailure(int batchId, int siteType)
        {
            //for solar 0, wind 1, other 2;
            if (siteType == 0)
            {
                bool solarFileBreakdown = false;
                bool solarFileGeneration = false;
                bool solarPyranometerOne = false;
                bool solarPyranometerFifteen = false;
                bool solarDailyGenSummary = false;
                bool importBatch = false;
                bool fileSummery = false;

                try
                {
                    string qry2 = "delete from uploading_file_generation_solar where import_batch_id =" + batchId ;
                    await Context.ExecuteNonQry<int>(qry2).ConfigureAwait(false);
                    solarFileGeneration = true;
                }
                catch (Exception e)
                {
                    string a = e.Message;
                    solarFileGeneration = true;
                    throw;
                }
                string qry3 = "delete from uploading_pyranometer_1_min_solar where import_batch_id =" + batchId + ";";
                int temp1 = await Context.ExecuteNonQry<int>(qry3).ConfigureAwait(false);
                solarPyranometerOne = true;

                string qry4 = "delete from uploading_pyranometer_15_min_solar where import_batch_id =" + batchId + ";";
                await Context.ExecuteNonQry<int>(qry4).ConfigureAwait(false);
                solarPyranometerFifteen = true;

                string qry1 = "delete from uploading_file_breakdown_solar where import_batch_id =" + batchId + ";";
                await Context.ExecuteNonQry<int>(qry1).ConfigureAwait(false);
                solarFileBreakdown = true;

                //daily_gen_summary_solar await Task.Delay(10000);
                //if (solarFileGeneration && solarFileBreakdown && solarPyranometerOne && solarPyranometerFifteen)
                /*{
                    string qry6 = "delete from daily_gen_summary_solar where import_batch_id =" + batchId + ";";
                    await Context.ExecuteNonQry<int>(qry6).ConfigureAwait(false);
                    solarDailyGenSummary = true;
                }*/

                int del = await DeleteFromSolarDailyGenSummary(batchId);
                if(del == 1)
                {
                    solarDailyGenSummary = true;
                }

                if (solarFileGeneration && solarFileBreakdown && solarPyranometerOne && solarPyranometerFifteen && solarDailyGenSummary)
                {
                    string qry5 = "delete from import_batches where import_batch_id =" + batchId + ";";
                    await Context.ExecuteNonQry<int>(qry5).ConfigureAwait(false);
                    importBatch = true;
                }
                if (solarFileGeneration && solarFileBreakdown && solarPyranometerOne && solarPyranometerFifteen && solarDailyGenSummary && importBatch)
                {
                    return 1;
                }
                else
                {
                    return 0;
                }
            }

            //for solar 0, wind 1, other 2;
            if (siteType == 1)
            {
                bool windFileBreakdown = false;
                bool windFileGeneration = false;
                bool windDailyGenSummary = false;
                bool importBatch = false;
                bool fileSummery = false;

                string qry1 = "delete from uploading_file_breakdown where import_batch_id =" + batchId + "";
                await Context.ExecuteNonQry<int>(qry1).ConfigureAwait(false);
                windFileBreakdown = true;

                string qry2 = "delete from uploading_file_generation where import_batch_id =" + batchId + "";
                await Context.ExecuteNonQry<int>(qry2).ConfigureAwait(false);
                windFileGeneration = true;

                //daily_gen_summary
                string qry4 = "delete from daily_gen_summary where import_batch_id =" + batchId + "";
                await Context.ExecuteNonQry<int>(qry4).ConfigureAwait(false);
                windDailyGenSummary = true;

                if (windFileBreakdown && windFileGeneration && windDailyGenSummary)
                {
                    string qry3 = "delete from import_batches where import_batch_id =" + batchId + "";
                    await Context.ExecuteNonQry<int>(qry3).ConfigureAwait(false);
                    importBatch = true;
                }
                if (windFileBreakdown && windFileGeneration && windDailyGenSummary && importBatch)
                {
                    return 1;
                }
                else
                {
                    return 0;
                }

            }

            //for solar 0, wind 1, other 2;
            if(siteType == 2)
            {
                bool importBatch = false;
                string qry3 = "delete from import_batches where import_batch_id =" + batchId + "";
                await Context.ExecuteNonQry<int>(qry3).ConfigureAwait(false);
                importBatch = true;
                if (importBatch)
                {
                    return 1;
                }
                else
                {
                    return 0;
                }
            }
            else
            {
                return 0;
            }
        }
        internal async Task<BatchIdImport> IsDataApproved(int windOrSolar, int siteID, string importDate)
        {

            try
            {
                string qry = "select import_batch_id from import_batches where date ='" + importDate+ "'"; //where date is imported and site Id & import type & approved if data approved it should not be uploaded return data not approved m:overriting not available already aproved m:nill 
                DataTable dt = await Context.FetchData(qry).ConfigureAwait(false);
                BatchIdImport obj = new BatchIdImport();
                obj.import_batch_id = (int)dt.Rows[0]["import_batch_id"];
                return obj;
            }
            catch (Exception ex)
            {
                throw;
            }
        }
        internal async Task<int> InsertWindUploadingFileBreakDown(List<WindUploadingFileBreakDown> set, int batchId)
        {
            int finalResult = 0;
            int deleteRes = 0;
            int insertRes = 0;
            if(set.Count > 0)
            {
                string delqry = "delete from uploading_file_breakdown where date = '" + set[0].date + "' and site_id='" + set[0].site_id + "';";
                string qry = " insert into uploading_file_breakdown(date, site_name, site_id, wtg, wtg_id, bd_type, bd_type_id, stop_from, stop_to, total_stop, error_description, action_taken, import_batch_id) values ";
                string values = "";
                string functionName = "InsertWindUploadingFileBreakdown";
                try
                {
                    deleteRes = await Context.ExecuteNonQry<int>(delqry).ConfigureAwait(false);
                    finalResult = 1;
                }
                catch(Exception e)
                {
                    string msg = "Exception while deleting records from uploading_file_breakdown, due to : " + e.ToString();
                    //API_ErrorLog(msg);
                    LogError(0, 2, 5, functionName, msg, backend);
                    return finalResult;
                }

                if(finalResult == 1)
                {
                    foreach (var unit in set)
                    {
                        values += "('" + unit.date + "','" + unit.site_name + "'," + unit.site_id + ",'" + unit.wtg + "'," + unit.wtg_id + ",'" + unit.bd_type + "', " + unit.bd_type_id + ", '" + unit.stop_from + "', '" + unit.stop_to + "', '" + unit.total_stop + "', '" + unit.error_description + "', '" + unit.action_taken + "', " + batchId + "),";
                    }
                    qry += values;
                    try
                    {
                        insertRes = await Context.ExecuteNonQry<int>(qry.Substring(0, (qry.Length - 1)) + ";").ConfigureAwait(false);
                        finalResult = 2;
                    }
                    catch(Exception e)
                    {
                        string msg = "Exception while inserting values into table uploading_file_breakdown, due to : " + e.ToString();
                        //API_ErrorLog(msg);
                        LogError(0, 2, 5, functionName, msg, backend);
                        return finalResult;
                    }
                }
            }

            //finalResult = 0 : Complete failure.
            //finalResult = 1 : Deleted Records from table.
            //finalResult = 2 : Inserted records into table.
            return finalResult;
        }
        internal async Task<List<SolarDailyGenReports>> GetSolarInverterFromdailyGenSummary(string state, string site)
        {
            string filter = "";
            int chkfilter = 0;

            if (!string.IsNullOrEmpty(state) && state != "All" && state != "All~")
            {
                if (chkfilter == 1) { filter += " and "; }
                chkfilter = 1;

                string[] spstate = state.Split("~");
                filter += "state in (";
                string states = "";
                for (int i = 0; i < spstate.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spstate[i].ToString()))
                    {
                        states += "'" + spstate[i].ToString() + "',";
                    }
                }
                filter += states.TrimEnd(',') + ")";

            }
            if (!string.IsNullOrEmpty(site) && site != "All" && site != "All~")
            {
                if (chkfilter == 1) { filter += " and "; }
                chkfilter = 1;

                string[] spsite = site.Split("~");
                filter += "site in (";
                string sites = "";
                for (int i = 0; i < spsite.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spsite[i].ToString()))
                    {
                        sites += "'" + spsite[i].ToString() + "',";
                    }
                }
                filter += sites.TrimEnd(',') + ")";

            }
            if (!string.IsNullOrEmpty(filter))
            {
                filter = " where " + filter;
            }
            string qry = @"select distinct location_name as Inverter from daily_gen_summary_solar " + filter;
            return await Context.GetData<SolarDailyGenReports>(qry).ConfigureAwait(false);

        }
        internal async Task<List<SolarDailyGenReports1>> GetSolarDailyGenSummaryReport1(string fromDate, string toDate, string country, string state, string spv, string site, string inverter, string month)
        {
            string filter = "";

            if (!string.IsNullOrEmpty(fromDate) && fromDate != "All")
            {
                filter += " and (date >= '" + fromDate + "'  and date<= '" + toDate + "')";

            }
            if (!string.IsNullOrEmpty(country) && country != "All~")
            {

                string[] spcountry = country.Split("~");
                filter += " and t2.country in (";
                string countrys = "";
                for (int i = 0; i < spcountry.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spcountry[i].ToString()))
                    {
                        countrys += "'" + spcountry[i].ToString() + "',";
                    }
                }
                filter += countrys.TrimEnd(',') + ")";

            }
            if (!string.IsNullOrEmpty(state) && state != "All~")
            {

                string[] spstate = state.Split("~");
                filter += " and t1.state in (";
                string states = "";
                for (int i = 0; i < spstate.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spstate[i].ToString()))
                    {
                        states += "'" + spstate[i].ToString() + "',";
                    }
                }
                filter += states.TrimEnd(',') + ")";

            }
            if (!string.IsNullOrEmpty(spv) && spv != "All~")
            {

                string[] spspv = spv.Split("~");
                filter += " and t2.spv in (";
                string spvs = "";
                for (int i = 0; i < spspv.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spspv[i].ToString()))
                    {
                        spvs += "'" + spspv[i].ToString() + "',";
                    }
                }
                filter += spvs.TrimEnd(',') + ")";

            }
            if (!string.IsNullOrEmpty(site) && site != "All~")
            {

                string[] spsite = site.Split("~");
                filter += " and t1.site in (";
                string sites = "";
                for (int i = 0; i < spsite.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spsite[i].ToString()))
                    {
                        sites += "'" + spsite[i].ToString() + "',";
                    }
                }
                filter += sites.TrimEnd(',') + ")";

            }
            if (!string.IsNullOrEmpty(inverter) && inverter != "All~")
            {
                inverter = inverter.Replace('=', '/');
                string[] spinverter = inverter.Split("~");
                filter += " and t1.location_name in (";
                string inverters = "";
                for (int i = 0; i < spinverter.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spinverter[i].ToString()))
                    {
                        inverters += "'" + spinverter[i].ToString() + "',";
                    }
                }
                filter += inverters.TrimEnd(',') + ")";
            }
            if (!string.IsNullOrEmpty(month) && month != "All~")
            {

                string[] spmonth = month.Split("~");
                filter += " and month(date) in (";
                string months = "";
                for (int i = 0; i < spmonth.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spmonth[i].ToString()))
                    {
                        months += "" + spmonth[i].ToString() + ",";
                    }
                }
                filter += months.TrimEnd(',') + ")";
            }

            string qry = @"SELECT year(date)as year,month(date)as month,date,t2.country,t1.state,
t2.spv,t1.site,location_name as Inverter, sum(t3.dc_capacity)as dc_capacity,
sum(t3.ac_capacity)as ac_capacity,
(sum(ghi)/count(*))as ghi,(sum(poa)/count(*))as poa,sum(expected_kwh)as expected_kwh,
sum(inv_kwh)as inv_kwh,sum(plant_kwh)as plant_kwh,(sum(inv_pr)/count(*))as inv_pr,(sum(plant_pr)/count(*)) as plant_pr,
inv_plf_ac as inv_plf,plant_plf_ac as plant_plf,
ma as ma_actual,ma as ma_contractual,
(sum(iga)/count(*))as iga,(sum(ega)/count(*))as ega,sum(prod_hrs) as gen_hrs,sum(usmh)as usmh,sum(smh)as smh,
sum(oh)as oh,sum(igbdh)as igbdh,sum(egbdh)as egbdh,
sum(load_shedding)as load_shedding,sum(total_losses)as total_losses
 FROM daily_gen_summary_solar t1 left join site_master_solar t2 on  t2.site=t1.site  left join solar_ac_dc_capacity t3 on  t3.site=t1.site 
where   t2.state=t1.state  and t3.inverter=t1.location_name  " + filter + " group by t1.site,date,location_name ";

            //where t1.approve_status=" + approve_status + " and t2.state=t1.state  and t3.inverter=t1.location_name  " + filter + " group by t1.site,date,location_name ";

            return await Context.GetData<SolarDailyGenReports1>(qry).ConfigureAwait(false);

        }

//        internal async Task<List<SolarDailyGenReports2>> GetSolarDailyGenSummaryReport2(string fromDate, string toDate, string country, string state, string spv, string site, string inverter, string month)
//        {
//            string filter = "";

//            if (!string.IsNullOrEmpty(fromDate) && fromDate != "All")
//            {
//                filter += " and (date >= '" + fromDate + "'  and date<= '" + toDate + "')";

//            }
//            if (!string.IsNullOrEmpty(country) && country != "All~")
//            {

//                string[] spcountry = country.Split("~");
//                filter += " and t2.country in (";
//                string countrys = "";
//                for (int i = 0; i < spcountry.Length; i++)
//                {
//                    if (!string.IsNullOrEmpty(spcountry[i].ToString()))
//                    {
//                        countrys += "'" + spcountry[i].ToString() + "',";
//                    }
//                }
//                filter += countrys.TrimEnd(',') + ")";

//            }
//            if (!string.IsNullOrEmpty(state) && state != "All~")
//            {

//                string[] spstate = state.Split("~");
//                filter += " and t1.state in (";
//                string states = "";
//                for (int i = 0; i < spstate.Length; i++)
//                {
//                    if (!string.IsNullOrEmpty(spstate[i].ToString()))
//                    {
//                        states += "'" + spstate[i].ToString() + "',";
//                    }
//                }
//                filter += states.TrimEnd(',') + ")";

//            }
//            if (!string.IsNullOrEmpty(spv) && spv != "All~")
//            {

//                string[] spspv = spv.Split("~");
//                filter += " and t2.spv in (";
//                string spvs = "";
//                for (int i = 0; i < spspv.Length; i++)
//                {
//                    if (!string.IsNullOrEmpty(spspv[i].ToString()))
//                    {
//                        spvs += "'" + spspv[i].ToString() + "',";
//                    }
//                }
//                filter += spvs.TrimEnd(',') + ")";

//            }
//            if (!string.IsNullOrEmpty(site) && site != "All~")
//            {

//                string[] spsite = site.Split("~");
//                filter += " and t1.site in (";
//                string sites = "";
//                for (int i = 0; i < spsite.Length; i++)
//                {
//                    if (!string.IsNullOrEmpty(spsite[i].ToString()))
//                    {
//                        sites += "'" + spsite[i].ToString() + "',";
//                    }
//                }
//                filter += sites.TrimEnd(',') + ")";

//            }
//            if (!string.IsNullOrEmpty(inverter) && inverter != "All~")
//            {
//                inverter = inverter.Replace('=', '/');
//                string[] spinverter = inverter.Split("~");
//                filter += " and t1.location_name in (";
//                string inverters = "";
//                for (int i = 0; i < spinverter.Length; i++)
//                {
//                    if (!string.IsNullOrEmpty(spinverter[i].ToString()))
//                    {
//                        inverters += "'" + spinverter[i].ToString() + "',";
//                    }
//                }
//                filter += inverters.TrimEnd(',') + ")";
//            }
//            if (!string.IsNullOrEmpty(month) && month != "All~")
//            {

//                string[] spmonth = month.Split("~");
//                filter += " and month(date) in (";
//                string months = "";
//                for (int i = 0; i < spmonth.Length; i++)
//                {
//                    if (!string.IsNullOrEmpty(spmonth[i].ToString()))
//                    {
//                        months += "" + spmonth[i].ToString() + ",";
//                    }
//                }
//                filter += months.TrimEnd(',') + ")";
//            }


//            string qry = @"SELECT year(date)as year,month(date)as month,date,
//t2.country,t1.state,t2.spv,t1.site,(t2.dc_capacity)as dc_capacity,
//(t2.ac_capacity)as ac_capacity,(sum(ghi)/count(*))as ghi,(sum(poa)/count(*))as poa,sum(expected_kwh)as expected_kwh,
//sum(inv_kwh)as inv_kwh,sum(plant_kwh)as plant_kwh,(sum(inv_pr)/count(*))as inv_pr,(sum(plant_pr)/count(*))as plant_pr,
//inv_plf_ac as inv_plf,plant_plf_ac as plant_plf,
//ma as ma_actual,ma as ma_contractual,
//(sum(iga)/count(*))as iga,(sum(ega)/count(*))as ega,sum(prod_hrs) as gen_hrs,sum(usmh)as usmh,sum(smh)as smh,
//sum(oh)as oh,sum(igbdh)as igbdh,sum(egbdh)as egbdh,
//sum(load_shedding)as load_shedding,'' as tracker_losses,sum(total_losses)as total_losses
// FROM daily_gen_summary_solar t1 left join site_master_solar t2 on  t2.site=t1.site
//where   t2.state=t1.state  " + filter + " group by date,t1.site ";

//            //where t1.approve_status=" + approve_status + " and  t2.state=t1.state  " + filter + " group by date,t1.site ";

//            return await Context.GetData<SolarDailyGenReports2>(qry).ConfigureAwait(false);

//        }

        internal async Task<List<SolarDailyGenReports1>> GetSolarMonthlyGenSummaryReport1(string fy, string month, string country, string state, string spv, string site, string inverter)
        {
            string filter = "";
            int chkfilter = 0;
            if (!string.IsNullOrEmpty(month) && !string.IsNullOrEmpty(fy))
            {
                filter += " where (";

                string[] spmonth = month.Split(",");
                string months = "";

                for (int i = 0; i < spmonth.Length; i++)
                {
                    if (i > 0) filter += " or ";
                    int monthno = Int32.Parse(spmonth[i]);
                    string year = (Int32.Parse(fy) + 1).ToString();
                    string Qyear = (monthno > 3) ? fy : year;
                    filter += "( month(date) = " + spmonth[i] + " and year(date) = '" + Qyear + "' )";
                }
                filter += ") ";
                chkfilter = 1;
            }
            else if (!string.IsNullOrEmpty(month))
            {
                filter += " where month(date) in ( " + month + " )";
                chkfilter = 1;
            }
            else
            {
                filter += " where ((year(date) = '" + fy + "' and month(date)>3) || (year(date) = '"+ (Convert.ToInt32(fy)+1).ToString()  +"' and month(date)<4))";
                chkfilter = 1;
            }
            //if (!string.IsNullOrEmpty(country) && country != "All~")
            //{
            //    if (chkfilter == 1) filter += " and ";
            //    string[] spcountry = country.Split(",");
            //    filter += " t2.country in (";
            //    string countrys = "";
            //    for (int i = 0; i < spcountry.Length; i++)
            //    {
            //        if (!string.IsNullOrEmpty(spcountry[i].ToString()))
            //        {
            //            countrys += "'" + spcountry[i].ToString() + "',";
            //        }
            //    }
            //    filter += countrys.TrimEnd(',') + ")";
            //    chkfilter = 1;
            //}
            if (!string.IsNullOrEmpty(state) && state != "All~")
            {
                if (chkfilter == 1) filter += " and ";
                else filter += " where ";
                string[] spstate = state.Split(",");
                filter += " t1.state in (";
                string states = "";
                for (int i = 0; i < spstate.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spstate[i].ToString()))
                    {
                        states += "'" + spstate[i].ToString() + "',";
                    }
                }
                filter += states.TrimEnd(',') + ")";
                chkfilter = 1;

            }
            if (!string.IsNullOrEmpty(spv) && spv != "All~")
            {
                if (chkfilter == 1) filter += " and ";
                else filter += " where ";
                string[] spspv = spv.Split(",");
                filter += " t2.spv in (";
                string spvs = "";
                for (int i = 0; i < spspv.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spspv[i].ToString()))
                    {
                        spvs += "'" + spspv[i].ToString() + "',";
                    }
                }
                filter += spvs.TrimEnd(',') + ")";
                chkfilter = 1;

            }
            if (!string.IsNullOrEmpty(site) && site != "All~")
            {
                if (chkfilter == 1) filter += " and ";
                else filter += " where ";
                string[] spsite = site.Split(",");
                filter += " site_master_solar_id in (";
                string sites = "";
                for (int i = 0; i < spsite.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spsite[i].ToString()))
                    {
                        sites += "'" + spsite[i].ToString() + "',";
                    }
                }
                filter += sites.TrimEnd(',') + ")";
                chkfilter = 1;
            }
            if (!string.IsNullOrEmpty(inverter) && inverter != "All~")
            {
                if (chkfilter == 1) filter += " and ";
                else filter += " where ";
                inverter = inverter.Replace('=', '/');
                string[] spinverter = inverter.Split(",");
                filter += " t3.inverter in (";
                string inverters = "";
                for (int i = 0; i < spinverter.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spinverter[i].ToString()))
                    {
                        inverters += "'" + spinverter[i].ToString() + "',";
                    }
                }
                filter += inverters.TrimEnd(',') + ")";
                chkfilter = 1;
            }

            // (sum(ghi)/count(*))as ghi,(sum(poa)/count(*))as poa  15012024
            string qry = @"SELECT year(date)as year,DATE_FORMAT(date,'%M') as month,t2.country,t1.state,
t2.spv,t1.site,location_name as Inverter, (t3.dc_capacity)as dc_capacity,
(t3.ac_capacity)as ac_capacity,
(sum(ghi))as ghi,(sum(poa))as poa,sum(expected_kwh)as expected_kwh,
sum(inv_kwh)as inv_kwh,sum(plant_kwh)as plant_kwh,(sum(inv_pr)/count(inv_pr)) as inv_pr,
(sum(plant_pr)/count(plant_pr)) as plant_pr,
sum(inv_plf_ac)/count(inv_plf_ac) as inv_plf,sum(plant_plf_ac)/count(plant_plf_ac) as plant_plf,
sum(ma)/count(ma) as ma_actual,sum(ma)/count(ma) as ma_contractual,
(sum(iga)/count(*))as iga,(sum(ega)/count(*))as ega,(sum(ega_b)/count(*))as ega_b,(sum(ega_c)/count(*))as ega_c,sum(prod_hrs) as gen_hrs,
sum(lull_hrs_bd) as lull_hrs_bd, sum(usmh_bs) as usmh_bs, sum(smh_bd) as smh_bd, sum(oh_bd) as oh_bd, sum(igbdh_bd) as igbdh_bd, sum(egbdh_bd) as egbdh_bd, sum(load_shedding_bd) as load_shedding_bd,sum(usmh)as usmh,sum(smh)as smh,
sum(oh)as oh,sum(igbdh)as igbdh,sum(egbdh)as egbdh, sum(total_bd_hrs) as total_bd_hrs,
sum(load_shedding)as load_shedding,sum(total_losses)as total_losses
 FROM daily_gen_summary_solar t1 left join site_master_solar t2 on  t2.site_master_solar_id=t1.site_id   left join solar_ac_dc_capacity t3 on  t3.site_id=t1.site_id 
and t3.inverter=t1.location_name " + filter + " group by t1.site,location_name ,month(date) ORDER BY t1.site, year, month";

            //where t1.approve_status=" + approve_status + " and  t2.state=t1.state  and t3.inverter=t1.location_name " + filter + " group by t1.site,location_name ,month(date)";

            return await Context.GetData<SolarDailyGenReports1>(qry).ConfigureAwait(false);

        }
        internal async Task<List<SolarDailyGenReports2>> GetSolarMonthlyGenSummaryReport2(string fy, string month, string country, string state, string spv, string site, string inverter)
        {
            string filter = "";
            string trackerFilter = "";
            int chkfilter = 0;
            string invfilter = "";
            if (!string.IsNullOrEmpty(month) && !string.IsNullOrEmpty(fy))
            {
                filter += " where (";
                trackerFilter += " WHERE (";

                string[] spmonth = month.Split(",");
                string months = "";

                for (int i = 0; i < spmonth.Length; i++)
                {
                    if (i > 0)
                    {
                        filter += " or ";
                        trackerFilter += " OR ";
                    }
                    int monthno = Int32.Parse(spmonth[i]);
                    string year = (Int32.Parse(fy) + 1).ToString();
                    string Qyear = (monthno > 3) ? fy : year;
                    filter += "( month(t1.date) = " + spmonth[i] + " and year(t1.date) = '" + Qyear + "' )";
                    trackerFilter += "( month(t1.date) = " + spmonth[i] + " and year(t1.date) = '" + Qyear + "' )";
                }
                filter += ") ";
                trackerFilter += ") ";
                chkfilter = 1;
            }
            else if (!string.IsNullOrEmpty(month))
            {
                filter += " where month(t1.date) in ( " + month + " )";
                trackerFilter += " WHERE month(t1.date) IN(" + month + ") ";
                chkfilter = 1;
            }
            else
            {
                filter += " where ((year(t1.date) = '" + fy + "' and month(t1.date)>3) || (year(t1.date) = '" + (Convert.ToInt32(fy) + 1).ToString() + "' and month(t1.date)<4))";
                trackerFilter += " where ((year(t1.date) = '" + fy + "' and month(t1.date)>3) || (year(t1.date) = '" + (Convert.ToInt32(fy) + 1).ToString() + "' and month(t1.date)<4))";
                chkfilter = 1;
            }
            if (!string.IsNullOrEmpty(state) && state != "All~")
            {
                if (chkfilter == 1)
                {
                    filter += " and ";
                    trackerFilter += " AND ";
                }
                string[] spstate = state.Split(",");
                filter += " t1.state in (";
                string states = "";
                for (int i = 0; i < spstate.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spstate[i].ToString()))
                    {
                        states += "'" + spstate[i].ToString() + "',";
                    }
                }
                filter += states.TrimEnd(',') + ")";
                trackerFilter += states.TrimEnd(',') + ")";

            }
            if (!string.IsNullOrEmpty(spv) && spv != "All~")
            {
                if (chkfilter == 1)
                {
                    filter += " and ";
                    trackerFilter += " AND";
                }
                string[] spspv = spv.Split(",");
                filter += " t2.spv in (";
                trackerFilter += " t2.spv in (";
                string spvs = "";
                for (int i = 0; i < spspv.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spspv[i].ToString()))
                    {
                        spvs += "'" + spspv[i].ToString() + "',";
                    }
                }
                filter += spvs.TrimEnd(',') + ")";
                trackerFilter += spvs.TrimEnd(',') + ")";

            }
            if (!string.IsNullOrEmpty(site) && site != "All~")
            {
                if (chkfilter == 1)
                {
                    filter += " and ";
                    trackerFilter += " AND";
                }
                string[] spsite = site.Split(",");
                filter += " site_master_solar_id in (";
                trackerFilter += " t1.site_id IN(";
                invfilter +=" where site_id IN(";
                string sites = "";
                for (int i = 0; i < spsite.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spsite[i].ToString()))
                    {
                        sites += "'" + spsite[i].ToString() + "',";
                    }
                }
                filter += sites.TrimEnd(',') + ")";
                trackerFilter += sites.TrimEnd(',') + ")";
                invfilter += sites.TrimEnd(',') + ")";
            }
            if (!string.IsNullOrEmpty(inverter) && inverter != "All~")
            {
                if (chkfilter == 1)
                {
                    filter += " and ";
                    //trackerFilter += " AND";
                }
                inverter = inverter.Replace('=', '/');
                string[] spinverter = inverter.Split(",");
                filter += " t1.location_name in (";
                string inverters = "";
                for (int i = 0; i < spinverter.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spinverter[i].ToString()))
                    {
                        inverters += "'" + spinverter[i].ToString() + "',";
                    }
                }
                filter += inverters.TrimEnd(',') + ")";
            }

            //(sum(ghi)/count(*))as ghi,(sum(poa)/count(*))as poa 150152024
            string qry = @"SELECT year(t1.date)as year,DATE_FORMAT(t1.date,'%M') as month, t2.country,t1.state,t2.spv,t1.site,(t2.dc_capacity)as dc_capacity, (t2.ac_capacity)as ac_capacity,(sum(ghi))as ghi,(sum(poa))as poa,sum(expected_kwh)as expected_kwh, sum(inv_kwh)as inv_kwh,sum(plant_kwh)as plant_kwh, sum(CASE WHEN t1.inv_pr >= 60 and t1.inv_pr <= 90 THEN t1.inv_pr END)/count(CASE WHEN t1.inv_pr >= 60 and t1.inv_pr <= 90 THEN t1.inv_pr END) as inv_pr, sum(CASE WHEN t1.plant_pr >= 60 and t1.plant_pr <= 90 THEN t1.plant_pr END)/count(CASE WHEN t1.plant_pr >= 60 and t1.plant_pr <= 90 THEN t1.plant_pr END) as plant_pr, sum(inv_plf_ac)/count(inv_plf_ac) as inv_plf,sum(plant_plf_ac)/count(plant_plf_ac) as plant_plf, sum(ma)/count(ma) as ma_actual,sum(ma)/count(ma) as ma_contractual, (sum(iga)/count(*))as iga,(sum(ega)/count(*))as ega,(sum(ega_b)/count(*))as ega_b,(sum(ega_c)/count(*))as ega_c,sum(prod_hrs) as prod_hrs, sum(lull_hrs_bd) as lull_hrs_bd, sum(usmh_bs) as usmh_bs, sum(smh_bd) as smh_bd, sum(oh_bd) as oh_bd, sum(igbdh_bd) as igbdh_bd, sum(egbdh_bd) as egbdh_bd, sum(load_shedding_bd) as load_shedding_bd, sum(total_bd_hrs) as total_bd_hrs, sum(usmh)as usmh,sum(smh)as smh, sum(oh)as oh,sum(igbdh)as igbdh,sum(egbdh)as egbdh, sum(load_shedding)as load_shedding, sum(total_losses)as total_losses FROM daily_gen_summary_solar t1 left join site_master_solar t2 on  t2.site_master_solar_id=t1.site_id " + filter + " group by t1.site ,month(t1.date) ORDER BY year(t1.date), month(t1.date),t1.site";//t1.site, year, month";

            //where t1.approve_status=" + approve_status + " and t2.state=t1.state  " + filter + " group by t1.site ,month(date)";
            List<SolarDailyGenReports2> _monthlyGenData = new List<SolarDailyGenReports2>();
            string functionName = "GetSolarMonthlyGenSummaryReport2";
            try
            {
                _monthlyGenData = await Context.GetData<SolarDailyGenReports2>(qry).ConfigureAwait(false);
            }
            catch(Exception e)
            {
                string msg = "Exception while fetching records from daily_gen_summary_solar and site_master_solar, due to : " + e.ToString();
                //API_ErrorLog(msg);
                LogError(0, 1, 5, functionName, msg, backend);
            }

            if(_monthlyGenData.Count > 0)
            {
                string trackerQry = "SELECT t1.site, DATE_FORMAT(t1.date, '%M') AS month, SUM(t1.tracker_loss) AS tracker_losses FROM uploading_file_tracker_loss t1 LEFT JOIN site_master_solar t2 ON t1.site_id = t2.site_master_solar_id " + trackerFilter + " GROUP BY t1.site_id, month(t1.date)";
                List<SolarDailyGenReports2> _trackerData = new List<SolarDailyGenReports2>();
                try
                {
                    _trackerData = await Context.GetData<SolarDailyGenReports2>(trackerQry).ConfigureAwait(false);
                }
                catch (Exception e)
                {
                    string msg = "Exception while fetching records from uploading_file_tracker_loss table, due to : " + e.ToString();
                    //API_ErrorLog(msg);
                    LogError(0, 1, 5, functionName, msg, backend);
                }
                // get inverte count for site wise poa and ghi calcilaion 
                string invertqury = "SELECT count(inverter) as inv_count,site FROM `solar_ac_dc_capacity` " + invfilter + " group by site";
                List<SolarDailyInvCount> _invData = new List<SolarDailyInvCount>();
                try
                {
                    _invData = await Context.GetData<SolarDailyInvCount>(invertqury).ConfigureAwait(false);
                }
                catch (Exception e)
                {
                    string msg = "Exception while fetching records from uploading_file_tracker_loss table, due to : " + e.ToString();
                    //API_ErrorLog(msg);
                    //LogError(0, 1, 5, functionName, msg, backend);
                }

                foreach (var data in _monthlyGenData)
                {
                    foreach (var trackerData in _trackerData)
                    {
                        if (data.site == trackerData.site && data.month == trackerData.month)
                        {
                            data.tracker_losses = trackerData.tracker_losses;
                            data.total_losses = data.total_losses + data.tracker_losses;
                        }
                    }
                    foreach (var invData in _invData)
                    {
                        if (data.site == invData.site)
                        {
                            data.poa = data.poa/ invData.inv_count;
                            data.ghi = data.ghi / invData.inv_count;
                        }
                    }
                }
            }

            return _monthlyGenData;
        }
        internal async Task<List<SolarDailyGenReports1>> GetSolarYearlyGenSummaryReport1(string fromDate, string toDate, string country, string state, string spv, string site, string inverter, string month)
        {
            string filter = "";
            int chkfilter = 0;
            if (!string.IsNullOrEmpty(fromDate) || !string.IsNullOrEmpty(state) || !string.IsNullOrEmpty(spv) || !string.IsNullOrEmpty(site) || !string.IsNullOrEmpty(inverter))
                filter += " where ";
            if (!string.IsNullOrEmpty(fromDate) && fromDate != "All")
            {
                filter += "(t1.date >= '" + fromDate + "'  and t1.date<= '" + toDate + "')";
                chkfilter = 1;
            }
            if (!string.IsNullOrEmpty(state) && state != "All~")
            {
                if (chkfilter == 1) { filter += " and "; }
                // filter += "t1.state in (" + state + ")";
                string[] spstate = state.Split(",");
                filter += "t1.state in (";
                string states = "";
                for (int i = 0; i < spstate.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spstate[i].ToString()))
                    {
                        states += "'" + spstate[i].ToString() + "',";
                    }
                }
                filter += states.TrimEnd(',') + ")";

                chkfilter = 1;
            }
            if (!string.IsNullOrEmpty(spv) && spv != "All~")
            {
                if (chkfilter == 1) { filter += " and "; }
                // filter += "t2.spv in (" + spv + ")";
                string[] spspv = spv.Split(",");
                filter += "t2.spv in (";
                string spvs = "";
                for (int i = 0; i < spspv.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spspv[i].ToString()))
                    {
                        spvs += "'" + spspv[i].ToString() + "',";
                    }
                }
                filter += spvs.TrimEnd(',') + ")";

                chkfilter = 1;
            }
            if (!string.IsNullOrEmpty(site) && site != "All~")
            {
                if (chkfilter == 1) { filter += " and "; }
                // filter += "t1.site in (" + site + ")";
                string[] spsite = site.Split(",");
                filter += "t1.site_id in (";
                string sites = "";
                for (int i = 0; i < spsite.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spsite[i].ToString()))
                    {
                        sites += spsite[i].ToString() + ",";
                    }
                }
                filter += sites.TrimEnd(',') + ")";
                chkfilter = 1;
            }
            if (!string.IsNullOrEmpty(inverter) && inverter != "All~")
            {
                if (chkfilter == 1) { filter += " and "; }
                // filter += "t1.wtg in (" + wtg + ")";
                string[] spinv = inverter.Split(",");
                filter += " location_name in (";
                string invs = "";
                for (int i = 0; i < spinv.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spinv[i].ToString()))
                    {
                        invs += "'" + spinv[i].ToString() + "',";
                    }
                }
                filter += invs.TrimEnd(',') + ")";
            }
            if (!string.IsNullOrEmpty(month) && month != "All~")
            {
                if (chkfilter == 1) { filter += " and "; }

                string[] spmonth = month.Split("~");
                filter += "month(date) in (";
                string months = "";
                for (int i = 0; i < spmonth.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spmonth[i].ToString()))
                    {
                        months += "" + spmonth[i].ToString() + ",";
                    }
                }
                filter += months.TrimEnd(',') + ")";
            }
            // (sum(ghi)/count(*))as ghi,(sum(poa)/count(*))as poa  15012024
            string qry = @"SELECT year(date)as year,DATE_FORMAT(date,'%M') as month,date,t2.country,t1.state,
t2.spv,t1.site,location_name as Inverter, (t3.dc_capacity)as dc_capacity,
(t3.ac_capacity)as ac_capacity,
(sum(ghi))as ghi,(sum(poa))as poa,sum(expected_kwh)as expected_kwh,
sum(inv_kwh)as inv_kwh,sum(plant_kwh)as plant_kwh,(sum(inv_pr)/count(inv_pr)) as inv_pr,(sum(plant_pr)/count(plant_pr)) as plant_pr,
sum(inv_plf_ac)/count(inv_plf_ac) as inv_plf,sum(plant_plf_ac)/count(plant_plf_ac) as plant_plf,
sum(ma)/count(ma) as ma_actual,sum(ma)/count(ma) as ma_contractual,
(sum(iga)/count(*))as iga,(sum(ega)/count(*))as ega,(sum(ega_b)/count(*))as ega_b,(sum(ega_c)/count(*))as ega_c,sum(prod_hrs) as gen_hrs,
sum(lull_hrs_bd) as lull_hrs_bd, sum(usmh_bs) as usmh_bs,
sum(smh_bd) as smh_bd, sum(oh_bd) as oh_bd, sum(igbdh_bd) as igbdh_bd,
sum(egbdh_bd) as egbdh_bd, sum(load_shedding_bd) as load_shedding_bd,
sum(total_bd_hrs) as total_bd_hrs, sum(usmh)as usmh,sum(smh)as smh,
sum(oh)as oh,sum(igbdh)as igbdh,sum(egbdh)as egbdh,
sum(load_shedding)as load_shedding,sum(total_losses)as total_losses
 FROM daily_gen_summary_solar t1 left join site_master_solar t2 on  t2.site_master_solar_id=t1.site_id  left join solar_ac_dc_capacity t3 on  t3.site_id=t1.site_id
 and t3.inverter=t1.location_name " + filter + " group by t1.site,location_name ORDER BY t1.site, year, month";

            //where t1.approve_status=" + approve_status + " and t2.state=t1.state  and t3.inverter=t1.location_name " + filter + " group by t1.site,location_name ";

            return await Context.GetData<SolarDailyGenReports1>(qry).ConfigureAwait(false);

        }
        internal async Task<List<SolarDailyGenReports2>> GetSolarYearlyGenSummaryReport2(string fromDate, string toDate, string country, string state, string spv, string site, string inverter, string month)
        {
            string filter = "";
            string trackerFilter = "";
            int chkfilter = 0;
            string invfilter = "";
            if (!string.IsNullOrEmpty(fromDate) || !string.IsNullOrEmpty(state) || !string.IsNullOrEmpty(spv) || !string.IsNullOrEmpty(site) || !string.IsNullOrEmpty(inverter))
            {
                filter += " where ";
                trackerFilter += " WHERE";
            }
            if (!string.IsNullOrEmpty(fromDate) && fromDate != "All")
            {
                filter += "(t1.date >= '" + fromDate + "'  and t1.date<= '" + toDate + "')";
                trackerFilter += "(t1.date >= '" + fromDate + "'  and t1.date<= '" + toDate + "')";
                chkfilter = 1;
            }
            if (!string.IsNullOrEmpty(state) && state != "All~")
            {
                if (chkfilter == 1) 
                { 
                    filter += " and ";
                    trackerFilter += " AND";
                }
                // filter += "t1.state in (" + state + ")";
                string[] spstate = state.Split(",");
                filter += "t1.state in (";
                trackerFilter += " t2.state IN(";
                string states = "";
                for (int i = 0; i < spstate.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spstate[i].ToString()))
                    {
                        states += "'" + spstate[i].ToString() + "',";
                    }
                }
                filter += states.TrimEnd(',') + ")";
                trackerFilter += states.TrimEnd(',') + ")";

                chkfilter = 1;
            }
            if (!string.IsNullOrEmpty(spv) && spv != "All~")
            {
                if (chkfilter == 1) 
                { 
                    filter += " and ";
                    trackerFilter += " AND";
                }
                // filter += "t2.spv in (" + spv + ")";
                string[] spspv = spv.Split(",");
                filter += "t2.spv in (";
                trackerFilter += " t2.spv IN(";
                string spvs = "";
                for (int i = 0; i < spspv.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spspv[i].ToString()))
                    {
                        spvs += "'" + spspv[i].ToString() + "',";
                    }
                }
                filter += spvs.TrimEnd(',') + ")";
                trackerFilter += spvs.TrimEnd(',') + ")";

                chkfilter = 1;
            }
            if (!string.IsNullOrEmpty(site) && site != "All~")
            {
                if (chkfilter == 1)
                { 
                    filter += " and ";
                    trackerFilter += " AND";
                }
                // filter += "t1.site in (" + site + ")";
                string[] spsite = site.Split(",");
                filter += "t1.site_id in (";
                trackerFilter += " t1.site_id IN(";
                invfilter += " where site_id IN(";
                string sites = "";
                for (int i = 0; i < spsite.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spsite[i].ToString()))
                    {
                        sites += spsite[i].ToString() + ",";
                    }
                }
                filter += sites.TrimEnd(',') + ")";
                trackerFilter += sites.TrimEnd(',') + ")";
                invfilter += sites.TrimEnd(',') + ")";
                chkfilter = 1;
            }
            if (!string.IsNullOrEmpty(inverter) && inverter != "All~")
            {
                if (chkfilter == 1) { filter += " and "; }
                // filter += "t1.wtg in (" + wtg + ")";
                string[] spinv = inverter.Split(",");
                filter += " location_name in (";
                string invs = "";
                for (int i = 0; i < spinv.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spinv[i].ToString()))
                    {
                        invs += "'" + spinv[i].ToString() + "',";
                    }
                }
                filter += invs.TrimEnd(',') + ")";
            }
            if (!string.IsNullOrEmpty(month) && month != "All~")
            {
                if (chkfilter == 1)
                { 
                    filter += " and ";
                    trackerFilter += " AND";
                }

                string[] spmonth = month.Split("~");
                filter += "month(t1.date) in (";
                trackerFilter += "month(t1.date) IN(";
                string months = "";
                for (int i = 0; i < spmonth.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spmonth[i].ToString()))
                    {
                        months += "" + spmonth[i].ToString() + ",";
                    }
                }
                filter += months.TrimEnd(',') + ")";
                trackerFilter += months.TrimEnd(',') + ")";
            }

            //string qry = @"SELECT year(t1.date)as year,DATE_FORMAT(t1.date,'%M') as month,t1.date, t2.country,t1.state,t2.spv,t1.site,(t2.dc_capacity)as dc_capacity, (t2.ac_capacity)as ac_capacity,(sum(ghi)/count(*))as ghi,(sum(poa)/count(*))as poa,sum(expected_kwh)as expected_kwh, sum(inv_kwh)as inv_kwh,sum(plant_kwh)as plant_kwh,(sum(inv_pr)/count(inv_pr)) as inv_pr,(sum(plant_pr)/count(plant_pr)) as plant_pr, sum(inv_plf_ac)/count(inv_plf_ac) as inv_plf,sum(plant_plf_ac)/count(plant_plf_ac) as plant_plf, sum(ma)/count(ma) as ma_actual,sum(ma)/count(ma) as ma_contractual, (sum(iga)/count(*))as iga,(sum(ega)/count(*))as ega,sum(prod_hrs) as prod_hrs, sum(lull_hrs_bd) as lull_hrs_bd, sum(usmh_bs) as usmh_bs, sum(smh_bd) as smh_bd, sum(oh_bd) as oh_bd, sum(igbdh_bd) as igbdh_bd, sum(egbdh_bd) as egbdh_bd, sum(load_shedding_bd) as load_shedding_bd, sum(total_bd_hrs) as total_bd_hrs, sum(usmh)as usmh,sum(smh)as smh, sum(oh)as oh,sum(igbdh)as igbdh,sum(egbdh)as egbdh, sum(load_shedding)as load_shedding, SUM(t3.tracker_loss) as tracker_losses,sum(total_losses)as total_losses FROM daily_gen_summary_solar t1 left join site_master_solar t2 on  t2.site_master_solar_id=t1.site_id LEFT JOIN uploading_file_tracker_loss t3 ON t1.site_id = t3.site_id " + filter + " group by t1.site_id ";
			string qry = @"SELECT year(t1.date)as year,DATE_FORMAT(t1.date,'%M') as month,t1.date, t2.country,t1.state,t2.spv,t1.site,(t2.dc_capacity)as dc_capacity, (t2.ac_capacity)as ac_capacity,(sum(ghi))as ghi,(sum(poa))as poa,sum(expected_kwh)as expected_kwh, sum(inv_kwh)as inv_kwh,sum(plant_kwh)as plant_kwh,sum(CASE WHEN t1.inv_pr >= 60 and t1.inv_pr <= 90 THEN t1.inv_pr END)/count(CASE WHEN t1.inv_pr >= 60 and t1.inv_pr <= 90 THEN t1.inv_pr END) as inv_pr, sum(CASE WHEN t1.plant_pr >= 60 and t1.plant_pr <= 90 THEN t1.plant_pr END)/count(CASE WHEN t1.plant_pr >= 60 and t1.plant_pr <= 90 THEN t1.plant_pr END) as plant_pr, sum(inv_plf_ac)/count(inv_plf_ac) as inv_plf,sum(plant_plf_ac)/count(plant_plf_ac) as plant_plf, sum(ma)/count(ma) as ma_actual,sum(ma)/count(ma) as ma_contractual, (sum(iga)/count(*))as iga,(sum(ega)/count(*))as ega,(sum(ega_b)/count(*))as ega_b,(sum(ega_c)/count(*))as ega_c,sum(prod_hrs) as prod_hrs, sum(lull_hrs_bd) as lull_hrs_bd, sum(usmh_bs) as usmh_bs, sum(smh_bd) as smh_bd, sum(oh_bd) as oh_bd, sum(igbdh_bd) as igbdh_bd, sum(egbdh_bd) as egbdh_bd, sum(load_shedding_bd) as load_shedding_bd, sum(total_bd_hrs) as total_bd_hrs, sum(usmh)as usmh,sum(smh)as smh, sum(oh)as oh,sum(igbdh)as igbdh,sum(egbdh)as egbdh, sum(load_shedding)as load_shedding, sum(total_losses)as total_losses FROM daily_gen_summary_solar t1 left join site_master_solar t2 on  t2.site_master_solar_id=t1.site_id " + filter + " group by t1.site_id ORDER BY t1.site, year, month";

            //where t1.approve_status=" + approve_status + " and t2.state=t1.state  " + filter + " group by t1.site ";

            List<SolarDailyGenReports2> _yearlyGenData = new List<SolarDailyGenReports2>();
            string functionName = "GetSolarYearlyGenSummaryReport2";
            try
            {
                _yearlyGenData = await Context.GetData<SolarDailyGenReports2>(qry).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                string msg = "Exception while fetching records from daily_gen_summary and site_master tables, due to : " + e.ToString();
                //API_ErrorLog(msg);
                LogError(0, 1, 5, functionName, msg, backend);
            }

            if(_yearlyGenData.Count > 0)
            {
                string trackerQry = "SELECT t1.site, year(t1.date) AS year, SUM(t1.tracker_loss) AS tracker_losses FROM uploading_file_tracker_loss t1 LEFT JOIN site_master_solar t2 ON t1.site_id = t2.site_master_solar_id " + trackerFilter + " GROUP BY t1.site_id";
                List<SolarDailyGenReports2> _trackerData = new List<SolarDailyGenReports2>();
                try
                {
                    _trackerData = await Context.GetData<SolarDailyGenReports2>(trackerQry).ConfigureAwait(false);
                }
                catch (Exception e)
                {
                    string msg = "Exception while fetching records from uploading_file_tracker_loss table, due to : " + e.ToString();
                    //API_ErrorLog(msg);
                    LogError(0, 1, 5, functionName, msg, backend);
                }
                // get inverte count for site wise poa and ghi calcilaion 
                string invertqury = "SELECT count(inverter) as inv_count,site FROM `solar_ac_dc_capacity` " + invfilter + " group by site";
                List<SolarDailyInvCount> _invData = new List<SolarDailyInvCount>();
                try
                {
                    _invData = await Context.GetData<SolarDailyInvCount>(invertqury).ConfigureAwait(false);
                }
                catch (Exception e)
                {
                    string msg = "Exception while fetching records from uploading_file_tracker_loss table, due to : " + e.ToString();
                    //API_ErrorLog(msg);
                    //LogError(0, 1, 5, functionName, msg, backend);
                }
                foreach (var data in _yearlyGenData)
                {
                    foreach (var trackerData in _trackerData)
                    {
                        if (data.site == trackerData.site && data.year == trackerData.year)
                        {
                            data.tracker_losses = trackerData.tracker_losses;
                            data.total_losses = data.total_losses + data.tracker_losses;
                        }
                    }
                    foreach (var invData in _invData)
                    {
                        if (data.site == invData.site)
                        {
                            data.poa = data.poa / invData.inv_count;
                            data.ghi = data.ghi / invData.inv_count;
                        }
                    }
                }
            }

            return _yearlyGenData;
        }
        //        internal async Task<List<SolarPerformanceReports1>> GetSolarPerformanceReportBySiteWise(string fy, string fromDate, string todate,string site)
        //        {

        //            /*string datefilter = " (date >= '" + fromDate + "'  and date<= '" + todate + "') ";

        //            string qry = @"SELECT site,
        //(SELECT ac_capacity FROM site_master_solar where site=t1.site and state=t1.state)as capacity,
        //(SELECT dc_capacity FROM site_master_solar where site=t1.site and state=t1.state)as dc_capacity,(SELECT total_tarrif FROM site_master_solar where site=t1.site and state=t1.state)as total_tarrif,
        //(SELECT  sum(gen_nos) FROM daily_target_kpi_solar where sites=t1.site and " + datefilter + " and fy='" + fy + "') as tar_kwh,(sum(expected_kwh)/1000000)as expected_kwh,(sum(inv_kwh)/1000000)as act_kwh,(SELECT lineloss FROM monthly_line_loss_solar where site=t1.site and fy='" + fy + "' and month=DATE_FORMAT(t1.date, '%b')  order by monthly_line_loss_solar_id desc limit 1)as lineloss,(SELECT  sum(ghi)/count(*) FROM daily_target_kpi_solar where sites=t1.site and " + datefilter + " and fy= '" + fy + "') as tar_ghi,sum(ghi)/count(*) as act_ghi,(SELECT  sum(poa)/count(*) FROM daily_target_kpi_solar where sites=t1.site and " + datefilter + " and fy= '" + fy + "') as tar_poa,sum(poa)/count(*) as act_poa,(SELECT  sum(plf)/count(*) FROM daily_target_kpi_solar where sites=t1.site and " + datefilter + " and fy= '" + fy + "') as tar_plf,sum(plant_plf_ac)/count(*) as act_plf,(SELECT  sum(pr)/count(*) FROM daily_target_kpi_solar where sites=t1.site and " + datefilter + " and fy= '" + fy + "') as tar_pr,sum(plant_pr)/count(*) as act_pr,(SELECT  sum(ma)/count(*) FROM daily_target_kpi_solar where sites=t1.site and " + datefilter + " and fy= '" + fy + "') as tar_ma,sum(ma)/count(*) as act_ma,(SELECT  sum(iga)/count(*) FROM daily_target_kpi_solar where sites=t1.site and " + datefilter + " and fy= '" + fy + "') as tar_iga,sum(iga)/count(*) as act_iga,(SELECT  sum(ega)/count(*) FROM daily_target_kpi_solar where sites=t1.site and " + datefilter + "  and fy= '" + fy + "') as tar_ega,sum(ega)/count(*) as act_ega FROM daily_gen_summary_solar t1 where  " + datefilter + " group by site";

        //            //and fy= '" + fy + "') as tar_ega,sum(ega)/count(*) as act_ega FROM daily_gen_summary_solar t1 where t1.approve_status=" + approve_status + " and " + datefilter + " group by site";

        //            return await Context.GetData<SolarPerformanceReports1>(qry).ConfigureAwait(false);*/
        //            bool GetFrom15Min = false;
        //            bool CombineReport = false;
        //            string todate1 = "";
        //            string fromDate1 = "";
        //            if (Convert.ToDateTime(Convert.ToDateTime(fromDate).ToString("yyyy-MM-dd")) < Convert.ToDateTime("2023-10-01"))
        //            {
        //                if (Convert.ToDateTime(Convert.ToDateTime(fromDate).ToString("yyyy-MM-dd")) < Convert.ToDateTime("2023-10-01") && Convert.ToDateTime(Convert.ToDateTime(todate).ToString("yyyy-MM-dd")) > Convert.ToDateTime("2023-10-01"))
        //                {
        //                    todate1 = "2023-09-30";
        //                    fromDate1 = "2023-10-01";
        //                    CombineReport = true;
        //                }


        //                GetFrom15Min = true;
        //            }
        //            string datefilter = " (date >= '" + fromDate + "'  and date<= '" + todate + "') ";
        //            string datefilterTempCorr = " t1.date >= '" + fromDate + "' AND t1.date<= '" + todate + "' ";
        //            string datefilter1 = " and (t1.date >= '" + fromDate + "'  and t1.date<= '" + todate + "') ";
        //            string datefilter2 = "(date(date_time) >= '" + fromDate + "'  and date(date_time) <= '" + todate + "') ";
        //            string datefilter3 = " BETWEEN '" + fromDate + "'  and '" + todate1 + "' ";
        //            string datefilter4 = " BETWEEN '" + fromDate1 + "'  and '" + todate + "' ";

        //            string filter = "";
        //            string functionName = "GetSolarPerformanceReport";
        //            if (!string.IsNullOrEmpty(site))
        //            {
        //                filter += " and t1.site_id IN(" + site + ") ";
        //            }
        //            string qry1 = "create or replace view temp_view as select t1.date, t1.site_id, t2.site, t1.gen_nos, t1.ghi, t1.poa, t1.plf,t1.pr, t1.ma, " +
        //                "t1.iga, t1.ega from daily_target_kpi_solar t1, daily_gen_summary_solar t2 where t1.date = t2.date and t1.site_id = t2.site_id " +
        //               datefilter1 + " group by t1.date, t1.site_id;";
        //            try
        //            {
        //                await Context.ExecuteNonQry<int>(qry1).ConfigureAwait(false);
        //            }
        //            catch (Exception e)
        //            {
        //                string msg = e.ToString();
        //                //API_ErrorLog("" + msg);
        //                LogError(0, 1, 5, functionName, msg, backend);
        //            }
        //            string qry2 = " select site, site_id, sum(gen_nos) as tar_kwh," +
        //                " sum(ghi) as tar_ghi, sum(poa) as tar_poa, sum(plf)/count(plf) as tar_plf," +
        //                " sum(pr)/count(pr) as tar_pr, sum(ma)/count(ma) as tar_ma, sum(iga)/count(iga) as tar_iga, sum(ega)/count(ega) as tar_ega " +
        //                "from temp_view group by site ";
        //            List<SolarPerformanceReports1> tempdata = new List<SolarPerformanceReports1>();
        //            tempdata = await Context.GetData<SolarPerformanceReports1>(qry2).ConfigureAwait(false);

        //            string qry5 = "create or replace view temp_view2 as SELECT t1.date,t3.site,t3.spv,(t3.ac_capacity*1000) as capacity,SUM(t1.inv_kwh) as kwh,t2.LineLoss,SUM(t1.inv_kwh)-SUM(t1.inv_kwh)*(t2.LineLoss/100) as kwh_afterloss,((SUM(t1.inv_kwh)-SUM(t1.inv_kwh)*(t2.LineLoss/100))/((t3.ac_capacity*1000)*24))*100 as plf_afterloss FROM `daily_gen_summary_solar` as t1 left join monthly_line_loss_solar as t2 on t2.site_id= t1.site_id and month_no=MONTH(t1.date) and year = year(t1.date) left join site_master_solar as t3 on t3.site_master_solar_id = t1.site_id group by t1.date ,t1.site";
        //            try
        //            {
        //                await Context.ExecuteNonQry<int>(qry5).ConfigureAwait(false);
        //            }
        //            catch (Exception e)
        //            {
        //                string msg = e.ToString();
        //                LogError(0, 1, 5, functionName, msg, backend);
        //            }

        //            string qry6 = "SELECT site, sum(kwh_afterloss)/ 1000000 as act_kwh, avg(plf_afterloss) as act_plf FROM `temp_view2` where date between '" + fromDate + "' and '"+ todate + "' group by site";
        //            List<SolarPerformanceReports1> newdata = new List<SolarPerformanceReports1>();
        //            newdata = await Context.GetData<SolarPerformanceReports1>(qry6).ConfigureAwait(false);

        ////            string qry = @"SELECT site,  
        ////(SELECT ac_capacity FROM site_master_solar where site=t1.site and state=t1.state)as capacity,
        ////(SELECT dc_capacity FROM site_master_solar where site=t1.site and state=t1.state)as dc_capacity,
        ////(SELECT total_tarrif FROM site_master_solar where site=t1.site and state=t1.state)as total_tarrif,
        ////(SELECT  sum(gen_nos) FROM daily_target_kpi_solar where sites=t1.site and " + datefilter + " and fy='" + fy + "') as tar_kwh,(sum(expected_kwh) / 1000000) as pr_expected_kwh, " +
        ////"(sum(inv_kwh_afterloss)/1000000)as act_kwh,(SELECT lineloss FROM monthly_line_loss_solar where site=t1.site and fy='" + fy + "' and month_no=month(t1.date)  order by monthly_line_loss_solar_id desc limit 1)as lineloss,(SELECT  sum(ghi)/count(*) FROM daily_target_kpi_solar where sites=t1.site and " + datefilter + " and fy= '" + fy + "') as tar_ghi,sum(ghi)/count(*) as act_ghi,(SELECT  sum(poa)/count(*) FROM daily_target_kpi_solar where sites=t1.site and " + datefilter + " and fy= '" + fy + "') as tar_poa,sum(poa)/count(*) as act_poa,(SELECT  sum(plf)/count(*) FROM daily_target_kpi_solar where sites=t1.site and " + datefilter + " and fy= '" + fy + "') as tar_plf,sum(inv_plf_afterloss)/count(*) as act_plf,(SELECT  sum(pr)/count(*) FROM daily_target_kpi_solar where sites=t1.site and " + datefilter + " and fy= '" + fy + "') as tar_pr,sum(plant_pr)/count(*) as act_pr,(SELECT  sum(ma)/count(*) FROM daily_target_kpi_solar where sites=t1.site and " + datefilter + " and fy= '" + fy + "') as tar_ma,sum(ma)/count(*) as act_ma,(SELECT  sum(iga)/count(*) FROM daily_target_kpi_solar where sites=t1.site and " + datefilter + " and fy= '" + fy + "') as tar_iga,sum(iga)/count(*) as act_iga,(SELECT  sum(ega)/count(*) FROM daily_target_kpi_solar where sites=t1.site and " + datefilter + "  and fy= '" + fy + "') as tar_ega,sum(ega)/count(*) as act_ega FROM daily_gen_summary_solar t1 where  " + datefilter + " " + filter + " group by site order by site";

        //            string newQry = @$"SELECT
        //    site,
        //    inv_count,
        //    capacity,
        //    dc_capacity,
        //    total_tarrif,
        //    tar_kwh,
        //    pr_expected_kwh,
        //    act_kwh,
        //    lineloss,
        //    tar_ghi,
        //    act_ghi / inv_count AS act_ghi, -- Division by inv_count
        //    tar_poa,
        //    act_poa / inv_count AS act_poa, -- Division by inv_count
        //    tar_plf,
        //    act_plf,
        //    tar_pr,
        //    act_pr,
        //    tar_ma,
        //    act_ma,
        //    tar_iga,
        //    act_iga,
        //    tar_ega,
        //    act_ega
        //FROM
        //    (SELECT 
        //        site,
        //        (SELECT COUNT(inverter) FROM solar_ac_dc_capacity WHERE site = t1.site) AS inv_count,
        //        (SELECT ac_capacity FROM site_master_solar where site=t1.site and state=t1.state)as capacity,
        //        (SELECT dc_capacity FROM site_master_solar where site=t1.site and state=t1.state)as dc_capacity,
        //        (SELECT total_tarrif FROM site_master_solar where site=t1.site and state=t1.state)as total_tarrif,
        //        (SELECT  sum(gen_nos) FROM daily_target_kpi_solar where sites=t1.site and {datefilter} and fy='{fy}') as tar_kwh,(sum(expected_kwh) / 1000000) as pr_expected_kwh, (sum(inv_kwh_afterloss)/1000000)as act_kwh,
        //        (SELECT lineloss FROM monthly_line_loss_solar where site=t1.site and fy='{fy}' and month_no=month(t1.date)  order by monthly_line_loss_solar_id desc limit 1)as lineloss,
        //        (SELECT  sum(ghi) FROM daily_target_kpi_solar where sites=t1.site and {datefilter} and fy= '{fy}') as tar_ghi,sum(ghi) as act_ghi,
        //        (SELECT  sum(poa) FROM daily_target_kpi_solar where sites=t1.site and {datefilter} and fy= '{fy}') as tar_poa,sum(poa) as act_poa,
        //        (SELECT  sum(plf)/count(*) FROM daily_target_kpi_solar where sites=t1.site and {datefilter} and fy= '{fy}') as tar_plf,sum(inv_plf_afterloss)/count(*) as act_plf,
        //        (SELECT  sum(pr)/count(*) FROM daily_target_kpi_solar where sites=t1.site and {datefilter} and fy= '{fy}') as tar_pr,sum(plant_pr)/count(*) as act_pr,
        //        (SELECT  sum(ma)/count(*) FROM daily_target_kpi_solar where sites=t1.site and {datefilter} and fy= '{fy}') as tar_ma,sum(ma)/count(*) as act_ma,
        //        (SELECT  sum(iga)/count(*) FROM daily_target_kpi_solar where sites=t1.site and {datefilter} and fy= '{fy}') as tar_iga,sum(iga)/count(*) as act_iga,
        //        (SELECT  sum(ega)/count(*) FROM daily_target_kpi_solar where sites=t1.site and {datefilter}  and fy= '{fy}') as tar_ega,sum(ega)/count(*) as act_ega 
        //    FROM daily_gen_summary_solar t1 
        //    WHERE {datefilter} {filter}
        //    GROUP BY site) AS subquery 
        //ORDER BY site;";

        //            //and fy= '" + fy + "') as tar_ega,sum(ega)/count(*) as act_ega FROM daily_gen_summary_solar t1 where t1.approve_status=" + approve_status + " and " + datefilter + " group by site";
        //            List<SolarPerformanceReports1> data = new List<SolarPerformanceReports1>();
        //            data = await Context.GetData<SolarPerformanceReports1>(newQry).ConfigureAwait(false);

        //            //sum(t1.plant_act)+sum(t1.total_losses) as plant_kwh,(t3.dc_capacity*1000) as dc_capacity, SUM(t1.inv_act) as act_kwh,t2.LineLoss as lineloss,
        //            //string act_kwhForTempQry = "SELECT t1.date,t3.site,(SUM(t1.inv_act)-SUM(t1.inv_act)*(t2.LineLoss/100))+sum(t1.total_losses) as act_kwh_afterloss FROM `uploading_file_generation_solar` as t1 left join monthly_line_loss_solar as t2 on t2.site_id= t1.site_id and month_no=MONTH(t1.date) and year=(t1.date)  left join site_master_solar as t3 on t3.site_master_solar_id = t1.site_id where t1.date >= '" + fromDate + "' AND t1.date <= '" + todate + "' group by t1.date ,t1.site;";

        //            //string act_kwhForTempQry = "SELECT t1.site,SUM((t1.inv_act - t1.inv_act * (t2.LineLoss / 100)) + t1.total_losses) as act_kwh_afterloss FROM `uploading_file_generation_solar` as t1 left join monthly_line_loss_solar as t2 on t2.site_id= t1.site_id and t2.month_no=MONTH(t1.date) left join site_master_solar as t3 on t3.site_master_solar_id = t1.site_id where t1.date >= '" + fromDate + "' AND t1.date <= '" + todate + "' group by t1.date ,t1.site;";

        //            //string act_kwhForTempQry = "SELECT t1.site, SUM((t1.inv_act - t1.inv_act * (t2.LineLoss / 100)) + t1.total_losses) as act_kwh_afterloss FROM `uploading_file_generation_solar` as t1 LEFT JOIN monthly_line_loss_solar as t2 on t2.site_id = t1.site_id and t2.month_no = MONTH(t1.date) where t1.date >= '" + fromDate + "' AND t1.date <= '" + todate + "' ;";

        //            //List<SolarPerformanceReports1> siteData = new List<SolarPerformanceReports1>();
        //            //try
        //            //{
        //            //    siteData = await Context.GetData<SolarPerformanceReports1>(act_kwhForTempQry).ConfigureAwait(false);
        //            //}
        //            //catch(Exception e)
        //            //{
        //            //    string msg = "Exception while getting act_kwh for temp corrected pr fetch query, due to : " + e.ToString();
        //            //    LogError(0, 1, 5, functionName, msg, backend);
        //            //}
        //            string getPower = "";
        //            if (GetFrom15Min)
        //            {
        //                if (CombineReport)
        //                {
        //                    getPower = " SELECT t2.site,SUM(CASE WHEN date(t1.date_time) " + datefilter3 + " THEN t1.P_exp_degraded / 4  WHEN date(t1.date_time)" + datefilter4 + " THEN t1.P_exp_degraded / 60 ELSE 0 END) AS expected_kwh FROM(SELECT site_id, P_exp_degraded, date_time FROM `uploading_pyranometer_15_min_solar` WHERE date(date_time) " + datefilter3 + " UNION ALL SELECT site_id, P_exp_degraded, date_time FROM `uploading_pyranometer_1_min_solar` WHERE date(date_time) " + datefilter4 + ") AS t1 LEFT JOIN site_master_solar AS t2 ON t1.site_id = t2.site_master_solar_id GROUP BY t1.site_id, t2.site";

        //                   // getPower = " SELECT  t2.site,SUM( CASE WHEN date(t1.date_time) BETWEEN "+ datefilter3 + " THEN t1.P_exp_degraded / 4 WHEN date(t1.date_time) BETWEEN "+ datefilter4 + " THEN t1.P_exp_degraded / 60 ELSE 0 END ) AS expected_kwh FROM (SELECT site_id, P_exp_degraded, date_time FROM `uploading_pyranometer_15_min_solar` WHERE date(date_time) BETWEEN " + datefilter3 + "  UNION ALL SELECT site_id, P_exp_degraded, date_time FROM `uploading_pyranometer_1_min_solar` WHERE date(date_time) BETWEEN " + datefilter4 + " AS t1 LEFT JOIN site_master_solar AS t2 ON t1.site_id = t2.site_master_solar_id GROUP BY t1.site_id, t2.site";


        //                   // getPower = "  select t2.site, SUM(t1.P_exp_degraded)/60 as expected_kwh from `uploading_pyranometer_1_min_solar` as t1 left join site_master_solar as t2 on t1.site_id=t2.site_master_solar_id where " + datefilter4 + " group by site_id";
        //                }
        //                else
        //                {
        //                    getPower = "  select t2.site, SUM(t1.P_exp_degraded)/4 as expected_kwh from `uploading_pyranometer_15_min_solar` as t1 left join site_master_solar as t2 on t1.site_id=t2.site_master_solar_id where " + datefilter2 + " group by site_id";
        //                }
        //                    //For getting Expectd power form 15 minute data. Here divide by 4 

        //            }
        //            else
        //            {
        //                //For getting Expectd power form 1 minute data. Here divide by 60
        //                getPower = "  select t2.site, SUM(t1.P_exp_degraded)/60 as expected_kwh from `uploading_pyranometer_1_min_solar` as t1 left join site_master_solar as t2 on t1.site_id=t2.site_master_solar_id where " + datefilter2 + " group by site_id";
        //            }



        //            string getTempCorrPr = "SELECT t2.site, t1.site_id, SUM(t1.jmrTempPR) AS temp_corrected_pr FROM temperature_corrected_pr t1 LEFT JOIN site_master_solar t2 ON t1.site_id = t2.site_master_solar_id WHERE " + datefilterTempCorr + " GROUP BY t1.site_id;";
        //                List<SolarPerformanceReports1> data1min = new List<SolarPerformanceReports1>();
        //                try
        //                {
        //                    data1min = await Context.GetData<SolarPerformanceReports1>(getPower).ConfigureAwait(false);
        //                    //_dataElement.Pexpected = (data1min[0].P_exp / 4);

        //                }
        //                catch (Exception e)
        //                {
        //                    string msg = "Exception while getting expected power from uploading_pyranometer_1_min_solar table." + e.ToString();
        //                    //API_ErrorLog(msg);
        //                    LogError(0, 1, 5, functionName, msg, backend);
        //            }
        //            List<SolarPerformanceReports1> dataTempCorrPr = new List<SolarPerformanceReports1>();
        //            try
        //            {
        //                dataTempCorrPr = await Context.GetData<SolarPerformanceReports1>(getTempCorrPr).ConfigureAwait(false);
        //            }
        //            catch(Exception e)
        //            {
        //                string msg = "Exception while fetching data from temperatur_corrected_pr table, due to : " + e.ToString();
        //                //API_ErrorLog(msg);
        //                LogError(0, 1, 5, functionName, msg, backend);
        //            }


        //            foreach (SolarPerformanceReports1 _dataelement in data)
        //            {
        //                foreach (SolarPerformanceReports1 _tempdataelement in tempdata)
        //                {
        //                    if (_dataelement.site == _tempdataelement.site)
        //                    {
        //                        _dataelement.tar_kwh = _tempdataelement.tar_kwh;
        //                        _dataelement.tar_ega = _tempdataelement.tar_ega;
        //                        _dataelement.tar_ghi = _tempdataelement.tar_ghi;
        //                        _dataelement.tar_iga = _tempdataelement.tar_iga;
        //                        _dataelement.tar_ma = _tempdataelement.tar_ma;
        //                        _dataelement.tar_plf = _tempdataelement.tar_plf;
        //                        _dataelement.tar_poa = _tempdataelement.tar_poa;
        //                        _dataelement.tar_pr = _tempdataelement.tar_pr;
        //                    }

        //                }
        //                foreach (SolarPerformanceReports1 _tempdataelement in newdata)
        //                {
        //                    if (_dataelement.site == _tempdataelement.site)
        //                    {
        //                        _dataelement.act_kwh = _tempdataelement.act_kwh;
        //                        _dataelement.act_plf = _tempdataelement.act_plf;

        //                    }
        //                }

        //                foreach (SolarPerformanceReports1 _tempdataelement in data1min)
        //                {
        //                    if (_dataelement.site == _tempdataelement.site)
        //                    {
        //                        _dataelement.expected_kwh = _tempdataelement.expected_kwh;
        //                        _dataelement.temp_corrected_pr = _tempdataelement.temp_corrected_pr;
        //                    }
        //                }
        //                foreach (SolarPerformanceReports1 _tempdataelement in dataTempCorrPr)
        //                {
        //                    if (_dataelement.site == _tempdataelement.site)
        //                    {
        //                        _dataelement.temp_corrected_pr = ((_dataelement.act_kwh * 1000000) / _tempdataelement.temp_corrected_pr) * 100;
        //                    }
        //                }
        //                //foreach (SolarPerformanceReports1 _tempdataelement in siteData)
        //                //{
        //                //    if (_dataelement.site == _tempdataelement.site)
        //                //    {
        //                //        _dataelement.act_kwh_for_temp_corr = _tempdataelement.act_kwh_afterloss;
        //                //    }
        //                //}


        //            }

        //            return data;

        //        }

        internal async Task<List<SolarPerformanceReports1>> GetSolarPerformanceReportBySiteWise(string fy, string fromDate, string todate, string site, string spv)
        {
            string filtersite = "";
            string spvsiteList = "";
            if (!string.IsNullOrEmpty(spv) && spv != "All" && string.IsNullOrEmpty(site))
            {

                string[] spspv = spv.Split(",");
                filtersite += "  spv in (";
                string spvs = "";
                for (int i = 0; i < spspv.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spspv[i].ToString()))
                    {
                        spvs += "'" + spspv[i].ToString() + "',";
                    }
                }
                filtersite += spvs.TrimEnd(',') + ")";

                string masterquery = "SELECT site_master_solar_id FROM `site_master_solar` where " + filtersite;
                List<SolarSiteMaster> sitelist = new List<SolarSiteMaster>();
                sitelist = await Context.GetData<SolarSiteMaster>(masterquery).ConfigureAwait(false);
                for (var i = 0; i < sitelist.Count; i++)
                {
                    spvsiteList += "'" + sitelist[i].site_master_solar_id + "',";
                }
                spvsiteList = spvsiteList.TrimEnd(',');
                //spvsiteList = spvsiteList.Trim('"');
            }

            bool GetFrom15Min = false;
            bool CombineReport = false;
            string todate1 = "";
            string fromDate1 = "";
            if (Convert.ToDateTime(Convert.ToDateTime(fromDate).ToString("yyyy-MM-dd")) < Convert.ToDateTime("2023-10-01"))
            {
                if (Convert.ToDateTime(Convert.ToDateTime(fromDate).ToString("yyyy-MM-dd")) < Convert.ToDateTime("2023-10-01") && Convert.ToDateTime(Convert.ToDateTime(todate).ToString("yyyy-MM-dd")) > Convert.ToDateTime("2023-10-01"))
                {
                    todate1 = "2023-09-30";
                    fromDate1 = "2023-10-01";
                    CombineReport = true;
                }


                GetFrom15Min = true;
            }
            string datefilter = " (date >= '" + fromDate + "'  and date<= '" + todate + "') ";
            string datefilterTempCorr = " t1.date >= '" + fromDate + "' AND t1.date<= '" + todate + "' ";
            string datefilter1 = " and (t1.date >= '" + fromDate + "'  and t1.date<= '" + todate + "') ";
            string datefilter2 = "(date(date_time) >= '" + fromDate + "'  and date(date_time) <= '" + todate + "') ";
            string expDailyFilter = $" t1.data_date >='{fromDate}' AND t1.data_date <= '{todate}'";
            string datefilter3 = " BETWEEN '" + fromDate + "'  and '" + todate1 + "' ";
            string datefilter4 = " BETWEEN '" + fromDate1 + "'  and '" + todate + "' ";

            string filter = "";
            string functionName = "GetSolarPerformanceReport";
            if (!string.IsNullOrEmpty(site))
            {
                filter += " and t1.site_id IN(" + site + ") ";
                expDailyFilter += $" AND t1.site_id IN({site})";
            }
            if (!string.IsNullOrEmpty(spv) && string.IsNullOrEmpty(site))
            {
                filter += " and t1.site_id IN(" + spvsiteList + ") ";
                expDailyFilter += $" AND t1.site_id IN({spvsiteList})";
                //tmlFilter += " t1.site_id IN(" + site + ")";

            }
            string qry1 = "create or replace view temp_view as select t1.date, t1.site_id, t2.site, t1.gen_nos, t1.ghi, t1.poa, t1.plf,t1.pr, t1.ma, " +
                "t1.iga, t1.ega from daily_target_kpi_solar t1, daily_gen_summary_solar t2 where t1.date = t2.date and t1.site_id = t2.site_id " +
               datefilter1 + " group by t1.date, t1.site_id;";
            try
            {
                await Context.ExecuteNonQry<int>(qry1).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                string msg = e.ToString();
                //API_ErrorLog("" + msg);
                LogError(0, 1, 5, functionName, msg, backend);
            }
            string qry2 = " select site, site_id, sum(gen_nos) as tar_kwh," +
                " sum(ghi)/count(ghi) as tar_ghi, sum(poa)/count(poa) as tar_poa, sum(plf)/count(plf) as tar_plf," +
                " sum(pr)/count(pr) as tar_pr, sum(ma)/count(ma) as tar_ma, sum(iga)/count(iga) as tar_iga, sum(ega)/count(ega) as tar_ega " +
                "from temp_view group by site ";
            List<SolarPerformanceReports1> tempdata = new List<SolarPerformanceReports1>();
            tempdata = await Context.GetData<SolarPerformanceReports1>(qry2).ConfigureAwait(false);

            string qry5 = "create or replace view temp_view2 as SELECT t1.date,t3.site,t3.spv,(t3.ac_capacity*1000) as capacity,SUM(t1.inv_kwh) as kwh,t2.LineLoss,SUM(t1.inv_kwh)-SUM(t1.inv_kwh)*(t2.LineLoss/100) as kwh_afterloss,((SUM(t1.inv_kwh)-SUM(t1.inv_kwh)*(t2.LineLoss/100))/((t3.ac_capacity*1000)*24))*100 as plf_afterloss FROM `daily_gen_summary_solar` as t1 left join monthly_line_loss_solar as t2 on t2.site_id= t1.site_id and month_no=MONTH(t1.date) and year = year(t1.date) left join site_master_solar as t3 on t3.site_master_solar_id = t1.site_id group by t1.date ,t1.site";
            try
            {
                await Context.ExecuteNonQry<int>(qry5).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                string msg = e.ToString();
                LogError(0, 1, 5, functionName, msg, backend);
            }

            string qry6 = "SELECT site, sum(kwh_afterloss)/ 1000000 as act_kwh, avg(plf_afterloss) as act_plf FROM `temp_view2` where date between '" + fromDate + "' and '" + todate + "' group by site";
            List<SolarPerformanceReports1> newdata = new List<SolarPerformanceReports1>();
            newdata = await Context.GetData<SolarPerformanceReports1>(qry6).ConfigureAwait(false);

            string qry = @"SELECT site,  
(SELECT ac_capacity FROM site_master_solar where site=t1.site and state=t1.state)as capacity,
(SELECT dc_capacity FROM site_master_solar where site=t1.site and state=t1.state)as dc_capacity,
(SELECT total_tarrif FROM site_master_solar where site=t1.site and state=t1.state)as total_tarrif,
(SELECT  sum(gen_nos) FROM daily_target_kpi_solar where sites=t1.site and " + datefilter + " and fy='" + fy + "') as tar_kwh,(sum(expected_kwh) / 1000000) as pr_expected_kwh, " +
"(sum(inv_kwh_afterloss)/1000000)as act_kwh,(SELECT lineloss FROM monthly_line_loss_solar where site=t1.site and fy='" + fy + "' and month_no=month(t1.date)  order by monthly_line_loss_solar_id desc limit 1)as lineloss,(SELECT  sum(ghi)/count(*) FROM daily_target_kpi_solar where sites=t1.site and " + datefilter + " and fy= '" + fy + "') as tar_ghi,sum(ghi)/count(*) as act_ghi,(SELECT  sum(poa)/count(*) FROM daily_target_kpi_solar where sites=t1.site and " + datefilter + " and fy= '" + fy + "') as tar_poa,sum(poa)/count(*) as act_poa,(SELECT  sum(plf)/count(*) FROM daily_target_kpi_solar where sites=t1.site and " + datefilter + " and fy= '" + fy + "') as tar_plf,sum(inv_plf_afterloss)/count(*) as act_plf,(SELECT  sum(pr)/count(*) FROM daily_target_kpi_solar where sites=t1.site and " + datefilter + " and fy= '" + fy + "') as tar_pr,sum(plant_pr)/count(*) as act_pr,(SELECT  sum(ma)/count(*) FROM daily_target_kpi_solar where sites=t1.site and " + datefilter + " and fy= '" + fy + "') as tar_ma,sum(ma)/count(*) as act_ma,(SELECT  sum(iga)/count(*) FROM daily_target_kpi_solar where sites=t1.site and " + datefilter + " and fy= '" + fy + "') as tar_iga,sum(iga)/count(*) as act_iga,(SELECT  sum(ega)/count(*) FROM daily_target_kpi_solar where sites=t1.site and " + datefilter + "  and fy= '" + fy + "') as tar_ega,sum(ega)/count(*) as act_ega FROM daily_gen_summary_solar t1 where  " + datefilter + " " + filter + " group by site order by site";

            //and fy= '" + fy + "') as tar_ega,sum(ega)/count(*) as act_ega FROM daily_gen_summary_solar t1 where t1.approve_status=" + approve_status + " and " + datefilter + " group by site";
            List<SolarPerformanceReports1> data = new List<SolarPerformanceReports1>();
            data = await Context.GetData<SolarPerformanceReports1>(qry).ConfigureAwait(false);

            //sum(t1.plant_act)+sum(t1.total_losses) as plant_kwh,(t3.dc_capacity*1000) as dc_capacity, SUM(t1.inv_act) as act_kwh,t2.LineLoss as lineloss,
            //string act_kwhForTempQry = "SELECT t1.date,t3.site,(SUM(t1.inv_act)-SUM(t1.inv_act)*(t2.LineLoss/100))+sum(t1.total_losses) as act_kwh_afterloss FROM `uploading_file_generation_solar` as t1 left join monthly_line_loss_solar as t2 on t2.site_id= t1.site_id and month_no=MONTH(t1.date) and year=(t1.date)  left join site_master_solar as t3 on t3.site_master_solar_id = t1.site_id where t1.date >= '" + fromDate + "' AND t1.date <= '" + todate + "' group by t1.date ,t1.site;";

            //string act_kwhForTempQry = "SELECT t1.site,SUM((t1.inv_act - t1.inv_act * (t2.LineLoss / 100)) + t1.total_losses) as act_kwh_afterloss FROM `uploading_file_generation_solar` as t1 left join monthly_line_loss_solar as t2 on t2.site_id= t1.site_id and t2.month_no=MONTH(t1.date) left join site_master_solar as t3 on t3.site_master_solar_id = t1.site_id where t1.date >= '" + fromDate + "' AND t1.date <= '" + todate + "' group by t1.date ,t1.site;";

            //string act_kwhForTempQry = "SELECT t1.site, SUM((t1.inv_act - t1.inv_act * (t2.LineLoss / 100)) + t1.total_losses) as act_kwh_afterloss FROM `uploading_file_generation_solar` as t1 LEFT JOIN monthly_line_loss_solar as t2 on t2.site_id = t1.site_id and t2.month_no = MONTH(t1.date) where t1.date >= '" + fromDate + "' AND t1.date <= '" + todate + "' ;";

            //List<SolarPerformanceReports1> siteData = new List<SolarPerformanceReports1>();
            //try
            //{
            //    siteData = await Context.GetData<SolarPerformanceReports1>(act_kwhForTempQry).ConfigureAwait(false);
            //}
            //catch(Exception e)
            //{
            //    string msg = "Exception while getting act_kwh for temp corrected pr fetch query, due to : " + e.ToString();
            //    LogError(0, 1, 5, functionName, msg, backend);
            //}
            string getPower = "";
            /*
            if (GetFrom15Min)
            {
                if (CombineReport)
                {
                    getPower = " SELECT t2.site,SUM(CASE WHEN date(t1.date_time) " + datefilter3 + " THEN t1.P_exp_degraded / 4  WHEN date(t1.date_time)" + datefilter4 + " THEN t1.P_exp_degraded / 60 ELSE 0 END) AS expected_kwh FROM(SELECT site_id, P_exp_degraded, date_time FROM `uploading_pyranometer_15_min_solar` WHERE date(date_time) " + datefilter3 + " UNION ALL SELECT site_id, P_exp_degraded, date_time FROM `uploading_pyranometer_1_min_solar` WHERE date(date_time) " + datefilter4 + ") AS t1 LEFT JOIN site_master_solar AS t2 ON t1.site_id = t2.site_master_solar_id GROUP BY t1.site_id, t2.site";

                    // getPower = " SELECT  t2.site,SUM( CASE WHEN date(t1.date_time) BETWEEN "+ datefilter3 + " THEN t1.P_exp_degraded / 4 WHEN date(t1.date_time) BETWEEN "+ datefilter4 + " THEN t1.P_exp_degraded / 60 ELSE 0 END ) AS expected_kwh FROM (SELECT site_id, P_exp_degraded, date_time FROM `uploading_pyranometer_15_min_solar` WHERE date(date_time) BETWEEN " + datefilter3 + "  UNION ALL SELECT site_id, P_exp_degraded, date_time FROM `uploading_pyranometer_1_min_solar` WHERE date(date_time) BETWEEN " + datefilter4 + " AS t1 LEFT JOIN site_master_solar AS t2 ON t1.site_id = t2.site_master_solar_id GROUP BY t1.site_id, t2.site";


                    // getPower = "  select t2.site, SUM(t1.P_exp_degraded)/60 as expected_kwh from `uploading_pyranometer_1_min_solar` as t1 left join site_master_solar as t2 on t1.site_id=t2.site_master_solar_id where " + datefilter4 + " group by site_id";
                }
                else
                {
                    getPower = "  select t2.site, SUM(t1.P_exp_degraded)/4 as expected_kwh from `uploading_pyranometer_15_min_solar` as t1 left join site_master_solar as t2 on t1.site_id=t2.site_master_solar_id where " + datefilter2 + " group by site_id";
                }
                //For getting Expectd power form 15 minute data. Here divide by 4 

            }
            else
            {
                //For getting Expectd power form 1 minute data. Here divide by 60
                getPower = "  select t2.site, SUM(t1.P_exp_degraded)/60 as expected_kwh from `uploading_pyranometer_1_min_solar` as t1 left join site_master_solar as t2 on t1.site_id=t2.site_master_solar_id where " + datefilter2 + " group by site_id";
            }*/
            //DGR_v3 new table 
            getPower = $"SELECT t2.site, SUM(t1.expected_power) AS expected_kwh FROM daily_expected_vs_actual_solar t1 LEFT JOIN site_master_solar t2 ON t1.site_id = t2.site_master_solar_id WHERE {expDailyFilter} AND t1.aop_top = 1 GROUP BY t1.site_id";


            string getTempCorrPr = "SELECT t2.site, t1.site_id, SUM(t1.jmrTempPR) AS temp_corrected_pr FROM temperature_corrected_pr t1 LEFT JOIN site_master_solar t2 ON t1.site_id = t2.site_master_solar_id WHERE " + datefilterTempCorr + " GROUP BY t1.site_id;";
            List<SolarPerformanceReports1> data1min = new List<SolarPerformanceReports1>();
            try
            {
                data1min = await Context.GetData<SolarPerformanceReports1>(getPower).ConfigureAwait(false);
                //_dataElement.Pexpected = (data1min[0].P_exp / 4);

            }
            catch (Exception e)
            {
                string msg = "Exception while getting expected power from uploading_pyranometer_1_min_solar table." + e.ToString();
                //API_ErrorLog(msg);
                LogError(0, 1, 5, functionName, msg, backend);
            }
            List<SolarPerformanceReports1> dataTempCorrPr = new List<SolarPerformanceReports1>();
            try
            {
                dataTempCorrPr = await Context.GetData<SolarPerformanceReports1>(getTempCorrPr).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                string msg = "Exception while fetching data from temperatur_corrected_pr table, due to : " + e.ToString();
                //API_ErrorLog(msg);
                LogError(0, 1, 5, functionName, msg, backend);
            }


            foreach (SolarPerformanceReports1 _dataelement in data)
            {
                foreach (SolarPerformanceReports1 _tempdataelement in tempdata)
                {
                    if (_dataelement.site == _tempdataelement.site)
                    {
                        _dataelement.tar_kwh = _tempdataelement.tar_kwh;
                        _dataelement.tar_ega = _tempdataelement.tar_ega;
                        _dataelement.tar_ghi = _tempdataelement.tar_ghi;
                        _dataelement.tar_iga = _tempdataelement.tar_iga;
                        _dataelement.tar_ma = _tempdataelement.tar_ma;
                        _dataelement.tar_plf = _tempdataelement.tar_plf;
                        _dataelement.tar_poa = _tempdataelement.tar_poa;
                        _dataelement.tar_pr = _tempdataelement.tar_pr;
                    }

                }
                foreach (SolarPerformanceReports1 _tempdataelement in newdata)
                {
                    if (_dataelement.site == _tempdataelement.site)
                    {
                        _dataelement.act_kwh = _tempdataelement.act_kwh;
                        _dataelement.act_plf = _tempdataelement.act_plf;

                    }
                }

                foreach (SolarPerformanceReports1 _tempdataelement in data1min)
                {
                    if (_dataelement.site == _tempdataelement.site)
                    {
                        _dataelement.expected_kwh = _tempdataelement.expected_kwh;
                    }
                }
                foreach (SolarPerformanceReports1 _tempdataelement in dataTempCorrPr)
                {
                    if (_dataelement.site == _tempdataelement.site)
                    {
                        _dataelement.temp_corrected_pr = ((_dataelement.act_kwh * 1000000) / _tempdataelement.temp_corrected_pr) * 100;
                    }
                }
                //foreach (SolarPerformanceReports1 _tempdataelement in siteData)
                //{
                //    if (_dataelement.site == _tempdataelement.site)
                //    {
                //        _dataelement.act_kwh_for_temp_corr = _tempdataelement.act_kwh_afterloss;
                //    }
                //}


            }

            return data;

        }
        internal async Task<List<SolarPerformanceReports1>> GetSolarPerformanceReportBySPVWise(string fy, string fromDate, string todate,string site,string spv)
        {
            string filtersite = "";
            string spvsiteList = "";
            if (!string.IsNullOrEmpty(spv) && spv != "All" && string.IsNullOrEmpty(site))
            {
                string[] spspv = spv.Split(",");
                filtersite += "  spv in (";
                string spvs = "";
                for(int i = 0; i < spspv.Length; i++)
                {
                    if(!string.IsNullOrEmpty(spspv[i].ToString()))
                    {
                        spvs += "'" + spspv[i].ToString() + "',";
                    }
                }
                filtersite += spvs.TrimEnd(',') + ")";

                string masterquery = "SELECT site_master_solar_id FROM `site_master_solar` where " + filtersite;
                List<SolarSiteMaster> sitelist = new List<SolarSiteMaster>();
                sitelist = await Context.GetData<SolarSiteMaster>(masterquery).ConfigureAwait(false);
                for (var i = 0; i < sitelist.Count; i++)
                {
                    spvsiteList += "'" + sitelist[i].site_master_solar_id + "',";
                }
                spvsiteList = spvsiteList.TrimEnd(',');
                //spvsiteList = spvsiteList.Trim('"');
            }

            bool GetFrom15Min = false;
            bool CombineReport = false;
            string todate1 = "";
            string fromDate1 = "";
            if (Convert.ToDateTime(Convert.ToDateTime(fromDate).ToString("yyyy-MM-dd")) < Convert.ToDateTime("2023-10-01"))
            {
                if (Convert.ToDateTime(Convert.ToDateTime(fromDate).ToString("yyyy-MM-dd")) < Convert.ToDateTime("2023-10-01") && Convert.ToDateTime(Convert.ToDateTime(todate).ToString("yyyy-MM-dd")) > Convert.ToDateTime("2023-10-01"))
                {
                    todate1 = "2023-09-30";
                    fromDate1 = "2023-10-01";
                    CombineReport = true;
                }
                GetFrom15Min = true;
            }

            /* string datefilter = " (date >= '" + fromDate + "'  and date<= '" + todate + "') ";

             string qry = @"SELECT t1.site,spv,
 (SELECT ac_capacity FROM site_master_solar where site=t1.site and state=t1.state)as capacity,
 (SELECT dc_capacity FROM site_master_solar where site=t1.site and state=t1.state)as dc_capacity,(SELECT total_tarrif FROM site_master_solar where site=t1.site and state=t1.state)as total_tarrif,
 (SELECT  sum(gen_nos) FROM daily_target_kpi_solar where sites=t1.site and " + datefilter + " and fy='" + fy + "') as tar_kwh,(sum(inv_kwh)/1000000)as act_kwh,(SELECT lineloss FROM monthly_line_loss_solar where site=t1.site and fy='" + fy + "' and month=DATE_FORMAT(t1.date, '%b') order by monthly_line_loss_solar_id desc limit 1)as lineloss,(SELECT  sum(ghi)/count(*) FROM daily_target_kpi_solar where sites=t1.site and " + datefilter + " and fy= '" + fy + "') as tar_ghi,sum(ghi)/count(*) as act_ghi,(SELECT  sum(poa)/count(*) FROM daily_target_kpi_solar where sites=t1.site and " + datefilter + " and fy= '" + fy + "') as tar_poa,sum(poa)/count(*) as act_poa,(SELECT  sum(plf)/count(*) FROM daily_target_kpi_solar where sites=t1.site and " + datefilter + " and fy= '" + fy + "') as tar_plf,sum(plant_plf_ac)/count(*) as act_plf,(SELECT  sum(pr)/count(*) FROM daily_target_kpi_solar where sites=t1.site and " + datefilter + " and fy= '" + fy + "') as tar_pr,sum(plant_pr)/count(*) as act_pr,(SELECT  sum(ma)/count(*) FROM daily_target_kpi_solar where sites=t1.site and " + datefilter + " and fy= '" + fy + "') as tar_ma,sum(ma)/count(*) as act_ma,(SELECT  sum(iga)/count(*) FROM daily_target_kpi_solar where sites=t1.site and " + datefilter + " and fy= '" + fy + "') as tar_iga,sum(iga)/count(*) as act_iga,(SELECT  sum(ega)/count(*) FROM daily_target_kpi_solar where sites=t1.site and " + datefilter + "  and fy= '" + fy + "') as tar_ega,sum(ega)/count(*) as act_ega FROM daily_gen_summary_solar t1 left join site_master_solar t2 on t1.site =t2.site  where   " + datefilter + " group by spv";

             //count(*) as act_ega FROM daily_gen_summary_solar t1 left join site_master_solar t2 on t1.site =t2.site  where t1.approve_status=" + approve_status + " and " + datefilter + " group by spv";

             return await Context.GetData<SolarPerformanceReports1>(qry).ConfigureAwait(false);*/
            string datefilter = " (date >= '" + fromDate + "'  and date<= '" + todate + "') ";
            string datefilterTempCorr = " t1.date >= '" + fromDate + "' AND t1.date<= '" + todate + "' ";
            string datefilter1 = " and (t1.date >= '" + fromDate + "'  and t1.date<= '" + todate + "') ";
            string datefilter2 = "(date(date_time) >= '" + fromDate + "'  and date(date_time) <= '" + todate + "') ";
            string expDailyFilter = $" t1.data_date >='{fromDate}' AND t1.data_date <= '{todate}'";
            string datefilter3 = " BETWEEN '" + fromDate + "'  and '" + todate1 + "' ";
            string datefilter4 = " BETWEEN '" + fromDate1 + "'  and '" + todate + "' ";
            string filter = "";
            string filter2 = "";
            if (!string.IsNullOrEmpty(site))
            {
                filter += " and t1.site_id IN(" + site + ") ";
                filter2 += " where site_master_solar_id	 IN(" + site + ") ";
                expDailyFilter += $" AND t1.site_id IN({site})";
            }
            if (!string.IsNullOrEmpty(spv) && string.IsNullOrEmpty(site))
            {
                filter += " and t1.site_id IN(" + spvsiteList + ") ";
                filter2 += " where site_master_solar_id	 IN(" + spvsiteList + ") ";
                expDailyFilter += $" AND t1.site_id IN({spvsiteList})";

            }
            string qry1 = "create or replace view temp_viewSPV as select t1.date, t1.site_id, t2.site, t3.spv,t1.gen_nos, t1.ghi, t1.poa, t1.plf,t1.pr, t1.ma, t1.iga, t1.ega" +
                " from daily_target_kpi_solar t1, daily_gen_summary_solar t2, site_master_solar t3" +
                " where t1.site_id = t2.site_id and t1.date = t2.date and t1.site_id = t3.site_master_solar_id" +
                datefilter1 +
                " group by t1.date, t3.spv, t2.site_id order by site_id;";
            try
            {
                await Context.ExecuteNonQry<int>(qry1).ConfigureAwait(false);
            }
            catch (Exception)
            {
                string st = "temp";
            }
            string qry5 = "create or replace view temp_viewSPV2 as SELECT t1.date,t3.site,t3.spv,(t3.ac_capacity*1000) as capacity,SUM(t1.inv_kwh) as kwh,t2.LineLoss,SUM(t1.inv_kwh)-SUM(t1.inv_kwh)*(t2.LineLoss/100) as kwh_afterloss,((SUM(t1.inv_kwh)-SUM(t1.inv_kwh)*(t2.LineLoss/100))/((t3.ac_capacity*1000)*24))*100 as plf_afterloss FROM `daily_gen_summary_solar` as t1 left join monthly_line_loss_solar as t2 on t2.site_id= t1.site_id and month_no=MONTH(t1.date) and year = year(t1.date)  left join site_master_solar as t3 on t3.site_master_solar_id = t1.site_id group by t1.date ,t1.site";
            try
            {
                await Context.ExecuteNonQry<int>(qry5).ConfigureAwait(false);
            }
            catch (Exception)
            {
                string st = "temp";
            }

            string qry6 = "SELECT spv, sum(kwh_afterloss)/ 1000000 as act_kwh, avg(plf_afterloss) as act_plf FROM `temp_viewSPV2` where date between '" + fromDate + "' and '" + todate + "' group by spv";
            List<SolarPerformanceReports1> newdata = new List<SolarPerformanceReports1>();
            newdata = await Context.GetData<SolarPerformanceReports1>(qry6).ConfigureAwait(false);



            string qry2 = " select spv, sum(gen_nos) as tar_kwh," +
                " sum(ghi) as tar_ghi, sum(poa) as tar_poa, sum(plf)/count(plf) as tar_plf," +
                " sum(pr)/count(pr) as tar_pr, sum(ma)/count(ma) as tar_ma, sum(iga)/count(iga) as tar_iga, sum(ega)/count(ega) as tar_ega " +
                "from temp_viewSPV group by spv ";
            string newQuery2 = $@"SELECT spv, tar_kwh, tar_ghi/site_count AS tar_ghi, tar_poa/site_count AS tar_poa, tar_plf, tar_pr, tar_ma, tar_iga, tar_ega, site_count FROM (SELECT spv, sum(gen_nos) as tar_kwh, sum(ghi) as tar_ghi, sum(poa) as tar_poa, sum(plf)/count(plf) as tar_plf, sum(pr)/count(pr) as tar_pr, sum(ma)/count(ma) as tar_ma, sum(iga)/count(iga) as tar_iga, sum(ega)/count(ega) as tar_ega, t5.site_count FROM temp_viewSPV LEFT JOIN (SELECT COUNT(site) AS site_count, spv AS count_spv FROM `site_master_solar` GROUP BY spv ORDER BY spv) t5 ON spv = t5.count_spv GROUP BY spv) AS subquery;";
            List<SolarPerformanceReports1> tempdata = new List<SolarPerformanceReports1>();
            tempdata = await Context.GetData<SolarPerformanceReports1>(newQuery2).ConfigureAwait(false);

            string qry7 = "select spv,SUM(ac_capacity)  as capacity from site_master_solar " + filter2+" group by spv ";
                
            List<SolarPerformanceReports1> tempdata2 = new List<SolarPerformanceReports1>();
            tempdata2 = await Context.GetData<SolarPerformanceReports1>(qry7).ConfigureAwait(false);

         
//            string qry = @"SELECT t1.site,spv,
//(SELECT ac_capacity FROM site_master_solar where site=t1.site and state=t1.state)as capacity,
//(SELECT dc_capacity FROM site_master_solar where site=t1.site and state=t1.state)as dc_capacity,
//(SELECT total_tarrif FROM site_master_solar where site=t1.site and state=t1.state)as total_tarrif,
//(SELECT  sum(gen_nos) FROM daily_target_kpi_solar where sites=t1.site
//and " + datefilter + " and fy='" + fy + "') as tar_kwh,(sum(inv_kwh_afterloss)/1000000)as act_kwh,(sum(expected_kwh)/1000000)as pr_expected_kwh, " +
//"(SELECT lineloss FROM monthly_line_loss_solar where site=t1.site and fy='" + fy + "' " +
//"and month_no=month(t1.date) order by monthly_line_loss_solar_id desc limit 1)as lineloss," +
//"(SELECT  sum(ghi)/count(*) FROM daily_target_kpi_solar where sites=t1.site and " + datefilter + " and fy= '" + fy + "') as tar_ghi," +
//"sum(ghi)/count(*) as act_ghi,(SELECT  sum(poa)/count(*) FROM daily_target_kpi_solar where sites=t1.site and " + datefilter + " and fy= '" + fy + "') as tar_poa," +
//"sum(poa)/count(*) as act_poa," +
//"(SELECT  sum(plf)/count(*) FROM daily_target_kpi_solar where sites=t1.site and " + datefilter + " and fy= '" + fy + "') as tar_plf," +
//"sum(inv_plf_afterloss)/count(*) as act_plf,(SELECT  sum(pr)/count(*) FROM daily_target_kpi_solar where sites=t1.site and " + datefilter + " and fy= '" + fy + "') as tar_pr," +
//"sum(plant_pr)/count(*) as act_pr,(SELECT  sum(ma)/count(*) FROM daily_target_kpi_solar where sites=t1.site and " + datefilter + " and fy= '" + fy + "') as tar_ma," +
//"sum(ma)/count(*) as act_ma,(SELECT  sum(iga)/count(*) FROM daily_target_kpi_solar where sites=t1.site and " + datefilter + " and fy= '" + fy + "') as tar_iga," +
//"sum(iga)/count(*) as act_iga,(SELECT  sum(ega)/count(*) FROM daily_target_kpi_solar where sites=t1.site and " + datefilter + "  and fy= '" + fy + "') as tar_ega," +
//"sum(ega)/count(*) as act_ega FROM daily_gen_summary_solar t1 left join site_master_solar t2 on t1.site =t2.site  where   " + datefilter + " "+ filter + " group by spv";

            string newQery = $@"SELECT
    site,
spv,
site_count,
inv_count,
capacity,
total_tarrif,
tar_kwh,
act_kwh,
pr_expected_kwh,
lineloss,
tar_ghi / site_count AS tar_ghi,
act_ghi / inv_count AS act_ghi,
tar_poa / site_count AS tar_poa,
act_poa / inv_count AS act_poa,
tar_plf,
act_plf,
tar_pr,
act_pr,
tar_ma,
act_ma,
tar_iga,
act_iga,
tar_ega,
act_ega
FROM
    (SELECT 
        t1.site AS site,
        spv, t5.site_count AS site_count, t6.inv_count AS inv_count,
        (SELECT ac_capacity FROM site_master_solar where site=t1.site and state=t1.state)as capacity,
        (SELECT dc_capacity FROM site_master_solar where site=t1.site and state=t1.state)as dc_capacity,
        (SELECT total_tarrif FROM site_master_solar where site=t1.site and state=t1.state)as total_tarrif,
        (SELECT  sum(gen_nos) FROM daily_target_kpi_solar where sites=t1.site AND {datefilter} and fy='{fy}') AS tar_kwh,
        (sum(inv_kwh_afterloss)/1000000) AS act_kwh,
        (sum(expected_kwh)/1000000) AS pr_expected_kwh,
        (SELECT lineloss FROM monthly_line_loss_solar WHERE site=t1.site and fy='{fy}' AND month_no=month(t1.date) ORDER BY monthly_line_loss_solar_id desc limit 1) AS lineloss,
        (SELECT  sum(ghi) FROM daily_target_kpi_solar WHERE sites=t1.site AND {datefilter} AND fy ='{fy}') AS tar_ghi,
        sum(ghi) AS act_ghi,
        (SELECT  sum(poa) FROM daily_target_kpi_solar WHERE sites=t1.site AND {datefilter} and fy = '{fy}') AS tar_poa,
        sum(poa) AS act_poa,
        (SELECT  sum(plf)/count(*) FROM daily_target_kpi_solar WHERE sites=t1.site AND {datefilter} AND fy= '{fy}') AS tar_plf,
        sum(inv_plf_afterloss)/count(*) AS act_plf,
        (SELECT  sum(pr)/count(*) FROM daily_target_kpi_solar WHERE sites=t1.site AND {datefilter} AND fy = '{fy}') AS tar_pr,
        sum(plant_pr)/count(*) AS act_pr,
        (SELECT  sum(ma)/count(*) FROM daily_target_kpi_solar WHERE sites=t1.site AND {datefilter} AND fy= '{fy}') AS tar_ma,
        sum(ma)/count(*) AS act_ma,
        (SELECT  sum(iga)/count(*) FROM daily_target_kpi_solar WHERE sites=t1.site AND {datefilter} AND fy= '{fy}') AS tar_iga,
        sum(iga)/count(*) AS act_iga,
        (SELECT  sum(ega)/count(*) FROM daily_target_kpi_solar WHERE sites=t1.site AND {datefilter} AND fy= '{fy}') AS tar_ega,
        sum(ega)/count(*) AS act_ega FROM daily_gen_summary_solar t1 LEFT JOIN site_master_solar t2 ON t1.site = t2.site LEFT JOIN (SELECT COUNT(site) AS site_count, spv AS count_spv FROM `site_master_solar` GROUP BY spv ORDER BY spv) t5 ON spv = t5.count_spv LEFT JOIN (SELECT COUNT(inverter) AS inv_count, tb2.spv AS inv_spv FROM solar_ac_dc_capacity tb1 LEFT JOIN site_master_solar tb2 ON tb1.site_id = tb2.site_master_solar_id GROUP BY tb2.spv) t6 ON spv = t6.inv_spv WHERE {datefilter} {filter} 
    GROUP BY spv) 
AS subquery;";

            //count(*) as act_ega FROM daily_gen_summary_solar t1 left join site_master_solar t2 on t1.site =t2.site  where t1.approve_status=" + approve_status + " and " + datefilter + " group by spv";
            List<SolarPerformanceReports1> data = new List<SolarPerformanceReports1>();
            data = await Context.GetData<SolarPerformanceReports1>(newQery).ConfigureAwait(false);

            string getPower = "";
            /*
            if (GetFrom15Min)
            {
                //For 15 min data calculation.
                if (CombineReport)
                {
                    getPower = " SELECT t2.site,t2.spv,SUM(CASE WHEN date(t1.date_time) " + datefilter3 + " THEN t1.P_exp_degraded / 4  WHEN date(t1.date_time)" + datefilter4 + " THEN t1.P_exp_degraded / 60 ELSE 0 END) AS expected_kwh FROM(SELECT site_id, P_exp_degraded, date_time FROM `uploading_pyranometer_15_min_solar` WHERE date(date_time) " + datefilter3 + " UNION ALL SELECT site_id, P_exp_degraded, date_time FROM `uploading_pyranometer_1_min_solar` WHERE date(date_time) " + datefilter4 + ") AS t1 LEFT JOIN site_master_solar AS t2 ON t1.site_id = t2.site_master_solar_id GROUP BY t2.spv";

                    //getPower = " SELECT  t2.site,SUM( CASE WHEN date(t1.date_time) BETWEEN " + datefilter3 + " THEN t1.P_exp_degraded / 4 WHEN date(t1.date_time) BETWEEN " + datefilter4 + " THEN t1.P_exp_degraded / 60 ELSE 0 END ) AS expected_kwh FROM (SELECT site_id, P_exp_degraded, date_time FROM `uploading_pyranometer_15_min_solar` WHERE date(date_time) BETWEEN " + datefilter3 + "  UNION ALL SELECT site_id, P_exp_degraded, date_time FROM `uploading_pyranometer_1_min_solar` WHERE date(date_time) BETWEEN " + datefilter4 + " AS t1 LEFT JOIN site_master_solar AS t2 ON t1.site_id = t2.site_master_solar_id GROUP BY t1.spv, t2.spv";


                    // getPower = "  select t2.site, SUM(t1.P_exp_degraded)/60 as expected_kwh from `uploading_pyranometer_1_min_solar` as t1 left join site_master_solar as t2 on t1.site_id=t2.site_master_solar_id where " + datefilter4 + " group by site_id";
                }
                else
                {
                    getPower = "  select t2.site, t2.spv, sum(t1.P_exp_degraded)/4 as expected_kwh from `uploading_pyranometer_15_min_solar` as t1 left join site_master_solar as t2 on t1.site_id=t2.site_master_solar_id where " + datefilter2 + " group by t2.spv";
                }
              
               
            }
            else
            {
                //For 1 min data calculation.
                getPower = "  select t2.site, t2.spv, sum(t1.P_exp_degraded)/60 as expected_kwh from `uploading_pyranometer_1_min_solar` as t1 left join site_master_solar as t2 on t1.site_id=t2.site_master_solar_id where " + datefilter2 + " group by t2.spv";
            } */
            //DGR_v3 dailybasis changes.
            getPower = $"SELECT t2.site, t2.spv, SUM(t1.expected_power) AS expected_kwh FROM daily_expected_vs_actual_solar t1 LEFT JOIN site_master_solar t2 ON t1.site_id = t2.site_master_solar_id WHERE {expDailyFilter} AND t1.aop_top = 1 GROUP BY t2.spv";

            List<SolarPerformanceReports1> data1min = new List<SolarPerformanceReports1>();
            string functionName = "GetSolarPerformanceReportBySPVWise";
            try
            {
                data1min = await Context.GetData<SolarPerformanceReports1>(getPower).ConfigureAwait(false);
                //_dataElement.Pexpected = (data1min[0].P_exp / 4);

            }
            catch (Exception e)
            {
                string msg = "Exception while getting expected power from uploading_pyranometer_15_min_solar table." + e.ToString();
                //API_ErrorLog(msg);
                LogError(0, 1, 5, functionName, msg, backend);
            }

           // string getTempCorrPr = "SELECT t2.site, t2.spv, t1.site_id, (SUM(t1.jmrTempPR) * 100) AS temp_corrected_pr FROM temperature_corrected_pr t1 LEFT JOIN site_master_solar t2 ON t1.site_id = t2.site_master_solar_id WHERE " + datefilterTempCorr + " GROUP BY t2.spv;"
            string getTempCorrPr = "SELECT t2.site, t2.spv, t1.site_id, (SUM(t1.jmrTempPR)) AS temp_corrected_pr FROM temperature_corrected_pr t1 LEFT JOIN site_master_solar t2 ON t1.site_id = t2.site_master_solar_id WHERE " + datefilterTempCorr + " GROUP BY t2.spv;";

            List<SolarPerformanceReports1> dataTempCorrPr = new List<SolarPerformanceReports1>();
            try
            {
                dataTempCorrPr = await Context.GetData<SolarPerformanceReports1>(getTempCorrPr).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                string msg = "Exception while fetching data from temperatur_corrected_pr table, due to : " + e.ToString();
                //API_ErrorLog(msg);
                LogError(0, 1, 5, functionName, msg, backend);
            }

            foreach (SolarPerformanceReports1 _dataelement in data)
            {
                foreach (SolarPerformanceReports1 _tempdataelement in tempdata)
                {
                    if (_dataelement.spv == _tempdataelement.spv)
                    {
                        _dataelement.tar_kwh = _tempdataelement.tar_kwh;
                        _dataelement.tar_ega = _tempdataelement.tar_ega;
                        _dataelement.tar_ghi = _tempdataelement.tar_ghi;
                        _dataelement.tar_iga = _tempdataelement.tar_iga;
                        _dataelement.tar_ma = _tempdataelement.tar_ma;
                        _dataelement.tar_plf = _tempdataelement.tar_plf;
                        _dataelement.tar_poa = _tempdataelement.tar_poa;
                        _dataelement.tar_pr = _tempdataelement.tar_pr;
                    }
                }
                foreach (SolarPerformanceReports1 _tempdataelement in newdata)
                {
                    if (_dataelement.spv == _tempdataelement.spv) 
                    {
                        _dataelement.act_kwh = _tempdataelement.act_kwh;
                        _dataelement.act_plf = _tempdataelement.act_plf;
                    }
                }
                foreach (SolarPerformanceReports1 _tempdataelement in tempdata2)
                {
                    if (_dataelement.spv == _tempdataelement.spv)
                    {
                        _dataelement.capacity = _tempdataelement.capacity;
                    }
                }

                foreach (SolarPerformanceReports1 _tempdataelement in data1min)
                {
                    if (_dataelement.spv == _tempdataelement.spv)
                    {
                        _dataelement.expected_kwh = _tempdataelement.expected_kwh;
                    }
                }

                foreach (SolarPerformanceReports1 _tempdataelement in dataTempCorrPr)
                {
                    if (_dataelement.spv == _tempdataelement.spv)
                    {
                        //_dataelement.temp_corrected_pr = _tempdataelement.temp_corrected_pr;
                        _dataelement.temp_corrected_pr = ((_dataelement.act_kwh * 1000000) / _tempdataelement.temp_corrected_pr)*100;
                    }
                }
            }
            return data;
        }
        internal async Task<List<SolarDailyBDloss>> GetSolarDailyBDLossData(string fromDate, string todate)
        {

            string datefilter = " (date >= '" + fromDate + "'  and date<= '" + todate + "') ";

            string qry = @"SELECT   date as Date,site as Site,bd_type as BD_Type,
    ext_bd as Ext_BD,igbd as IGBD,icr as ICR,inv as INV,
    smb as SMB,strings as Strings,stop_from as 'From',stop_to as 'To',
    total_stop as Total_Stop,bd_ir as BD_IR_POA,capacity as Capacity_kwp,
    act_plant_pr as Tar_Plant_PR,plant_gen_loss as Plant_Gen_Loss,
    remarks as Remarks,action as Action_Taken 
FROM daily_bd_loss_solar where   " + datefilter;

            //FROM daily_bd_loss_solar where approve_status="+approve_status+" and " + datefilter;


            return await Context.GetData<SolarDailyBDloss>(qry).ConfigureAwait(false);

        }
        ////#region views
        internal async Task<List<DailyGenSummary>> GetWindDailyGenSummary(string site, string fromDate, string ToDate)
        {
            if (String.IsNullOrEmpty(site)) return new List<DailyGenSummary>();
            string filter = " where site_id in (" + site + ") and date >= '" + fromDate + "' and date <= '" + ToDate + "' ";
            //string filter = " where approve_status=" + approve_status + " and date >= '" + fromDate + "' and date <= '" + ToDate + "' ";
            return await Context.GetData<DailyGenSummary>("Select * from daily_gen_summary " + filter).ConfigureAwait(false);
        }
        internal async Task<List<SolarDailyGenSummary>> GetSolarDailyGenSummary1(string site, string fromDate, string ToDate)
        {
            if (String.IsNullOrEmpty(site)) return new List<SolarDailyGenSummary>();
            string filter = " where site_id in (" + site + ") and date >= '" + fromDate + "' and date <= '" + ToDate + "' ";
            //string filter = " where approve_status=" + approve_status + " and date >= '" + fromDate + "' and date <= '" + ToDate + "' ";
            return await Context.GetData<SolarDailyGenSummary>("Select * from daily_gen_summary_solar " + filter).ConfigureAwait(false);
        }
        internal async Task<List<SolarUploadingPyranoMeter1Min_1>> SolarGhi_Poa_1Min(string site, string fromDate, string ToDate)
        {
            if (String.IsNullOrEmpty(site)) return new List<SolarUploadingPyranoMeter1Min_1>();
            string filter = " where t1.site_id in (" + site + ") and DATE(t1.date_time) >= '" + fromDate + "' and DATE(t1.date_time) <= '" + ToDate + "' ";
            //string filter = " where approve_status=" + approve_status + " and date >= '" + fromDate + "' and date <= '" + ToDate + "' ";
            // return await Context.GetData<SolarUploadingPyranoMeter1Min_1>("Select * from uploading_pyranometer_1_min_solar " + filter).ConfigureAwait(false);

            string fetchQry = "Select t1.*,t2.site from uploading_pyranometer_1_min_solar as t1 left join `site_master_solar` as t2 on t2.site_master_solar_id=t1.site_id left join import_batches t3 on t3.import_batch_id = t1.import_batch_id " + filter + " AND t3.is_approved = 1 ORDER BY t1.date_time ASC;";

            return await Context.GetData<SolarUploadingPyranoMeter1Min_1>(fetchQry).ConfigureAwait(false);
        }
        internal async Task<List<SolarUploadingPyranoMeter15Min_1>> SolarGhi_Poa_15Min(string site, string fromDate, string ToDate)
        {
            if (String.IsNullOrEmpty(site)) return new List<SolarUploadingPyranoMeter15Min_1>();
            string filter = " where t1.site_id in (" + site + ") and DATE(t1.date_time) >= '" + fromDate + "' and DATE(t1.date_time) <= '" + ToDate + "' ";
            //string filter = " where approve_status=" + approve_status + " and date >= '" + fromDate + "' and date <= '" + ToDate + "' ";
            // return await Context.GetData<SolarUploadingPyranoMeter15Min_1>("Select * from uploading_pyranometer_15_min_solar " + filter).ConfigureAwait(false);

            //string fetchQry = "SELECT date,t1.wtg,bd_type,stop_from,stop_to,total_stop,error_description,action_taken,t3.country,t3.state,t3.spv, t2.site,t4.bd_type_name FROM uploading_file_breakdown t1 left join location_master t2 on t2.wtg=t1.wtg left join site_master t3 on t3.site_master_id=t2.site_master_id left join bd_type as t4 on 4.bd_type_id=t1.bd_type left join import_batches t5 on t5.import_batch_id = t1.import_batch_id WHERE " + filter + " AND t5.is_approved = 1 ORDER BY t1.date ASC";
            
            string fetchQry = "Select t1.*,t2.site from uploading_pyranometer_15_min_solar  as t1 left join `site_master_solar` as t2 on t2.site_master_solar_id=t1.site_id left join import_batches t3 on t3.import_batch_id = t1.import_batch_id" + filter + " AND t3.is_approved = 1 ORDER BY t1.date_time ASC;";

            return await Context.GetData<SolarUploadingPyranoMeter15Min_1>(fetchQry).ConfigureAwait(false);
        }
        internal async Task<List<SolarDailyGenSummary>> GetSolarDailyGenSummary(string fromDate, string ToDate)
        {

            string filter = " where   date >= '" + fromDate + "' and date <= '" + ToDate + "' ";
            //  string filter = " where approve_status=" + approve_status + " and date >= '" + fromDate + "' and date <= '" + ToDate + "' ";
            return await Context.GetData<SolarDailyGenSummary>("Select * from daily_gen_summary_solar " + filter).ConfigureAwait(false);

        }
        internal async Task<List<WindDailyTargetKPI>> GetWindDailyTargetKPI(string site, string fromDate, string todate)
        {
            if (String.IsNullOrEmpty(site)) return new List<WindDailyTargetKPI>();
            string filter = " where site_id in (" + site + ") and (date >= '" + fromDate + "'  and date<= '" + todate + "') ";
            string qry = @"SELECT fy,date,site,wind_speed as WindSpeed,kwh,ma,iga,ega,plf,p_50 as P50,p_75 as P75,p_90 as P90 FROM daily_target_kpi" + filter;
            return await Context.GetData<WindDailyTargetKPI>(qry).ConfigureAwait(false);

        }
        internal async Task<List<SolarDailyTargetKPI>> GetSolarDailyTargetKPI(string fromDate, string todate, string site)
        {
            string filter = "site_id in (" + site + ") and (date >= '" + fromDate + "'  and date<= '" + todate + "') ";
            string qry = @"SELECT fy,date, sites,site_id,ghi,poa ,gen_nos as kWh ,ma,iga,ega ,pr,plf ,Toplining_kWh ,Toplining_MA ,Toplining_IGA, Toplining_EGA ,Toplining_PR ,Toplining_PLF,plant_kWh ,Plant_PR ,Plant_PLF ,Inv_kWh ,Inv_PR ,Inv_PLF  FROM daily_target_kpi_solar  where " + filter;
            return await Context.GetData<SolarDailyTargetKPI>(qry).ConfigureAwait(false);

        }
        internal async Task<List<WindMonthlyTargetKPI>> GetWindMonthlyTargetKPI(string site, string fy, string month)
        {
            if (String.IsNullOrEmpty(site)) return new List<WindMonthlyTargetKPI>();
            string filter = " where site_id in (" + site + ") ";
            if (!string.IsNullOrEmpty(fy) && fy != "All")
            {
                string[] fySplit = fy.Split(",");
                if (fySplit.Length > 0)
                {
                    string fynames = "";
                    for (int i = 0; i < fySplit.Length; i++)
                    {
                        if (!string.IsNullOrEmpty(fySplit[i]))
                        {
                            fynames += "'" + fySplit[i] + "',";
                        }
                    }
                    fynames = fynames.TrimEnd(',');
                    filter += " and fy in(" + fynames + ")";
                }

            }
            if (!string.IsNullOrEmpty(month) && month != "All")
            {
                string[] monthSplit = month.Split(",");
                if (monthSplit.Length > 0)
                {
                    string monthnames = "";
                    for (int i = 0; i < monthSplit.Length; i++)
                    {
                        if (!string.IsNullOrEmpty(monthSplit[i]))
                        {
                            monthnames += "'" + monthSplit[i] + "',";
                        }
                    }
                    monthnames = monthnames.TrimEnd(',');
                    filter += " and month in(" + monthnames + ")";
                }

            }

            string qry = @"SELECT fy,month,site,wind_speed as WindSpeed,kwh,ma,iga,ega,plf,p_50 as P50,p_75 as P75,p_90 as P90 FROM monthly_target_kpi" + filter;

            return await Context.GetData<WindMonthlyTargetKPI>(qry).ConfigureAwait(false);

        }
        internal async Task<int> InsertWindSiteMaster(List<WindSiteMaster> set)
        {
            //pending : add activity log
            //prepared update query because existing queries cannot be deleted and orphan existing site master ids
            //grabs db site_master table data into local object list
            string fetchQry = "select site_master_id, site from site_master";
            List<WindSiteMaster> tableData = await Context.GetData<WindSiteMaster>(fetchQry).ConfigureAwait(false);
            WindSiteMaster existingRecord = new WindSiteMaster();
            int val = 0;
            //stores an existing record from the database which matches with a record in the client dataset
            string updateQry = "INSERT INTO site_master(site_master_id, doc, capacity_mw, wtg, total_mw, tarrif, total_tarrif, gbi, ll_compensation) VALUES";
            string qry = "insert into site_master(country, site, doc, spv, state, model, capacity_mw, wtg, total_mw, tarrif, total_tarrif, gbi, ll_compensation) values";
            string insertValues = "";
            string updateValues = "";
            foreach (var unit in set)
            {
                //checks if db table contains site record that matches a record in client dataset
                existingRecord = tableData.Find(tableRecord => tableRecord.site.Equals(unit.site));
                if (existingRecord == null)
                {
                    insertValues += "('" + unit.country + "','" + unit.site + "','" + unit.doc + "','" + unit.spv + "','" + unit.state + "','" + unit.model + "','" + unit.capacity_mw + "','" + unit.wtg + "','" + unit.total_mw + "','" + unit.tarrif + "','" + unit.total_tarrif + "','" + unit.gbi + "','" + unit.ll_compensation + "'),";
                }
                else
                {
                    //if match is found
                    updateValues += "(" + existingRecord.site_master_id + ",'" + unit.doc + "','" + unit.capacity_mw + "','" + unit.wtg + "','" + unit.total_mw + "','" + unit.tarrif + "','" + unit.total_tarrif + "','" + unit.gbi + "','" + unit.ll_compensation + "'),";
                }
            }
            qry += insertValues;
            updateQry += string.IsNullOrEmpty(updateValues) ? "" : updateValues.Substring(0, (updateValues.Length - 1)) + " ON DUPLICATE KEY UPDATE site_master_id = VALUES(site_master_id), capacity_mw = VALUES(capacity_mw), wtg = VALUES(wtg), total_mw = VALUES(total_mw), tarrif = VALUES(tarrif), total_tarrif = VALUES(total_tarrif), gbi = VALUES(gbi), ll_compensation = VALUES(ll_compensation), doc= VALUES(doc);";
            if (!(string.IsNullOrEmpty(insertValues)))
            {
                val = await Context.ExecuteNonQry<int>(qry.Substring(0, (qry.Length - 1)) + ";").ConfigureAwait(false);
            }
            if (!(string.IsNullOrEmpty(updateValues)))
            {
                val = await Context.ExecuteNonQry<int>(updateQry).ConfigureAwait(false);
            }
            return val;
        }
        internal async Task<List<SolarMonthlyTargetKPI>> GetSolarMonthlyTargetKPI(string fy, string month, string site)
        {
            //string filter = " fy='" + fy + "' ";
            string filter = "";
            int chkfilter = 0;
            if (!string.IsNullOrEmpty(fy) && fy != "All")
            {
                string[] fySplit = fy.Split(",");
                if (fySplit.Length > 0)
                {
                    string fynames = "";
                    for (int i = 0; i < fySplit.Length; i++)
                    {
                        if (!string.IsNullOrEmpty(fySplit[i]))
                        {
                            fynames += "'" + fySplit[i] + "',";
                        }
                    }
                    fynames = fynames.TrimEnd(',');
                    filter += " where fy in(" + fynames + ")";
                }
                chkfilter = 1;

            }
            if (!string.IsNullOrEmpty(month) && month != "All")
            {
                if (chkfilter == 1) filter += " and ";
                else
                {
                    filter += " where ";
                }
                string[] monthSplit = month.Split(",");
                if (monthSplit.Length > 0)
                {
                    string monthnames = "";
                    for (int i = 0; i < monthSplit.Length; i++)
                    {
                        if (!string.IsNullOrEmpty(monthSplit[i]))
                        {
                            monthnames += "'" + monthSplit[i] + "',";
                        }
                    }
                    monthnames = monthnames.TrimEnd(',');
                    filter += " month in(" + monthnames + ") ";
                }
                chkfilter = 1;

            }
            if (!string.IsNullOrEmpty(site) && site != "All")
            {
                if (chkfilter == 1) filter += " and ";
                else
                {
                    filter += " where ";
                }
                string[] siteSplit = site.Split(",");
                if (siteSplit.Length > 0)
                {
                    string sitenames = "";
                    for (int i = 0; i < siteSplit.Length; i++)
                    {
                        if (!string.IsNullOrEmpty(siteSplit[i]))
                        {
                            sitenames += "'" + siteSplit[i] + "',";
                        }
                    }
                    sitenames = sitenames.TrimEnd(',');
                    filter += " site_id in(" + sitenames + ") ";
                }

            }
            string qry = @"SELECT  fy, month, sites, ghi, poa, gen_nos as kWh, ma, iga, ega, pr, plf,p_50 as P50,p_75 as P75,p_90 as P90 FROM monthly_target_kpi_solar " + filter;
            return await Context.GetData<SolarMonthlyTargetKPI>(qry).ConfigureAwait(false);
        }
        internal async Task<int> InsertWindLocationMaster(List<WindLocationMaster> set)
        {
            //pending : add activity log
            //added logic where if site and wtg exists then update existing records
            //grabs db location_master table data into local object list
            string fetchQry = $"select wtg, location_master_id from location_master where site_master_id = {set[0].site_master_id}";
            List<WindLocationMaster> tableData = await Context.GetData<WindLocationMaster>(fetchQry).ConfigureAwait(false);
            int val = 0;

            //stores an existing record from the database which matches with a record in the client dataset
            WindLocationMaster existingRecord = new WindLocationMaster();
            WindLocationMaster existingRecordButNotInSet = new WindLocationMaster();

            string updateQry = "INSERT INTO location_master(location_master_id,wtg_onm, feeder, max_kwh_day , status) VALUES";
            string updateValues = "";
            // string qry = "insert into location_master(location_master_id, site_master_id, site, wtg, feeder, max_kwh_day) values";
            string qry = "insert into location_master(site_master_id, site, wtg, wtg_onm, feeder, max_kwh_day , status) values";
            string insertValues = "";
            foreach (var unit in set)
            {
                //checks if db table contains site record that matches a record in client dataset
                existingRecord = tableData.Find(tableRecord => tableRecord.wtg.Equals(unit.wtg));
                if (existingRecord == null)
                {
                    insertValues += "('" + unit.site_master_id + "','" + unit.site + "','" + unit.wtg + "','" + unit.wtg_onm + "','" + unit.feeder + "','" + unit.max_kwh_day + "', 1),";
                }
                else
                {
                    //if match is found
                    updateValues += "(" + existingRecord.location_master_id + ",'" + unit.wtg_onm + "','" + unit.feeder + "','" + unit.max_kwh_day + "', 1),";
                    //backup updater:
                    //updateQry += "update location_master set feeder = " + unit.feeder + " , max_kwh_day =  " + unit.max_kwh_day + "  where location_master_id = " + existingRecord.location_master_id + ";";

                }
            }
            qry += insertValues;
            updateQry += string.IsNullOrEmpty(updateValues) ? "" : updateValues.Substring(0, (updateValues.Length - 1)) + " ON DUPLICATE KEY UPDATE location_master_id = VALUES(location_master_id),wtg_onm = VALUES(wtg_onm), feeder = VALUES(feeder), max_kwh_day = VALUES(max_kwh_day), status = VALUES(status);";
            //if (!(string.IsNullOrEmpty(insertValues)))
            //{
            //    val = await Context.ExecuteNonQry<int>(qry.Substring(0, (qry.Length - 1)) + ";").ConfigureAwait(false);
            //}

            string deleteQry = " UPDATE location_master SET status = 0 WHERE wtg IN ( ";
            string deleteValues = "";

            foreach (var unit in tableData)
            {
                existingRecordButNotInSet = set.Find(tableRecord => tableRecord.wtg.Equals(unit.wtg));

                if (existingRecordButNotInSet == null)
                {
                    deleteValues += $" '{unit.wtg}' ,";
                }
            }

            if (!(string.IsNullOrEmpty(insertValues)))
            {
                val = await Context.ExecuteNonQry<int>(qry.Substring(0, (qry.Length - 1)) + ";").ConfigureAwait(false);
            }
            if (!(string.IsNullOrEmpty(updateValues)))
            {
                val = await Context.ExecuteNonQry<int>(updateQry).ConfigureAwait(false);
            }
            if (!(string.IsNullOrEmpty(deleteValues)))
            {
                deleteValues = deleteValues.Substring(0, (deleteValues.Length - 1)) ;
                deleteQry += deleteValues;
                val = await Context.ExecuteNonQry<int>(deleteQry + " );").ConfigureAwait(false);
            }
            return val;
        }
        internal async Task<List<WindMonthlyUploadingLineLosses>> GetWindMonthlyLineLoss(string site, string fy, string month)
        {

            int chkfilter = 0;
            string filter = "";
            if (!string.IsNullOrEmpty(site))
            {
                filter = " where site_id in (" + site + ") ";
                chkfilter = 1;
            }
            if (!string.IsNullOrEmpty(fy) && fy != "All")
            {
                if (chkfilter == 1) filter += " and ";
                else filter += " where ";
                string[] fySplit = fy.Split(",");
                if (fySplit.Length > 0)
                {
                    string fynames = "";
                    for (int i = 0; i < fySplit.Length; i++)
                    {
                        if (!string.IsNullOrEmpty(fySplit[i]))
                        {
                            fynames += "'" + fySplit[i] + "',";
                        }
                    }
                    fynames = fynames.TrimEnd(',');
                    filter += "  fy in(" + fynames + ")";
                    chkfilter = 1;
                }

            }
            if (!string.IsNullOrEmpty(month) && month != "All")
            {
                if (chkfilter == 1) filter += " and ";
                else filter += " where ";
                string[] monthSplit = month.Split(",");
                if (monthSplit.Length > 0)
                {
                    string monthnames = "";
                    for (int i = 0; i < monthSplit.Length; i++)
                    {
                        if (!string.IsNullOrEmpty(monthSplit[i]))
                        {
                            monthnames += "'" + monthSplit[i] + "',";
                        }
                    }
                    monthnames = monthnames.TrimEnd(',');
                    filter += " month in(" + monthnames + ")";
                    chkfilter = 1;
                }

            }
            string qry = @"SELECT  fy,month,site,line_loss as LineLoss FROM monthly_uploading_line_losses " + filter;
            return await Context.GetData<WindMonthlyUploadingLineLosses>(qry).ConfigureAwait(false);
        }
        internal async Task<List<SolarMonthlyUploadingLineLosses>> GetSolarMonthlyLineLoss(string fy, string month, string site)
        {
            string filter = "";
            int chkfilter = 0;
            if (!string.IsNullOrEmpty(site))
            {
                filter = " where site_id in (" + site + ") ";
                chkfilter = 1;
            }
            if (!string.IsNullOrEmpty(fy) && fy != "All")
            {
                if (chkfilter == 1) filter += " and ";
                else filter += " where ";
                string[] fySplit = fy.Split(",");
                if (fySplit.Length > 0)
                {
                    string fynames = "";
                    for (int i = 0; i < fySplit.Length; i++)
                    {
                        if (!string.IsNullOrEmpty(fySplit[i]))
                        {
                            fynames += "'" + fySplit[i] + "',";
                        }
                    }
                    fynames = fynames.TrimEnd(',');
                    filter += " fy in(" + fynames + ")";

                    chkfilter = 1;
                }

            }
            if (!string.IsNullOrEmpty(month) && month != "All")
            {
                if (chkfilter == 1) filter += " and ";
                else filter += " where ";
                string[] monthSplit = month.Split(",");
                if (monthSplit.Length > 0)
                {
                    string monthnames = "";
                    for (int i = 0; i < monthSplit.Length; i++)
                    {
                        if (!string.IsNullOrEmpty(monthSplit[i]))
                        {
                            monthnames += "'" + monthSplit[i] + "',";
                        }
                    }
                    monthnames = monthnames.TrimEnd(',');
                    filter += " month in(" + monthnames + ")";
                    chkfilter = 1;
                }

            }
            string qry = @"SELECT  fy, month, site as Sites, LineLoss FROM monthly_line_loss_solar " + filter;
            return await Context.GetData<SolarMonthlyUploadingLineLosses>(qry).ConfigureAwait(false);
        }
        internal async Task<List<WindMonthlyJMR1>> GetWindMonthlyJMR(string site, string fy, string month)
        {

            int chkfilter = 0;
            string filter = "";
            if (!string.IsNullOrEmpty(site))
            {
                filter = " where site_id in (" + site + ") ";
                chkfilter = 1;
            }
            if (!string.IsNullOrEmpty(fy) && fy != "All")
            {
                if (chkfilter == 1) filter += " and ";
                else filter += " where ";
                string[] fySplit = fy.Split(",");
                if (fySplit.Length > 0)
                {
                    string fynames = "";
                    for (int i = 0; i < fySplit.Length; i++)
                    {
                        if (!string.IsNullOrEmpty(fySplit[i]))
                        {
                            fynames += "'" + fySplit[i] + "',";
                        }
                    }
                    fynames = fynames.TrimEnd(',');
                    filter += "  fy in(" + fynames + ")";
                    chkfilter = 1;
                }

            }
            if (!string.IsNullOrEmpty(month) && month != "All")
            {
                if (chkfilter == 1) filter += " and ";
                else filter += " where ";
                string[] monthSplit = month.Split(",");
                if (monthSplit.Length > 0)
                {
                    string monthnames = "";
                    for (int i = 0; i < monthSplit.Length; i++)
                    {
                        if (!string.IsNullOrEmpty(monthSplit[i]))
                        {
                            monthnames += "'" + monthSplit[i] + "',";
                        }
                    }
                    monthnames = monthnames.TrimEnd(',');
                    filter += " jmr_month in(" + monthnames + ")";
                    chkfilter = 1;
                }

            }

            string qry = @"SELECT  fy,site,Plant_Section,Controller_KWH_INV,Scheduled_Units_kWh,Export_kWh,Import_kWh,Net_Export_kWh,Export_kVAh,Import_kVAh,Export_kVArh_lag,Import_kVArh_lag,Export_kVArh_lead,Import_kVArh_lead,JMR_date,JMR_Month,JMR_Year,LineLoss,Line_Loss_percentage,RKVH_percentage,netBillableKwh,remarks FROM monthly_jmr " + filter;

            return await Context.GetData<WindMonthlyJMR1>(qry).ConfigureAwait(false);
        }
        internal async Task<List<SolarMonthlyJMR>> GetSolarMonthlyJMR(string fy, string month, string site)
        {


            int chkfilter = 0;
            string filter = "";
            if (!string.IsNullOrEmpty(site))
            {
                filter = " where site_id in (" + site + ") ";
                chkfilter = 1;
            }
            if (!string.IsNullOrEmpty(fy) && fy != "All")
            {
                if (chkfilter == 1) filter += " and ";
                else filter += " where ";
                string[] fySplit = fy.Split(",");
                if (fySplit.Length > 0)
                {
                    string fynames = "";
                    for (int i = 0; i < fySplit.Length; i++)
                    {
                        if (!string.IsNullOrEmpty(fySplit[i]))
                        {
                            fynames += "'" + fySplit[i] + "',";
                        }
                    }
                    fynames = fynames.TrimEnd(',');
                    filter += "  fy in(" + fynames + ")";
                    chkfilter = 1;
                }

            }
            if (!string.IsNullOrEmpty(month) && month != "All")
            {
                if (chkfilter == 1) filter += " and ";
                else filter += " where ";
                string[] monthSplit = month.Split(",");
                if (monthSplit.Length > 0)
                {
                    string monthnames = "";
                    for (int i = 0; i < monthSplit.Length; i++)
                    {
                        if (!string.IsNullOrEmpty(monthSplit[i]))
                        {
                            monthnames += "'" + monthSplit[i] + "',";
                        }
                    }
                    monthnames = monthnames.TrimEnd(',');
                    filter += " jmr_month in(" + monthnames + ")";
                    chkfilter = 1;
                }

            }

            string qry = @"SELECT  fy, site, Plant_Section, Controller_KWH_INV, Scheduled_Units_kWh, Export_kWh, Import_kWh, Net_Export_kWh, Export_kVAh, Import_kVAh, Export_kVArh_lag, Import_kVArh_lag, Export_kVArh_lead, Import_kVArh_lead, JMR_date, JMR_Month, JMR_Year, LineLoss, Line_Loss_percentage, RKVH_percentage, Net_Billable_kWh,remarks FROM monthly_jmr_solar " + filter;

            return await Context.GetData<SolarMonthlyJMR>(qry).ConfigureAwait(false);
        }
        internal async Task<List<SolarInvAcDcCapacity>> GetSolarACDCCapacity(string site)
        {
            string filter = "";
            if (!string.IsNullOrEmpty(site) && site != "All" && site != "All~")
            {

                string[] siteSplit = site.Split("~");
                if (siteSplit.Length > 0)
                {
                    string sitesnames = "";
                    for (int i = 0; i < siteSplit.Length; i++)
                    {
                        if (!string.IsNullOrEmpty(siteSplit[i]))
                        {
                            sitesnames += "'" + siteSplit[i] + "',";
                        }
                    }
                    sitesnames = sitesnames.TrimEnd(',');
                    filter += " where site_id in(" + site + ")";
                }

            }

            //string datefilter = " where site='" + site + "' ";
            //if(site=="All")
            //  { datefilter = ""; }
            string qry = @"SELECT  site,inverter,dc_capacity,ac_capacity FROM solar_ac_dc_capacity " + filter;

            return await Context.GetData<SolarInvAcDcCapacity>(qry).ConfigureAwait(false);
        }
        internal async Task<List<UserManagement>> GetUserManagement(string userMail, string date)
        {

            string datefilter = " user_mail_id='" + userMail + "' and date='" + date + "'";

            string qry = @"SELECT user_mail_id,date,dgr,status  FROM user_management where " + datefilter;

            return await Context.GetData<UserManagement>(qry).ConfigureAwait(false);
        }
        internal async Task<List<BDType>> GetBDType()
        {
            string qry = @"SELECT * FROM bd_type ";
            return await Context.GetData<BDType>(qry).ConfigureAwait(false);
        }
        internal async Task<List<WindViewDailyLoadShedding>> GetWindDailyloadShedding(string site, string fromDate, string toDate)
        {
            if (site == "") return new List<WindViewDailyLoadShedding>();
            string datefilter = " where site_id in (" + site + ") and (date >= '" + fromDate + "'  and date<= '" + toDate + "') ";
            string qry = @"SELECT * FROM daily_load_shedding " + datefilter;

            return await Context.GetData<WindViewDailyLoadShedding>(qry).ConfigureAwait(false);
        }
        internal async Task<List<SolarDailyLoadShedding>> GetSolarDailyloadShedding(string site, string fromDate, string toDate)
        {

            string datefilter = " where site_id in (" + site + ")";
            if (site == "All")
            {
                datefilter = " where date >= '" + fromDate + "'  and date<= '" + toDate + "' ";
            }
            else
            {
                datefilter += " and date >= '" + fromDate + "' and date<= '" + toDate + "' ";
            }
            string qry = @"SELECT * FROM daily_load_shedding_solar" + datefilter;

            return await Context.GetData<SolarDailyLoadShedding>(qry).ConfigureAwait(false);
        }
        internal async Task<int> InsertSolarLocationMaster(List<SolarLocationMaster> set)
        {
            //pending : add activity log
            //added logic where if site and wtg exists then update existing records
            //grabs db location_master table data into local object list
            string fetchQry = $"select location_master_solar_id, site, site_id, icr, inv, smb, string as strings from location_master_solar where site_id = {set[0].site_id}";
            List<SolarLocationMaster> tableData = await Context.GetData<SolarLocationMaster>(fetchQry).ConfigureAwait(false);

            //stores an existing record from the database which matches with a record in the client dataset
            SolarLocationMaster existingRecord = new SolarLocationMaster();
            SolarLocationMaster existingRecordButNotInSet = new SolarLocationMaster();

            int val = 0;


            //string updateQry = "INSERT INTO location_master_solar(location_master_solar_id, string_configuration, total_string_current, total_string_voltage, modules_quantity, wp, capacity, module_make, module_model_no, module_type, string_inv_central_inv) VALUES";

            //// string qry = "insert into location_master(location_master_id, site_master_id, site, wtg, feeder, max_kwh_day) values";
            //string qry = "insert into location_master_solar(country, site, site_id, eg, ig, icr_inv, icr, inv, smb, string, string_configuration, total_string_current, total_string_voltage, modules_quantity, wp, capacity, module_make, module_model_no, module_type, string_inv_central_inv) values";
            //string insertValues = "";
            //string updateValues = "";
            //foreach (var unit in set)
            //{
            //    //checks if db table contains site record that matches a record in client dataset
            //    existingRecord = tableData.Find(tableRecord => tableRecord.site_id.Equals(unit.site_id) && tableRecord.icr.Equals(unit.icr) && tableRecord.inv.Equals(unit.inv) && tableRecord.smb.Equals(unit.smb) && tableRecord.strings.Equals(unit.strings));
            //    if (existingRecord == null)
            //    {
            //        insertValues += "('" + unit.country + "','" + unit.site + "','" + unit.site_id + "','" + unit.eg + "','" + unit.ig + "','" + unit.icr_inv + "','" + unit.icr + "','" + unit.inv + "','" + unit.smb + "','" + unit.strings + "','" + unit.string_configuration + "','" + unit.total_string_current + "','" + unit.total_string_voltage + "','" + unit.modules_quantity + "','" + unit.wp + "','" + unit.capacity + "','" + unit.module_make + "','" + unit.module_model_no + "','" + unit.module_type + "','" + unit.string_inv_central_inv + "'),";
            //    }
            //    else
            //    {
            //        //updateValues += "update location_master_solar set string_configuration = '" + unit.string_configuration + "', total_string_current = '" + unit.total_string_current + "', total_string_voltage = '" + unit.total_string_voltage + "', modules_quantity = '" + unit.modules_quantity + "', wp = '" + unit.wp + "', capacity = '" + unit.capacity + "', module_make = '" + unit.module_make + "', module_model_no = '" + unit.module_model_no + "', module_type = '" + unit.module_type + "', string_inv_central_inv = '" + unit.string_inv_central_inv + "' where location_master_solar_id = '" + existingRecord.location_master_solar_id + "';";

            //        updateValues += "(" + existingRecord.location_master_solar_id + ",'" + unit.string_configuration + "','" + unit.total_string_current + "','" + unit.total_string_voltage + "','" + unit.modules_quantity + "','" + unit.wp + "','" + unit.capacity + "','" + unit.module_make + "','" + unit.module_model_no + "','" + unit.module_type + "','" + unit.string_inv_central_inv + "'),";
            //    }
            //}
            //qry += insertValues;
            //updateQry += string.IsNullOrEmpty(updateValues) ? "" : updateValues.Substring(0, (updateValues.Length - 1)) + " ON DUPLICATE KEY UPDATE location_master_solar_id = VALUES(location_master_solar_id), string_configuration = VALUES(string_configuration), total_string_current = VALUES(total_string_current), total_string_voltage = VALUES(total_string_voltage), modules_quantity = VALUES(modules_quantity), wp = VALUES(wp), capacity = VALUES(capacity), module_make = VALUES(module_make), module_model_no = VALUES(module_model_no), module_type = VALUES(module_type), string_inv_central_inv = VALUES(string_inv_central_inv);";

            ////string updateQry = "INSERT INTO location_master_solar(location_master_solar_id, string_configuration, total_string_current, total_string_voltage, modules_quantity, wp, capacity, module_make, module_model_no, module_type, string_inv_central_inv) VALUES";

            string updateQry = "INSERT INTO location_master_solar(location_master_solar_id, string_configuration, total_string_current, total_string_voltage, modules_quantity, wp, capacity, module_make, module_model_no, module_type, string_inv_central_inv , status) VALUES";

            // string qry = "insert into location_master(location_master_id, site_master_id, site, wtg, feeder, max_kwh_day) values";
            string qry = "insert into location_master_solar(country, site, site_id, eg, ig, icr_inv, icr, inv, smb, string, string_configuration, total_string_current, total_string_voltage, modules_quantity, wp, capacity, module_make, module_model_no, module_type, string_inv_central_inv ,status) values";
            string insertValues = "";
            string updateValues = "";
            string deleteValues = "";

            foreach (var unit in set)
            {
                //checks if db table contains site record that matches a record in client dataset
                existingRecord = tableData.Find(tableRecord => tableRecord.site_id.Equals(unit.site_id) && tableRecord.icr.Equals(unit.icr) && tableRecord.inv.Equals(unit.inv) && tableRecord.smb.Equals(unit.smb) && tableRecord.strings.Equals(unit.strings));
                if (existingRecord == null)
                {
                    insertValues += "('" + unit.country + "','" + unit.site + "','" + unit.site_id + "','" + unit.eg + "','" + unit.ig + "','" + unit.icr_inv + "','" + unit.icr + "','" + unit.inv + "','" + unit.smb + "','" + unit.strings + "','" + unit.string_configuration + "','" + unit.total_string_current + "','" + unit.total_string_voltage + "','" + unit.modules_quantity + "','" + unit.wp + "','" + unit.capacity + "','" + unit.module_make + "','" + unit.module_model_no + "','" + unit.module_type + "','" + unit.string_inv_central_inv + "', 1),";
                }
                else
                {
                    //updateValues += "update location_master_solar set string_configuration = '" + unit.string_configuration + "', total_string_current = '" + unit.total_string_current + "', total_string_voltage = '" + unit.total_string_voltage + "', modules_quantity = '" + unit.modules_quantity + "', wp = '" + unit.wp + "', capacity = '" + unit.capacity + "', module_make = '" + unit.module_make + "', module_model_no = '" + unit.module_model_no + "', module_type = '" + unit.module_type + "', string_inv_central_inv = '" + unit.string_inv_central_inv + "' where location_master_solar_id = '" + existingRecord.location_master_solar_id + "';";

                    updateValues += "(" + existingRecord.location_master_solar_id + ",'" + unit.string_configuration + "','" + unit.total_string_current + "','" + unit.total_string_voltage + "','" + unit.modules_quantity + "','" + unit.wp + "','" + unit.capacity + "','" + unit.module_make + "','" + unit.module_model_no + "','" + unit.module_type + "','" + unit.string_inv_central_inv + "', 1),";
                }
             
            }


            string deleteQry = " UPDATE location_master_solar SET status = 0 WHERE CONCAT(site, icr, inv, smb, string) IN (";

            foreach (var unit in tableData)
            {
                existingRecordButNotInSet = set.Find(tableRecord => tableRecord.site_id.Equals(unit.site_id) && tableRecord.icr.Equals(unit.icr) && tableRecord.inv.Equals(unit.inv) && tableRecord.smb.Equals(unit.smb) && tableRecord.strings.Equals(unit.strings));
 
                if (existingRecordButNotInSet == null)
                {
                    deleteValues += " SELECT CONCAT('" + unit.site + "','" + unit.icr + "','" + unit.inv + "','" + unit.smb + "','" + unit.strings + "') UNION ";
                }
            }


            qry += insertValues;
            updateQry += string.IsNullOrEmpty(updateValues) ? "" : updateValues.Substring(0, (updateValues.Length - 1)) + " ON DUPLICATE KEY UPDATE location_master_solar_id = VALUES(location_master_solar_id), string_configuration = VALUES(string_configuration), total_string_current = VALUES(total_string_current), total_string_voltage = VALUES(total_string_voltage), modules_quantity = VALUES(modules_quantity), wp = VALUES(wp), capacity = VALUES(capacity), module_make = VALUES(module_make), module_model_no = VALUES(module_model_no), module_type = VALUES(module_type), string_inv_central_inv = VALUES(string_inv_central_inv), status = VALUES(status);";

            //string updateQry = "INSERT INTO location_master_solar(location_master_solar_id, string_configuration, total_string_current, total_string_voltage, modules_quantity, wp, capacity, module_make, module_model_no, module_type, string_inv_central_inv) VALUES";




            if (!(string.IsNullOrEmpty(insertValues)))
            {
                val = await Context.ExecuteNonQry<int>(qry.Substring(0, (qry.Length - 1)) + ";").ConfigureAwait(false);
            }
            if (!(string.IsNullOrEmpty(updateValues)))
            {
                val = await Context.ExecuteNonQry<int>(updateQry).ConfigureAwait(false);
            }
            if (!(string.IsNullOrEmpty(deleteValues)))
            {
                deleteQry += deleteValues;

                deleteQry = deleteQry.Substring(0, (deleteQry.Length - 6)) + " );";

                val = await Context.ExecuteNonQry<int>(deleteQry).ConfigureAwait(false);
            }
            return val;
        }
        internal async Task<List<DailyGenSummary>> GetWindDailyGenSummaryPending(string date, string site)
        {
            string filter = " where approve_status!=1 ";
            if (!string.IsNullOrEmpty(date) && date != "All")
            {
                filter += " and date='" + date + "'";
            }
            if (!string.IsNullOrEmpty(site) && site != "All")
            {
                // filter += " and site='" + site + "'";

                string[] siteSplit = site.Split("~");
                if (siteSplit.Length > 0)
                {
                    string sitesnames = "";
                    for (int i = 0; i < siteSplit.Length; i++)
                    {
                        if (!string.IsNullOrEmpty(siteSplit[i]))
                        {
                            sitesnames += "'" + siteSplit[i] + "',";
                        }
                    }
                    sitesnames = sitesnames.TrimEnd(',');
                    filter += " and site in(" + sitesnames + ")";
                }

            }

            //            string filter = " where date >= '" + fromDate + "' and date <= '" + ToDate + "' ";

            string qry = "Select * from daily_gen_summary " + filter;


            return await Context.GetData<DailyGenSummary>(qry).ConfigureAwait(false);

        }
        internal async Task<int> InsertSolarSiteMaster(List<SolarSiteMaster> set)
        {
            //pending : add activity log
            //prepared update query because existing queries cannot be deleted and orphan existing site master ids
            //grabs db site_master table data into local object list
            string fetchQry = "select site_master_solar_id, site from site_master_solar";
            List<SolarSiteMaster> tableData = await Context.GetData<SolarSiteMaster>(fetchQry).ConfigureAwait(false);
            int val = 0;
            //stores an existing record from the database which matches with a record in the client dataset
            SolarSiteMaster existingRecord = new SolarSiteMaster();
           // string updateQry = "INSERT INTO site_master_solar(site_master_solar_id, dc_capacity, ac_capacity, total_tarrif) VALUES";
            string updateQry = "INSERT INTO site_master_solar(site_master_solar_id,doc,country,spv,state, dc_capacity, ac_capacity, total_tarrif) VALUES";

            string qry = "insert into site_master_solar(country, site, doc, spv, state, dc_capacity, ac_capacity, total_tarrif) values";
            string insertValues = "";
            string updateValues = "";
            foreach (var unit in set)
            {
                //checks if db table contains site record that matches a record in client dataset
                existingRecord = tableData.Find(tableRecord => tableRecord.site.Equals(unit.site));
                if (existingRecord == null)
                {
                    insertValues += "('" + unit.country + "','" + unit.site + "','" + unit.doc + "','" + unit.spv + "','" + unit.state + "','" + unit.dc_capacity + "','" + unit.ac_capacity + "','" + unit.total_tarrif + "'),";
                }
                else
                {
                    //if match is found
                    //updateValues += "(" + existingRecord.site_master_solar_id + ",'" + unit.dc_capacity + "','" + unit.ac_capacity + "','" + unit.total_tarrif + "'),";
                    updateValues += "(" + existingRecord.site_master_solar_id + ",'" + unit.doc + "','" + unit.country + "','" + unit.spv + "','" + unit.state + "','" + unit.dc_capacity + "','" + unit.ac_capacity + "','" + unit.total_tarrif + "'),";

                    //updateQry += "update site_master_solar set dc_capacity = '" + unit.dc_capacity + "', ac_capacity = '" + unit.ac_capacity + "', total_tarrif = '" + unit.total_tarrif + "' where site_master_solar_id = '" + existingRecord.site_master_solar_id + "';";
                }
            }
            qry += insertValues;
            updateQry += string.IsNullOrEmpty(updateValues) ? "" : updateValues.Substring(0, (updateValues.Length - 1)) + " ON DUPLICATE KEY UPDATE site_master_solar_id = VALUES(site_master_solar_id),country=VALUES(country), spv=VALUES(spv), state=VALUES(state), dc_capacity = VALUES(dc_capacity), ac_capacity = VALUES(ac_capacity), total_tarrif = VALUES(total_tarrif), doc = VALUES(doc);";

            if (!(string.IsNullOrEmpty(insertValues)))
            {
                val = await Context.ExecuteNonQry<int>(qry.Substring(0, (qry.Length - 1)) + ";").ConfigureAwait(false);
            }
            if (!(string.IsNullOrEmpty(updateValues)))
            {
                val = await Context.ExecuteNonQry<int>(updateQry).ConfigureAwait(false);
            }
            return val;
        }
        internal async Task<List<SolarDailyGenSummary>> GetSolarDailyGenSummaryPending(string date, string site)
        {

            //string filter = " where date >= '" + fromDate + "' and date <= '" + ToDate + "' ";
            string filter = " where approve_status!=1";
            if (!string.IsNullOrEmpty(date) && date != "All")
            {
                filter += " and date='" + date + "'";
            }
            if (!string.IsNullOrEmpty(site) && site != "All")
            {
                // filter += " and site='" + site + "'";

                string[] siteSplit = site.Split("~");
                if (siteSplit.Length > 0)
                {
                    string sitesnames = "";
                    for (int i = 0; i < siteSplit.Length; i++)
                    {
                        if (!string.IsNullOrEmpty(siteSplit[i]))
                        {
                            sitesnames += "'" + siteSplit[i] + "',";
                        }
                    }
                    sitesnames = sitesnames.TrimEnd(',');
                    filter += " and site in(" + sitesnames + ")";
                }

            }

            return await Context.GetData<SolarDailyGenSummary>("Select * from daily_gen_summary_solar " + filter).ConfigureAwait(false);

        }
        internal async Task<List<WindDailyBreakdownReport>> GetWindDailyBreakdownPending(string date, string site)
        {
            string filter = " where approve_status!=1 ";
            if (!string.IsNullOrEmpty(date) && date != "All")
            {
                filter += " and t1.date='" + date + "'";
            }
            if (!string.IsNullOrEmpty(site) && site != "All")
            {
                // filter += " and site='" + site + "'";

                string[] siteSplit = site.Split("~");
                if (siteSplit.Length > 0)
                {
                    string sitesnames = "";
                    for (int i = 0; i < siteSplit.Length; i++)
                    {
                        if (!string.IsNullOrEmpty(siteSplit[i]))
                        {
                            sitesnames += "'" + siteSplit[i] + "',";
                        }
                    }
                    sitesnames = sitesnames.TrimEnd(',');
                    filter += " and t2.site in(" + sitesnames + ")";
                }

            }
            string qry = @"SELECT t1.*,t2.site FROM uploading_file_breakdown t1 left join location_master t2 on t1.wtg=t2.wtg and t2.status = 1 " + filter;

            return await Context.GetData<WindDailyBreakdownReport>(qry).ConfigureAwait(false);

        }
        internal async Task<List<SolarFileBreakdown>> GetSolarDailyBreakdownPending(string date, string site)
        {


            string filter = " where approve_status!=1";

            if (!string.IsNullOrEmpty(date) && date != "All")
            {
                filter += " and date='" + date + "'";
            }
            if (!string.IsNullOrEmpty(site) && site != "All")
            {
                // filter += " and site='" + site + "'";

                string[] siteSplit = site.Split("~");
                if (siteSplit.Length > 0)
                {
                    string sitesnames = "";
                    for (int i = 0; i < siteSplit.Length; i++)
                    {
                        if (!string.IsNullOrEmpty(siteSplit[i]))
                        {
                            sitesnames += "'" + siteSplit[i] + "',";
                        }
                    }
                    sitesnames = sitesnames.TrimEnd(',');
                    filter += " and site in(" + sitesnames + ")";
                }

            }

            string qry = @"SELECT *  FROM daily_bd_loss_solar " + filter;

            return await Context.GetData<SolarFileBreakdown>(qry).ConfigureAwait(false);

        }
        internal async Task<int> UpdateWindDailyGenSummaryApproveStatus(List<DailyGenSummary> dailyGenSummary)
        {
            string temptable = "tempwindData";
            string qry = "";
            string ids = "";
            if (approve_status == 1)
            {


                for (int i = 0; i < dailyGenSummary.Count; i++)
                {
                    ids += dailyGenSummary[i].daily_gen_summary_id + ",";
                }
                ids = ids.TrimEnd(',');

                //       string dataQry = @"select  t1.Date,month(t1.date) as month,year(t1.date) as year, t1.Site, t1.wind_speed as Wind,
                //t1.kwh as KWH,     replace(t2.line_loss, '%', '') as line_loss,     (t3.kwh * 1000000) as tarkwh     from daily_gen_summary t1 left
                //join monthly_uploading_line_losses t2 on t2.site = t1.site      and t2.month = DATE_FORMAT(t1.date, '%b') and fy = '2022-23'
                //left join daily_target_kpi t3 on t3.site = t1.site and t3.date = t1.date where      t1.approve_status = " + approve_status + "  and t1.daily_gen_summary_id in(" + ids + ")   group by t1.Site,t1.date order by t1.date desc; ";

                string dataQry = @"select  t1.Date,month(t1.date)as month,year(t1.date)as year, t1.Site,
    (t1.wind_speed)as Wind,    (t1.kwh)as KWH, 
    (select replace(line_loss,'%','') from monthly_uploading_line_losses where site=t1.site and 
    month=DATE_FORMAT(t1.date, '%b')   and fy='2022-23' order by monthly_uploading_line_losses_id desc limit 1)as line_loss,
    
    (t1.kwh)-((t1.kwh)* (select replace(line_loss,'%','') from monthly_uploading_line_losses where site=t1.site and 
    month=DATE_FORMAT(t1.date, '%b')   and fy='2022-23'  order by monthly_uploading_line_losses_id desc limit 1) /100) as jmrkwh,
    
    (select kwh*1000000 from daily_target_kpi where site=t1.site and date=t1.date order by daily_gen_summary_id desc limit 1)as tarkwh, 
    (select wind_speed from daily_target_kpi where site=t1.site and date=t1.date order by daily_gen_summary_id desc limit 1)
    as tarwind from  daily_gen_summary t1 where t1.daily_gen_summary_id in(" + ids + ") ";

                string qrynew = @"drop TEMPORARY table IF EXISTS " + temptable + " ;  CREATE TEMPORARY TABLE " + temptable + " " + dataQry + " ;insert into tblwinddata (Date,Month,year,Site,Wind,KWH,line_loss,jmrkwh,tarkwh,tarwind) select Date,Month,year,Site,Wind,KWH,line_loss,jmrkwh,tarkwh,tarwind from " + temptable + ";";

                await Context.ExecuteNonQry<int>(qrynew).ConfigureAwait(false);

            }
            for (int i = 0; i < dailyGenSummary.Count; i++)
            {

                qry += "update daily_gen_summary set approve_status=1 where daily_gen_summary_id=" + dailyGenSummary[i].daily_gen_summary_id + ";";
            }
            return await Context.ExecuteNonQry<int>(qry).ConfigureAwait(false);

        }
        internal async Task<int> DeleteWindDailyGenSummaryApproveStatus(List<DailyGenSummary> dailyGenSummary)
        {

            string qry = "";
            for (int i = 0; i < dailyGenSummary.Count; i++)
            {

                qry += "delete from daily_gen_summary  where daily_gen_summary_id=" + dailyGenSummary[i].daily_gen_summary_id + ";";
            }
            return await Context.ExecuteNonQry<int>(qry).ConfigureAwait(false);

        }
        internal async Task<int> UpdateWindDailyBreakdownApproveStatus(List<WindDailyBreakdownReport> windDailyBreakdownReport)
        {

            string qry = "";
            for (int i = 0; i < windDailyBreakdownReport.Count; i++)
            {

                qry += "update uploading_file_breakdown set approve_status=1 where uploading_file_breakdown_id=" + windDailyBreakdownReport[i].uploading_file_breakdown_id + ";";
            }
            return await Context.ExecuteNonQry<int>(qry).ConfigureAwait(false);

        }
        internal async Task<int> DeleteWindDailyBreakdownApproveStatus(List<WindDailyBreakdownReport> windDailyBreakdownReport)
        {

            string qry = "";
            for (int i = 0; i < windDailyBreakdownReport.Count; i++)
            {

                qry += "delete from uploading_file_breakdown where uploading_file_breakdown_id=" + windDailyBreakdownReport[i].uploading_file_breakdown_id + ";";
            }
            return await Context.ExecuteNonQry<int>(qry).ConfigureAwait(false);

        }
        internal async Task<int> UpdateSolarDailyGenSummaryApproveStatus(List<SolarDailyGenSummary> solarDailyGenSummary)
        {
            string temptable = "tempsolarData";
            string qry = "";
            string ids = "";
            if (approve_status == 1)
            {


                for (int i = 0; i < solarDailyGenSummary.Count; i++)
                {
                    ids += solarDailyGenSummary[i].daily_gen_summary_solar_id + ",";
                }
                ids = ids.TrimEnd(',');


                string dataQry = @"select t1.date,month(t1.date)as month,t1.site,
(inv_kwh) as inv_kwh,
(t1.poa) as IR,
(select replace(lineloss,'%','') from monthly_line_loss_solar where site=t1.site and month=DATE_FORMAT(t1.date, '%b')
 and fy='2022-23' order by monthly_line_loss_solar_id desc limit 1 )as line_loss,
(inv_kwh)-((inv_kwh) * (select replace(lineloss,'%','') from monthly_line_loss_solar where
 site=t1.site and month=DATE_FORMAT(t1.date, '%b')
 and fy='2022-23' order by monthly_line_loss_solar_id desc limit 1 ) /100) as jmrkwh,
(select gen_nos*1000000 from daily_target_kpi_solar where sites=t1.site and date=t1.date 
order by daily_target_kpi_solar_id desc limit 1) as tarkwh, 
(select poa from daily_target_kpi_solar where sites=t1.site and date=t1.date order by 
daily_target_kpi_solar_id desc limit 1) as tarIR from daily_gen_summary_solar t1 where t1.daily_gen_summary_solar_id in(" + ids + ") ";

                string qrynew = @"drop TEMPORARY table IF EXISTS " + temptable + " ;  CREATE TEMPORARY TABLE " + temptable + " " + dataQry + " ;insert into tblsolardata (Date,Month,Site,inv_kwh,IR,line_loss,jmrkwh,tarkwh,tarIR) select Date,Month,Site,inv_kwh,IR,line_loss,jmrkwh,tarkwh,tarIR from " + temptable + ";";

                await Context.ExecuteNonQry<int>(qrynew).ConfigureAwait(false);
            }
            for (int i = 0; i < solarDailyGenSummary.Count; i++)
            {

                qry += "update daily_gen_summary_solar set approve_status=1 where daily_gen_summary_solar_id=" + solarDailyGenSummary[i].daily_gen_summary_solar_id + ";";
            }
            return await Context.ExecuteNonQry<int>(qry).ConfigureAwait(false);

        }
        internal async Task<int> DeleteSolarDailyGenSummaryApproveStatus(List<SolarDailyGenSummary> solarDailyGenSummary)
        {

            string qry = "";
            for (int i = 0; i < solarDailyGenSummary.Count; i++)
            {

                qry += "delete from daily_gen_summary_solar  where daily_gen_summary_solar_id=" + solarDailyGenSummary[i].daily_gen_summary_solar_id + ";";
            }
            return await Context.ExecuteNonQry<int>(qry).ConfigureAwait(false);

        }
        internal async Task<int> UpdateSolarDailyBreakdownApproveStatus(List<SolarFileBreakdown> solarFileBreakdown)
        {

            string qry = "";
            for (int i = 0; i < solarFileBreakdown.Count; i++)
            {

                qry += "update daily_bd_loss_solar set approve_status=1 where daily_bd_loss_solar_id=" + solarFileBreakdown[i].daily_bd_loss_solar_id + ";";
            }
            return await Context.ExecuteNonQry<int>(qry).ConfigureAwait(false);

        }
        internal async Task<int> DeleteSolarDailyBreakdownApproveStatus(List<SolarFileBreakdown> solarFileBreakdown)
        {

            string qry = "";
            for (int i = 0; i < solarFileBreakdown.Count; i++)
            {

                qry += "delete from daily_bd_loss_solar where daily_bd_loss_solar_id=" + solarFileBreakdown[i].daily_bd_loss_solar_id + ";";
            }
            return await Context.ExecuteNonQry<int>(qry).ConfigureAwait(false);

        }
        //LOgin 
        /*  internal async Task<List<UserLogin>> GetLogin(string username, string password)
          {
              string qry = "";
              qry = "SELECT * FROM `login` where `username`='" + username + "' and `password` ='" + password + "' ;";
             // Console.WriteLine(qry);
              return await Context.GetData<UserLogin>(qry).ConfigureAwait(false);

          }*/
        ////#endregion

        //  await Context.GetData<WindDashboardData>(qry).ConfigureAwait(false);
        internal async Task<int> eQry(string qry)
        {
            return await Context.ExecuteNonQry<int>(qry).ConfigureAwait(false);

        }
        public async Task<List<approvalObject>> GetImportBatches(string importFromDate, string importToDate, string siteId, int importType, int status, int userid)
        {
            string query = "";
            string filter = "";
            if (!string.IsNullOrEmpty(siteId) && siteId != "All")
            {
                filter += " and ib.site_id IN(" + siteId + ")";
            }
            if (status != -1)
            {
                filter += " and ib.is_approved  =" + status;
            }
           /* if (userid != 0)
            {
                filter += " and ib.imported_by  =" + userid;
            }*/
            filter += " group by t3.import_batch_id";

            if (importType == 1)
            {
                // query = "select ib.*,sm.site as site_name from import_batches as ib join site_master_solar as sm on sm.site_master_id=ib.site_id join uploading_file_generation as t3 on t3.import_batch_id=ib.import_batch_id where DATE(ib.import_date)>='" + importFromDate + "' and DATE(ib.import_date) <='" + importToDate + "'and `file_name` like '%DGR_Automation%' and ib.import_type=" + importType + "" + filter + "";
                query = "select ib.*,sm.site as site_name from import_batches as ib join site_master as sm on sm.site_master_id=ib.site_id join uploading_file_generation as t3 on t3.import_batch_id=ib.import_batch_id where DATE(ib.import_date)>='" + importFromDate + "' and DATE(ib.import_date) <='" + importToDate + "' and ib.import_file_type=1 and ib.import_type=" + importType + "" + filter + " order by is_approved";

            }
            else if (importType == 2)
            {
                query = "select ib.*,sm.site as site_name from import_batches as ib join site_master_solar as sm on sm.site_master_solar_id = ib.site_id join uploading_file_generation_solar as t3 on t3.import_batch_id = ib.import_batch_id where DATE(ib.import_date) >= '" + importFromDate + "' and DATE(ib.import_date) <='" + importToDate + "' and ib.import_file_type=1 and ib.import_type =" + importType + "" + filter + " order by is_approved";

               
            }
            List<approvalObject> _approvalObject = new List<approvalObject>();
            _approvalObject = await Context.GetData<approvalObject>(query).ConfigureAwait(false);
            return _approvalObject;

        }
        internal async Task<int> SetApprovalFlagForImportBatches(string dataId, int approvedBy, string approvedByName, int status)
        {
            int finalResult = 0;
            approval_InformationLog("Inside SetApprovalFlagForImportBatches wind function : ");
            string qry = "select t1.*,t2.site,t2.country,t2.state,t3.feeder from uploading_file_generation as t1 left join site_master as t2 on t2.site_master_id=t1.site_id left join location_master as t3 on t3.site_master_id=t1.site_id and t3.status =1  where import_batch_id IN(" + dataId + ")";

            List<WindUploadingFilegeneration2> _importedData = new List<WindUploadingFilegeneration2>();
            try
            {
                _importedData = await Context.GetData<WindUploadingFilegeneration2>(qry).ConfigureAwait(false);
                finalResult = 1;
                string msg = "Select query successfully executed : " +qry + " response : "  + _importedData.Count();
                approval_InformationLog(msg);
            }
            catch (Exception e)
            {
                string msg = "Exception while fetching data from uploading_file_generation and location_master, due to : " + e.ToString();
                approval_ErrorLog(msg);
                return 0;
            }            

            string qry1 = " insert into daily_gen_summary(state, site,site_id, date, wtg, wind_speed, kwh, kwh_afterlineloss, feeder, ma_contractual, ma_actual, iga, ega, ega_b, ega_c, plf,plf_afterlineloss,capacity_kw, grid_hrs, lull_hrs, production_hrs, unschedule_hrs, unschedule_num, schedule_hrs, schedule_num, others, others_num, igbdh, igbdh_num, egbdh, egbdh_num, load_shedding, load_shedding_num, approve_status,import_batch_id) values";
            string values = "";
            int counter = 0;
            string site = "";
            int site_id = 0;
            string date = "";
            int import_batch_id = 0;
            List<CheckUpdateManualBd> _dateSite = new List<CheckUpdateManualBd>();

            foreach (var unit in _importedData)
            {
                if(counter == 0)
                {
                    site = unit.site;
                    site_id = unit.site_id;
                    date = unit.date.ToString("yyyy-MM-dd");
                    import_batch_id = unit.import_batch_id;
                }
                bool recordExists = _dateSite.Any(x => x.site == unit.site && x.site_id == unit.site_id && x.import_batch_id == unit.import_batch_id && x.date == unit.date.ToString("yyyy-MM-dd"));

                if (!recordExists)
                {
                    _dateSite.Add(new CheckUpdateManualBd
                    {
                        site_id = unit.site_id,
                        site = unit.site,
                        date = unit.date.ToString("yyyy-MM-dd"),
                        import_batch_id = unit.import_batch_id,
                    });
                }
                values += "('" + unit.state + "','" + unit.site + "','" + unit.site_id + "','" + unit.date.ToString("yyyy-MM-dd") + "','" + unit.wtg + "','" + unit.wind_speed + "','" + unit.kwh + "','" + unit.kwh_afterlineloss + "','" + unit.feeder + "','" + unit.ma_contractual + "','" + unit.ma_actual + "','" + unit.iga + "','" + unit.ega + "'," + unit.ega_b + ", " + unit.ega_c + ",'" + unit.plf + "','" + unit.plf_afterlineloss + "','" + unit.capacity_kw + "','" + unit.grid_hrs + "','" + unit.lull_hrs + "','" + unit.operating_hrs + "','" + unit.unschedule_hrs + "','" + unit.unschedule_num + "','" + unit.schedule_hrs + "','"+ unit.schedule_num + "','" + unit.others + "','" + unit.others_num + "','" + unit.igbdh + "','" + unit.igbdh_num + "','" + unit.egbdh + "','" + unit.egbdh_num + "','"+ unit.load_shedding + "','" + unit.load_shedding_num + "','1','" + unit.import_batch_id+"'),";

                string msg = "Insert into query " + qry1 + " " + unit.state + "','" + unit.site + "','" + unit.site_id + "','" + unit.date.ToString("yyyy-MM-dd") + "','" + unit.wtg + "','" + unit.wind_speed + "','" + unit.kwh + "','" + unit.kwh_afterlineloss + "','" + unit.feeder + "','" + unit.ma_contractual + "','" + unit.ma_actual + "','" + unit.iga + "','" + unit.ega + "'," + unit.ega_b + ", " + unit.ega_c + ",'" + unit.plf + "','" + unit.plf_afterlineloss + "','" + unit.capacity_kw + "','" + unit.grid_hrs + "','" + unit.lull_hrs + "','" + unit.operating_hrs + "','" + unit.unschedule_hrs + "','" + unit.unschedule_num + "','" + unit.schedule_hrs + "','" + unit.schedule_num + "','" + unit.others + "','" + unit.others_num + "','" + unit.igbdh + "','" + unit.igbdh_num + "','" + unit.egbdh + "','" + unit.egbdh_num + "','" + unit.load_shedding + "','" + unit.load_shedding_num + "','1','" + unit.import_batch_id ;
                approval_InformationLog(msg);
            }

            qry1 += values;
            string qry3 = "delete from daily_gen_summary  where date='"+_importedData[0].date.ToString("yyyy-MM-dd")+ "' and site_id=" + _importedData[0].site_id + " ;";
            try
            {
                approval_InformationLog("Delete query : " + qry3);
                await Context.ExecuteNonQry<int>(qry3).ConfigureAwait(false);
                finalResult = 2;
            }
            catch (Exception ex)
            {
                string msg = "Exception while deleting records from daily_gen_summary " + ex.ToString();
                approval_ErrorLog(msg);
                return 0;
            }
            string temp = qry1.Substring(0, (qry1.Length - 1)) + ";";
            int res = 0;
            try
            {
                res = await Context.ExecuteNonQry<int>(temp).ConfigureAwait(false);
                finalResult = 3;
                approval_InformationLog("Executed insert query. final result : " + finalResult);
            }
            catch(Exception e)
            {
                string msg = "Exception while inserting values into daily_gen_summary table, due to : " + e.ToString();
                approval_ErrorLog(msg);
                return 0;
            }
            if (res > 0)
            {
                string query = "UPDATE `import_batches` SET `approval_date` = NOW(),`approved_by`= " + approvedBy + ",`is_approved`=" + status + ",`approved_by_name`='" + approvedByName + "' WHERE `import_batch_id` IN(" + dataId + ")";
                int Updateres = 0;
                try
                {
                    Updateres = await Context.ExecuteNonQry<int>(query).ConfigureAwait(false);
                    finalResult = 4;
                    approval_InformationLog("Update query : " + query);
                }
                catch(Exception e)
                {
                    string msg = "Exception while updating data in import_batches table, due to : " + e.ToString();
                    approval_ErrorLog(msg);
                    return 0;
                }
            }
            else
            {
                finalResult =  0;
            }

            if(finalResult == 4)
            {
                string updateQry = "UPDATE uploading_file_breakdown SET approve_status = 1 WHERE import_batch_id IN (" + dataId + ")";
                try
                {
                    int updateRes = await Context.ExecuteNonQry<int>(updateQry).ConfigureAwait(false);
                    finalResult = 5;
                    approval_InformationLog("Update query : " + updateQry);
                }
                catch(Exception e)
                {
                    string msg = "Exception while updating uploading_file_breakdown " + e.ToString();
                    approval_ErrorLog(msg);
                    return 0;
                }

            }
            if(finalResult == 5)
            {
                //function call for check and update Manual breakdowns.
                int updateres = await CheckAndUpdateManualBd(_dateSite, approvedBy, approvedByName, status);
                if (updateres == 1)
                {
                    finalResult = 7;
                }else if(updateres == 0)
                {
                    string msg = "Error while updating manual bd " + _dateSite;
                    approval_ErrorLog(msg);
                }
            }

            //DGR_v3 Email_report changes
            MailSettings _settings = new MailSettings();
            var MyConfig = new ConfigurationBuilder().AddJsonFile("appsettings.json").Build();
            _settings.Mail = MyConfig.GetValue<string>("MailSettings:Mail");
            //_settings.Mail = "kasrsanket@gmail.com";
            //_settings.DisplayName = "Sanket Kar";
            _settings.DisplayName = MyConfig.GetValue<string>("MailSettings:DisplayName");
            //_settings.Password = "lozirdytywjlvcxd";
            _settings.Password = MyConfig.GetValue<string>("MailSettings:Password");
            //_settings.Host = "smtp.gmail.com";
            _settings.Host = MyConfig.GetValue<string>("MailSettings:Host");
            //_settings.Port = 587;
            _settings.Port = MyConfig.GetValue<int>("MailSettings:Port");

            string Msg = "Weekly PR Report Generated";
            // private MailServiceBS mailService;
            List<string> AddToWind = new List<string>();
            List<string> AddCcWind = new List<string>();

            //List<string> AddCc = new List<string>();
            MailRequest request = new MailRequest();

            try
            {
                string query1 = $"select site_id as id , site as name , STR_TO_DATE(data_date, '%Y-%m-%d') AS data_date, useremail from import_batches left join site_master on\r\n site_master.site_master_id = import_batches.site_id left join login on login.login_id = import_batches.imported_by where `import_batch_id` IN ({dataId})";

                List<SiteList> sitelist = await Context.GetData<SiteList>(query1).ConfigureAwait(false);

                if (status == 1)
                {
                    foreach (var sites in sitelist)
                    {
                        string qryAdmin = $"SELECT useremail FROM user_access left join login on login.login_id = user_access.login_id and user_role = 'Admin' where site_type = 1 and identity = {sites.id}  AND login.active_user = 1 ;";
                        try
                        {
                            AddToWind.Add(sites.useremail);

                            List<UserLogin> data3 = await Context.GetData<UserLogin>(qryAdmin).ConfigureAwait(false);
                            foreach (var item in data3)
                            {
                                AddCcWind.Add(item.useremail);
                            }
                        }
                        catch (Exception e)
                        {
                            string msg = e.ToString();
                        }
                        string dataDate = sites.data_date.ToString("dd-MM-yyyy");

                        string tb = "<p style='text-align: left;'>Dear User,<br>";
                        tb += $"<br>DGR Data Approved Successfully for {sites.data_date.ToString("dd-MMM-yyyy")} .<p>";
                        tb += "<br><br>";
                        tb += "<p>Thanks and Regards,<br>";
                        tb += "O&M - Team</p>";
                        tb += "<br>";
                        tb += "<p>This is a system generated email. Please Do Not Reply.</p>";


                        request.ToEmail = AddToWind;
                        request.CcEmail = AddCcWind;
                        request.Subject = $"DGR Data Approved Successfully {dataDate} - {sites.name}";
                        request.Body = tb;

                        try
                        {
                            var res2 = await MailService.SendEmailAsync(request, _settings, 1);
                            //PPT_InformationLog("From DGR Repository : Inside dgrUploadingReminder function for reminder Mail : SendEmailAsync function completed");
                        }
                        catch (Exception e)
                        {
                            string msg = e.Message;
                            PPT_ErrorLog("From DGR Repository : Inside SetApprovalFlagForImportBatches function for reminder Mail :  SendEmailAsync function failed exception :" + e.Message);
                        }
                    }

                }
            }
            catch
            {

            }
            approval_InformationLog("At the end of function finalResult : " + finalResult);
            return finalResult;
        }
        internal async Task<int> SetRejectFlagForImportBatches(string dataId, int rejectedBy, string rejectByName, int status)
        {

            int finalResult = 0;
            string deleteqry = "delete from upload_status  where import_batch_id IN (" + dataId + ")";
            await Context.ExecuteNonQry<int>(deleteqry).ConfigureAwait(false);
            string query = "UPDATE `import_batches` SET `rejected_date` = NOW(),`rejected_by`= " + rejectedBy + ",`is_approved`=" + status + ",`rejected_by_name`='" + rejectByName + "' WHERE `import_batch_id` IN(" + dataId + ")";
            string functionName = "SetRejectFlagForImportBatches";
            try
            {
                int updateBatchRes = await Context.ExecuteNonQry<int>(query).ConfigureAwait(false);
                finalResult = 1;
            }
            catch(Exception e)
            {
                string msg = "Exception while updating import_batches, due to : " + e.ToString();
                //API_ErrorLog(msg);
                LogError(0, 2, 5, functionName, msg, backend);
                return finalResult;
            }
            if(finalResult == 1)
            {
                string updateQry = "UPDATE uploading_file_breakdown SET approve_status =" + status + " WHERE import_batch_id IN (" + dataId + ")";
                try
                {
                    int updateRes = await Context.ExecuteNonQry<int>(updateQry).ConfigureAwait(false);
                    finalResult = 2;
                }
                catch (Exception e)
                {
                    string msg = "Exception while updating uploading_file_breakdown " + e.ToString();
                    //API_ErrorLog(msg);
                    LogError(0, 2, 5, functionName, msg, backend);
                    return finalResult;
                }
            }
			
			//DGR_v3 Email_report changes
            try
            {

                MailSettings _settings = new MailSettings();
                var MyConfig = new ConfigurationBuilder().AddJsonFile("appsettings.json").Build();
                _settings.Mail = MyConfig.GetValue<string>("MailSettings:Mail");
                //_settings.Mail = "kasrsanket@gmail.com";
                //_settings.DisplayName = "Sanket Kar";
                _settings.DisplayName = MyConfig.GetValue<string>("MailSettings:DisplayName");
                //_settings.Password = "lozirdytywjlvcxd";
                _settings.Password = MyConfig.GetValue<string>("MailSettings:Password");
                //_settings.Host = "smtp.gmail.com";
                _settings.Host = MyConfig.GetValue<string>("MailSettings:Host");
                //_settings.Port = 587;
                _settings.Port = MyConfig.GetValue<int>("MailSettings:Port");




                string Msg = "Weekly PR Report Generated";
                // private MailServiceBS mailService;
                List<string> AddTo = new List<string>();
                List<string> AddCc = new List<string>();

                //List<string> AddCc = new List<string>();
                MailRequest request = new MailRequest();

                string query1 = $"select site_id as id , site as name , STR_TO_DATE(data_date, '%Y-%m-%d') AS data_date,  useremail from import_batches left join site_master on\r\n site_master.site_master_id = import_batches.site_id left join login on login.login_id = import_batches.imported_by where `import_batch_id` IN ({dataId})";

                List<SiteList> sitelist = await Context.GetData<SiteList>(query1).ConfigureAwait(false);

                if (finalResult > 0)
                {
                    foreach (var sites in sitelist)
                    {

                        string qryAdmin = $"SELECT useremail FROM user_access left join login on login.login_id = user_access.login_id and user_role = 'Admin' where site_type = 1 and identity = {sites.id}  AND login.active_user = 1;";

                        try
                        {
                            AddTo.Add(sites.useremail);

                            List<UserLogin> data3 = await Context.GetData<UserLogin>(qryAdmin).ConfigureAwait(false);
                            foreach (var item in data3)
                            {
                                AddCc.Add(item.useremail);
                            }
                        }
                        catch (Exception e)
                        {
                            string msg = e.ToString();
                        }

                        string dataDate = sites.data_date.ToString("dd-MM-yyyy");


                        string tb = "<p style='text-align: left;'>Dear User,<br>";
                        tb += $"<br>DGR Data Rejected by Admin for {sites.data_date.ToString("dd-MMM-yyyy")} .<p>";
                        tb += "<br><br>";
                        tb += "<p>Thanks and Regards,<br>";
                        tb += "O&M - Team</p>";
                        tb += "<br>";
                        tb += "<p>This is a system generated email. Please Do Not Reply.</p>";

                        request.ToEmail = AddTo;
                        request.CcEmail = AddCc;
                        request.Subject = $"DGR Data Rejected {dataDate} - {sites.name}";
                        request.Body = tb;

                        try
                        {
                            var res2 = await MailService.SendEmailAsync(request, _settings, 1);
                            //PPT_InformationLog("From DGR Repository : Inside dgrUploadingReminder function for reminder Mail : SendEmailAsync function completed");

                        }
                        catch (Exception e)
                        {
                            string msg = e.Message;
                            PPT_ErrorLog("From DGR Repository : Inside SetRejectFlagForImportBatches function for reminder Mail :  SendEmailAsync function failed exception :" + e.Message);

                        }
                    }

                }
            }
            catch
            {

            }
            return finalResult;
           
        }
        internal async Task<int> SetSolarApprovalFlagForImportBatches(string dataId, int approvedBy, string approvedByName, int status)
        {
            string functionName = "SetSolarApprovalFlagForImportBatches";
            string info = " Inside SetSolarApprovalFlagForImportBatches function. Code Line No. " + new StackTrace(true).GetFrame(0).GetFileLineNumber() + "";
            //API_InformationLog(info);
            LogInfo(0, 1, 5, functionName, info, backend);
            

            int finalResult = 0;
            approval_InformationLog("Inside SetSolarApprovalFlagForImportBatches function.");

            string qry = "select t1.*,t2.site,t2.country,t2.state from uploading_file_generation_solar as t1 left join site_master_solar as t2 on t2.site_master_solar_id=t1.site_id left join location_master_solar as t3 on t3.site_id=t1.site_id and t3.status = 1 where import_batch_id IN(" + dataId + ")";

            List<SolarUploadingFileGeneration2> _importedData = new List<SolarUploadingFileGeneration2>();
            info = " SetSolarApprovalFlagForImportBatches function : Select Query: " + qry + "  Code Line No. " + new StackTrace(true).GetFrame(0).GetFileLineNumber() + "";
            //API_InformationLog(info);
            LogInfo(0, 1, 5, functionName, info, backend);
            try
            {
                _importedData = await Context.GetData<SolarUploadingFileGeneration2>(qry).ConfigureAwait(false);
                finalResult = 1;
                approval_InformationLog("Select Query : " + qry);

            }
            catch (Exception e)
            {
                string msg = "Exception while fetching data from uploading_file_generation_solar and location_master_solar, due to : " + e.ToString();
                approval_ErrorLog(msg);
                LogError(0, 1, 5, functionName, msg, backend);
                info = " SetSolarApprovalFlagForImportBatches function : " + msg + "  Code Line No. " + new StackTrace(true).GetFrame(0).GetFileLineNumber() + "";
                //API_InformationLog(info);
                LogInfo(0, 1, 5, functionName, info, backend);
                return 0;
            }

            string qry1 = " insert into daily_gen_summary_solar ( state, site, site_id, date, location_name, ghi, poa, expected_kwh, inv_kwh, plant_kwh, inv_pr, plant_pr, ma, iga, ega, ega_b, ega_c, inv_plf_ac, inv_plf_dc, plant_plf_ac, plant_plf_dc, pi, prod_hrs, lull_hrs_bd, usmh_bs, smh_bd, oh_bd, igbdh_bd, egbdh_bd, load_shedding_bd, total_bd_hrs, usmh, smh, oh, igbdh, egbdh, load_shedding, total_losses,	 approve_status, inv_kwh_afterloss, plant_kwh_afterloss, inv_plf_afterloss, plant_plf_afterloss, import_batch_id ) values";
            string values = "";
            List<SolarImportSiteDate> _dateSite = new List<SolarImportSiteDate>();

            foreach (var unit in _importedData)
            {
                bool recordExists = _dateSite.Any(x => x.site == unit.site && x.site_id == unit.site_id && x.date == unit.date.ToString("yyyy-MM-dd"));
                string allSite = "";
                string allSiteId = "";
                string allDate = "";

                if (!recordExists)
                {
                    allSite += unit.site_id;
                    allSiteId += unit.site;
                    allDate += unit.date.ToString("yyyy-MM-dd");
                    _dateSite.Add(new SolarImportSiteDate
                    {
                        site_id = unit.site_id,
                        site = unit.site,
                        date = unit.date.ToString("yyyy-MM-dd"),
                    });
                }

                values += "('" + unit.state + "','" + unit.site + "','" + unit.site_id + "','" + unit.date.ToString("yyyy-MM-dd") + "','" + unit.inverter + "','" + unit.ghi + "','" + unit.poa + "','" + unit.expected_kwh + "','" + unit.inv_act + "','" + unit.plant_act + "','" + unit.inv_pr + "','" + unit.plant_pr + "','" + unit.ma + "','" + unit.iga + "','" + unit.ega + "','" + unit.ega_b + "','" + unit.ega_c + "','" + unit.inv_plf_ac+ "','" + unit.inv_plf_dc + "','" + unit.plant_plf_ac + "','" + unit.plant_plf_dc + "','" + unit.pi + "','" + unit.prod_hrs + "','" + unit.lull_hrs_bd + "','" + unit.usmh_bd + "','" + unit.smh_bd + "','" + unit.oh_bd+ "','" + unit.igbdh_bd + "','" + unit.egbdh_bd + "','" + unit.load_shedding_bd + "','" + unit.total_bd_hrs + "','" + unit.usmh + "','" + unit.smh + "','" + unit.oh + "','" + unit.igbdh + "','" + unit.egbdh + "','" + unit.load_shedding + "','" + unit.total_losses + "','1','" + unit.inv_act_afterloss + "','" + unit.plant_act_afterloss + "','" + unit.inv_plf_afterloss + "','" + unit.plant_plf_afterloss + "','"+unit.import_batch_id+"'),";
            }

            qry1 += values;
            string qry3 = "delete from daily_gen_summary_solar  where date='" + _importedData[0].date.ToString("yyyy-MM-dd") + "' and site_id=" + _importedData[0].site_id + " ;";

            try
            {
                info = " SetSolarApprovalFlagForImportBatches function : Delete query: " + qry3 + "  Code Line No. " + new StackTrace(true).GetFrame(0).GetFileLineNumber() + "";
                //API_InformationLog(info);
                LogInfo(0, 1, 5, functionName, info, backend);
                await Context.ExecuteNonQry<int>(qry3).ConfigureAwait(false);
                LogInfo(0, 1, 5, functionName, info, backend);
                finalResult = 2;
                approval_InformationLog("Delete query : " + qry3);
                

            }
            catch (Exception ex)
            {
                string msg = "Exception while deleting records from daily_gem_summary_solar table, due to : " + ex.ToString();
                approval_ErrorLog(msg);
                LogError(0, 1, 5, functionName, msg, backend);
                info = " SetSolarApprovalFlagForImportBatches function : " + msg + "  Code Line No. " + new StackTrace(true).GetFrame(0).GetFileLineNumber() + "";
                //API_InformationLog(info);
                LogInfo(0, 1, 5, functionName, info, backend);

                return 0;
            }

            int res = 0;
            try
            {
                info = " SetSolarApprovalFlagForImportBatches function : Insert query: " + qry1 + "  Code Line No. " + new StackTrace(true).GetFrame(0).GetFileLineNumber() + "";
                //API_InformationLog(info);
                LogInfo(0, 1, 5, functionName, info, backend);
                res = await Context.ExecuteNonQry<int>(qry1.Substring(0, (qry1.Length - 1)) + ";").ConfigureAwait(false);
                finalResult = 3;
                approval_InformationLog("Insert query : " + qry1.Substring(0, (qry1.Length - 1)) + ";" );

            }
            catch(Exception e)
            {
                string msg = "Exception while inserting values into table daily_gen_summary_solar, due to : " + e.ToString();
                approval_ErrorLog(msg);
                LogError(0, 1, 5, functionName, msg, backend);
                info = " SetSolarApprovalFlagForImportBatches function : " + msg + "  Code Line No. " + new StackTrace(true).GetFrame(0).GetFileLineNumber() + "";
                //API_InformationLog(info);
                LogInfo(0, 1, 5, functionName, info, backend);

                return 0;
            }
            if (res > 0)
            {
                string query = "UPDATE `import_batches` SET `approval_date` = NOW(),`approved_by`= " + approvedBy + ",`is_approved`=" + status + ",`approved_by_name`='" + approvedByName + "' WHERE `import_batch_id` IN(" + dataId + ")";
                string uploadStatusQry = $"UPDATE upload_status SET approve_count = approve_count+1, approved_by={approvedBy} WHERE import_batch_id IN({dataId})";
                int updateBatchRes = 0;
                try
                {
                    info = " SetSolarApprovalFlagForImportBatches function : Update query: " + query + "  Code Line No. " + new StackTrace(true).GetFrame(0).GetFileLineNumber() + "";
                    //API_InformationLog(info);
                    LogInfo(0, 1, 5, functionName, info, backend);
                    updateBatchRes = await Context.ExecuteNonQry<int>(query).ConfigureAwait(false);
                    finalResult = 4;
                    approval_InformationLog("Update query : " + query);
                    //DGR_v3
                    //Heatmap
                    int updateUploadStatus = await Context.ExecuteNonQry<int>(uploadStatusQry).ConfigureAwait(false);
                    finalResult = 5;
                    int returnRes5 = 0;
                    List<SolarUploadingFileGeneration3> approvalList = new List<SolarUploadingFileGeneration3>();
                    string qry7 = "SELECT gen.import_batch_id, COUNT(*) AS gen_count, t1.pyro1_count, t2.pyro15_count FROM daily_gen_summary_solar AS gen LEFT JOIN (SELECT COUNT(*) AS pyro1_count, import_batch_id FROM uploading_pyranometer_1_min_solar WHERE import_batch_id IN(" + dataId + ") GROUP BY import_batch_id) AS t1 ON t1.import_batch_id = gen.import_batch_id LEFT JOIN (SELECT COUNT(*) AS pyro15_count, import_batch_id FROM uploading_pyranometer_15_min_solar WHERE import_batch_id IN(" + dataId + ") GROUP BY import_batch_id) AS t2 ON t2.import_batch_id = gen.import_batch_id WHERE gen.import_batch_id IN(" + dataId + ") GROUP BY import_batch_id";
                    // approvalList = await Context.GetData<SolarUploadingFileGeneration3>(qry7).ConfigureAwait(false);
                    try
                    {

                        approvalList = await Context.GetData<SolarUploadingFileGeneration3>(qry7).ConfigureAwait(false);
                        returnRes5 = await Upload_StatusOperationSolar(approvalList, approvedBy, approvedByName, status, 2);
                    }
                    catch (Exception e)
                    {
                        string msg = "Exception while updating values in import_batches table, due to : " + e.ToString();
                        return 0;
                    }
                }
                catch(Exception e)
                {
                    string msg = "Exception while updating values in import_batches table, due to : " + e.ToString();
                    approval_ErrorLog(msg);
                    LogError(0, 1, 5, functionName, msg, backend);
                    info = " SetSolarApprovalFlagForImportBatches function : " + msg + "  Code Line No. " + new StackTrace(true).GetFrame(0).GetFileLineNumber() + "";
                    //API_InformationLog(info);
                    LogInfo(0, 1, 5, functionName, info, backend);

                    return 0;
                }
            }
            else
            {
                finalResult = 0;
            }
            if(finalResult == 4)
            {
                string updateBDQry = "UPDATE uploading_file_breakdown_solar SET approve_status = 1 WHERE import_batch_id IN (" + dataId + ")";
                try
                {
                    info = " SetSolarApprovalFlagForImportBatches function : Update query: " + updateBDQry + "  Code Line No. " + new StackTrace(true).GetFrame(0).GetFileLineNumber() + "";
                    //API_InformationLog(info);
                    LogInfo(0, 1, 5, functionName, info, backend);
                    int updateBDRes = await Context.ExecuteNonQry<int>(updateBDQry).ConfigureAwait(false);
                    finalResult = 5;
                    approval_InformationLog("Update Query : " + updateBDQry);
                }
                catch(Exception e)
                {
                    string msg = "Exception while updating uploading_file_breakdown_solar approved status, due to : " + e.ToString();
                    approval_ErrorLog(msg);
                    LogError(0, 1, 5, functionName, msg, backend);
                    info = " SetSolarApprovalFlagForImportBatches function : " + msg + "  Code Line No. " + new StackTrace(true).GetFrame(0).GetFileLineNumber() + "";
                    //API_InformationLog(info);
                    LogInfo(0, 1, 5, functionName, info, backend);
                    return 0;
                }
            }

            approval_InformationLog("At the end of function finaResult : " + finalResult);
            info = " SetSolarApprovalFlagForImportBatches function : At the end of function finaResult : " + finalResult + " Code Line No. " + new StackTrace(true).GetFrame(0).GetFileLineNumber() + "";
            //API_InformationLog(info);
            LogInfo(0, 1, 5, functionName, info, backend);
            if (finalResult != 0 || finalResult > 0)
            {
                int returnRes = 0;
                try
                {
                    //returnRes = await Upload_StatusOperation(dataId, approvedBy, approvedByName, status, 2);
                    foreach (var uni in _dateSite)
                    {
                        returnRes = await CalculateDailyExpectedSolar(uni.site_id.ToString(), uni.date, uni.date);
                    }
                }
                catch (Exception e)
                {
                    string msg = "Exception in executing UploadStatusOperations function, due to : " + e.ToString();
                    await LogError(0, 1, 5, functionName, msg, backend);
                    return 0;
                }
            }
            //
            MailSettings _settings = new MailSettings();
            var MyConfig = new ConfigurationBuilder().AddJsonFile("appsettings.json").Build();
            _settings.Mail = MyConfig.GetValue<string>("MailSettings:Mail");
            //_settings.Mail = "kasrsanket@gmail.com";
            //_settings.DisplayName = "Sanket Kar";
            _settings.DisplayName = MyConfig.GetValue<string>("MailSettings:DisplayName");
            //_settings.Password = "lozirdytywjlvcxd";
            _settings.Password = MyConfig.GetValue<string>("MailSettings:Password");
            //_settings.Host = "smtp.gmail.com";
            _settings.Host = MyConfig.GetValue<string>("MailSettings:Host");
            //_settings.Port = 587;
            _settings.Port = MyConfig.GetValue<int>("MailSettings:Port");

            // private MailServiceBS mailService;
            List<string> AddTo = new List<string>();
            List<string> AddCc = new List<string>();

            //List<string> AddCc = new List<string>();
            MailRequest request = new MailRequest();

            try
            {
                string query1 = $"select site_id as id , site as name , STR_TO_DATE(data_date, '%Y-%m-%d') AS data_date, useremail from import_batches left join site_master_solar on\r\n site_master_solar.site_master_solar_id = import_batches.site_id left join login on login.login_id = import_batches.imported_by where `import_batch_id` IN ({dataId})";

                List<SiteList> sitelist = await Context.GetData<SiteList>(query1).ConfigureAwait(false);
                if (finalResult > 0)
                {
                    foreach (var sites in sitelist)
                    {
                        string qryAdmin = $"SELECT useremail FROM user_access left join login on login.login_id = user_access.login_id and user_role = 'Admin' where site_type = 2 and identity = {sites.id}  AND login.active_user = 1;";
                        try
                        {
                            AddTo.Add(sites.useremail);

                            List<UserLogin> data3 = await Context.GetData<UserLogin>(qryAdmin).ConfigureAwait(false);
                            foreach (var item in data3)
                            {
                                AddCc.Add(item.useremail);
                            }
                        }
                        catch (Exception e)
                        {
                            string msg = e.ToString();
                        }
                        string dataDate = sites.data_date.ToString("dd-MM-yyyy");
                        string tb = "<p style='text-align: left;'>Dear User,<br>";
                        tb += $"<br>DGR Data Approved Successfully  for {sites.data_date.ToString("dd-MMM-yyyy")} .</p>";
                        tb += "<br><br>";
                        tb += "<p>Thanks and Regards,<br>";
                        tb += "O&M - Team</p>";
                        tb += "<br>";
                        tb += "<p>This is a system generated email. Please Do Not Reply.</p>";
                        //AddTo = new List<string>();
                        //AddTo.Add("tanvi@softeltech.in");
                        request.ToEmail = AddTo;
                        request.CcEmail = AddCc;
                        request.Subject = $"DGR Data Approved Successfully  {dataDate} - {sites.name}";
                        request.Body = tb;
                        try
                        {
                            var res2 = await MailService.SendEmailAsync(request, _settings, 1);
                            //PPT_InformationLog("From DGR Repository : Inside dgrUploadingReminder function for reminder Mail : SendEmailAsync function completed");
                        }
                        catch (Exception e)
                        {
                            string msg = e.Message;
                            PPT_ErrorLog("From DGR Repository : Inside SetSolarApprovalFlagForImportBatches function for reminder Mail :  SendEmailAsync function failed exception :" + e.Message);
                        }
                    }
                }
            }
            catch
            {

            }
            return finalResult;
        }
        internal async Task<int> SetSolarRejectFlagForImportBatches(string dataId, int rejectedBy, string rejectByName, int status)
        {
            int finalResult = 0;
            string deleteqry = "delete from upload_status  where import_batch_id IN (" + dataId + ")";
            await Context.ExecuteNonQry<int>(deleteqry).ConfigureAwait(false);

            string query = "UPDATE `import_batches` SET `rejected_date` = NOW(),`rejected_by`= " + rejectedBy + ",`is_approved`=" + status + ",`rejected_by_name`='" + rejectByName + "' WHERE `import_batch_id` IN(" + dataId + ")";
            string functionName = "SetSolarRejectFlagForImportBatches";
            try
            {
                int updateBatchRes = await Context.ExecuteNonQry<int>(query).ConfigureAwait(false);
                finalResult = 1;
            }
            catch(Exception e)
            {
                string msg = "Exception while updating import_batches for rejecting, due to : " + e.ToString();
                //API_ErrorLog(msg);
                LogError(0, 1, 5, functionName, msg, backend);
                return finalResult;
            }
            if (finalResult == 1)
            {
                string updateQry = "UPDATE uploading_file_breakdown_solar SET approve_status =" + status + " WHERE import_batch_id IN (" + dataId + ")";
                try
                {
                    int updateRes = await Context.ExecuteNonQry<int>(updateQry).ConfigureAwait(false);
                    finalResult = 2;
                    //DGR_v3 Email_report changes
                    try
                    {
                        MailSettings _settings = new MailSettings();
                        var MyConfig = new ConfigurationBuilder().AddJsonFile("appsettings.json").Build();
                        _settings.Mail = MyConfig.GetValue<string>("MailSettings:Mail");
                        //_settings.Mail = "kasrsanket@gmail.com";
                        //_settings.DisplayName = "Sanket Kar";
                        _settings.DisplayName = MyConfig.GetValue<string>("MailSettings:DisplayName");
                        //_settings.Password = "lozirdytywjlvcxd";
                        _settings.Password = MyConfig.GetValue<string>("MailSettings:Password");
                        //_settings.Host = "smtp.gmail.com";
                        _settings.Host = MyConfig.GetValue<string>("MailSettings:Host");
                        //_settings.Port = 587;
                        _settings.Port = MyConfig.GetValue<int>("MailSettings:Port");

                        string Msg = "Weekly PR Report Generated";
                        // private MailServiceBS mailService;
                        List<string> AddTo = new List<string>();
                        List<string> AddCc = new List<string>();

                        //List<string> AddCc = new List<string>();
                        MailRequest request = new MailRequest();

                        string query1 = $"select site_id as id , site as name ,STR_TO_DATE(data_date, '%Y-%m-%d') AS data_date, useremail from import_batches left join site_master_solar on\r\n site_master_solar.site_master_solar_id = import_batches.site_id left join login on login.login_id = import_batches.imported_by where `import_batch_id` IN ({dataId})";

                        List<SiteList> sitelist = await Context.GetData<SiteList>(query1).ConfigureAwait(false);

                        if (finalResult > 0)
                        {
                            foreach (var sites in sitelist)
                            {
                                string qryAdmin = $"SELECT useremail FROM user_access left join login on login.login_id = user_access.login_id and user_role = 'Admin' where site_type = 2 and identity = {sites.id}  AND login.active_user = 1;";
                                try
                                {
                                    AddTo.Add(sites.useremail);

                                    List<UserLogin> data3 = await Context.GetData<UserLogin>(qryAdmin).ConfigureAwait(false);
                                    foreach (var item in data3)
                                    {
                                        AddCc.Add(item.useremail);
                                    }
                                }
                                catch (Exception e)
                                {
                                    string msg = e.ToString();
                                }
                                string dataDate = sites.data_date.ToString("dd-MM-yyyy");

                                string tb = "<p style='text-align: left;'>Dear User,<br>";
                                tb += $"<br>DGR Data Rejected by Admin for {sites.data_date.ToString("dd-MMM-yyyy")}.<p>";
                                tb += "<br><br>";
                                tb += "<p>Thanks and Regards,<br>";
                                tb += "O&M - Team</p>";
                                tb += "<br>";
                                tb += "<p>This is a system generated email. Please Do Not Reply.</p>";
                                //AddTo = new List<string>();
                                //AddTo.Add("tanvi@softeltech.in");
                                request.ToEmail = AddTo;
                                request.CcEmail = AddCc;
                                request.Subject = $"DGR Data Rejected {dataDate} - {sites.name}";
                                request.Body = tb;

                                try
                                {
                                    var res2 = await MailService.SendEmailAsync(request, _settings, 1);
                                    //PPT_InformationLog("From DGR Repository : Inside dgrUploadingReminder function for reminder Mail : SendEmailAsync function completed");
                                }
                                catch (Exception e)
                                {
                                    string msg = e.Message;
                                    PPT_ErrorLog("From DGR Repository : Inside SetApprovalFlagForImportBatches function for reminder Mail :  SendEmailAsync function failed exception :" + e.Message);
                                }
                            }
                        }
                    }
                    catch
                    {

                    }
                }
                catch (Exception e)
                {
                    string msg = "Exception while updating uploading_file_breakdown_solar, due to : " + e.ToString();
                    //API_ErrorLog(msg);
                    LogError(0, 1, 5, functionName, msg, backend);
                    return finalResult;
                }
            }

            try
            {

                MailSettings _settings = new MailSettings();
                var MyConfig = new ConfigurationBuilder().AddJsonFile("appsettings.json").Build();
                _settings.Mail = MyConfig.GetValue<string>("MailSettings:Mail");
                //_settings.Mail = "kasrsanket@gmail.com";
                //_settings.DisplayName = "Sanket Kar";
                _settings.DisplayName = MyConfig.GetValue<string>("MailSettings:DisplayName");
                //_settings.Password = "lozirdytywjlvcxd";
                _settings.Password = MyConfig.GetValue<string>("MailSettings:Password");
                //_settings.Host = "smtp.gmail.com";
                _settings.Host = MyConfig.GetValue<string>("MailSettings:Host");
                //_settings.Port = 587;
                _settings.Port = MyConfig.GetValue<int>("MailSettings:Port");

                string Msg = "Weekly PR Report Generated";
                // private MailServiceBS mailService;
                List<string> AddTo = new List<string>();
                List<string> AddCc = new List<string>();

                //List<string> AddCc = new List<string>();
                MailRequest request = new MailRequest();

                string query1 = $"select site_id as id , site as name ,STR_TO_DATE(data_date, '%Y-%m-%d') AS data_date, useremail from import_batches left join site_master_solar on\r\n site_master_solar.site_master_solar_id = import_batches.site_id left join login on login.login_id = import_batches.imported_by where `import_batch_id` IN ({dataId})";

                List<SiteList> sitelist = await Context.GetData<SiteList>(query1).ConfigureAwait(false);

                if (finalResult > 0)
                {
                    foreach (var sites in sitelist)
                    {
                        string qryAdmin = $"SELECT useremail FROM user_access left join login on login.login_id = user_access.login_id and user_role = 'Admin' where site_type = 2 and identity = {sites.id}  AND login.active_user = 1;";
                        try
                        {
                            AddTo.Add(sites.useremail);
                            List<UserLogin> data3 = await Context.GetData<UserLogin>(qryAdmin).ConfigureAwait(false);
                            foreach (var item in data3)
                            {
                                AddCc.Add(item.useremail);
                            }
                        }
                        catch (Exception e)
                        {
                            string msg = e.ToString();
                        }

                        string dataDate = sites.data_date.ToString("dd-MM-yyyy");

                        string tb = "<p style='text-align: left;'>Dear User,<br>";
                        //tb += $"DGR Data Rejected for {sites.data_date.ToString("dd-MMM-yyyy")} .<p>";
                        tb += $"<br>DGR Data Rejected by Admin for {sites.data_date.ToString("dd-MMM-yyyy")}.<p>";
                        tb += "<br><br>";
                        tb += "<p>Thanks and Regards,<br>";
                        tb += "O&M - Team</p>";
                        tb += "<br>";
                        tb += "<p>This is a system generated email. Please Do Not Reply.</p>";
                        request.ToEmail = AddTo;
                        request.CcEmail = AddCc;
                        request.Subject = $"DGR Data Rejected {dataDate} - {sites.name}";
                        request.Body = tb;

                        try
                        {
                            var res2 = await MailService.SendEmailAsync(request, _settings, 1);
                            //PPT_InformationLog("From DGR Repository : Inside dgrUploadingReminder function for reminder Mail : SendEmailAsync function completed");
                        }
                        catch (Exception e)
                        {
                            string msg = e.Message;
                            PPT_ErrorLog("From DGR Repository : Inside SetApprovalFlagForImportBatches function for reminder Mail :  SendEmailAsync function failed exception :" + e.Message);
                        }
                    }

                }
            }
            catch
            {

            }
            return finalResult;
           
        }
        public async Task<List<CountryList>> GetCountryData()
        {

            string query = "SELECT country FROM `site_master` group by country";
            List<CountryList> _country = new List<CountryList>();
            _country = await Context.GetData<CountryList>(query).ConfigureAwait(false);
            return _country;

        }
        public async Task<List<StateList>> GetStateData(string country,string site)
        {
            string filter = "";
            if (!string.IsNullOrEmpty(site))
            {
                filter += " and site_master_id IN(" + site + ") ";
            }
            string query = "SELECT state FROM `site_master` where country='" + country + "'"+ filter + " group by state";
            List<StateList> _state = new List<StateList>();
            _state = await Context.GetData<StateList>(query).ConfigureAwait(false);
            return _state;

        }
        public async Task<List<StateList>> GetStateDataSolar(string country,string site)
        {
            string filter = "";
            if (!string.IsNullOrEmpty(site))
            {
                filter += " and site_master_solar_id IN(" + site + ") ";
            }
            string query = "SELECT state FROM `site_master_solar` where country='" + country + "' "+ filter + " group by state";
            List<StateList> _state = new List<StateList>();
            _state = await Context.GetData<StateList>(query).ConfigureAwait(false);
            return _state;

        }
        public async Task<List<SPVList>> GetSPVData(string state,string site)
        {
            string filter= "";
            string filterState = "";
            string filterSite = "";
            if (!string.IsNullOrEmpty(state))
            {
                filterState += " state in (" + state + ")";
            }
            
            if (!string.IsNullOrEmpty(site))
            {
                filterSite += " site_master_id in (" + site + ")";
            }
            if(filterSite.Length > 0 || filterState.Length > 0)
            {
                filter = " where "+ filterState;
                if (filterState.Length > 0)
                {
                    if (filterSite.Length > 0)
                    {
                        filter += " and ";
                    }
                }
                filter += filterSite;
            }
            string query = "SELECT spv FROM `site_master` " + filter + " group by spv order by spv";
            List<SPVList> _spvlist = new List<SPVList>();
            _spvlist = await Context.GetData<SPVList>(query).ConfigureAwait(false);
            return _spvlist;

        }
        public async Task<List<SPVList>> GetSPVDataSolar(string state,string site)
        {
            string filter = "";
            string filterState = "";
            string filterSite = "";
            if (!string.IsNullOrEmpty(state))
            {
                filterState += " state in (" + state + ")";
            }

            if (!string.IsNullOrEmpty(site))
            {
                filterSite += " site_master_solar_id in (" + site + ")";
            }
            if (filterSite.Length > 0 || filterState.Length > 0)
            {
                filter = " where " + filterState;
                if (filterState.Length > 0)
                {
                    if (filterSite.Length > 0)
                    {
                        filter += " and ";
                    }
                }
                filter += filterSite;
            }
            string query = "SELECT spv FROM `site_master_solar` " + filter + " group by spv order by spv";
            List<SPVList> _spvlist = new List<SPVList>();
            _spvlist = await Context.GetData<SPVList>(query).ConfigureAwait(false);
            return _spvlist;

        }
        public async Task<List<WindSiteMaster>> GetSiteData(string state, string spv, string site)
        {
            string filter = "";
            int counter = 0;
            if (!string.IsNullOrEmpty(site) || !string.IsNullOrEmpty(state) || !string.IsNullOrEmpty(spv))
            {
                filter += " where ";
            }
            if (!string.IsNullOrEmpty(site))
            {
                filter += " site_master_id IN(" + site + ")";
                counter = 1;
            }

            if (!string.IsNullOrEmpty(state) && state != "All")
            {
                if(counter == 1)
                {
                    filter += " AND ";
                }

                string[] siteSplit = state.Split(",");
                if (siteSplit.Length > 0)
                {
                    string statenames = "";
                    for (int i = 0; i < siteSplit.Length; i++)
                    {
                        if (!string.IsNullOrEmpty(siteSplit[i]))
                        {
                            statenames += "'" + siteSplit[i] + "',";
                        }
                    }
                    statenames = statenames.TrimEnd(',');
                    //filter += " and site in(" + sitesnames + ")";

                    filter += " state IN(" + statenames + ")";
                    counter = 1;
                }

            }
            if (!string.IsNullOrEmpty(spv) && spv != "All")
            {
                if (counter == 1)
                {
                    filter += " AND ";
                }

                string[] spvSplit = spv.Split(",");
                if (spvSplit.Length > 0)
                {
                    string spvnames = "";
                    for (int i = 0; i < spvSplit.Length; i++)
                    {
                        if (!string.IsNullOrEmpty(spvSplit[i]))
                        {
                            spvnames += "'" + spvSplit[i] + "',";
                        }
                    }
                    spvnames = spvnames.TrimEnd(',');
                    //filter += " and site in(" + sitesnames + ")";

                    filter += " spv IN(" + spvnames + ")";
                    //filter += " where state='" + state + "' and spv='" + spv + "'";
                }

            }
            string query = "SELECT * FROM `site_master`" + filter + "ORDER BY `site`";
            List<WindSiteMaster> _sitelist = new List<WindSiteMaster>();
            _sitelist = await Context.GetData<WindSiteMaster>(query).ConfigureAwait(false);
            return _sitelist;


        }
        public async Task<List<SolarSiteMaster>> GetSiteDataSolar(string state, string spv, string site)
        {
            string filter = "";
            int chkfilter = 0;
            if (!string.IsNullOrEmpty(site) || !string.IsNullOrEmpty(state) || !string.IsNullOrEmpty(spv))
            {
                filter += " where ";
            }
            if (!string.IsNullOrEmpty(site))
            {
                filter += " site_master_solar_id IN(" + site + ")";
                chkfilter = 1;
            }

            if (!string.IsNullOrEmpty(state) && state != "All")
            {
                if (chkfilter == 1) filter += " and ";
                string[] siteSplit = state.Split(",");
                if (siteSplit.Length > 0)
                {
                    string statenames = "";
                    for (int i = 0; i < siteSplit.Length; i++)
                    {
                        if (!string.IsNullOrEmpty(siteSplit[i]))
                        {
                            statenames += "'" + siteSplit[i] + "',";
                        }
                    }
                    statenames = statenames.TrimEnd(',');
                    //filter += " and site in(" + sitesnames + ")";

                    filter += " state IN(" + statenames + ")";
                }
                chkfilter = 1;

            }
            if (!string.IsNullOrEmpty(spv) && spv != "All")
            {
                if (chkfilter == 1) filter += " and ";
                string[] spvSplit = spv.Split(",");
                if (spvSplit.Length > 0)
                {
                    string spvnames = "";
                    for (int i = 0; i < spvSplit.Length; i++)
                    {
                        if (!string.IsNullOrEmpty(spvSplit[i]))
                        {
                            spvnames += "'" + spvSplit[i] + "',";
                        }
                    }
                    spvnames = spvnames.TrimEnd(',');
                    //filter += " and site in(" + sitesnames + ")";

                    filter += " spv IN(" + spvnames + ")";
                    //filter += " where state='" + state + "' and spv='" + spv + "'";
                }
                chkfilter = 1;

            }
            string query = "SELECT * FROM `site_master_solar` " + filter + "ORDER BY `site`";
            List<SolarSiteMaster> _sitelist = new List<SolarSiteMaster>();
            _sitelist = await Context.GetData<SolarSiteMaster>(query).ConfigureAwait(false);
            return _sitelist;


        }
        public async Task<List<WindLocationMaster>> GetWTGData(string siteid, string state, string spv)
        {
            string filter = "";
            int chkfilter = 1;
            if (!string.IsNullOrEmpty(siteid))
            {
                siteid = siteid.TrimEnd(',');
                filter += " and t1.site_master_id in (" + siteid + ") ";
                chkfilter = 1;
            }
            if (!string.IsNullOrEmpty(state))
            {
                if (chkfilter == 1)
                    filter += " and ";


                string[] stateSplit = state.Split(",");
                string states = "";
                for (int i = 0; i < stateSplit.Length; i++)
                {
                    if (!string.IsNullOrEmpty(stateSplit[i]))
                    {
                        states += "'" + stateSplit[i] + "',";
                    }
                }
                states = states.TrimEnd(',');
                filter += " t1.state in(" + states + ")";
                chkfilter = 1;
            }
            if (!string.IsNullOrEmpty(spv))
            {
                if (chkfilter == 1)
                    filter += " and ";
                else
                    filter += " where ";

                string[] spvSplit = spv.Split(",");
                string spvs = "";
                for (int i = 0; i < spvSplit.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spvSplit[i]))
                    {
                        spvs += "'" + spvSplit[i] + "',";
                    }
                }
                spvs = spvs.TrimEnd(',');
                filter += "t1.spv in(" + spvs + ")";
            }

            /* if (!string.IsNullOrEmpty(siteid))
             {
                 filter += " and site_master_id in (" + siteid + ") ";
             }*/
            string query = "SELECT t2.location_master_id, t2.site_master_id,t2.site,t2.wtg,t2.wtg_onm,t2.feeder,t2.max_kwh_day FROM `site_master` as t1 left join location_master as t2 on t2.site_master_id = t1.site_master_id where t2.status = 1" + filter;
           // string query = "SELECT * FROM `location_master` where status = 1 " + filter;
            List<WindLocationMaster> _locattionmasterDate = new List<WindLocationMaster>();
            _locattionmasterDate = await Context.GetData<WindLocationMaster>(query).ConfigureAwait(false);
            return _locattionmasterDate;

        }
        public async Task<List<SolarLocationMaster>> GetInvData(string siteid, string state, string spv)
        {
            string filter = "";
            int chkfilter = 1;
            if (!string.IsNullOrEmpty(siteid))
            {
                siteid = siteid.TrimEnd(',');
                filter += " and t2.site_id in(" + siteid + ")";
                chkfilter = 1;
            }
            if (!string.IsNullOrEmpty(state))
            {
                if (chkfilter == 1)
                    filter += " and ";
               

                string[] stateSplit = state.Split(",");
                string states = "";
                for (int i = 0; i < stateSplit.Length; i++)
                {
                    if (!string.IsNullOrEmpty(stateSplit[i]))
                    {
                        states += "'" + stateSplit[i] + "',";
                    }
                }
                states = states.TrimEnd(',');
                filter += " t1.state in(" + states + ")";
                chkfilter = 1;
            }
            if (!string.IsNullOrEmpty(spv))
            {
                if(chkfilter == 1)
                    filter += " and ";
                else
                    filter += " where ";

                string[] spvSplit = spv.Split(",");
                string spvs = "";
                for (int i = 0; i < spvSplit.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spvSplit[i]))
                    {
                        spvs += "'" + spvSplit[i] + "',";
                    }
                }
                spvs = spvs.TrimEnd(',');
                filter += " t1.spv in(" + spvs + ")";
            }
            string query = " SELECT icr_inv FROM site_master_solar as t1 left join location_master_solar as t2 on t1.site_master_solar_id = t2.site_id  where status = 1  " + filter + "  group by icr_inv";
           // string query = "SELECT icr_inv FROM site_master_solar t1 left join location_master_solar on site_id where status = 1 " + filter + "  group by icr_inv";
            List<SolarLocationMaster> _locattionmasterDate = new List<SolarLocationMaster>();
            _locattionmasterDate = await Context.GetData<SolarLocationMaster>(query).ConfigureAwait(false);
            return _locattionmasterDate;

        }
        public async Task<List<WindUploadingFilegeneration1>> GetImportGenData(int importId)
        {
            // string query = "SELECT t1.*,t2.site as site_name FROM `uploading_file_generation` as t1 join site_master as t2 on t2.site_master_id=t1.site_id  where import_batch_id =" + importId + "";
            string query = "SELECT t1.uploading_file_generation_id, t1.site_id, t1.date, t1.wtg, t1.wtg_id, t1.wind_speed, t1.grid_hrs, t1.operating_hrs, t1.lull_hrs, t1.kwh, t1.ma_contractual, t1.ma_actual, t1.iga, t1.ega, t1.ega_b, t1.ega_c, t1.plf,  t1.unschedule_num,  t1.schedule_num,  t1.others_num,  t1.igbdh_num,  t1.egbdh_num,  t1.load_shedding_num, t2.site as site_name FROM `uploading_file_generation` as t1 join site_master as t2 on t2.site_master_id=t1.site_id where import_batch_id =" + importId + "";
            List<WindUploadingFilegeneration1> _importGenData = new List<WindUploadingFilegeneration1>();
            _importGenData = await Context.GetData<WindUploadingFilegeneration1>(query).ConfigureAwait(false);
            return _importGenData;

        }
        public async Task<List<WindUploadingFileBreakDown1>> GetBrekdownImportData(int importId)
        {
            // string query = "SELECT t1.*,t2.site as site_name FROM `uploading_file_generation` as t1 join site_master as t2 on t2.site_master_id=t1.site_id  where import_batch_id =" + importId + "";
            //string query = "SELECT * FROM `uploading_file_breakdown` where import_batch_id =" + importId + "";
            string query = " SELECT t1.site_id,t1.date,t1.wtg,t1.stop_from,t1.stop_to,t1.total_stop,t1.error_description,t1.action_taken,t2.site,t3.bd_type_name FROM `uploading_file_breakdown` as t1 left join site_master as t2 on t2.site_master_id = t1.site_id left join bd_type as t3 on t3.bd_type_id = t1.bd_type_id where import_batch_id = " + importId + "";
            List<WindUploadingFileBreakDown1> _importBreakdownData = new List<WindUploadingFileBreakDown1>();
            _importBreakdownData = await Context.GetData<WindUploadingFileBreakDown1>(query).ConfigureAwait(false);
            return _importBreakdownData;

        }

        public async Task<List<SolarUploadingFileGeneration2>> GetSolarImportGenData(int importId)
        {
            string query = "SELECT t1.*, t2.site FROM `uploading_file_generation_solar` as t1 join site_master_solar as t2 on t2.site_master_solar_id = t1.site_id where import_batch_id =" + importId + "";
           
            List<SolarUploadingFileGeneration2> _importSolarGenData = new List<SolarUploadingFileGeneration2>();
            _importSolarGenData = await Context.GetData<SolarUploadingFileGeneration2>(query).ConfigureAwait(false);
            return _importSolarGenData;

        }
        public async Task<List<SolarUploadingFileBreakDown1>> GetSolarBrekdownImportData(int importId)
        {

            string query = "SELECT t1.*,t3.bd_type_name FROM `uploading_file_breakdown_solar` as t1 left join site_master_solar as t2 on t2.site_master_solar_id = t1.site_id left join bd_type as t3 on t3.bd_type_id = t1.bd_type_id where import_batch_id =" + importId + "";
          //  string query = " SELECT t1.site_id,t1.date,t1.wtg,t1.stop_from,t1.stop_to,t1.total_stop,t1.error_description,t2.site,t3.bd_type_name FROM `uploading_file_breakdown` as t1 left join site_master as t2 on t2.site_master_id = t1.site_id left join bd_type as t3 on t3.bd_type_id = t1.bd_type_id where import_batch_id = " + importId + "";
            List<SolarUploadingFileBreakDown1> _importSolarBreakdownData = new List<SolarUploadingFileBreakDown1>();
            _importSolarBreakdownData = await Context.GetData<SolarUploadingFileBreakDown1>(query).ConfigureAwait(false);
            return _importSolarBreakdownData;

        }
        public async Task<List<SolarUploadingPyranoMeter1Min_1>> GetSolarP1ImportData(int importId)
        {

            //string query = "SELECT t1.*,t3.bd_type_name FROM `uploading_file_breakdown_solar` as t1 left join site_master_solar as t2 on //t2.site_master_solar_id = t1.site_id left join bd_type as t3 on t3.bd_type_id = t1.bd_type_id where import_batch_id =" + importId + "";

            string query = "Select t1.*,t2.site from uploading_pyranometer_1_min_solar as t1 left join `site_master_solar` as t2 on t2.site_master_solar_id = t1.site_id where import_batch_id=" + importId + "";
            List<SolarUploadingPyranoMeter1Min_1> _importSolarP1Data = new List<SolarUploadingPyranoMeter1Min_1>();
            _importSolarP1Data = await Context.GetData<SolarUploadingPyranoMeter1Min_1>(query).ConfigureAwait(false);
            return _importSolarP1Data;

        }
        public async Task<List<SolarUploadingPyranoMeter15Min_1>> GetSolarP15ImportData(int importId)
        {

            //string query = "SELECT t1.*,t3.bd_type_name FROM `uploading_file_breakdown_solar` as t1 left join site_master_solar as t2 on /t2.site_master_solar_id = t1.site_id left join bd_type as t3 on t3.bd_type_id = t1.bd_type_id where import_batch_id =" + importId + "";
            string query = "Select t1.*,t2.site from uploading_pyranometer_15_min_solar as t1 left join `site_master_solar` as t2 on t2.site_master_solar_id = t1.site_id where import_batch_id=" + importId + "";
            List<SolarUploadingPyranoMeter15Min_1> _importSolarP15Data = new List<SolarUploadingPyranoMeter15Min_1>();
            _importSolarP15Data = await Context.GetData<SolarUploadingPyranoMeter15Min_1>(query).ConfigureAwait(false);
            return _importSolarP15Data;

        }
        public async Task<List<WindOpertionalHead>> GetOperationHeadData(string site,string spv)
        {
            string filter = "";
            string filtersite = "";
            if (!string.IsNullOrEmpty(spv) && spv != "All" && string.IsNullOrEmpty(site))
            {

                string[] spspv = spv.Split(",");
                filtersite += "  spv in (";
                string spvs = "";
                for (int i = 0; i < spspv.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spspv[i].ToString()))
                    {
                        spvs += "'" + spspv[i].ToString() + "',";
                    }
                }
                filtersite += spvs.TrimEnd(',') + ")";
                filter += " where " + filtersite;
            }
            if (!string.IsNullOrEmpty(site))
            {
                filter += " where site_master_id IN(" + site + ")";
            }
                string query = "SELECT COUNT(site) as site_count, COUNT(spv) as spv_count, SUM(total_mw) as capacity FROM `site_master`" +filter ;
            List<WindOpertionalHead> _operationalData = new List<WindOpertionalHead>();
            _operationalData = await Context.GetData<WindOpertionalHead>(query).ConfigureAwait(false);
            return _operationalData;

        }
        public async Task<List<SolarOpertionalHead>> GetSolarOperationHeadData(string site,string spv)
        {
            string filtersite = "";
            string spvsiteList = "";
            string filter = "";
            if (!string.IsNullOrEmpty(spv) && spv != "All" && string.IsNullOrEmpty(site))
            {

                string[] spspv = spv.Split(",");
                filtersite += "  spv in (";
                string spvs = "";
                for (int i = 0; i < spspv.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spspv[i].ToString()))
                    {
                        spvs += "'" + spspv[i].ToString() + "',";
                    }
                }
                filtersite += spvs.TrimEnd(',') + ")";

                filter += " where (" + filtersite + ")";
            }
            if (!string.IsNullOrEmpty(site) && string.IsNullOrEmpty(spv))
            {
                filter += " where site_master_solar_id IN(" + site + ")";
            }
            string query = "SELECT COUNT(Site) as site_count,COUNT(spv) as spv_count, SUM(ac_capacity) as capacity FROM `site_master_solar` " + filter;
            List<SolarOpertionalHead> _operationalData = new List<SolarOpertionalHead>();
            _operationalData = await Context.GetData<SolarOpertionalHead>(query).ConfigureAwait(false);
            return _operationalData;

        }
        public async Task<List<SolarOpertionalHead1>> GetTotalMWforDashbord(string w_site, string s_site)
        {
            string filter = "";
            string filter1 = "";
            if (!string.IsNullOrEmpty(w_site))
            {
                filter += " where site_master_id IN(" + w_site + ")";
            }
            string query = "SELECT SUM(total_mw) as wind_total_mw FROM `site_master` " + filter1;
            List<SolarOpertionalHead1> _DashborMWData = new List<SolarOpertionalHead1>();
            _DashborMWData = await Context.GetData<SolarOpertionalHead1>(query).ConfigureAwait(false);
            if (!string.IsNullOrEmpty(s_site))
            {
                filter1 += " where site_master_solar_id IN(" + s_site + ")";
            }
            string query1 = "SELECT SUM(ac_capacity) as solar_total_ac_mw FROM `site_master_solar` " + filter1;
            List<SolarOpertionalHead1> _DashborMWData1 = new List<SolarOpertionalHead1>();
            _DashborMWData1 = await Context.GetData<SolarOpertionalHead1>(query1).ConfigureAwait(false);

            _DashborMWData[0].solar_total_ac_mw = _DashborMWData1[0].solar_total_ac_mw;


            return _DashborMWData;

        }
        internal async Task<int> DeleteWindSite(int siteid)
        {


           string qry1 = "delete from site_master  where site_master_id="+siteid+"";
           string qry2 = "delete from location_master  where site_master_id=" + siteid + "";
           await Context.ExecuteNonQry<int>(qry2).ConfigureAwait(false);
          return await Context.ExecuteNonQry<int>(qry1).ConfigureAwait(false);

        }
        internal async Task<int> DeleteSolarSite(int siteid)
        {


            string qry1 = "delete from site_master_solar  where site_master_solar_id=" + siteid + "";
            string qry2 = "delete from location_master_solar  where site_id=" + siteid + "";
            await Context.ExecuteNonQry<int>(qry2).ConfigureAwait(false);
            return await Context.ExecuteNonQry<int>(qry1).ConfigureAwait(false);

        }
        internal async Task<List<WindUploadingFileBreakDown>> GetWindMajorBreakdown(string fromDate, string toDate,string site,string spv)
        {
            //string qry = "Select * from uploading_file_breakdown";
            string filtersite = "";
            string spvsiteList = "";
            if (!string.IsNullOrEmpty(spv) && spv != "All" && string.IsNullOrEmpty(site))
            {

                string[] spspv = spv.Split(",");
                filtersite += "  spv in (";
                string spvs = "";
                for (int i = 0; i < spspv.Length; i++)
                {
                    if (!string.IsNullOrEmpty(spspv[i].ToString()))
                    {
                        spvs += "'" + spspv[i].ToString() + "',";
                    }
                }
                filtersite += spvs.TrimEnd(',') + ")";

                string masterquery = "SELECT site_master_id FROM `site_master` where " + filtersite;
                List<WindSiteMaster> sitelist = new List<WindSiteMaster>();
                sitelist = await Context.GetData<WindSiteMaster>(masterquery).ConfigureAwait(false);
                for (var i = 0; i < sitelist.Count; i++)
                {
                    spvsiteList += "'" + sitelist[i].site_master_id + "',";
                }
                spvsiteList = spvsiteList.TrimEnd(',');
                //spvsiteList = spvsiteList.Trim('"');
            }

            string filter = "";
            string filter2 = "";
            if (!string.IsNullOrEmpty(site))
            {
                filter += "AND t1.site_id in (" + site + ")";
                filter2 += " site_id in (" + site + ") AND ";// and t1.date >= '" + fromDate + "' and t1.date <= '" + toDate + "'";
            }
            if (!string.IsNullOrEmpty(spv) && string.IsNullOrEmpty(site))
            {
                //filter += " and t1.site_id IN(" + spvsiteList + ") ";
                filter += "AND t1.site_id in (" + spvsiteList + ")";
                filter2 += " site_id in (" + spvsiteList + ") AND ";// and t1.date >= '" + fromDate + "' and t1.date <= '" + toDate + "'";
            }
            filter += " AND t1.date >= '" + fromDate + "' and t1.date <= '" + toDate + "'"; /*group by site_id,bd_type*/
            filter2 += " date >= '" + fromDate + "' and date <= '" + toDate + "'"; /*group by site_id,bd_type*/


            string qry = "SELECT t1.date,t1.site_name,t1.bd_type_id, t1.bd_type , t1.error_description ,t1.action_taken, t1.wtg ,(HOUR(t1.total_stop) + MINUTE(t1.total_stop) / 60 + SECOND(t1.total_stop) / 3600) as total_stop_num  FROM uploading_file_breakdown t1 left join `import_batches` as t2 on t2.import_batch_id = t1.import_batch_id where t2.is_approved = 1 and t1.bd_type_id in (1,2) AND t1.total_stop > '04:00:00'" + filter ;

            string qry2 = "SELECT date,site_id, site_name,bd_type_id, bd_type ,error_description ,action_taken, count(wtg) as wtg_cnt,sum(total_stop) as total_stop_num  FROM (SELECT t1.date,t1.site_id, t1.site_name,t1.bd_type_id, t1.bd_type , t1.error_description ,t1.action_taken, t1.wtg , (HOUR(t1.total_stop) + MINUTE(t1.total_stop) / 60 + SECOND(t1.total_stop) / 3600) as total_stop from uploading_file_breakdown t1 left join `import_batches` as t2 on t2.import_batch_id = t1.import_batch_id where t2.is_approved = 1 and t1.total_stop > '01:00:00' AND NOT t1.bd_type_id in (1, 2))as custom where" + filter2 + " GROUP BY bd_type_id, date, site_name; ";

            List<WindUploadingFileBreakDown> _bdData = new List<WindUploadingFileBreakDown>();
             _bdData = await Context.GetData<WindUploadingFileBreakDown>(qry).ConfigureAwait(false);

            List<WindUploadingFileBreakDown> _bdData2 = new List<WindUploadingFileBreakDown>();
            _bdData2 = await Context.GetData<WindUploadingFileBreakDown>(qry2).ConfigureAwait(false);
           _bdData.AddRange(_bdData2); ;


            return _bdData;
        }
        //#region KPI Calculations
        /// <summary>
        /// This function calculates the KPI of the site on a given date
        /// </summary>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <param name="site"></param>
        /// <returns></returns>
        /// 
        internal async Task<bool> CalculateDailyWindKPI(string fromDate, string toDate, string site)
        {

            string info = ("CalculateDailyWindKPI: site <" + site + "> fromDate <" + fromDate + ">");
            string filter = "";
            string functionName = "CalculateDailyWindKPI";
            bool response = false;
            LogInfo(0, 2, 6, functionName, info, backend);

            TimeSpan Final_USMH_Time = new TimeSpan();
            TimeSpan Final_SMH_Time = new TimeSpan();
            TimeSpan Final_IGBD_Time = new TimeSpan();
            TimeSpan Final_EGBD_Time = new TimeSpan();
            TimeSpan Final_LoadShedding_Time = new TimeSpan();
            TimeSpan Final_LULL_Time = new TimeSpan();
            TimeSpan Final_OthersHour_Time = new TimeSpan();

            string MA_Actual_Formula = "";
            string MA_Contractual_Formula = "";
            string IGA_Formula = "";
            string EGA_Formula = "";
            string sCurrentWTG = "";
            string sLastWTG = "";
            double capacity_mw = 0;
            try
            {
                if (string.IsNullOrEmpty(site) || site == "All")
                {
                    throw new Exception("Invalid site " + site);
                    //return response;
                }

                int site_id = int.Parse(site);

                if (site_id <= 0)
                {
                    throw new Exception("Invalid site " + site);
                    //return response;
                }

                //string qrySiteFormulas = "SELECT * FROM `wind_site_formulas` where site_id = '" + site_id + "'";
                string qrySiteFormulas = "SELECT t1.*,t2.capacity_mw FROM `wind_site_formulas` as t1 left join `site_master` as t2 on t2.site_master_id = t1.site_id where t1.site_id = '" + site_id + "'";
                List<SiteFormulas> _SiteFormulas = await Context.GetData<SiteFormulas>(qrySiteFormulas).ConfigureAwait(false);
                //API_InformationLog("CalculateDailyWindKPI: site <" + site + "> qrySiteFormulas <" + qrySiteFormulas + ">");

                foreach (SiteFormulas SiteFormula in _SiteFormulas)
                {
                    MA_Actual_Formula = SiteFormula.MA_Actual; //(string)reader["MA_Actual"];
                    MA_Contractual_Formula = SiteFormula.MA_Contractual; // (string)reader["MA_Contractual"];
                    IGA_Formula = SiteFormula.IGA; // (string)reader["IGA"];
                    EGA_Formula = SiteFormula.EGA; // (string)reader["EGA"];
                                                   //break;
                    capacity_mw = SiteFormula.capacity_mw;
                }

                //string qryFileBreakdown = "SELECT fd.site_id,fd.bd_type,fd.wtg,bd.bd_type_name, SEC_TO_TIME(SUM(TIME_TO_SEC( fd.`total_stop` ) ) ) AS totalTime FROM `uploading_file_breakdown` as fd join bd_type as bd on bd.bd_type_id=fd.bd_type where site_id = " + site_id + " AND`date` = '" + fromDate + "' group by fd.wtg, fd.bd_type";
                string qry = @"SELECT date,t1.site_id,t1.wtg,t1.bd_type_id,t1.bd_type,SEC_TO_TIME(SUM(TIME_TO_SEC(total_stop)))  AS total_stop FROM uploading_file_breakdown t1 left join location_master t2 on t2.wtg=t1.wtg and t2.status = 1 left join site_master t3 on t3.site_master_id=t2.site_master_id left join bd_type as t4 on t4.bd_type_id=t1.bd_type ";
                //API_InformationLog("CalculateDailyWindKPI: GetBreakdown query<" + qry + ">");
                int iBreakdownCount = 0;
                filter = "";
                int chkfilter = 0;
                filter = "" + site_id;
                if (!string.IsNullOrEmpty(fromDate) && fromDate != "All")
                {
                    //filter += "(date >= '" + fromDate + "'  and date<= '" + toDate + "')";
                    filter += " AND date = '" + fromDate + "'";
                    chkfilter = 1;
                }

                if (!string.IsNullOrEmpty(filter))
                {
                    qry += " where  site_id = " + filter;
                }
                //qry += "  AND t1.wtg = 'BD-25'";
                qry += "  group by t1.wtg, t1.bd_type order by t1.wtg";
                //API_InformationLog("CalculateDailyWindKPI: GetBreakdown query<" + qry + ">");
                List<WindFileBreakdown> _WindFileBreakdown = await Context.GetData<WindFileBreakdown>(qry).ConfigureAwait(false);
                //API_InformationLog("CalculateDailyWindKPI: GetBreakdown data<" + _WindFileBreakdown.ToString() + ">");
                foreach (WindFileBreakdown sBreakdown in _WindFileBreakdown)
                {
                    iBreakdownCount++;
                    DateTime result;
                    TimeSpan Get_Time;
                    int site_id2 = sBreakdown.site_id;
                    sCurrentWTG = sBreakdown.wtg; // (string)reader["wtg"];
                    int bd_type_id = sBreakdown.bd_type_id;// reader["bd_type"];
                    string bd_type_name = sBreakdown.bd_type; // reader["bd_type_name"];
                    var totalTime = sBreakdown.total_stop;// reader["totalTime"];

                    if (iBreakdownCount == 1)
                    {
                        sLastWTG = sCurrentWTG;
                    }
                    if (sCurrentWTG != sLastWTG)
                    {
                        //Update WTG KPIs
                        await CalculateAndUpdateKPIs(site_id, fromDate, sLastWTG, Final_USMH_Time, Final_SMH_Time, Final_IGBD_Time, Final_EGBD_Time, Final_OthersHour_Time, Final_LoadShedding_Time, MA_Actual_Formula, MA_Contractual_Formula, IGA_Formula, EGA_Formula);
                        // CalculateAndUpdatePLFandKWHAfterLineLoss(site_id, fromDate, sLastWTG);
                        Final_USMH_Time = TimeSpan.Zero;
                        Final_SMH_Time = TimeSpan.Zero;
                        Final_IGBD_Time = TimeSpan.Zero;
                        Final_EGBD_Time = TimeSpan.Zero;
                        Final_LoadShedding_Time = TimeSpan.Zero;
                        Final_LULL_Time = TimeSpan.Zero;
                        Final_OthersHour_Time = TimeSpan.Zero;

                        sLastWTG = sCurrentWTG;
                    }
                    //API_InformationLog("CalculateDailyWindKPI: Breakdown Data WTG<" + sCurrentWTG + ">  bd_type <" + bd_type_id + "> <" + sBreakdown.bd_type + ">  totalTime<" + totalTime + ">");
                    switch (bd_type_id)
                    {
                        case 1:                 //if (bd_type_name.Equals("USMH"))            //Pending : optimise it use bd_type id
                            result = Convert.ToDateTime(totalTime.ToString());
                            Final_USMH_Time = result.TimeOfDay;
                            break;

                        case 2:                 //else if (bd_type_name.Equals("SMH"))              
                            result = Convert.ToDateTime(totalTime.ToString());
                            Final_SMH_Time = result.TimeOfDay;
                            break;

                        case 3:                 //else if (bd_type_name.Equals("IGBD"))                
                            result = Convert.ToDateTime(totalTime.ToString());
                            Final_IGBD_Time = result.TimeOfDay;
                            break;

                        case 4:                 //else if (bd_type_name.Equals("EGBD"))                
                            result = Convert.ToDateTime(totalTime.ToString());
                            Final_EGBD_Time = result.TimeOfDay;
                            break;

                        case 5:                 //if (bd_type_name.Equals("Load Shedding"))                
                            result = Convert.ToDateTime(totalTime.ToString());
                            Final_LoadShedding_Time = result.TimeOfDay;
                            break;

                        case 6:                 //if (bd_type_name.Equals("Others Hour"))                
                            result = Convert.ToDateTime(totalTime.ToString());
                            Final_OthersHour_Time = result.TimeOfDay;
                            string info1 = "time_of_day : " + Final_OthersHour_Time + ", total_time : " + totalTime.ToString();
                            LogInfo(0, 2, 6, functionName, info1, backend);
                            break;

                        default:
                            //Pending : error reporting
                            string msg = "Unsupported BD_TYPE " + bd_type_id + " for WTG " + sCurrentWTG + " for date " + fromDate;
                            //API_ErrorLog(msg);
                            LogError(0, 2, 5, functionName, msg, backend);
                            throw new Exception("Unsupported BD_TYPE " + bd_type_id + " For WTG " + sCurrentWTG + " for date " + fromDate);
                            break;
                    }
                }

                //Pending : validation of Total time to be 24
                await CalculateAndUpdateKPIs(site_id, fromDate, sCurrentWTG, Final_USMH_Time, Final_SMH_Time, Final_IGBD_Time, Final_EGBD_Time, Final_OthersHour_Time, Final_LoadShedding_Time, MA_Actual_Formula, MA_Contractual_Formula, IGA_Formula, EGA_Formula);
                await CalculateAndUpdatePLFandKWHAfterLineLoss(site_id, fromDate, toDate, capacity_mw);
            }
            catch (Exception ex)
            {
                response = false;
                string strEx = ex.Message;
                //API_ErrorLog("Exception in CalculateDailyWindKPI function. Reason " + ex.ToString());
                LogError(0, 2, 5, functionName, ex.ToString(), backend);
                throw new Exception(strEx);
            }

            return response;
        }
        /*
         * Import -> Upload_Generation table and upload_breakdown and kpis are calculted in upload_gen table
         * Approval - > data from upload_gen table gets copied to daily summary table
         * 
         * */
        /*
         * When line loss is updated
         * kpis are calculted in gen_summary table
         * */

        public async Task<bool> CalculateAndUpdatePLFandKWHAfterLineLoss(int site_id, string fromDate, string toDate, double capacity_mw)
        {
            //add column called kwh_afterlineloss and plf_afterlineloss in dailygensummary and uploadgentable
            double lineLoss = await GetLineLoss(site_id, fromDate,1);
            bool bIsGenSummary = false;
            string qry = "SELECT * from daily_gen_summary where site_id = " + site_id + " and date>='"+fromDate+"' and date<='"+toDate+"'";
            /*try
            {
                List<DailyGenSummary> checkIfApproved = await Context.GetData<DailyGenSummary>(qry).ConfigureAwait(false);
                if (checkIfApproved.Count > 0)
                    bIsGenSummary = true;
            }
            catch(Exception ex)
            {
                //Pending Error 
            } */


            lineLoss = 1 - (lineLoss / 100);
            return await CalculateAndUpdatePLFandKWHAfterLineLoss2(site_id, fromDate, toDate, lineLoss, bIsGenSummary, capacity_mw);
        }
        public async Task<bool> CalculateAndUpdatePLFandKWHAfterLineLoss2(int site_id, string fromDate, string toDate, double lineloss, bool bIsGenSummary, double capacity_mw)
        {
            //Pending : Add information to log file
            string sLog = "PLF and KWH updated for site id =" + site_id + " fromDate=" + fromDate + " toDate=" + toDate;
            string tableName;
            if (bIsGenSummary)
            {
                tableName = "daily_gen_summary";  //Approved data
            }
            else
            {
                tableName = "uploading_file_generation"; //unapproved data
            }

            //Add capacity_kw in dailygen summary
            //return  await updateTable(site_id, tableName, lineloss, capacity_mw, fromDate, toDate);

            //string myQuery = "Update " + tableName +
            //  " set kwh_afterlineloss = kwh * "+lineloss+", " +
            // " plf = (kwh/"+capacity_mw+"*1000*24), " +
            //"plf_afterlineloss =  ((kwh * "+lineloss+ ")/"+capacity_mw+"*1000*24)" +
            //" where date>='" + fromDate + "' and date<='" + toDate + "' and site_id=" + site_id;

            string myQuery = "Update " + tableName +
                " set kwh_afterlineloss = kwh * " + lineloss + ", " +
                " plf = (kwh/(" + capacity_mw + "*1000*24) * 100), " +
                "plf_afterlineloss =  ((kwh * " + lineloss + ")/(" + capacity_mw + "*1000*24) * 100)" +
                " where date>='" + fromDate + "' and date<='" + toDate + "' and site_id=" + site_id;
            //int result = await Context.ExecuteNonQry<int>(myQuery.Substring(0, (myQuery.Length - 1)) + ";").ConfigureAwait(false);
            int result = await getDB.ExecuteNonQry<int>(myQuery).ConfigureAwait(false);
            if (result > 0)
                return true;
            return false;
        }
        //Refrence 
        /* internal async Task<int> updateTable(int site_id, string tableName, double lineloss, double capacity_mw, string fromDate, string toDate)
         {
             string myQuery = "Update " + tableName +
                " set kwh_afterlineloss = kwh * " + lineloss + ", " +
                " plf = (kwh/" + capacity_mw + "*1000*24), " +
                "plf_afterlineloss =  ((kwh * " + lineloss + ")/" + capacity_mw + "*1000*24)" +
                " where date>='" + fromDate + "' and date<='" + toDate + "' and site_id=" + site_id;
             return await getDB.ExecuteNonQry<int>(myQuery).ConfigureAwait(false);

         }*/
        /*private async Task<bool> CalculateAndUpdatePLFandKWHAfterLineLoss(int site_id, string fromDate, string sWTG_Name)
        {
            //site_id, string fromDate, string sWTG_Name
            double dLineLoss = 0.65;
            string fy = GetFY(fromDate);
            string site = GetSiteFromSiteID(site_id);
            string month = GetMonth(fromDate);

            bool response = false;
            try
            {
                int chkfilter = 0;
                string filter = "";
                int iGenerationCount = 0;

                string qryLineLoass = @"SELECT  fy, month,site,line_loss as LineLoss FROM monthly_uploading_line_losses where site = '" + site + "' and fy = '" + fy + "' and month = '" + month + "'";

                List<WindMonthlyUploadingLineLosses> _WindMonthlyUploadingLineLosses = await Context.GetData<WindMonthlyUploadingLineLosses>(qryLineLoass).ConfigureAwait(false);

                foreach (WindMonthlyUploadingLineLosses WindMonthlyLineLosses in _WindMonthlyUploadingLineLosses)
                {
                    dLineLoss = double.Parse(WindMonthlyLineLosses.lineLoss);
                    break;

                }

                string sLog = "Updating WTG <" + sWTG_Name + ">  KWH and PLF paramters.";
                //Pending : Log the result
                string qry = @"SELECT uploading_file_generation_id, date,t1.wtg,t2.site_master_id as site_id,t2.site as site_name,t1.kwh,t3.capacity_mw FROM uploading_file_generation t1 left join location_master t2 on t2.wtg=t1.wtg left join site_master t3 on t3.site_master_id=t2.site_master_id";
                //,t1.wind_speed
                if (!string.IsNullOrEmpty(fromDate) && fromDate != "All")
                {
                    //filter += "(date >= '" + fromDate + "'  and date<= '" + toDate + "')";
                    filter += "(date = '" + fromDate + "')";
                    chkfilter = 1;
                }

                if (!string.IsNullOrEmpty(filter))
                {
                    qry += " where  " + filter;
                }
                qry += " order by t1.wtg";

                double dCalculatedPLF = 0; ;
                double dWTG_Capacity = 0;
                double dDaily_kwh = 0;
                double dKWH_AfterLineLoss = 0;
                int iCount = 0;
                int id = 0;
                string updateQry = "UPDATE uploading_file_generation s JOIN( ";

                List<WindUploadedData> _WindUploadedData = await Context.GetData<WindUploadedData>(qry).ConfigureAwait(false);
                foreach (WindUploadedData WindGeneration in _WindUploadedData)
                {
                    iCount++;
                    id = WindGeneration.uploading_file_generation_id;
                    dDaily_kwh = (double)WindGeneration.kwh;
                    dWTG_Capacity = (double)WindGeneration.capacity_mw;
                    dCalculatedPLF = Math.Round(dDaily_kwh / (dWTG_Capacity * 1000 * 24) * 100, 6);
                    dKWH_AfterLineLoss = Math.Round(dDaily_kwh - Math.Round(dDaily_kwh * dLineLoss / 100));
                    if (iCount == 1)
                    {
                        updateQry += "SELECT " + id + " as id, " + dKWH_AfterLineLoss + " as new_kwh, " + dWTG_Capacity + " as wtg_capacity, " + dCalculatedPLF + " as new_plf";
                    }
                    else
                    {
                        updateQry += " UNION ALL ";
                        updateQry += "SELECT " + id + ", " + dKWH_AfterLineLoss + ", " + dWTG_Capacity + ", " + dCalculatedPLF + "";
                    }
                }

                updateQry += ") vals ON s.uploading_file_generation_id = vals.id";
                updateQry += " SET kwh_afterloss = new_kwh, capacity_kw = wtg_capacity, plf = new_plf;";

                if (iCount > 0)
                {
                    int result = await Context.ExecuteNonQry<int>(updateQry).ConfigureAwait(false);
                    if (result > 0)
                        response = true;
                }
            }
            catch (Exception ex)
            {
                string strEx = ex.ToString();
                //pending : log error
                throw;

            }
            return response;
        }*/
        string GetFY(string fromDate)
        {
            string sFY;
            DateTime dt = Convert.ToDateTime(fromDate);
            int year = dt.Year;
            int month = dt.Month;
            if (month >= 4)
            {
                int nextyear = year % 2000 + 1;
                sFY = year + "-" + nextyear;
            }
            else
            {

                int prevyear = year - 1;
                year = year % 2000;
                sFY = prevyear + "-" + year;
            }
            return sFY;
        }
        string GetMonth(string fromDate)
        {
            DateTime dt = Convert.ToDateTime(fromDate);
            int month = dt.Month;
            string sMonth = Months[month - 1];
            return sMonth;
        }
        string GetSiteFromSiteID(int site_id)
        {
            if (!m_bSiteMasterLoaded)
            {
                //make query and create hashtable

                m_bSiteMasterLoaded = true;

            }
            //get from hashtable member variable
            return "Badnawar";
        }
        private async Task<double> GetLineLoss(int site_id, string fromDate, int type)
        {
            double dLineLoss = 0.65;
            DateTime dt = Convert.ToDateTime(fromDate);
            int year = dt.Year;
            int month = dt.Month;
            string tbl = "";
            //Wind
            string col = "";
            if (type == 1)
            {
                tbl = "monthly_uploading_line_losses";
                col = "line_loss";
            }
            //Solar
            else {
                tbl = "monthly_line_loss_solar";
                col = "LineLoss";
            }
            string qry = @"SELECT  fy, month_no, site, "+col+" as lineLoss FROM " + tbl + " where site_id = " + site_id + " and year = " + year + " and month_no = " + month;
            List<WindMonthlyUploadingLineLosses> _WindMonthlyUploadingLineLosses = await Context.GetData<WindMonthlyUploadingLineLosses>(qry).ConfigureAwait(false);

            foreach (WindMonthlyUploadingLineLosses WindMonthlyLineLosses in _WindMonthlyUploadingLineLosses)
            {
                dLineLoss = WindMonthlyLineLosses.lineLoss;
                break;
            }
            return dLineLoss;
        }
        /// <summary>
        /// This function calculates the KPI of the given WTG and update the KPI to uploading_file_generation table. 
        /// Approval function then copy this data to daily_generaition_summary table
        /// </summary>
        /// <param name="site_id"></param>
        /// <param name="fromDate"></param>
        /// <param name="sWTG_Name"></param>
        /// <param name="Final_USMH"></param>
        /// <param name="Final_SMH"></param>
        /// <param name="Final_IGBD"></param>
        /// <param name="Final_EGBD"></param>
        /// <param name="Final_OthersHour"></param>
        /// <param name="Final_LoadShedding"></param>
        /// <param name="MA_Actual_FormulaID"></param>
        /// <param name="MA_Contractual_FormulaID"></param>
        /// <param name="IGA_FormulaID"></param>
        /// <param name="EGA_FormulaID"></param>
        /// <returns></returns>
        private async Task<bool> CalculateAndUpdateKPIs(int site_id, string fromDate, string sWTG_Name, TimeSpan Final_USMH_Time, TimeSpan Final_SMH_Time, TimeSpan Final_IGBD_Time, TimeSpan Final_EGBD_Time, TimeSpan Final_OthersHour_Time, TimeSpan Final_LoadShedding_Time, string MA_Actual_Formula, string MA_Contractual_Formula, string IGA_Formula, string EGA_Formula)
        {

            //API_InformationLog("CalculateAndUpdateKPIs: calculation data for sWTG_Name <" + sWTG_Name + ">  Final_USMH_Time <" + Final_USMH_Time + ">  Final_SMH_Time<" + Final_SMH_Time + ">  Final_IGBD_Time<" + Final_IGBD_Time + ">  Final_EGBD_Time<" + Final_EGBD_Time + ">  Final_OthersHour_Time<" + Final_OthersHour_Time + ">  Final_LoadShedding_Time<" + Final_LoadShedding_Time + ">");
            string functionName = "CalculateAndUpdateKPIs";
            bool response = false;
            double Final_USMH = 0;
            double Final_SMH = 0;
            double Final_IGBD = 0;
            double Final_EGBD = 0;
            double Final_LoadShedding = 0;
            double Final_LULL = 0;
            double Final_OthersHour = 0;
            TimeSpan Get_Time;
            try
            {
                string sLog = "Updating WTG <" + sWTG_Name + "> KPI paramters.";
                //Pending : Log the result

                Get_Time = Final_USMH_Time * 24;
                Final_USMH = Get_Time.TotalDays;
                Get_Time = Final_SMH_Time * 24;
                Final_SMH = Get_Time.TotalDays;
                Get_Time = Final_IGBD_Time * 24;
                Final_IGBD = Get_Time.TotalDays;
                Get_Time = Final_EGBD_Time * 24;
                Final_EGBD = Get_Time.TotalDays;
                Get_Time = Final_LoadShedding_Time * 24;
                Final_LoadShedding = Get_Time.TotalDays;
                Get_Time = Final_OthersHour_Time * 24;
                Final_OthersHour = Get_Time.TotalDays;


                //API_InformationLog("CalculateAndUpdateKPIs: MA_Actual_Formula <" + MA_Actual_Formula + ">");
                double dMA_ACT = Math.Round(GetCalculatedValue(Final_USMH, Final_SMH, Final_IGBD, Final_EGBD, Final_OthersHour, Final_LoadShedding, MA_Actual_Formula), 6);
                //API_InformationLog("CalculateAndUpdateKPIs: MA_Contractual_Formula <" + MA_Contractual_Formula + ">");
                double dMA_CON = Math.Round(GetCalculatedValue(Final_USMH, Final_SMH, Final_IGBD, Final_EGBD, Final_OthersHour, Final_LoadShedding, MA_Contractual_Formula), 6);
                //API_InformationLog("CalculateAndUpdateKPIs: IGA_Formula <" + IGA_Formula + ">");
                double dIGA = Math.Round(GetCalculatedValue(Final_USMH, Final_SMH, Final_IGBD, Final_EGBD, Final_OthersHour, Final_LoadShedding, IGA_Formula), 6);
                //API_InformationLog("CalculateAndUpdateKPIs: EGA_Formula <" + EGA_Formula + ">");
                double dEGA = Math.Round(GetCalculatedValue(Final_USMH, Final_SMH, Final_IGBD, Final_EGBD, Final_OthersHour, Final_LoadShedding, EGA_Formula), 6);
                double dEGA_B = Math.Round(GetCalculatedValue(Final_USMH, Final_SMH, Final_IGBD, Final_EGBD, Final_OthersHour, 0, EGA_Formula), 6);
                double dEGA_C = Math.Round(GetCalculatedValue(Final_USMH, Final_SMH, Final_IGBD, 0 , Final_OthersHour, Final_LoadShedding, EGA_Formula), 6);

                string info1 = "Other_hours :" + Final_OthersHour + "";
                //LogInfo(0, 2, 6, functionName, info1, backend);

                string qryUpdate = "UPDATE `uploading_file_generation` set ma_actual = " + dMA_ACT + ", ma_contractual = " + dMA_CON + ", iga = " + dIGA + ", ega = " + dEGA + ", ega_b = " + dEGA_B + ", ega_c = " + dEGA_C;
                qryUpdate += ", unschedule_hrs = '" + Final_USMH_Time + "', schedule_hrs = '" + Final_SMH_Time + "', igbdh = '" + Final_IGBD_Time + "', egbdh = '" + Final_EGBD_Time + "', others = '" + Final_OthersHour_Time + "', load_shedding = '" + Final_LoadShedding_Time + "', unschedule_num = '" + Final_USMH + "',schedule_num = '" + Final_SMH + "',igbdh_num = '" + Final_IGBD + "', egbdh_num = '" + Final_EGBD + "',others_num = '" + Final_OthersHour + "', load_shedding_num = '" + Final_LoadShedding + "'";
                qryUpdate += " where wtg = '" + sWTG_Name + "' and date = '" + fromDate + "'";
                //API_InformationLog("CalculateAndUpdateKPIs: sWTG_Name <" + sWTG_Name + ">  qryUpdate <" + qryUpdate + ">");

                int result = await Context.ExecuteNonQry<int>(qryUpdate).ConfigureAwait(false);
                if (result > 0)
                    response = true;

            }
            catch (Exception ex)
            {
                string strEx = ex.ToString();
                throw;

            }
            finally
            {
                int i = 0;
            }
            return response;
        }

        /// <summary>
        /// This function caluldates the value as per the formula type 
        /// </summary>
        /// <param name="U"></param>
        /// <param name="S"></param>
        /// <param name="IG"></param>
        /// <param name="EG"></param>
        /// <param name="OthersHour"></param>
        /// <param name="LoadShedding"></param>
        /// <param name="Formula"></param>
        /// <returns></returns>
        private double GetCalculatedValue(double U, double S, double IG, double EG, double OthersHour, double LoadShedding, string Formula)
        {
            string functionName = "GetCalculatedValue";
            double returnValue = 0;
            //Pending : Iteration 2 => to add a formula parser to evaludate formuals as defined by user
            switch (Formula)
            {
                case "24-(USMH+SMH))/24": // MA_Actual_FormulaID / //Machine Availability Actual
                case "(24-(USMH+SMH))/24": // MA_Actual_FormulaID / //Machine Availability Actual
                    returnValue = (24 - (U + S)) / 24;
                    break;
                case "(24-(USMH+SMH+IG))/24": // MA_Contractual_FormulaID / //Machine Availability Contractual
                    returnValue = (24 - (U + S + IG)) / 24;
                    break;
                case "(24-(IG))/24"://Internal Grid Availability 
                    returnValue = (24 - (IG)) / 24;
                    break;
                case "(24-(EG))/24": // External_Grid_FormulaID///External Grid Availablity
                    returnValue = (24 - (EG)) / 24;
                    break;
                case "(24-(OTHER+EG+USMH+SMH+IG))/(24-(EG+OTHER))": // /MA_Contractual_FormulaID for 190,191,197,198,199/ //Machine Availability Contractual
                    returnValue = (24 - (OthersHour + EG + U + S + IG)) / (24 - (EG + OthersHour));
                    break;
                case "(24-(OTHER+EG+USMH+SMH+IG))/(24-(EG+OTHER+IG))":
                    returnValue = (24 - (OthersHour + EG + U + S + IG)) / (24 - (EG + OthersHour + IG));
                    break;
                case "(24-(EG+LS))/24":
                    returnValue = (24 - (EG + LoadShedding)) / 24;
                    break;
                default:
                    //Pending : error reporting
                    string msg = "GetCalculatedValue: Unsupported Formula <" + Formula + ">";
                    //API_ErrorLog(msg);
                    LogError(0, 2, 5, functionName, msg, backend);
                    throw new InvalidOperationException("GetCalculatedValue: Unsupported Formula <" + Formula + ">");
                    break;
            }
            //API_InformationLog("GetCalculatedValue: Formula <" + Formula + ">  calculated value <" + returnValue + ">");
            return returnValue * 100;
        }
        private double GetSolarCalculatedValue(double U, double S, double IG, double EG, double OthersHour, double LoadShedding, string Formula)
        {
            double returnValue = 0;
            //Pending : Iteration 2 => to add a formula parser to evaludate formuals as defined by user
            switch (Formula)
            {
                case "12-(USMH+SMH))/12": /*MA_Actual_FormulaID*/ //Machine Availability Actual
                    returnValue = (12 - (U + S)) / 12;
                    break;
                case "(12-(USMH+SMH+IG))/12": /*MA_Contractual_FormulaID*/ //Machine Availability Contractual
                    returnValue = (12 - (U + S + IG)) / 12;
                    break;
                case "(12-(IG))/12"://Internal Grid Availability 
                    returnValue = (12 - (IG)) / 12;
                    break;
               // case "(12-(EG))/12": /*External_Grid_FormulaID*///External Grid Availablity
                    //returnValue = (12 - (EG)) / 12;
                   // break;
                case "(12-(EG+LS))/12": /*External_Grid_FormulaID*///External Grid Availablity
                    returnValue = (12 - (EG + LoadShedding)) / 12;
                    break;
                default:
                    //Pending : error reporting
                    //throw;
                    break;
            }
            return returnValue * 100;
        }
        internal async Task<bool> CalculateDailySolarKPI_PR(string site, string fromDate, string toDate, string logFileName)
        {
            /* update in gen table
             * 
            double AC_Capacity = 1000;
            double Expected_kWh = 100000;
            double Inv_Kwh = 10000; 
            double Plant_Kwh = 1000;
            double plantPR = Plant_Kwh / Expected_kWh;
            double InvPR = Inv_Kwh / Expected_kWh;

            double plantPLF = Plant_Kwh / (24 - AC_Capacity);
            double InvPLF = Inv_Kwh / (24 * AC_Capacity);*/
            //

            return true;
        }

        internal async Task<string> CalculateDailySolarKPI(string site, string fromDate, string toDate, string logFileName)
        {
            int finalRes = 1101;
            string errorCodes = "";
            string functionName = "CalculateDailySolarKPI";

            DateTime thisTime = new DateTime();
            thisTime = DateTime.Now;
            //API_InformationLog("-------------------------------------------------------------------------------------- ");
            string info = DateTime.Now + "CalculateDailySolarKPI function called.. Code Line No. " + new StackTrace(true).GetFrame(0).GetFileLineNumber() + " ";
            //API_InformationLog(info);
            LogInfo(0, 1, 5, functionName, info, backend);
            info = "site Id :" + site + " fromDate :" + fromDate + " toDate :" + toDate + " logFileName :" + logFileName + " currentTime :" + DateTime.Now + "";
            //API_InformationLog(info);
            LogInfo(0, 1, 5, functionName, info, backend);

            string filter = "date >= '" + fromDate + "'  and date<= '" + toDate + "' and site_id=" + site;

            bool response = false;

            TimeSpan Final_Production_Time = new TimeSpan();
            TimeSpan Final_USMH_Time = new TimeSpan();
            TimeSpan Final_SMH_Time = new TimeSpan();
            TimeSpan Final_IGBD_Time = new TimeSpan();
            TimeSpan Final_EGBD_Time = new TimeSpan();
            TimeSpan Final_LoadShedding_Time = new TimeSpan();
            TimeSpan Final_LULL_Time = new TimeSpan();
            TimeSpan Final_OthersHour_Time = new TimeSpan();
            TimeSpan Final_LullHour_Time = new TimeSpan();
            TimeSpan Final_Time = new TimeSpan();

            double InvLevelMA = 0;
            double InvLevelIGA = 0;
            double InvLevelEGA = 0;
            double InvLevelEGA_B = 0;
            double InvLevelEGA_C = 0;

            double Final_USMH_Loss = 0;
            double Final_SMH_Loss = 0;
            double Final_IGBD_Loss = 0;
            double Final_EGBD_Loss = 0;
            double Final_LS_Loss = 0;
            double Final_LULL_Loss = 0;
            double Final_OthersHour_Loss = 0;

            double totalLoss = 0;
            double FinalCapcity = 0;

            string MA_Actual_Formula = "";
            string MA_Contractual_Formula = "";
            string IGA_Formula = "";
            string EGA_Formula = "";
            string sCurrentInv = "";
            string sCurrentICR_INV = "";
            string sLastInv = "";
            string sLastICR_INV = "";
            
            try
            {
                info = DateTime.Now + "CalculateDailySolarKPI function called, inside first try.. Code Line No. " + new StackTrace(true).GetFrame(0).GetFileLineNumber() + " ";
                //API_InformationLog(info);
                LogInfo(0, 1, 5, functionName, info, backend);
                if (string.IsNullOrEmpty(site) || site == "All")
                {
                    throw new Exception("Invalid site " + site);
                    //return response;
                }

                int site_id = int.Parse(site);
                if (site_id <= 0)
                {
                    throw new Exception("Invalid site " + site);
                    //return response;
                }

                //string qrySiteFormulas = "SELECT * FROM `wind_site_formulas` where site_id = '" + site_id + "' and site_type ='Solar'";
                string qrySiteFormulas = "SELECT * FROM `wind_site_formulas` where  site_type ='Solar'";
                List<SiteFormulas> _SiteFormulas = new List<SiteFormulas>();
                try
                {
                    _SiteFormulas = await Context.GetData<SiteFormulas>(qrySiteFormulas).ConfigureAwait(false);
                    finalRes++; //1102
                }
                catch (Exception e)
                {
                    string msg = "Exception while getting site formulas from wind_site_formulas table in calculateDailySolar function , due to : " + e.ToString();
                    //API_ErrorLog(msg);
                    LogError(0, 1, 2, functionName, msg, backend);
                    errorCodes += finalRes.ToString() + ",";
                    return errorCodes; //1101
                }
                info = DateTime.Now + "CalculateDailySolarKPI function, retrived site formulas in _SiteFormulas list.. Code Line No. " + new StackTrace(true).GetFrame(0).GetFileLineNumber() + "";
                //API_InformationLog(info);
                LogInfo(0, 1, 5, functionName, info, backend);
                int index = 0;
                try
                {
                    foreach (SiteFormulas SiteFormula in _SiteFormulas)
                    {
                        info = DateTime.Now + "CalculateDailySolarKPI function : Inside foreach loop of siteformulas.. Code Line No. " + new StackTrace(true).GetFrame(0).GetFileLineNumber() + " Iteration/Count :" + index + " / " + _SiteFormulas.Count;
                        //API_InformationLog(info);
                        LogInfo(0, 1, 5, functionName, info, backend);
                        index++;

                        MA_Actual_Formula = SiteFormula.MA_Actual; //(string)reader["MA_Actual"];
                        MA_Contractual_Formula = SiteFormula.MA_Contractual; // (string)reader["MA_Contractual"];
                        IGA_Formula = SiteFormula.IGA; // (string)reader["IGA"];
                        EGA_Formula = SiteFormula.EGA; // (string)reader["EGA"];                                                   
                        //break;
                    }
                    finalRes++; //1103
                }
                catch (Exception e)
                {
                    string msg = "Exception while executing for loop for getting formulas in CalculateDailySolarKPI function, due to : " + e.ToString();
                    //API_ErrorLog(msg);
                    LogError(0, 1, 2, functionName, msg, backend);
                    errorCodes += finalRes.ToString() + ",";
                    return errorCodes; //1102
                }

                Hashtable acCapacityMap = new Hashtable();

                string plantQryACDC = "select inverter, ac_capacity from solar_ac_dc_capacity where site_id = " + site_id;
                List<SolarInvAcCapacity> invAC = new List<SolarInvAcCapacity>();
                try
                {
                    invAC = await Context.GetData<SolarInvAcCapacity>(plantQryACDC).ConfigureAwait(false);
                    finalRes++; //1104
                }
                catch (Exception e)
                {
                    string msg = "Exception while getting inverter and ac_dc capicity from solar_ac_dc_capicity table in CalculateDailySolarKPI function , due to  : " + e.ToString();
                    //API_ErrorLog(msg);
                    LogError(0, 1, 2, functionName, msg, backend);
                    errorCodes += finalRes.ToString() + ",";
                    return errorCodes; //1103
                }
                try
                {
                    foreach (SolarInvAcCapacity InvAcCap in invAC)
                    {
                        string Inverter = (InvAcCap.inverter);
                        int acCapacity = (int)Convert.ToInt64(InvAcCap.ac_capacity);
                        acCapacityMap.Add(Inverter, acCapacity);
                    }
                    finalRes++; //1105
                }
                catch (Exception e)
                {
                    string msg = "Exception while adding inverter AC and Capacity hash table in CalculateDailySolarKPI function, due to : " + e.ToString();
                    //API_ErrorLog(msg);
                    LogError(0, 1, 2, functionName, msg, backend);
                    errorCodes += finalRes.ToString() + ",";
                    return errorCodes; //1104
                }


                string qryAllDevices = "Select location_master_solar_id,eg,ig,icr_inv,icr,inv,smb,string as strings,string_configuration,total_string_current,total_string_voltage,modules_quantity,wp,capacity from location_master_solar where status = 1 and  site_id='" + site_id + "' ORDER BY icr_inv ";

                //get all power devices
                List<SolarLocationMaster_Calc> _SolarLocationMaster_Calc = new List<SolarLocationMaster_Calc>();
                try
                {
                    _SolarLocationMaster_Calc = await Context.GetData<SolarLocationMaster_Calc>(qryAllDevices).ConfigureAwait(false);
                    finalRes++; //1106
                }
                catch (Exception e)
                {
                    string msg = "Exception while getting data from location_master_solar table in CalculateDailySolarKPI function, due to  : " + e.ToString();
                    //API_ErrorLog(msg);
                    LogError(0, 1, 2, functionName, msg, backend);
                    errorCodes += finalRes.ToString() + ",";
                    return errorCodes; //1105
                }
                info = DateTime.Now + "CalculateDailySolarKPI function : after getting data in solarLocationMaster_calc list.. Code Line No. " + new StackTrace(true).GetFrame(0).GetFileLineNumber() + "";
                //API_InformationLog(info);
                LogInfo(0, 1, 5, functionName, info, backend);

                //pending : Get GHI and POA
                double avg_POA = 0;
                double avg_GHI = 0;

                //TILL PYRANOMETER DATA
                string qryGHI_POA = "Select sum(avg_ghi) as avg_ghi, sum(avg_poa) as avg_poa from uploading_pyranometer_1_min_solar where site_id = " + site_id + " and date(date_time) = '" + fromDate + "'";

                List<SolarUploadingPyranoMeter1Min> _SolarUploadingPyranoMeter1Min = new List<SolarUploadingPyranoMeter1Min>();
                try
                {
                    _SolarUploadingPyranoMeter1Min = await Context.GetData<SolarUploadingPyranoMeter1Min>(qryGHI_POA).ConfigureAwait(false);
                    finalRes++; //1107
                }
                catch (Exception e)
                {
                    string msg = "Exception while fetching data from uploading_pyranometer_1_min_solar table in CalculateDailySolarKPI function, due to  : " + e.ToString();
                    //API_ErrorLog(msg);
                    LogError(0, 1, 2, functionName, msg, backend);
                    errorCodes += finalRes.ToString() + ",";
                    return errorCodes; //1106
                }
                info = DateTime.Now + "CalculateDailySolarKPI function : After getting data  in solarUploadingPyranometer1Min list .. Code Line No. " + new StackTrace(true).GetFrame(0).GetFileLineNumber() + "";
                //API_InformationLog(info);
                LogInfo(0, 1, 5, functionName, info, backend);
                int index1 = 0;
                try
                {
                    foreach (SolarUploadingPyranoMeter1Min SolarPyranoMeterData in _SolarUploadingPyranoMeter1Min)
                    {
                        info = DateTime.Now + "CalculateDailySolarKPI function : Inside foreach loop of solaruploadingpyranometer1min.. Code Line No. " + new StackTrace(true).GetFrame(0).GetFileLineNumber() + " Iteration/Count :" + index1 + " / " + _SiteFormulas.Count;
                        //API_InformationLog(info);
                        LogInfo(0, 1, 5, functionName, info, backend);
                        index1++;

                        avg_GHI = SolarPyranoMeterData.avg_ghi / 60000;
                        avg_POA = SolarPyranoMeterData.avg_poa / 60000;
                    }
                    finalRes++; //1108
                }
                catch (Exception e)
                {
                    string msg = "Exception while executing loop of calculating average GHI POA values in CalculateDailySolarKPI function, due to : " + e.ToString();
                    //API_ErrorLog(msg);
                    LogError(0, 1, 2, functionName, msg, backend);
                    errorCodes += finalRes.ToString() + ",";
                    return errorCodes; //1107
                }
                //Tracker loss to be uncommented for DGRA_2 ...
                int calculateTrackerLoss = await CalculateTrackerLosses(site, fromDate, toDate, "log");
                if (calculateTrackerLoss == 0)
                {
                    //finalRes = 11021;
                }
                else
                {
                    errorCodes += calculateTrackerLoss.ToString() + ",";
                }
                int powerExpected = await PowerExpected1MinPyrano(site, fromDate, fromDate, "Daily", "", "");
                if (powerExpected == 0)
                {
                    //finalRes = 11022;
                }
                else
                {
                    errorCodes += powerExpected.ToString() + ",";
                }
                //avg_GHI = 2;
                //avg_POA = 3;

                string qry = @"SELECT * FROM uploading_file_generation_solar as t1 ";
                int iGenerationCount = 0;
                filter = "";
                int chkfilter = 0;
                filter = "" + site_id;
                if (!string.IsNullOrEmpty(fromDate) && fromDate != "All")
                {
                    //filter += "(date >= '" + fromDate + "'  and date<= '" + toDate + "')";
                    filter += " AND date = '" + fromDate + "'";
                    chkfilter = 1;
                }

                if (!string.IsNullOrEmpty(filter))
                {
                    qry += " where  site_id = " + filter;
                }
                qry += "  group by inverter";
                bool bProcessGen = false;
                int iBreakdownCount = 0;
                List<SolarDailyGenSummary> _SolarDailyUploadGen = new List<SolarDailyGenSummary>();
                try
                {
                    _SolarDailyUploadGen = await Context.GetData<SolarDailyGenSummary>(qry).ConfigureAwait(false);
                    finalRes++; //1109
                }
                catch (Exception e)
                {
                    string msg = "Exception while fetching records from uploading_file_generation_solar table in CalculateSolarKPI function, due to : " + e.ToString();
                    //API_ErrorLog(msg);
                    LogError(0, 1, 2, functionName, msg, backend);
                    errorCodes += finalRes.ToString() + ",";
                    return errorCodes; //1108
                }
                info = DateTime.Now + "CalculateDailySolarKPI function : after solardailyUploadgen.. Code Line No. " + new StackTrace(true).GetFrame(0).GetFileLineNumber() + "";
                //API_InformationLog(info);
                LogInfo(0, 1, 5, functionName, info, backend);
                //foreach (SolarLocationMaster_Calc SolarDevice in _SolarLocationMaster_Calc)
                sLastInv = "";
                sLastICR_INV = "";
                int index2 = 0;
                string updateqry = "";
                //for each solar generation device, get the breakdown data
                try
                {
                    foreach (SolarLocationMaster_Calc SolarDevice in _SolarLocationMaster_Calc)
                    {
                        //API_InformationLog(DateTime.Now + "CalculateDailySolarKPI function : Inside foreach loop solarLocationMaster_calc list.. Code Line No. " + new StackTrace(true).GetFrame(0).GetFileLineNumber() + " Iteration/Count :" + index2 + " / " + _SiteFormulas.Count);
                        index2++;

                        iBreakdownCount++;
                        bProcessGen = true;
                        TimeSpan Get_Time;
                        //sCurrentInv = SolarDevice.icr + "/" + SolarDevice.inv;
                        sCurrentICR_INV = SolarDevice.icr_inv;

                        //                    string sDeviceICR = SolarDevice.icr;
                        //                    string sDeviceINV = SolarDevice.inv;

                        if (iBreakdownCount == 1)
                        {
                            sLastInv = sCurrentInv;
                            sLastICR_INV = sCurrentICR_INV;
                        }
                        //if (sLastICR_INV != sCurrentICR_INV)
                        // {
                        if (sLastICR_INV != sCurrentICR_INV || iBreakdownCount == _SolarLocationMaster_Calc.Count)
                        {
                            if (iBreakdownCount == _SolarLocationMaster_Calc.Count)
                            {
                                sLastICR_INV = sCurrentICR_INV;
                                FinalCapcity += SolarDevice.capacity;
                            }

                            //string updateqry = "update uploading_file_generation_solar set ghi = " + avg_GHI + ", poa= " + avg_POA + ", expected_kwh=" + (FinalCapcity * avg_POA) +
                            //  ", ma=100, iga=100, ega=100, inv_pr=inv_act*100/" + (FinalCapcity * avg_POA) + ",plant_pr=plant_act*100/" + (FinalCapcity * avg_POA) + ", inv_plf_ac = inv_act/(24*" + FinalCapcity + ") , plant_plf_ac = plant_act/(24*" + FinalCapcity + ") " +
                            //  " where site_id = " + site_id + " and inverter ='" + sLastInv + "' and date = '" + fromDate + "'";

                            ///Sanket 
                            // string plantQryACDC = "select ac_capacity from solar_ac_dc_capacity where site_id = " + site_id + " and inverter = '" + sLastInv + "' ";


                            //Get invAC from hashtable

                            /// change by sujit 
                            //string plantQryACDC = "select ac_capacity from solar_ac_dc_capacity where site_id = " + site_id + " and inverter = '" + sLastICR_INV + "' ";
                            //List<SolarInvAcDcCapacity> invAC = await Context.GetData<SolarInvAcDcCapacity>(plantQryACDC).ConfigureAwait(false);
                            double inverterAc = 0;
                            if (acCapacityMap.ContainsKey(sLastICR_INV))
                            {
                                inverterAc = Convert.ToDouble(acCapacityMap[sLastICR_INV]);
                            }

                            //optimise this query also
                            //string updateqry = "update uploading_file_generation_solar set ghi = " + avg_GHI + ", poa= " + avg_POA + ", expected_kwh=" + (FinalCapcity * avg_POA) + ", ma=100, iga=100, ega=100, inv_pr=inv_act*100/" + (FinalCapcity * avg_POA) + ", plant_pr=plant_act*100/" + (FinalCapcity * avg_POA) + ", inv_plf_ac = inv_act/(24*" + invAC[0].ac_capacity + ") * 100, plant_plf_ac = plant_act/(24*" + invAC[0].ac_capacity + ")*100 " + " where site_id = " + site_id + " and inverter ='" + sLastICR_INV + "' and date = '" + fromDate + "'";

                            updateqry += "update uploading_file_generation_solar set ghi = " + avg_GHI + ", poa= " + avg_POA + ", expected_kwh=" + (FinalCapcity * avg_POA) + ", ma=100, iga=100, ega=100, ega_b=100, ega_c =100, inv_pr=inv_act*100/" + (FinalCapcity * avg_POA) + ", plant_pr=plant_act*100/" + (FinalCapcity * avg_POA) + ", inv_plf_ac = inv_act/(24*" + inverterAc + ") * 100, plant_plf_ac = plant_act/(24*" + inverterAc + ")*100 " + " where site_id = " + site_id + " and inverter ='" + sLastICR_INV + "' and date = '" + fromDate + "' ;";

                            FinalCapcity = 0;
                            sLastICR_INV = sCurrentICR_INV;
                        }
                        FinalCapcity += SolarDevice.capacity;

                    }//end of for each
                    finalRes = 11010; //11010
                }
                catch (Exception e)
                {
                    string msg = "Exception while calculation in loop of location master in calculateDailySolarKPI function, due to : " + e.ToString();
                    //API_ErrorLog(msg);
                    LogError(0, 1, 2, functionName, msg, backend);
                    errorCodes += finalRes.ToString() + ",";
                    return errorCodes; //1109
                }
                info = DateTime.Now + "CalculateDailySolarKPI function : End of for loop.. Code Line No. " + new StackTrace(true).GetFrame(0).GetFileLineNumber() + "";
                //API_InformationLog(info);
                LogInfo(0, 1, 5, functionName, info, backend);
                try
                {
                    int result = await Context.ExecuteNonQry<int>(updateqry).ConfigureAwait(false);
                    info = DateTime.Now + "CalculateDailySolarKPI function : Updated data (ghi, poa, expected_kwh, plant_pr, etc) after for loop ends in uploading_file_generation_solar table .. Code Line No. " + new StackTrace(true).GetFrame(0).GetFileLineNumber();
                    //API_InformationLog(info);
                    LogInfo(0, 1, 5, functionName, info, backend);
                    finalRes++; //11011
                }
                catch (Exception ex)
                {
                    string msg = "CalculateDailySolarKPI function : Exception during updating data in table uploading_file_generation_solar... Code Line No. " + new StackTrace(true).GetFrame(0).GetFileLineNumber() + " exception :" + ex.ToString();
                    //API_ErrorLog(msg);
                    LogError(0, 1, 2, functionName, msg, backend);
                    errorCodes += finalRes.ToString() + ",";
                    return errorCodes; //11010


                }

                string updateqryCheck = "update uploading_file_generation_solar set inv_pr = NULL, plant_pr = NULL where (inv_pr = 0 or plant_pr = 0) and site_id = " + site_id + " and date = '" + fromDate + "' ";
                try
                {
                    int result = await Context.ExecuteNonQry<int>(updateqryCheck).ConfigureAwait(false);
                    info = DateTime.Now + "CalculateDailySolarKPI function : Updated inv_pr and plant_pr to null in uploading_file_generation_solar table... Code Line No. " + new StackTrace(true).GetFrame(0).GetFileLineNumber() + "";
                    //API_InformationLog(info);
                    LogInfo(0, 1, 5, functionName, info, backend);
                    finalRes++; //11012
                }
                catch (Exception ex)
                {
                    string msg = "CalculateDailySolarKPI function : Exception while updating inv_pr and plant_pr to null in uploading_file_generation_solar table.. Code Line No. " + new StackTrace(true).GetFrame(0).GetFileLineNumber() + " exception :" + ex.ToString();
                    //API_ErrorLog(msg);
                    LogError(0, 1, 2, functionName, msg, backend);
                    errorCodes += finalRes.ToString() + ",";
                    return errorCodes; //11011
                }
                //Get breakdown data
                //qry = @"SELECT date,t1.site_id,t1.ext_int_bd, t1.icr,t1.inv,t1.smb,t1.strings,t1.bd_type_id,t1.bd_type, t1.from_bd as stop_from, t1.to_bd as stop_to, SEC_TO_TIME(SUM(TIME_TO_SEC(total_stop)))
                //  AS total_stop FROM uploading_file_breakdown_solar t1 left join location_master_solar t2 on t2.location_master_solar_id=t1.site_id left join site_master_solar t3 on t3.site_master_solar_id=t2.location_master_solar_id left join bd_type as t4 on t4.bd_type_id=t1.bd_type_id";

                qry = @"SELECT date,t1.site_id, t1.igbd, t1.ext_int_bd as ext_bd, t1.icr,t1.inv,t1.smb,t1.strings,t1.bd_type_id,t1.bd_type, t1.from_bd as stop_from, t1.to_bd as stop_to,total_bd
                  AS total_stop FROM uploading_file_breakdown_solar t1 left join location_master_solar t2 on t2.location_master_solar_id=t1.site_id and t2.status = 1 left join site_master_solar t3 on t3.site_master_solar_id=t2.location_master_solar_id left join bd_type as t4 on t4.bd_type_id=t1.bd_type_id";

                try
                {

                    iBreakdownCount = 0;
                    filter = "";
                    chkfilter = 0;
                    filter = "" + site_id;
                    if (!string.IsNullOrEmpty(fromDate) && fromDate != "All")
                    {
                        //filter += "(date >= '" + fromDate + "'  and date<= '" + toDate + "')";
                        filter += " AND date = '" + fromDate + "'";
                        chkfilter = 1;
                    }

                    if (!string.IsNullOrEmpty(filter))
                    {
                        qry += " where  t1.site_id = " + filter;
                    }
                    //qry += "  AND t1.wtg = 'BD-25'";
                    //qry += "  group by t1.icr, t1.inv, t1.smb, t1.strings, t1.bd_type_id";
                    List<SolarFileBreakdownCalcMatrix> _SolarFileBreakdown = new List<SolarFileBreakdownCalcMatrix>();
                    try
                    {
                        _SolarFileBreakdown = await Context.GetData<SolarFileBreakdownCalcMatrix>(qry).ConfigureAwait(false);
                    }
                    catch (Exception e)
                    {
                        string msg = "Exception while fetching records from uploading_file_breakdown_solar and location_master_solar tables, due to : " + e.ToString();
                        //API_ErrorLog(msg);
                        LogError(0, 1, 2, functionName, msg, backend);
                    }
                    info = DateTime.Now + "CalculateDailySolarKPI function : Received data in solarfilebreakdown data in list.. Code Line No. " + new StackTrace(true).GetFrame(0).GetFileLineNumber() + "";
                    LogInfo(0, 1, 5, functionName, info, backend);
                    int index3 = 0;
                    foreach (SolarFileBreakdownCalcMatrix sBreakdown in _SolarFileBreakdown)
                    {
                        info = DateTime.Now + "CalculateDailySolarKPI function : Inside foreach loop of SolarFileBreakdown .. Code Line No. " + new StackTrace(true).GetFrame(0).GetFileLineNumber() + " Iteration/Count :" + index3 + " / " + _SiteFormulas.Count;
                        LogInfo(0, 1, 5, functionName, info, backend);
                        index3++;

                        iBreakdownCount++;
                        TimeSpan Get_Time;
                        int site_id2 = sBreakdown.site_id;
                        string breakdown_icr = sBreakdown.icr; // (string)reader["wtg"];
                        string breakdown_inv = sBreakdown.inv; // (string)reader["wtg"];
                        sCurrentInv = breakdown_icr + "/" + breakdown_inv;
                        int bd_type_id = sBreakdown.bd_type_id;// reader["bd_type"];
                        string bd_type_name = sBreakdown.bd_type; // reader["bd_type_name"];
                        var totalTime = sBreakdown.total_stop;// reader["totalTime"];
                        DateTime result = Convert.ToDateTime(totalTime.ToString());
                        DateTime bdstartTime = Convert.ToDateTime(sBreakdown.stop_from.ToString());
                        //DateTime bdstartTime = new DateTime();
                        //bdstartTime.Date = fromDate;
                        DateTime bdendTime = Convert.ToDateTime(sBreakdown.stop_to.ToString());


                        //float poa = 0.7F;
                        //calculate poa for duration - find poa for each minute of breakdown
                        string poaqry = "select sum(avg_poa) as avg_poa from uploading_pyranometer_1_min_solar where date_time >= '" + fromDate + " " + bdstartTime.TimeOfDay.ToString() + "' and date_time<='" + fromDate + " " + bdendTime.TimeOfDay.ToString() + "' AND site_id = " + site_id;


                        List<SolarUploadingPyranoMeter1Min> _SolarUploadingPyranoMeter1Min2 = new List<SolarUploadingPyranoMeter1Min>();
                        try
                        {
                            _SolarUploadingPyranoMeter1Min2 = await Context.GetData<SolarUploadingPyranoMeter1Min>(poaqry).ConfigureAwait(false);
                        }
                        catch (Exception e)
                        {
                            string msg = "Exception while fetching records from uploading_pyranometer_1_min_solar table, due to : " + e.ToString();
                            //API_ErrorLog(msg);
                            LogError(0, 1, 2, functionName, msg, backend);
                        }
                        info = (DateTime.Now + "CalculateDailySolarKPI function : Received data in solarUploadingPyranometer1Min2 list.. Code Line No. " + new StackTrace(true).GetFrame(0).GetFileLineNumber() + "");
                        LogInfo(0, 1, 5, functionName, info, backend);

                        float poa = 0;
                        /*foreach (SolarUploadingPyranoMeter1Min SolarPyranoMeterData in _SolarUploadingPyranoMeter1Min2)
                        {
                            poa = SolarPyranoMeterData.avg_poa;

                        }*/
                        poa = (float)(_SolarUploadingPyranoMeter1Min2[0].avg_poa);
                        poa = poa / 60000;

                        Final_Time = result.TimeOfDay;


                        /*if (iBreakdownCount == 1)
                        {
                            sLastInv = sCurrentInv;
                        }*/
                        /*if(sCurrentInv != sLastInv)
                        {
                            //Update WTG KPIs
                            //CalculateAndUpdateKPIs(site_id, fromDate, sLastWTG, Final_USMH_Time, Final_SMH_Time, Final_IGBD_Time, Final_EGBD_Time, Final_OthersHour_Time, Final_LoadShedding_Time, MA_Actual_Formula, MA_Contractual_Formula, IGA_Formula, EGA_Formula);
                            //CalculateAndUpdatePLFandKWHAfterLineLoss(site_id, fromDate, sLastWTG);

                            //Final_Production_Time = TimeSpan.Zero;
                            //Final_USMH_Time = TimeSpan.Zero;
                            //Final_SMH_Time = TimeSpan.Zero;
                            //Final_IGBD_Time = TimeSpan.Zero;
                            //Final_EGBD_Time = TimeSpan.Zero;
                            //Final_LoadShedding_Time = TimeSpan.Zero;
                            //Final_LULL_Time = TimeSpan.Zero;
                            //Final_OthersHour_Time = TimeSpan.Zero;
                            //Final_LullHour_Time = TimeSpan.Zero;

                            sLastInv = sCurrentInv;
                        }*/
                        switch (bd_type_id)
                        {
                            case 1:                 //if (bd_type_name.Equals("USMH"))            //Pending : optimise it use bd_type id
                                info = (DateTime.Now + "CalculateDailySolarKPI function : Inside Switch case 1.. Code Line No. " + new StackTrace(true).GetFrame(0).GetFileLineNumber() + "");
                                LogInfo(0, 1, 5, functionName, info, backend);
                                //Final_USMH_Time = result.TimeOfDay;
                                if (!string.IsNullOrEmpty(sBreakdown.strings) && sBreakdown.strings != "Nil")
                                {
                                    foreach (SolarLocationMaster_Calc SolarDevice in _SolarLocationMaster_Calc)
                                    {
                                        if (SolarDevice.icr == sBreakdown.icr && SolarDevice.inv == sBreakdown.inv && sBreakdown.smb == "Nil" && SolarDevice.strings == sBreakdown.strings)
                                        {
                                            //when SMB is empty (for Gundlupet)
                                            SolarDevice.USMH_5 += Final_Time;
                                            SolarDevice.USMH += Final_Time;


                                            SolarDevice.USMH_lostPOA += poa;

                                        }
                                        else if (SolarDevice.icr == sBreakdown.icr && SolarDevice.inv == sBreakdown.inv && SolarDevice.smb == sBreakdown.smb && SolarDevice.strings == sBreakdown.strings)
                                        {
                                            SolarDevice.USMH_4 += Final_Time;
                                            SolarDevice.USMH += Final_Time;

                                            SolarDevice.USMH_lostPOA += poa;
                                        }
                                    }
                                    //pending : SMB can be null

                                }
                                else if (!string.IsNullOrEmpty(sBreakdown.smb) && sBreakdown.smb != "Nil")
                                {
                                    foreach (SolarLocationMaster_Calc SolarDevice in _SolarLocationMaster_Calc)
                                    {
                                        if (SolarDevice.icr == sBreakdown.icr && SolarDevice.inv == sBreakdown.inv && SolarDevice.smb == sBreakdown.smb)
                                        {
                                            SolarDevice.USMH_3 += Final_Time;
                                            SolarDevice.USMH += Final_Time;


                                            SolarDevice.USMH_lostPOA += poa;
                                        }
                                    }
                                }
                                else if (!string.IsNullOrEmpty(sBreakdown.inv) && sBreakdown.inv != "Nil")
                                {
                                    foreach (SolarLocationMaster_Calc SolarDevice in _SolarLocationMaster_Calc)
                                    {
                                        if (SolarDevice.icr == sBreakdown.icr && SolarDevice.inv == sBreakdown.inv)
                                        {
                                            SolarDevice.USMH_2 += Final_Time;
                                            SolarDevice.USMH += Final_Time;


                                            SolarDevice.USMH_lostPOA += poa;
                                        }
                                    }
                                }
                                else if (!string.IsNullOrEmpty(sBreakdown.icr) && sBreakdown.icr != "Nil")
                                {
                                    foreach (SolarLocationMaster_Calc SolarDevice in _SolarLocationMaster_Calc)
                                    {
                                        if (SolarDevice.icr == sBreakdown.icr)
                                        {
                                            SolarDevice.USMH_1 += Final_Time;
                                            SolarDevice.USMH += Final_Time;


                                            SolarDevice.USMH_lostPOA += poa;
                                        }
                                    }
                                }
                                else
                                {
                                    //pending : error handling
                                }

                                //result = Convert.ToDateTime(totalTime.ToString());
                                //Final_USMH_Time = result.TimeOfDay;
                                break;

                            case 2:                 //else if (bd_type_name.Equals("SMH"))              
                                info = (DateTime.Now + "CalculateDailySolarKPI function : Inside switch case 2.. Code Line No. " + new StackTrace(true).GetFrame(0).GetFileLineNumber() + "");
                                LogInfo(0, 1, 5, functionName, info, backend);

                                if (!string.IsNullOrEmpty(sBreakdown.strings) && sBreakdown.strings != "Nil")
                                {
                                    foreach (SolarLocationMaster_Calc SolarDevice in _SolarLocationMaster_Calc)
                                    {
                                        if (SolarDevice.icr == sBreakdown.icr && SolarDevice.inv == sBreakdown.inv && sBreakdown.smb == "Nil" && SolarDevice.strings == sBreakdown.strings)
                                        {
                                            //when SMB is empty (for Gundlupet)
                                            SolarDevice.SMH_5 += Final_Time;
                                            SolarDevice.SMH += Final_Time;

                                            SolarDevice.SMH_lostPOA += poa;
                                        }
                                        else if (SolarDevice.icr == sBreakdown.icr && SolarDevice.inv == sBreakdown.inv && SolarDevice.smb == sBreakdown.smb && SolarDevice.strings == sBreakdown.strings)
                                        {
                                            SolarDevice.SMH_4 += Final_Time;
                                            SolarDevice.SMH += Final_Time;


                                            SolarDevice.SMH_lostPOA += poa;
                                        }
                                    }
                                    //pending : SMB can be null

                                }
                                else if (!string.IsNullOrEmpty(sBreakdown.smb) && sBreakdown.smb != "Nil")
                                {
                                    foreach (SolarLocationMaster_Calc SolarDevice in _SolarLocationMaster_Calc)
                                    {
                                        if (SolarDevice.icr == sBreakdown.icr && SolarDevice.inv == sBreakdown.inv && SolarDevice.smb == sBreakdown.smb)
                                        {
                                            SolarDevice.SMH_3 += Final_Time;
                                            SolarDevice.SMH += Final_Time;


                                            SolarDevice.SMH_lostPOA += poa;
                                        }
                                    }
                                }
                                else if (!string.IsNullOrEmpty(sBreakdown.inv) && sBreakdown.inv != "Nil")
                                {
                                    foreach (SolarLocationMaster_Calc SolarDevice in _SolarLocationMaster_Calc)
                                    {
                                        if (SolarDevice.icr == sBreakdown.icr && SolarDevice.inv == sBreakdown.inv)
                                        {
                                            SolarDevice.SMH_2 += Final_Time;
                                            SolarDevice.SMH += Final_Time;


                                            SolarDevice.SMH_lostPOA += poa;
                                        }
                                    }
                                }
                                else if (!string.IsNullOrEmpty(sBreakdown.icr) && sBreakdown.icr != "Nil")
                                {
                                    foreach (SolarLocationMaster_Calc SolarDevice in _SolarLocationMaster_Calc)
                                    {
                                        if (SolarDevice.icr == sBreakdown.icr)
                                        {
                                            SolarDevice.SMH_1 += Final_Time;
                                            SolarDevice.SMH += Final_Time;



                                            SolarDevice.SMH_lostPOA += poa;
                                        }
                                    }
                                }
                                else
                                {
                                    //pending : error handling
                                }
                                break;

                            case 3:  //("IGBD"))                
                                /*string ext_bd = sBreakdown.ext_bd;
                                if (ext_db != "IGBD")
                                {
                                    throw new Exception("EX_BD " + ext_bd + " shoudl be EGBD for BD_TYPE " + bd_type_name + " For ICR " + sBreakdown.icr + "/" + sBreakdown.inv + " for date " + fromDate);
                                }*/
                                info = (DateTime.Now + "CalculateDailySolarKPI function : Inside switch case 3 .. Code Line No. " + new StackTrace(true).GetFrame(0).GetFileLineNumber() + "");
                                LogInfo(0, 1, 5, functionName, info, backend);

                                if (!string.IsNullOrEmpty(sBreakdown.strings) && sBreakdown.strings != "Nil")
                                {
                                    foreach (SolarLocationMaster_Calc SolarDevice in _SolarLocationMaster_Calc)
                                    {
                                        if (SolarDevice.icr == sBreakdown.icr && SolarDevice.inv == sBreakdown.inv && sBreakdown.smb == "Nil" && SolarDevice.strings == sBreakdown.strings)
                                        {
                                            //when SMB is empty (for Gundlupet)
                                            SolarDevice.IGBD_6 += Final_Time;
                                            SolarDevice.IGBD += Final_Time;


                                            SolarDevice.IGBD_lostPOA += poa;
                                        }
                                        else if (SolarDevice.icr == sBreakdown.icr && SolarDevice.inv == sBreakdown.inv && SolarDevice.smb == sBreakdown.smb && SolarDevice.strings == sBreakdown.strings)
                                        {
                                            SolarDevice.IGBD_5 += Final_Time;
                                            SolarDevice.IGBD += Final_Time;


                                            SolarDevice.IGBD_lostPOA += poa;
                                        }
                                    }
                                    //pending : SMB can be null

                                }
                                else if (!string.IsNullOrEmpty(sBreakdown.smb) && sBreakdown.smb != "Nil")
                                {
                                    foreach (SolarLocationMaster_Calc SolarDevice in _SolarLocationMaster_Calc)
                                    {
                                        if (SolarDevice.icr == sBreakdown.icr && SolarDevice.inv == sBreakdown.inv && SolarDevice.smb == sBreakdown.smb)
                                        {
                                            SolarDevice.IGBD_4 += Final_Time;
                                            SolarDevice.IGBD += Final_Time;


                                            SolarDevice.IGBD_lostPOA += poa;
                                        }
                                    }
                                }
                                else if (!string.IsNullOrEmpty(sBreakdown.inv) && sBreakdown.inv != "Nil")
                                {
                                    foreach (SolarLocationMaster_Calc SolarDevice in _SolarLocationMaster_Calc)
                                    {
                                        if (SolarDevice.icr == sBreakdown.icr && SolarDevice.inv == sBreakdown.inv)
                                        {
                                            SolarDevice.IGBD_3 += Final_Time;
                                            SolarDevice.IGBD += Final_Time;



                                            SolarDevice.IGBD_lostPOA += poa;
                                        }
                                    }
                                }
                                else if (!string.IsNullOrEmpty(sBreakdown.icr) && sBreakdown.icr != "Nil")
                                {
                                    foreach (SolarLocationMaster_Calc SolarDevice in _SolarLocationMaster_Calc)
                                    {
                                        if (SolarDevice.icr == sBreakdown.icr)
                                        {
                                            SolarDevice.IGBD_2 += Final_Time;
                                            SolarDevice.IGBD += Final_Time;


                                            SolarDevice.IGBD_lostPOA += poa;
                                        }
                                    }
                                }
                                else if (!string.IsNullOrEmpty(sBreakdown.igbd) && sBreakdown.igbd != "Nil")
                                {
                                    foreach (SolarLocationMaster_Calc SolarDevice in _SolarLocationMaster_Calc)
                                    {
                                        if (SolarDevice.ig == sBreakdown.igbd)
                                        {
                                            SolarDevice.IGBD_1 += Final_Time;
                                            SolarDevice.IGBD += Final_Time;


                                            SolarDevice.IGBD_lostPOA += poa;
                                        }
                                    }
                                }
                                //else if (!string.IsNullOrEmpty(sBreakdown.igbd) && sBreakdown.igbd != "Nil")
                                //{
                                //    foreach (SolarLocationMaster_Calc SolarDevice in _SolarLocationMaster_Calc)
                                //    {
                                //        if (SolarDevice.ig == sBreakdown.igbd)
                                //        {
                                //            SolarDevice.IGBD_1 += Final_Time;
                                //            SolarDevice.IGBD += Final_Time;


                                //            SolarDevice.IGBD_lostPOA += poa;
                                //        }
                                //    }
                                //}
                                else
                                {
                                    //pending : error handling
                                }
                                break;

                            case 4:     //("EGBD"))                
                                        //Final_EGBD_Time = result.TimeOfDay;
                                info = (DateTime.Now + "CalculateDailySolarKPI function : Inside switch case 4 .. Code Line No. " + new StackTrace(true).GetFrame(0).GetFileLineNumber() + "");
                                LogInfo(0, 1, 5, functionName, info, backend);

                                string ext_bd = sBreakdown.ext_bd;
                                if (ext_bd != "EGBD")
                                {
                                    throw new Exception("EX_BD " + ext_bd + " should be EGBD for BD_TYPE " + bd_type_name + " For ICR " + sBreakdown.icr + "/" + sBreakdown.inv + " for date " + fromDate);
                                }
                                if (!string.IsNullOrEmpty(sBreakdown.icr) && sBreakdown.icr != "Nil")
                                {
                                    foreach (SolarLocationMaster_Calc SolarDevice in _SolarLocationMaster_Calc)
                                    {
                                        //SolarDevice.total_strings
                                        if (SolarDevice.icr == sBreakdown.icr)
                                        {
                                            SolarDevice.EGBD_2 += Final_Time;
                                            SolarDevice.EGBD += Final_Time;


                                            SolarDevice.EGBD_lostPOA += poa;
                                        }
                                    }
                                    //pending : SMB can be null

                                }
                                else if (!string.IsNullOrEmpty(sBreakdown.ext_bd) && sBreakdown.ext_bd != "Nil") //SITE SHUT
                                {
                                    foreach (SolarLocationMaster_Calc SolarDevice in _SolarLocationMaster_Calc)
                                    {
                                        //if (SolarDevice.icr == sBreakdown.icr && SolarDevice.inv == sBreakdown.inv && SolarDevice.smb == sBreakdown.smb)
                                        {
                                            SolarDevice.EGBD_1 += Final_Time;
                                            SolarDevice.EGBD += Final_Time;

                                            //siteShutdownEGBDLoss += poa * SolarDevice.capacity;

                                            SolarDevice.EGBD_lostPOA += poa;
                                        }
                                    }
                                }

                                break;

                            case 5:                 //("Load Shedding"))                
                                                    //Final_LoadShedding_Time = result.TimeOfDay;
                                info = (DateTime.Now + "CalculateDailySolarKPI function : Inside switch case 5 .. Code Line No. " + new StackTrace(true).GetFrame(0).GetFileLineNumber() + " ");
                                LogInfo(0, 1, 5, functionName, info, backend);

                                ext_bd = sBreakdown.ext_bd;
                                if (ext_bd != "EGBD")
                                {
                                    throw new Exception("EX_BD " + ext_bd + " shoudl be EGBD for BD_TYPE " + bd_type_name + " For ICR " + sBreakdown.icr + "/" + sBreakdown.inv + " for date " + fromDate);
                                }
                                if (!string.IsNullOrEmpty(sBreakdown.strings) && sBreakdown.strings != "Nil")
                                {
                                    foreach (SolarLocationMaster_Calc SolarDevice in _SolarLocationMaster_Calc)
                                    {
                                        if (SolarDevice.icr == sBreakdown.icr && SolarDevice.inv == sBreakdown.inv && sBreakdown.smb == "Nil" && SolarDevice.strings == sBreakdown.strings)
                                        {
                                            //when SMB is empty (for Gundlupet)
                                            SolarDevice.IGBD_6 += Final_Time;
                                            SolarDevice.IGBD += Final_Time;


                                            SolarDevice.IGBD_lostPOA += poa;
                                        }
                                        else if (SolarDevice.icr == sBreakdown.icr && SolarDevice.inv == sBreakdown.inv && SolarDevice.smb == sBreakdown.smb && SolarDevice.strings == sBreakdown.strings)
                                        {
                                            SolarDevice.LS_4 += Final_Time;
                                            SolarDevice.LS += Final_Time;


                                            SolarDevice.LS_lostPOA += poa;
                                        }
                                    }
                                    //pending : SMB can be null

                                }
                                else if (!string.IsNullOrEmpty(sBreakdown.smb) && sBreakdown.smb != "Nil")
                                {
                                    foreach (SolarLocationMaster_Calc SolarDevice in _SolarLocationMaster_Calc)
                                    {
                                        if (SolarDevice.icr == sBreakdown.icr && SolarDevice.inv == sBreakdown.inv && SolarDevice.smb == sBreakdown.smb)
                                        {
                                            SolarDevice.LS_3 += Final_Time;
                                            SolarDevice.LS += Final_Time;


                                            SolarDevice.LS_lostPOA += poa;
                                        }
                                    }
                                }
                                else if (!string.IsNullOrEmpty(sBreakdown.inv) && sBreakdown.inv != "Nil")
                                {
                                    foreach (SolarLocationMaster_Calc SolarDevice in _SolarLocationMaster_Calc)
                                    {
                                        if (SolarDevice.icr == sBreakdown.icr && SolarDevice.inv == sBreakdown.inv)
                                        {
                                            SolarDevice.LS_2 += Final_Time;
                                            SolarDevice.LS += Final_Time;


                                            SolarDevice.LS_lostPOA += poa;
                                        }
                                    }
                                }
                                else if (!string.IsNullOrEmpty(sBreakdown.icr) && sBreakdown.icr != "Nil")
                                {
                                    foreach (SolarLocationMaster_Calc SolarDevice in _SolarLocationMaster_Calc)
                                    {
                                        if (SolarDevice.icr == sBreakdown.icr)
                                        {
                                            SolarDevice.LS_1 += Final_Time;
                                            SolarDevice.LS += Final_Time;



                                            SolarDevice.LS_lostPOA += poa;
                                        }
                                    }
                                }
                                else
                                {
                                    //pending : error handling
                                }

                                //result = Convert.ToDateTime(totalTime.ToString());
                                //Final_USMH_Time = result.TimeOfDay;
                                break;

                            case 6:                 //("Others Hour"))                
                                info = (DateTime.Now + "CalculateDailySolarKPI function : Inside switch case 6.. Code Line No. " + new StackTrace(true).GetFrame(0).GetFileLineNumber() + "");
                                LogInfo(0, 1, 5, functionName, info, backend);

                                if (!string.IsNullOrEmpty(sBreakdown.strings) && sBreakdown.strings != "Nil")
                                {
                                    foreach (SolarLocationMaster_Calc SolarDevice in _SolarLocationMaster_Calc)
                                    {
                                        if (SolarDevice.icr == sBreakdown.icr && SolarDevice.inv == sBreakdown.inv && sBreakdown.smb == "Nil" && SolarDevice.strings == sBreakdown.strings)
                                        {
                                            //when SMB is empty (for Gundlupet)
                                            SolarDevice.OthersHour_5 += Final_Time;
                                            SolarDevice.OthersHour += Final_Time;

                                            SolarDevice.OthersHour_lostPOA += poa;

                                        }
                                        else if (SolarDevice.icr == sBreakdown.icr && SolarDevice.inv == sBreakdown.inv && SolarDevice.smb == sBreakdown.smb && SolarDevice.strings == sBreakdown.strings)
                                        {
                                            SolarDevice.OthersHour_4 += Final_Time;
                                            SolarDevice.OthersHour += Final_Time;

                                            SolarDevice.OthersHour_lostPOA += poa;
                                        }
                                    }
                                    //pending : SMB can be null

                                }
                                else if (!string.IsNullOrEmpty(sBreakdown.smb) && sBreakdown.smb != "Nil")
                                {
                                    foreach (SolarLocationMaster_Calc SolarDevice in _SolarLocationMaster_Calc)
                                    {
                                        if (SolarDevice.icr == sBreakdown.icr && SolarDevice.inv == sBreakdown.inv && SolarDevice.smb == sBreakdown.smb)
                                        {
                                            SolarDevice.OthersHour_3 += Final_Time;
                                            SolarDevice.OthersHour += Final_Time;


                                            SolarDevice.OthersHour_lostPOA += poa;
                                        }
                                    }
                                }
                                else if (!string.IsNullOrEmpty(sBreakdown.inv) && sBreakdown.inv != "Nil")
                                {
                                    foreach (SolarLocationMaster_Calc SolarDevice in _SolarLocationMaster_Calc)
                                    {
                                        if (SolarDevice.icr == sBreakdown.icr && SolarDevice.inv == sBreakdown.inv)
                                        {
                                            SolarDevice.OthersHour_2 += Final_Time;
                                            SolarDevice.OthersHour += Final_Time;


                                            SolarDevice.OthersHour_lostPOA += poa;
                                        }
                                    }
                                }
                                else if (!string.IsNullOrEmpty(sBreakdown.icr) && sBreakdown.icr != "Nil")
                                {
                                    foreach (SolarLocationMaster_Calc SolarDevice in _SolarLocationMaster_Calc)
                                    {
                                        if (SolarDevice.icr == sBreakdown.icr)
                                        {
                                            SolarDevice.OthersHour_1 += Final_Time;
                                            SolarDevice.OthersHour += Final_Time;


                                            SolarDevice.OthersHour_lostPOA += poa;
                                        }
                                    }
                                }
                                else
                                {
                                    //pending : error handling
                                }
                                break;

                            case 7:                 //if (bd_type_name.Equals("LULL"))                
                                info = (DateTime.Now + "CalculateDailySolarKPI function : Inside switch case 7.. Code Line No. " + new StackTrace(true).GetFrame(0).GetFileLineNumber() + "");
                                LogInfo(0, 1, 5, functionName, info, backend);

                                if (!string.IsNullOrEmpty(sBreakdown.inv) && sBreakdown.inv != "Nil")
                                {
                                    foreach (SolarLocationMaster_Calc SolarDevice in _SolarLocationMaster_Calc)
                                    {
                                        //SolarDevice.total_strings
                                        if (SolarDevice.icr == sBreakdown.icr)
                                        {
                                            SolarDevice.LullHrs_2 += Final_Time;
                                            SolarDevice.LullHrs += Final_Time;


                                            SolarDevice.LullHrs_lostPOA += poa;
                                        }
                                    }
                                    //pending : SMB can be null

                                }
                                else if (!string.IsNullOrEmpty(sBreakdown.ext_bd) && sBreakdown.ext_bd != "Nil") //SITE SHUT

                                {
                                    foreach (SolarLocationMaster_Calc SolarDevice in _SolarLocationMaster_Calc)
                                    {
                                        //if (SolarDevice.icr == sBreakdown.icr && SolarDevice.inv == sBreakdown.inv && SolarDevice.smb == sBreakdown.smb)
                                        {
                                            SolarDevice.LullHrs_1 += Final_Time;
                                            SolarDevice.LullHrs += Final_Time;

                                            //  siteShutdownLullLoss += poa * SolarDevice.capacity;

                                            SolarDevice.LullHrs_lostPOA += poa;

                                        }
                                    }
                                }

                                break;

                            default:
                                info = (DateTime.Now + "CalculateDailySolarKPI function : Inside switch default case .. Code Line No. " + new StackTrace(true).GetFrame(0).GetFileLineNumber() + "");
                                LogInfo(0, 1, 5, functionName, info, backend);

                                //Pending : error reporting
                                throw new Exception("Unsupported BD_TYPE " + bd_type_id + " For WTG " + sCurrentInv + " for date " + fromDate);
                                break;

                        }

                    } // end of foreach
                      //double siteShutdownEGBDLossPerString = siteShutdownEGBDLoss / _SolarLocationMaster_Calc.Count;
                      //double siteShutdownLullLossPerString = siteShutdownLullLoss / _SolarLocationMaster_Calc.Count;
                      //Process BREADOWN UPDATE data
                    int stringCount = 0;
                    iBreakdownCount = 0;
                    qry = @"SELECT * FROM uploading_file_generation_solar as t1 ";
                    iGenerationCount = 0;
                    filter = "";
                    chkfilter = 0;
                    filter = "" + site_id;
                    if (!string.IsNullOrEmpty(fromDate) && fromDate != "All")
                    {
                        //filter += "(date >= '" + fromDate + "'  and date<= '" + toDate + "')";
                        filter += " AND date = '" + fromDate + "'";
                        chkfilter = 1;
                    }

                    if (!string.IsNullOrEmpty(filter))
                    {
                        qry += " where  site_id = " + filter;
                    }
                    qry += "  group by inverter";
                    bProcessGen = false;
                    double FinalCapacity = 0;
                    string qryTarget = "select pr from monthly_target_kpi_solar where site_id = " + site_id + " and month_no = month('" + fromDate + "') and year = year('" + fromDate + "') ";
                    List<SolarMonthlyTargetKPI> _SolarPRTarget = new List<SolarMonthlyTargetKPI>();
                    try
                    {
                        _SolarPRTarget = await Context.GetData<SolarMonthlyTargetKPI>(qryTarget).ConfigureAwait(false);
                    }
                    catch (Exception e)
                    {
                        string msg = "Exception while fetching records from monthly_target_kpi_solar table, due to : " + e.ToString();
                        //API_ErrorLog(msg);
                        LogError(0, 1, 2, functionName, msg, backend);
                    }
                    info = (DateTime.Now + "CalculateDailySolarKPI function : received data in solarPRTarget list .. Code Line No. " + new StackTrace(true).GetFrame(0).GetFileLineNumber() + "");
                    LogInfo(0, 1, 5, functionName, info, backend);
                    int index4 = 0;
                    double prTarget = 0;
                    foreach (SolarMonthlyTargetKPI pr in _SolarPRTarget)
                    {
                        info = (DateTime.Now + "CalculateDailySolarKPI function : Inside foreach  solarPRTarget.. Code Line No. " + new StackTrace(true).GetFrame(0).GetFileLineNumber() + " Iteration/Count :" + index4 + " / " + _SiteFormulas.Count);
                        LogInfo(0, 1, 5, functionName, info, backend);
                        index4++;

                        prTarget = pr.PR;
                        break;
                    }
                    //List<SolarDailyGenSummary> _SolarDailyUploadGen = await Context.GetData<SolarDailyGenSummary>(qry).ConfigureAwait(false);
                    //foreach (SolarLocationMaster_Calc SolarDevice in _SolarLocationMaster_Calc)
                    //for each solar generation device, get the breakdown data
                    sLastInv = "";
                    sLastICR_INV = "";
                    int index5 = 0;
                    foreach (SolarLocationMaster_Calc SolarDevice in _SolarLocationMaster_Calc)
                    {
                        info = (DateTime.Now + "CalculateDailySolarKPI function : Inside foreach solarLocationMaster_Calc .. Code Line No. " + new StackTrace(true).GetFrame(0).GetFileLineNumber() + " Iteration/Count :" + index5 + " / " + _SiteFormulas.Count);
                        LogInfo(0, 1, 5, functionName, info, backend);
                        index5++;

                        iBreakdownCount++;
                        bProcessGen = true;
                        TimeSpan Get_Time;
                        sCurrentInv = SolarDevice.icr + "/" + SolarDevice.inv;
                        sCurrentICR_INV = SolarDevice.icr_inv;

                        //                    string sDeviceICR = SolarDevice.icr;
                        //                    string sDeviceINV = SolarDevice.inv;

                        if (iBreakdownCount == 1)
                        {
                            sLastICR_INV = sCurrentICR_INV;
                        }
                        //if (sLastICR_INV != sCurrentICR_INV)
                        //{
                        if (sLastICR_INV != sCurrentICR_INV || iBreakdownCount == _SolarLocationMaster_Calc.Count)
                        {
                            //for last
                            if (iBreakdownCount == _SolarLocationMaster_Calc.Count)
                            {
                                sLastICR_INV = sCurrentICR_INV;
                                stringCount++;
                                Final_USMH_Time += SolarDevice.USMH;
                                Final_USMH_Loss += SolarDevice.USMH_lostPOA * SolarDevice.capacity * prTarget / 100; ;

                                Final_SMH_Time += SolarDevice.SMH;
                                Final_SMH_Loss += SolarDevice.SMH_lostPOA * SolarDevice.capacity * prTarget / 100;


                                Final_IGBD_Time += SolarDevice.IGBD;
                                Final_IGBD_Loss += SolarDevice.IGBD_lostPOA * SolarDevice.capacity * prTarget / 100;

                                Final_EGBD_Time += SolarDevice.EGBD;
                                Final_EGBD_Loss += SolarDevice.EGBD_lostPOA * SolarDevice.capacity * prTarget / 100;

                                Final_LoadShedding_Time += SolarDevice.LS;
                                Final_LS_Loss += SolarDevice.LS_lostPOA * SolarDevice.capacity * prTarget / 100;

                                Final_LULL_Time += SolarDevice.LullHrs;
                                Final_LULL_Loss += SolarDevice.LullHrs_lostPOA * SolarDevice.capacity * prTarget / 100;

                                Final_OthersHour_Time += SolarDevice.OthersHour;
                                Final_OthersHour_Loss += SolarDevice.OthersHour_lostPOA * SolarDevice.capacity * prTarget / 100;

                                //double stringMA += (12 - SolarDevice.USMH.TotalSeconds/3600 - SolarDevice.SMH.TotalSeconds/3600) / 12;
                                InvLevelMA += Math.Round(GetSolarCalculatedValue(SolarDevice.USMH.TotalSeconds / 3600, SolarDevice.SMH.TotalSeconds / 3600, SolarDevice.IGBD.TotalSeconds / 3600, SolarDevice.EGBD.TotalSeconds / 3600, SolarDevice.OthersHour.TotalSeconds / 3600, SolarDevice.LS.TotalSeconds / 3600, MA_Actual_Formula), 6);
                                //InvLevelMACont += Math.Round(GetSolarCalculatedValue(SolarDevice.USMH.TotalSeconds / 3600, SolarDevice.SMH.TotalSeconds / 3600, SolarDevice.IGBD.TotalSeconds / 3600, SolarDevice.EGBD.TotalSeconds / 3600, SolarDevice.OthersHour.TotalSeconds / 3600, SolarDevice.LS.TotalSeconds / 3600, MA_Contractual_Formula), 6);
                                InvLevelIGA += Math.Round(GetSolarCalculatedValue(SolarDevice.USMH.TotalSeconds / 3600, SolarDevice.SMH.TotalSeconds / 3600, SolarDevice.IGBD.TotalSeconds / 3600, SolarDevice.EGBD.TotalSeconds / 3600, SolarDevice.OthersHour.TotalSeconds / 3600, SolarDevice.LS.TotalSeconds / 3600, IGA_Formula), 6);
                                InvLevelEGA += Math.Round(GetSolarCalculatedValue(SolarDevice.USMH.TotalSeconds / 3600, SolarDevice.SMH.TotalSeconds / 3600, SolarDevice.IGBD.TotalSeconds / 3600, SolarDevice.EGBD.TotalSeconds / 3600, SolarDevice.OthersHour.TotalSeconds / 3600, SolarDevice.LS.TotalSeconds / 3600, EGA_Formula), 6);
                                InvLevelEGA_B += Math.Round(GetSolarCalculatedValue(SolarDevice.USMH.TotalSeconds / 3600, SolarDevice.SMH.TotalSeconds / 3600, SolarDevice.IGBD.TotalSeconds / 3600, SolarDevice.EGBD.TotalSeconds / 3600, SolarDevice.OthersHour.TotalSeconds / 3600, 0, EGA_Formula), 6);
                                InvLevelEGA_C += Math.Round(GetSolarCalculatedValue(SolarDevice.USMH.TotalSeconds / 3600, SolarDevice.SMH.TotalSeconds / 3600, SolarDevice.IGBD.TotalSeconds / 3600, 0, SolarDevice.OthersHour.TotalSeconds / 3600, SolarDevice.LS.TotalSeconds / 3600, EGA_Formula), 6);
                                //PENDING:

                                FinalCapacity += SolarDevice.capacity;
                            }
                            TimeSpan totalDownTime = Final_USMH_Time + Final_SMH_Time + Final_IGBD_Time + Final_EGBD_Time + Final_LoadShedding_Time + Final_LULL_Time + Final_OthersHour_Time;
                            totalLoss = Final_USMH_Loss + Final_SMH_Loss + Final_IGBD_Loss + Final_EGBD_Loss + Final_LS_Loss + Final_LULL_Loss + Final_OthersHour_Loss;
                            double totalDownTimeDouble = totalDownTime.TotalSeconds / 3600;
                            if (totalDownTimeDouble > 0)
                            {
                                double FinalProductionHours = (12 * stringCount - totalDownTimeDouble) / stringCount;
                                double USMH_Hr = (Final_USMH_Time.TotalSeconds / 3600) / stringCount;
                                double SMH_Hr = (Final_SMH_Time.TotalSeconds / 3600) / stringCount;
                                double IGBD_Hr = (Final_IGBD_Time.TotalSeconds / 3600) / stringCount;
                                double EGBD_Hr = (Final_EGBD_Time.TotalSeconds / 3600) / stringCount;
                                double LS_Hr = (Final_LoadShedding_Time.TotalSeconds / 3600) / stringCount;
                                double Lull_hr = (Final_LULL_Time.TotalSeconds / 3600) / stringCount;
                                double O_hr = (Final_OthersHour_Time.TotalSeconds / 3600) / stringCount;

                                double MA = InvLevelMA / stringCount;
                                double IGA = InvLevelIGA / stringCount;
                                double EGA = InvLevelEGA / stringCount;
                                double EGAB = InvLevelEGA_B / stringCount;
                                double EGAC = InvLevelEGA_C / stringCount;


                                TimeSpan availableHours = new TimeSpan(12 * stringCount, 0, 0);
                                double availableHoursDouble = availableHours.TotalSeconds / 3600;
                                availableHoursDouble = availableHoursDouble - totalDownTimeDouble;
                                await CalculateAndUpdatePLFandKWHAfterLineLossSolar(site_id, fromDate, fromDate, FinalCapacity);

                                await UpdateSolarKPIs(site_id, sLastICR_INV, totalDownTimeDouble, availableHoursDouble,
                                 Final_USMH_Loss, Final_SMH_Loss, Final_IGBD_Loss, Final_EGBD_Loss, Final_LS_Loss, Final_LULL_Loss,
                                 Final_OthersHour_Loss, totalLoss, fromDate, USMH_Hr, SMH_Hr, IGBD_Hr, EGBD_Hr, LS_Hr, Lull_hr, O_hr, MA, IGA, EGA, EGAB, EGAC, FinalProductionHours, prTarget);

                            }
                            FinalCapacity = 0;
                            Final_USMH_Time = TimeSpan.Zero;
                            Final_SMH_Time = TimeSpan.Zero;
                            Final_IGBD_Time = TimeSpan.Zero;
                            Final_EGBD_Time = TimeSpan.Zero;
                            Final_LoadShedding_Time = TimeSpan.Zero;
                            Final_LULL_Time = TimeSpan.Zero;
                            Final_OthersHour_Time = TimeSpan.Zero;

                            InvLevelMA = 0;
                            InvLevelIGA = 0;
                            InvLevelEGA = 0;
                            InvLevelEGA_B = 0;
                            InvLevelEGA_C = 0;

                            Final_USMH_Loss = 0;
                            Final_SMH_Loss = 0;
                            Final_IGBD_Loss = 0;
                            Final_EGBD_Loss = 0;
                            Final_LS_Loss = 0;
                            Final_LULL_Loss = 0;
                            Final_OthersHour_Loss = 0;

                            stringCount = 0;
                            totalLoss = 0;
                            sLastInv = sCurrentInv;
                            sLastICR_INV = sCurrentICR_INV;
                        }
                        //consolidating all string breakdown time for this inverter
                        //Final_Production_Time += SolarDevice.Production; //pending
                        /*stringCount++;
                        FinalCapacity += SolarDevice.capacity;
                        Final_USMH_Time += SolarDevice.USMH;
                        Final_USMH_Loss += SolarDevice.USMH_lostPOA * SolarDevice.capacity;

                        Final_SMH_Time += SolarDevice.SMH;
                        Final_SMH_Loss += SolarDevice.SMH_lostPOA * SolarDevice.capacity;


                        Final_IGBD_Time += SolarDevice.IGBD;
                        Final_IGBD_Loss += SolarDevice.IGBD_lostPOA * SolarDevice.capacity;

                        Final_EGBD_Time += SolarDevice.EGBD;
                        Final_EGBD_Loss += SolarDevice.EGBD_lostPOA * SolarDevice.capacity;

                        Final_LoadShedding_Time += SolarDevice.LS;
                        Final_LS_Loss += SolarDevice.LS_lostPOA * SolarDevice.capacity;

                        Final_LULL_Time += SolarDevice.LullHrs;
                        Final_LULL_Loss += SolarDevice.LullHrs_lostPOA * SolarDevice.capacity;

                        Final_OthersHour_Time += SolarDevice.OthersHour;
                        Final_OthersHour_Loss += SolarDevice.OthersHour_lostPOA * SolarDevice.capacity;*/

                        stringCount++;
                        Final_USMH_Time += SolarDevice.USMH;
                        Final_USMH_Loss += SolarDevice.USMH_lostPOA * SolarDevice.capacity * prTarget / 100;

                        Final_SMH_Time += SolarDevice.SMH;
                        Final_SMH_Loss += SolarDevice.SMH_lostPOA * SolarDevice.capacity * prTarget / 100;


                        Final_IGBD_Time += SolarDevice.IGBD;
                        Final_IGBD_Loss += SolarDevice.IGBD_lostPOA * SolarDevice.capacity * prTarget / 100;

                        Final_EGBD_Time += SolarDevice.EGBD;
                        Final_EGBD_Loss += SolarDevice.EGBD_lostPOA * SolarDevice.capacity * prTarget / 100;

                        Final_LoadShedding_Time += SolarDevice.LS;
                        Final_LS_Loss += SolarDevice.LS_lostPOA * SolarDevice.capacity * prTarget / 100;

                        Final_LULL_Time += SolarDevice.LullHrs;
                        Final_LULL_Loss += SolarDevice.LullHrs_lostPOA * SolarDevice.capacity * prTarget / 100;

                        Final_OthersHour_Time += SolarDevice.OthersHour;
                        Final_OthersHour_Loss += SolarDevice.OthersHour_lostPOA * SolarDevice.capacity * prTarget / 100;

                        //double stringMA += (12 - SolarDevice.USMH.TotalSeconds/3600 - SolarDevice.SMH.TotalSeconds/3600) / 12;
                        InvLevelMA += Math.Round(GetSolarCalculatedValue(SolarDevice.USMH.TotalSeconds / 3600, SolarDevice.SMH.TotalSeconds / 3600, SolarDevice.IGBD.TotalSeconds / 3600, SolarDevice.EGBD.TotalSeconds / 3600, SolarDevice.OthersHour.TotalSeconds / 3600, SolarDevice.LS.TotalSeconds / 3600, MA_Actual_Formula), 6);
                        InvLevelIGA += Math.Round(GetSolarCalculatedValue(SolarDevice.USMH.TotalSeconds / 3600, SolarDevice.SMH.TotalSeconds / 3600, SolarDevice.IGBD.TotalSeconds / 3600, SolarDevice.EGBD.TotalSeconds / 3600, SolarDevice.OthersHour.TotalSeconds / 3600, SolarDevice.LS.TotalSeconds / 3600, IGA_Formula), 6);
                        InvLevelEGA += Math.Round(GetSolarCalculatedValue(SolarDevice.USMH.TotalSeconds / 3600, SolarDevice.SMH.TotalSeconds / 3600, SolarDevice.IGBD.TotalSeconds / 3600, SolarDevice.EGBD.TotalSeconds / 3600, SolarDevice.OthersHour.TotalSeconds / 3600, SolarDevice.LS.TotalSeconds / 3600, EGA_Formula), 6);
                        InvLevelEGA_B += Math.Round(GetSolarCalculatedValue(SolarDevice.USMH.TotalSeconds / 3600, SolarDevice.SMH.TotalSeconds / 3600, SolarDevice.IGBD.TotalSeconds / 3600, SolarDevice.EGBD.TotalSeconds / 3600, SolarDevice.OthersHour.TotalSeconds / 3600, 0, EGA_Formula), 6);
                        InvLevelEGA_C += Math.Round(GetSolarCalculatedValue(SolarDevice.USMH.TotalSeconds / 3600, SolarDevice.SMH.TotalSeconds / 3600, SolarDevice.IGBD.TotalSeconds / 3600, 0, SolarDevice.OthersHour.TotalSeconds / 3600, SolarDevice.LS.TotalSeconds / 3600, EGA_Formula), 6);
                        //PENDING:
                        double Final_POA = SolarDevice.lostPOA;
                        // Consolidate lostPOA and consolidate Capacity
                        //Expected kwh = capacity X POA(fullday)
                        //Loss = capacity X loassPOA
                        //totalLoss += SolarDevice.capacity * Final_POA;
                        //Actual kwh = Expected_kwh - loss

                    }//end of for each

                    //                if(bProcessGen)
                    //                    CalculateAndUpdateSolarKPIs(site_id, fromDate, sLastInv, solarGeneration, Final_Production_Time, Final_USMH_Time, Final_SMH_Time, Final_IGBD_Time, Final_EGBD_Time, Final_OthersHour_Time, Final_LoadShedding_Time, Final_LullHour_Time, MA_Actual_Formula, MA_Contractual_Formula, IGA_Formula, EGA_Formula);
                    //Pending : validation of Total time to be 24
                    info = (DateTime.Now + "CalculateDailySolarKPI function : Last statement of this function.. Code Line No. " + new StackTrace(true).GetFrame(0).GetFileLineNumber() + "");
                    LogInfo(0, 1, 5, functionName, info, backend);
                    response = true;
                }
                catch (Exception ex)
                {
                    string msg = "CalculateDailySolarKPI function : Exception caught.. Code Line No. " + new StackTrace(true).GetFrame(0).GetFileLineNumber() + ", exception :" + ex.ToString();
                    //API_ErrorLog(msg);
                    LogError(0, 1, 2, functionName, msg, backend);
                    string strEx = ex.Message;
                    response = false;
                    //pending : log error
                    throw new Exception(strEx);
                }
                info = (DateTime.Now + "CalculateDailySolarKPI function : returning response.. Code Line No. " + new StackTrace(true).GetFrame(0).GetFileLineNumber() + "" + response);
                LogInfo(0, 1, 5, functionName, info, backend);
                finalRes = 0;
            }
            catch (Exception e)
            {
                string msg = "Exception in CalculateDailySolarKPI function, due to : " + e.ToString();
                //API_ErrorLog(msg);
                LogError(0, 1, 2, functionName, msg, backend);
                errorCodes += finalRes.ToString() + ",";
                return errorCodes;
            }

            int tempCorrectedPr = await TemperatureCorrectedPRCalc(site, fromDate, toDate);
            if (tempCorrectedPr != 0)
            {
                errorCodes += tempCorrectedPr.ToString() + ",";
            }
            else
            {
                //finalRes = 1105;
            }

            int tempCorrectedContinued = await getTemperatureCorrectedPR(site, fromDate, toDate);
            if (tempCorrectedContinued != 0)
            {
                errorCodes += tempCorrectedContinued.ToString() + ",";
                //finalRes = 11012;
            }
            else
            {
                //finalRes = 11012;
            }

            errorCodes += finalRes.ToString() + ",";
            return errorCodes;
        }


        private async Task<bool> UpdateSolarKPIs(int site_id, string inverter, double downHours, double availableHours,
            double Final_USMH_Loss, double Final_SMH_Loss, double Final_IGBD_Loss, double Final_EGBD_Loss, double Final_LS_Loss, double Final_LULL_Loss,
            double Final_OthersHour_Loss, double totalLoss, string fromDate, double USMH_Hr, double SMH_Hr, double IGBD_Hr, double EGBD_Hr, double LS_Hr, double Lull_Hr, double O_Hr,
            double MA, double IGA, double EGA, double EGAB, double EGAC, double FinalProductionHrs, double prTarget)
        {
            //API_InformationLog("Inside UpdateSolarKPIs function ");


            // double MA_percent = 100-(downHours / availableHours * 100);
            if (availableHours + downHours > 12.2 || availableHours + downHours < 11.8)
            {
                //PENDING: ERROR VALIDATION
            }
            string updateQuery = "update uploading_file_generation_solar set expected_kwh = expected_kwh - " + (totalLoss/prTarget)*100 +
                ", usmh = " + Final_USMH_Loss + ", smh=" + Final_SMH_Loss + ", oh=" + Final_OthersHour_Loss +
                ", igbdh = " + Final_IGBD_Loss + ", egbdh = " + Final_EGBD_Loss + ", load_shedding = " + Final_LS_Loss +
                ", ma = " + Math.Round(MA, 6) + ", iga = " + Math.Round(IGA, 6) + ", ega = " + Math.Round(EGA, 6) + ", ega_b = " + Math.Round(EGAB, 6) + ", ega_c = " + Math.Round(EGAC, 6) + ", lull_hrs_bd = " + Math.Round(Lull_Hr, 6) + ", usmh_bd = " + Math.Round(USMH_Hr, 6) + ", smh_bd = " + Math.Round(SMH_Hr, 6) + ", igbdh_bd =" + Math.Round(IGBD_Hr, 6) + ", egbdh_bd =" + Math.Round(EGBD_Hr, 6) +
                ", load_shedding_bd = " + LS_Hr + ", total_bd_hrs = " + Math.Round(Lull_Hr + USMH_Hr + SMH_Hr + IGBD_Hr + EGBD_Hr + LS_Hr, 6) + ", usmh=" + Final_USMH_Loss + ", smh=" + Final_SMH_Loss + ", oh= " + Final_OthersHour_Loss + ", igbdh = " + Final_IGBD_Loss + ", egbdh= " + Final_EGBD_Loss +
                ", total_losses=" + totalLoss + ", prod_hrs = " + FinalProductionHrs + " where site_id = " + site_id + " and inverter = '" + inverter + "' and date = '" + fromDate + "'";

            string updateqry = "update uploading_file_generation_solar set inv_pr=inv_act*100/expected_kwh, plant_pr=plant_act*100/expected_kwh where " +
                "site_id = " + site_id + " and date = '" + fromDate + "'";
            string functionName = "UpdateSolarKPI";
            try
            {
                int result = 0;
                try
                {
                    result = await Context.ExecuteNonQry<int>(updateQuery).ConfigureAwait(false);
                }
                catch(Exception e)
                {
                    string msg = "Exception while updating records, due to : " + e.ToString();
                    //API_ErrorLog(msg);
                    LogError(0, 1, 2, functionName, msg, backend);
                }
                int result2 = 0;
                try
                {
                    result2= await Context.ExecuteNonQry<int>(updateqry).ConfigureAwait(false);
                }
                catch(Exception e)
                {
                    string msg = "Exception while updating records, due to : " + e.ToString();
                    //API_ErrorLog(msg); 
                    LogError(0, 1, 2, functionName, msg, backend);
                }
                //API_InformationLog("UpdateSolarKPIs function : Executed update Queries : "+ updateQuery + " _____and____ " + updateqry + " whose resposnse is :" + result + " and " + result2 + " Respectively..");

            }
            catch (Exception e)
            {
                string msg = "UpdateSolarKPIs function : Exception caught while updating solar KPIs, Exception : " + e.ToString();
                //API_ErrorLog(msg);
                LogError(0, 1, 2, functionName, msg, backend);

                return false;
            }
            return true;

        }
        public async Task<bool> CalculateAndUpdatePLFandKWHAfterLineLossSolar(int site_id, string fromDate, string toDate, double capacity_kw, bool Maintainance=false)
        {
            //API_InformationLog("Inside CalculateAndUpdatePLFandKWHAfterLineLossSolar function : ");

            //add column called kwh_afterlineloss and plf_afterlineloss in dailygensummary and uploadgentable
            double lineLoss = await GetLineLoss(site_id, fromDate, 0);
            lineLoss = 1 - (lineLoss / 100);
            bool result = await CalculateAndUpdatePLFandKWHAfterLineLoss2Solar(site_id, fromDate, toDate, lineLoss, capacity_kw, Maintainance);
            return result;
        }
        public async Task<bool> CalculateAndUpdatePLFandKWHAfterLineLoss2Solar(int site_id, string fromDate, string toDate, double lineloss , double capacity_kw, bool Maintainance)
        {
            //API_InformationLog("Inside CalculateAndUpdatePLFandKWHAfterLineLoss2Solar function : ");

            //Pending : Add information to log file
            string sLog = "PLF and KWH updated for site id =" + site_id + " fromDate=" + fromDate + " and toDate = " + toDate;
            string myQuery = "";
            string tableName;
            if (Maintainance)
            {
                bool bIsGenSummary = false;

                string genSummaryCheck = "select site from daily_gen_summary_solar where site_id = " + site_id + " and date>='" + fromDate + "' and date<='" + toDate + "' ";
                List<SolarDailyGenSummary> _SolarCount = await Context.GetData<SolarDailyGenSummary>(genSummaryCheck).ConfigureAwait(false);
                //API_InformationLog("CalculateAndUpdatePLFandKWHAfterLineLoss2Solar function : received data in _solarcount list the list :" + _SolarCount);

                if (_SolarCount.Count > 0)
                    bIsGenSummary = true;
                if (bIsGenSummary)
                {
                    tableName = "daily_gen_summary_solar";  //Approved data
                    myQuery = "Update " + tableName + " set " +
                  " inv_kwh_afterloss = inv_kwh * " + lineloss + ", " +
                   // " inv_plf_ac = (inv_kwh/(" + capacity_mw + ") * 100), " +
                   "inv_plf_afterloss =  (inv_plf_ac*" + lineloss + ") " +
                    ", plant_kwh_afterloss = plant_kwh * " + lineloss + ", " +
                   "plant_plf_afterloss =  (plant_plf_ac *" + lineloss + ") " +
                   " where date>='" + fromDate + "' and date<='" + toDate + "' and site_id=" + site_id;
                }
                else
                {
                    tableName = "uploading_file_generation_solar"; //unapproved data
                    myQuery = "Update " + tableName + " set " +
                  " inv_act_afterloss = inv_act * " + lineloss + ", " +
                   // " inv_plf_ac = (inv_kwh/(" + capacity_mw + ") * 100), " +
                   "inv_plf_afterloss =  (inv_plf_ac*" + lineloss + ") " +
                    ", plant_act_afterloss = plant_act * " + lineloss + ", " +
                   "plant_plf_afterloss =  (plant_plf_ac *" + lineloss + ") " +
                   " where date>='" + fromDate + "' and date<='" + toDate + "' and site_id=" + site_id;
                }
            }
            else
            {
                
                    tableName = "uploading_file_generation_solar"; //unapproved data
                    myQuery = "Update " + tableName + " set " +
                  " inv_act_afterloss = inv_act * " + lineloss + ", " +
                   // " inv_plf_ac = (inv_kwh/(" + capacity_mw + ") * 100), " +
                   "inv_plf_afterloss =  (inv_plf_ac*" + lineloss + ") " +
                    ", plant_act_afterloss = plant_act * " + lineloss + ", " +
                   "plant_plf_afterloss =  (plant_plf_ac *" + lineloss + ") " +
                   " where date>='" + fromDate + "' and date<='" + toDate + "' and site_id=" + site_id;
               
            }
            
            //int result = await Context.ExecuteNonQry<int>(myQuery.Substring(0, (myQuery.Length - 1)) + ";").ConfigureAwait(false);
            int result = await getDB.ExecuteNonQry<int>(myQuery).ConfigureAwait(false);
            if (result > 0)
                return true;
            return false;
        }
        public async Task<string> EmailWindReport(string fy, string fromDate, string site)
        {
            string info = ("EmailWindReport function called from repository for wind");
            string functionName = "EmailWindReport";
            //LogInfo(0, 2, 3, functionName, info, backend);
            PPT_InformationLog("EmailWindReport function Called");


            //add column called kwh_afterlineloss and plf_afterlineloss in dailygensummary and uploadgentable

            //string month = (fromDate);
            DateTime dt = DateTime.Parse(fromDate);
            DateTime ltodate = dt.AddDays(-1);
            string lastDay = ltodate.ToString("yyyy-MM-dd");
            //DateTime nextMonth = ltodate.AddMonths(1);
            DateTime lastYear = new DateTime();
            if ((dt.Month) <= 3)
            {
                lastYear = ltodate.AddYears(-1);
            }
            else
            {
                lastYear = ltodate;
            }
            var startDate = new DateTime(ltodate.Year, ltodate.Month, 1);
            var endDate = startDate.AddMonths(1).AddDays(-1);
            string mfromDate = startDate.ToString("yyyy-MM-dd");
            string mtodate = ltodate.ToString("yyyy-MM-dd");
            string yfromDate = lastYear.ToString("yyyy") + "-04-01";
            string ytodate = ltodate.ToString("yyyy-MM-dd");
            string title = "Wind Daily Report " + (ltodate.ToString("dd-MMM-yyyy"));

            string tb = "<p style='text-align: left;'>Hi Team,<br>";
            tb += "Please find  below daily performance summary for Wind projects dated " + (ltodate.ToString("dd-MMM-yyyy")) + ".</p>";
            tb += "<p style='text-align: left;'>Note :<br>";
            tb += "1.Gen in Million units.<br>";
            tb += "2.Actual Gen is at JMR level.<br>";
            tb += "3.The empty cells in the 'Last Day' section indicate that DGR was not available during that time.</p>";
            tb += "<br>";
          //  tb += "<h2 style='text-align: center;'><b>" + title + "<b/></h2>";
            //tb += "<table id='emailTable'  class='table table-bordered table-striped' style='width: 100%; background-color:#f7f5f0'>";
            tb += "<table id = 'emailTable' class='table table-bordered table-striped' style='width: 100%; border-collapse: collapse ; border-spacing: 10px; ' border='1'  >";
            tb += "<thead class='tb-head'><tr>";
            tb += "<th rowspan='2' style='text-align: center; padding:0.5rem; background-color:#31576D;color:#ffffff'>Site</th><th  rowspan='2'  style='width:3%;text-align:center;padding:0.5rem; background-color:#31576D;color:#ffffff'>Capacity (MW)</th><th rowspan='2' style='padding:0.5rem; width:3%; text-align:center; background-color:#31576D;color:#ffffff'>Total Tar</th>";
            tb += "<th colspan='10' class='text-center' style='text-align:center; background-color:#86C466;color:#ffffff'>YTD</th>";

            tb += "<th colspan='10' class='text-center' style='text-align:center; background-color:#77CAE7;'>MTD</th>";

            tb += "<th colspan='10' class='text-center' style='text-align:center; background-color:#FFCA5A;'>Last Day (" + (ltodate.ToString("dd-MMM-yyyy")) + ")</th>";

            tb += "<tr><th  style='text-align:center; padding:0.5rem; background-color:#86C466;color:#ffffff'>Tar Gen</th>";
            tb += "<th style='text-align:center; padding:0.5rem; background-color:#86C466;color:#ffffff'>Act Gen</th>";
            tb += "<th  style='text-align:center; padding:0.5rem; background-color:#86C466;color:#ffffff;'>Var (%)</th>";
            tb += "<th  style='text-align:center; padding:0.5rem; background-color:#86C466;color:#ffffff'>Tar Wind</th>";
            tb += "<th  style='text-align:center; padding:0.5rem; background-color:#86C466;color:#ffffff'>Act Wind</th>";
            tb += "<th  style='text-align:center; padding:0.5rem; background-color:#86C466;color:#ffffff'>Var (%)</th>";
            tb += "<th  style='text-align:center; padding:0.5rem; background-color:#86C466;color:#ffffff'>PLF</th>";
            tb += "<th  style='text-align:center; padding:0.5rem; background-color:#86C466;color:#ffffff'>MA</th>";
            tb += "<th  style='text-align:center; padding:0.5rem; background-color:#86C466;color:#ffffff'>IGA</th>";
            tb += "<th  style='text-align:center; padding:0.5rem; background-color:#86C466;color:#ffffff'>EGA</th>";

            tb += "<th  style='text-align:center; padding:0.5rem; background-color:#77CAE7'>Tar Gen</th>";
            tb += "<th style='text-align:center; padding:0.5rem; background-color:#77CAE7'>Act Gen</th>";
            tb += "<th  style='text-align:center; padding:0.5rem; background-color:#77CAE7'>Var (%)</th>";
            tb += "<th style='text-align:center; padding:0.5rem; background-color:#77CAE7'>Tar Wind</th>";
            tb += "<th style='text-align:center; padding:0.5rem; background-color:#77CAE7'>Act Wind</th>";
            tb += "<th style='text-align:center; padding:0.5rem; background-color:#77CAE7'>Var (%)</th>";
            tb += "<th style='text-align:center; padding:0.5rem; background-color:#77CAE7'>PLF</th>";
            tb += "<th style='text-align:center; padding:0.5rem; background-color:#77CAE7'>MA</th>";
            tb += "<th style='text-align:center; padding:0.5rem; background-color:#77CAE7'>IGA</th>";
            tb += "<th style='text-align:center; padding:0.5rem; background-color:#77CAE7'>EGA</th>";

            tb += "<th style='text-align:center; padding:0.5rem; background-color:#FFCA5A'>Tar Gen</th>";
            tb += "<th style='text-align:center; padding:0.5rem; background-color:#FFCA5A'>Act Gen</th>";
            tb += "<th style='text-align:center; padding:0.5rem; background-color:#FFCA5A'>Var (%)</th>";
            tb += "<th style='text-align:center; padding:0.5rem; background-color:#FFCA5A'>Tar Wind</th>";
            tb += "<th style='text-align:center; padding:0.5rem; background-color:#FFCA5A'>Act Wind</th>";
            tb += "<th style='text-align:center; padding:0.5rem; background-color:#FFCA5A'>Var (%)</th>";
            tb += "<th style='text-align:center; padding:0.5rem; background-color:#FFCA5A'>PLF</th>";
            tb += "<th style='text-align:center; padding:0.5rem; background-color:#FFCA5A'>MA</th>";
            tb += "<th style='text-align:center; padding:0.5rem; background-color:#FFCA5A'>IGA</th>";
            tb += "<th style='text-align:center; padding:0.5rem; background-color:#FFCA5A'>EGA</th>";
            tb += "</tr></thead><tbody style='font-size: 10px;text-align:center'>";

            double jmr_var_yr = 0;
            double tar_mu_yr = 0;
            double wind_var_yr = 0;
            double jmr_var_mn = 0;
            double tar_mu_mn = 0;
            double wind_var_mn = 0;
            double jmr_var_lastday = 0;
            double tar_mu_lastday = 0;
            double wind_var_lastday = 0;

            double total_capacity_yr = 0;
            double total_tar_mu_yr = 0;
            double total_act_jmr_kwh_mu_yr = 0;
            double avg_jmr_var_yr = 0;
            double avg_wind_var_yr = 0;
            double total_capTarWind_yr = 0;
            double total_capActWind_yr = 0;
            double total_capActPlf_yr = 0;
            double total_capActMa_yr = 0;
            double total_capActIga_yr = 0;
            double total_capActEga_yr = 0;
            double avg_tar_wind_yr = 0;
            double avg_act_wind_yr = 0;
            double avg_act_plf_yr = 0;
            double avg_act_ma_yr = 0;
            double avg_act_iga_yr = 0;
            double avg_act_ega_yr = 0;
            //Monthly
            double total_capacity_mn = 0;
            double total_tar_mu_mn = 0;
            double total_act_jmr_kwh_mu_mn = 0;
            double avg_jmr_var_mn = 0;
            double avg_wind_var_mn = 0;
            double total_capTarWind_mn = 0;
            double total_capActWind_mn = 0;
            double total_capActPlf_mn = 0;
            double total_capActMa_mn = 0;
            double total_capActIga_mn = 0;
            double total_capActEga_mn = 0;
            double avg_tar_wind_mn = 0;
            double avg_act_wind_mn = 0;
            double avg_act_plf_mn = 0;
            double avg_act_ma_mn = 0;
            double avg_act_iga_mn = 0;
            double avg_act_ega_mn = 0;
            //lastday
            //Monthly
            double total_capacity_ld = 0;
            double total_tar_mu_ld = 0;
            double total_act_jmr_kwh_mu_ld = 0;
            double avg_jmr_var_ld = 0;
            double avg_wind_var_ld = 0;
            double total_capTarWind_ld = 0;
            double total_capActWind_ld = 0;
            double total_capActPlf_ld = 0;
            double total_capActMa_ld = 0;
            double total_capActIga_ld = 0;
            double total_capActEga_ld = 0;
            double avg_tar_wind_ld = 0;
            double avg_act_wind_ld = 0;
            double avg_act_plf_ld = 0;
            double avg_act_ma_ld = 0;
            double avg_act_iga_ld = 0;
            double avg_act_ega_ld = 0;

            double target_yr = 0;
            double total_target_yr = 0;

            bool dailyRecordFound = false;
            bool monthlyRecordFound = false;
            string spv = "";

            List<WindPerformanceReports> yearlypr,monthlypr,lastdaypr = new List<WindPerformanceReports>();
            yearlypr = await GetWindPerformanceReportSiteWise(fy, yfromDate, ytodate, site,spv);
            // List<WindPerformanceReports> data1 = new List<WindPerformanceReports>();
            monthlypr = await GetWindPerformanceReportSiteWise(fy, mfromDate, mtodate, site, spv);
            lastdaypr = await GetWindPerformanceReportSiteWise(fy, lastDay, lastDay, site, spv);

            string qry = "SELECT SUM(kwh/1000000) as tar_kwh, site FROM `daily_target_kpi` where date >= '" + yfromDate + "' and date <='" + (lastYear.AddYears(1).ToString("yyyy")) + "-04-01' group by site_id;";
            List<WindPerformanceReports> tarData = new List<WindPerformanceReports>();
            tarData = await Context.GetData<WindPerformanceReports>(qry).ConfigureAwait(false);


            //var j = 0;
           // var k = 0;
            for (int i = 0; i < yearlypr.Count; i++)
            {
                tar_mu_yr = (yearlypr[i].tar_kwh_mu / 1000000);
                // Calculation of footer yearly 
                total_capacity_yr += yearlypr[i].total_mw;
                total_tar_mu_yr += tar_mu_yr;
                total_act_jmr_kwh_mu_yr += yearlypr[i].act_jmr_kwh_mu;
                total_capTarWind_yr += yearlypr[i].tar_wind * yearlypr[i].total_mw;
                total_capActWind_yr += yearlypr[i].act_Wind * yearlypr[i].total_mw;
                total_capActPlf_yr += yearlypr[i].act_plf * yearlypr[i].total_mw;
                total_capActMa_yr += yearlypr[i].act_ma * yearlypr[i].total_mw;
                total_capActIga_yr += yearlypr[i].act_iga * yearlypr[i].total_mw;
                total_capActEga_yr += yearlypr[i].act_ega * yearlypr[i].total_mw;
                // total_target_yr += yearlypr[i].tar_kwh;

                foreach (WindPerformanceReports tar in tarData)
                {
                    if (yearlypr[i].site == tar.site )
                    {
                        yearlypr[i].tar_kwh = tar.tar_kwh;
                        break;
                    }
                }
                total_target_yr += yearlypr[i].tar_kwh;

                tb += "<tr>";
               

                if (yearlypr[i].act_jmr_kwh_mu != 0 || yearlypr[i].tar_kwh_mu != 0)
                {
                    jmr_var_yr = ((yearlypr[i].act_jmr_kwh_mu - tar_mu_yr) / tar_mu_yr) * 100;
                }
                if (yearlypr[i].act_Wind != 0 || yearlypr[i].tar_wind != 0)
                {
                    wind_var_yr = ((yearlypr[i].act_Wind - yearlypr[i].tar_wind) / yearlypr[i].tar_wind) * 100;
                }
              
                tb += "<td style='padding:0.5rem; text-align:left'>&nbsp;&nbsp;" + yearlypr[i].site + "&nbsp;&nbsp;</td>";
                tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;" + Math.Round(yearlypr[i].total_mw, 1) + "&nbsp;&nbsp;</td>";
                tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;" + Math.Round(yearlypr[i].tar_kwh, 1) + "&nbsp;&nbsp;</td>";
                
                tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;" + Math.Round(tar_mu_yr, 1) + "&nbsp;&nbsp;</td>";
                tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;" + Math.Round(yearlypr[i].act_jmr_kwh_mu, 1) + "&nbsp;&nbsp;</td>";
                tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;" + Math.Round(jmr_var_yr, 1) + "&nbsp;&nbsp;</td>";
                tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;" + Math.Round(yearlypr[i].tar_wind, 1) + "&nbsp;&nbsp;</td>";
                tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;" + Math.Round(yearlypr[i].act_Wind, 1) + "&nbsp;&nbsp;</td>";
                tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;" + Math.Round(wind_var_yr, 1) + "&nbsp;&nbsp;</td>";
                tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;" + Math.Round(yearlypr[i].act_plf, 1) + "&nbsp;&nbsp;</td>";
                tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;" + Math.Round(yearlypr[i].act_ma, 1) + "&nbsp;&nbsp;</td>";
                tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;" + Math.Round(yearlypr[i].act_iga, 1) + "&nbsp;&nbsp;</td>";
                tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;" + Math.Round(yearlypr[i].act_ega, 1) + "&nbsp;&nbsp;</td>";

               for(var j=0; j< monthlypr.Count; j++)
                {
                    if (yearlypr[i].site == monthlypr[j].site)
                    {
                        tar_mu_mn = (monthlypr[j].tar_kwh_mu / 1000000);
                        // Monthly calculation 
                        total_capacity_mn += monthlypr[j].total_mw;
                        total_tar_mu_mn += tar_mu_mn;
                        total_act_jmr_kwh_mu_mn += monthlypr[j].act_jmr_kwh_mu;
                        total_capTarWind_mn += monthlypr[j].tar_wind * monthlypr[j].total_mw;
                        total_capActWind_mn += monthlypr[j].act_Wind * monthlypr[j].total_mw;
                        total_capActPlf_mn += monthlypr[j].act_plf * monthlypr[j].total_mw;
                        total_capActMa_mn += monthlypr[j].act_ma * monthlypr[j].total_mw;
                        total_capActIga_mn += monthlypr[j].act_iga * monthlypr[j].total_mw;
                        total_capActEga_mn += monthlypr[j].act_ega * monthlypr[j].total_mw;

                        if (monthlypr[j].act_jmr_kwh_mu != 0 || monthlypr[j].tar_kwh_mu != 0)
                        {
                            jmr_var_mn = ((monthlypr[j].act_jmr_kwh_mu - tar_mu_mn) / tar_mu_mn) * 100;
                        }
                        if (monthlypr[j].act_Wind != 0 || monthlypr[j].tar_wind != 0)
                        {
                            wind_var_mn = ((monthlypr[j].act_Wind - monthlypr[j].tar_wind) / monthlypr[j].tar_wind) * 100;
                        }
                        monthlyRecordFound = true;
                        //tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;" + Math.Round(monthlypr[j].tar_kwh, 1) + "&nbsp;&nbsp;</td>";
                        tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;" + Math.Round(tar_mu_mn, 1) + "&nbsp;&nbsp;</td>";
                        tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;" + Math.Round(monthlypr[j].act_jmr_kwh_mu, 1) + "&nbsp;&nbsp;</td>";
                        tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;" + Math.Round(jmr_var_mn, 1) + "&nbsp;&nbsp;</td>";
                        tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;" + Math.Round(monthlypr[j].tar_wind, 1) + "&nbsp;&nbsp;</td>";
                        tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;" + Math.Round(monthlypr[j].act_Wind, 1) + "&nbsp;&nbsp;</td>";
                        tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;" + Math.Round(wind_var_mn, 1) + "&nbsp;&nbsp;</td>";
                        tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;" + Math.Round(monthlypr[j].act_plf, 1) + "&nbsp;&nbsp;</td>";
                        tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;" + Math.Round(monthlypr[j].act_ma, 1) + "&nbsp;&nbsp;</td>";
                        tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;" + Math.Round(monthlypr[j].act_iga, 1) + "&nbsp;&nbsp;</td>";
                        tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;" + Math.Round(monthlypr[j].act_ega, 1) + "&nbsp;&nbsp;</td>";
                    }

                }
               if(monthlyRecordFound == false)
                {
                    
                   
                    //tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;-&nbsp;&nbsp;</td>";
                   // tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;-&nbsp;&nbsp;</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;-&nbsp;&nbsp;</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;-&nbsp;&nbsp;</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;-&nbsp;&nbsp;</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;-&nbsp;&nbsp;</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;-&nbsp;&nbsp;</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;-&nbsp;&nbsp;</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;-&nbsp;&nbsp;</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;-&nbsp;&nbsp;</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;-&nbsp;&nbsp;</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;-&nbsp;&nbsp;</td>";

                }
                for (var k = 0; k < lastdaypr.Count; k++)
                {
                    if (yearlypr[i].site == lastdaypr[k].site)
                    {
                        dailyRecordFound = true;

                        tar_mu_lastday = (lastdaypr[k].tar_kwh_mu / 1000000);
                        // Last Day calculation 
                        total_capacity_ld += lastdaypr[k].total_mw;
                        total_tar_mu_ld += tar_mu_lastday;
                        total_act_jmr_kwh_mu_ld += lastdaypr[k].act_jmr_kwh_mu;
                        total_capTarWind_ld += lastdaypr[k].tar_wind * lastdaypr[k].total_mw;
                        total_capActWind_ld += lastdaypr[k].act_Wind * lastdaypr[k].total_mw;
                        total_capActPlf_ld += lastdaypr[k].act_plf * lastdaypr[k].total_mw;
                        total_capActMa_ld += lastdaypr[k].act_ma * lastdaypr[k].total_mw;
                        total_capActIga_ld += lastdaypr[k].act_iga * lastdaypr[k].total_mw;
                        total_capActEga_ld += lastdaypr[k].act_ega * lastdaypr[k].total_mw;

                        if (lastdaypr[k].act_jmr_kwh_mu != 0 || lastdaypr[k].tar_kwh_mu != 0)
                        {
                            jmr_var_lastday = ((lastdaypr[k].act_jmr_kwh_mu - tar_mu_lastday) / tar_mu_lastday) * 100;
                        }
                        if (lastdaypr[k].act_Wind != 0 || lastdaypr[k].tar_wind != 0)
                        {
                            wind_var_lastday = ((lastdaypr[k].act_Wind - lastdaypr[k].tar_wind) / lastdaypr[k].tar_wind) * 100;
                        }
                        //tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;" + Math.Round(lastdaypr[k].tar_kwh, 1) + "&nbsp;&nbsp;</td>";
                        tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;" + Math.Round(tar_mu_lastday, 1) + "&nbsp;&nbsp;</td>";
                        tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;" + Math.Round(lastdaypr[k].act_jmr_kwh_mu, 1) + "&nbsp;&nbsp;</td>";
                        tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;" + Math.Round(jmr_var_lastday, 1) + "&nbsp;&nbsp;</td>";
                        tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;" + Math.Round(lastdaypr[k].tar_wind, 1) + "&nbsp;&nbsp;</td>";
                        tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;" + Math.Round(lastdaypr[k].act_Wind, 1) + "&nbsp;&nbsp;</td>";
                        tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;" + Math.Round(wind_var_lastday, 1) + "&nbsp;&nbsp;</td>";
                        tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;" + Math.Round(lastdaypr[k].act_plf, 1) + "&nbsp;&nbsp;</td>";
                        tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;" + Math.Round(lastdaypr[k].act_ma, 1) + "&nbsp;&nbsp;</td>";
                        tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;" + Math.Round(lastdaypr[k].act_iga, 1) + "&nbsp;&nbsp;</td>";
                        tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;" + Math.Round(lastdaypr[k].act_ega, 1) + "&nbsp;&nbsp;</td>";
                    }
                }
                if(dailyRecordFound == false)
                {
                   // tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;-&nbsp;&nbsp;</td>";
                    //tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;-&nbsp;&nbsp;</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;-&nbsp;&nbsp;</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;-&nbsp;&nbsp;</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;-&nbsp;&nbsp;</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;-&nbsp;&nbsp;</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;-&nbsp;&nbsp;</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;-&nbsp;&nbsp;</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;-&nbsp;&nbsp;</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;-&nbsp;&nbsp;</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;-&nbsp;&nbsp;</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;-&nbsp;&nbsp;</td>";
                }
                tb += "</tr>";
            }
            // Yearly Footer Calculation
            if (total_capacity_yr != 0)
            {
                avg_tar_wind_yr = total_capTarWind_yr / total_capacity_yr;
                avg_act_wind_yr = total_capActWind_yr / total_capacity_yr;
                avg_act_plf_yr = total_capActPlf_yr / total_capacity_yr;
                avg_act_ma_yr = total_capActMa_yr / total_capacity_yr;
                avg_act_iga_yr = total_capActIga_yr / total_capacity_yr;
                avg_act_ega_yr = total_capActEga_yr / total_capacity_yr;
            }
            if (total_tar_mu_yr != 0)
            {
                avg_jmr_var_yr = (((total_act_jmr_kwh_mu_yr - total_tar_mu_yr) / total_tar_mu_yr) * 100);
            }
            if (avg_tar_wind_yr != 0)
            {
                avg_wind_var_yr = ((avg_act_wind_yr - avg_tar_wind_yr) / avg_tar_wind_yr) * 100;
            }
            // Monthl Footer Calculation
            if (total_capacity_mn != 0)
            {
                avg_tar_wind_mn = total_capTarWind_mn / total_capacity_mn;
                avg_act_wind_mn = total_capActWind_mn / total_capacity_mn;
                avg_act_plf_mn = total_capActPlf_mn / total_capacity_mn;
                avg_act_ma_mn = total_capActMa_mn / total_capacity_mn;
                avg_act_iga_mn = total_capActIga_mn / total_capacity_mn;
                avg_act_ega_mn = total_capActEga_mn / total_capacity_mn;
            }
            if (total_tar_mu_mn != 0)
            {
                avg_jmr_var_mn = (((total_act_jmr_kwh_mu_mn - total_tar_mu_mn) / total_tar_mu_mn) * 100);
            }
            if (avg_tar_wind_mn != 0)
            {
                avg_wind_var_mn = ((avg_act_wind_mn - avg_tar_wind_mn) / avg_tar_wind_mn) * 100;
            }
            // lastday Footer Calculation
            if (total_capacity_ld != 0)
            {
                avg_tar_wind_ld = total_capTarWind_ld / total_capacity_ld;
                avg_act_wind_ld = total_capActWind_ld / total_capacity_ld;
                avg_act_plf_ld = total_capActPlf_ld / total_capacity_ld;
                avg_act_ma_ld = total_capActMa_ld / total_capacity_ld;
                avg_act_iga_ld = total_capActIga_ld / total_capacity_ld;
                avg_act_ega_ld = total_capActEga_ld / total_capacity_ld;
            }
            if (total_tar_mu_ld != 0)
            {
                avg_jmr_var_ld = (((total_act_jmr_kwh_mu_ld - total_tar_mu_ld) / total_tar_mu_ld) * 100);
            }
            if (avg_tar_wind_ld != 0)
            {
                avg_wind_var_ld = ((avg_act_wind_ld - avg_tar_wind_ld) / avg_tar_wind_ld) * 100;
            }
            //}
            tb += "</tbody><tfoot style='font-size: 10px;text-align:center'><tr>";
            tb += "<td style='padding:0.5rem; text-align:left'><b>Grand Total</b></td>";
            tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;<b>" + Math.Round(total_capacity_yr, 1) + "</b>&nbsp;&nbsp;</td>";
            tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;<b>" + Math.Round(total_target_yr, 1) + "</b>&nbsp;&nbsp;</td>";
            tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;<b>" + Math.Round(total_tar_mu_yr, 1) + "</b>&nbsp;&nbsp;</td>";
            tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;<b>" + Math.Round(total_act_jmr_kwh_mu_yr, 1) + "</b>&nbsp;&nbsp;</td>";
            tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;<b>" + Math.Round(avg_jmr_var_yr, 1) + "</b>&nbsp;&nbsp;</td>";
            tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;<b>" + Math.Round(avg_tar_wind_yr, 1) + "</b>&nbsp;&nbsp;</td>";
            tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;<b>" + Math.Round(avg_act_wind_yr, 1) + "</b>&nbsp;&nbsp;</td>";
            tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;<b>" + Math.Round(avg_wind_var_yr, 1) + "</b>&nbsp;&nbsp;</td>";
            tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;<b>" + Math.Round(avg_act_plf_yr, 1) + "</b>&nbsp;&nbsp;</td>";
            tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;<b>" + Math.Round(avg_act_ma_yr, 1) + "</b>&nbsp;&nbsp;</td>";
            tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;<b>" + Math.Round(avg_act_iga_yr, 1) + "</b>&nbsp;&nbsp;</td>";
            tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;<b>" + Math.Round(avg_act_ega_yr, 1) + "</b>&nbsp;&nbsp;</td>";
            if (monthlyRecordFound == true)
            {
                tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;<b>" + Math.Round(total_tar_mu_mn, 1) + "</b>&nbsp;&nbsp;</td>";
                tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;<b>" + Math.Round(total_act_jmr_kwh_mu_mn, 1) + "</b>&nbsp;&nbsp;</td>";
                tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;<b>" + Math.Round(avg_jmr_var_mn, 1) + "</b>&nbsp;&nbsp;</td>";
                tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;<b>" + Math.Round(avg_tar_wind_mn, 1) + "</b>&nbsp;&nbsp;</td>";
                tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;<b>" + Math.Round(avg_act_wind_mn, 1) + "</b>&nbsp;&nbsp;</td>";
                tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;<b>" + Math.Round(avg_wind_var_mn, 1) + "</b>&nbsp;&nbsp;</td>";
                tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;<b>" + Math.Round(avg_act_plf_mn, 1) + "</b>&nbsp;&nbsp;</td>";
                tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;<b>" + Math.Round(avg_act_ma_mn, 1) + "</b>&nbsp;&nbsp;</td>";
                tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;<b>" + Math.Round(avg_act_iga_mn, 1) + "</b>&nbsp;&nbsp;</td>";
                tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;<b>" + Math.Round(avg_act_ega_mn, 1) + "</b>&nbsp;&nbsp;</td>";
            }
            else
            {
                tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;-&nbsp;&nbsp;</td>";
                tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;-&nbsp;&nbsp;</td>";
                tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;-&nbsp;&nbsp;</td>";
                tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;-&nbsp;&nbsp;</td>";
                tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;-&nbsp;&nbsp;</td>";
                tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;-&nbsp;&nbsp;</td>";
                tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;-&nbsp;&nbsp;</td>";
                tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;-&nbsp;&nbsp;</td>";
                tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;-&nbsp;&nbsp;</td>";
                tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;-&nbsp;&nbsp;</td>";
            }
            if (dailyRecordFound == true)
            {
                tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;<b>" + Math.Round(total_tar_mu_ld, 1) + "</b>&nbsp;&nbsp;</td>";
                tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;<b>" + Math.Round(total_act_jmr_kwh_mu_ld, 1) + "</b>&nbsp;&nbsp;</td>";
                tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;<b>" + Math.Round(avg_jmr_var_ld, 1) + "</b>&nbsp;&nbsp;</td>";
                tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;<b>" + Math.Round(avg_tar_wind_ld, 1) + "</b>&nbsp;&nbsp;</td>";
                tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;<b>" + Math.Round(avg_act_wind_ld, 1) + "</b>&nbsp;&nbsp;</td>";
                tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;<b>" + Math.Round(avg_wind_var_ld, 1) + "</b>&nbsp;&nbsp;</td>";
                tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;<b>" + Math.Round(avg_act_plf_ld, 1) + "</b>&nbsp;&nbsp;</td>";
                tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;<b>" + Math.Round(avg_act_ma_ld, 1) + "</b>&nbsp;&nbsp;</td>";
                tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;<b>" + Math.Round(avg_act_iga_ld, 1) + "</b>&nbsp;&nbsp;</td>";
                tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;<b>" + Math.Round(avg_act_ega_ld, 1) + "</b>&nbsp;&nbsp;</td></tr>";
            }
            else
            {
                tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;-&nbsp;&nbsp;</td>";
                tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;-&nbsp;&nbsp;</td>";
                tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;-&nbsp;&nbsp;</td>";
                tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;-&nbsp;&nbsp;</td>";
                tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;-&nbsp;&nbsp;</td>";
                tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;-&nbsp;&nbsp;</td>";
                tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;-&nbsp;&nbsp;</td>";
                tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;-&nbsp;&nbsp;</td>";
                tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;-&nbsp;&nbsp;</td>";
                tb += "<td style='padding:0.5rem; text-align: center;'>&nbsp;&nbsp;-&nbsp;&nbsp;</td></tr>";
            }
            
            tb += "</tfoot></table>";
           //return tb;
            List<WindUploadingFileBreakDown> data2 = new List<WindUploadingFileBreakDown>();

                data2 = await GetWindMajorBreakdown(lastDay, lastDay, site,spv);
               
                tb += "<br>";
                tb += "<h3><b>Major Breakdown dated " + ltodate.ToString("dd-MMM-yyyy") + "</b></h3>";
                tb += "<br>";
                tb += "<table id='emailTable2'  class='table table-bordered table-striped' style='width:80%;'  border='1' cellspacing='0' cellpadding='0'>";
                tb += "<thead class='tbl-head' style=' background-color:#31576D;' rowspan='2'><tr>";
                tb += "<th style='padding:0.5rem;color:#ffffff'>Date</th>";
                tb += "<th style='padding:0.5rem;color:#ffffff'>Site</th>";
                tb += "<th style='padding:0.5rem;color:#ffffff'>Location</th>";
                tb += "<th style='padding:0.5rem;color:#ffffff'>BD Type</th>";
                tb += "<th style='padding:0.5rem;color:#ffffff'>TAT</th>";
                tb += "<th style='padding:0.5rem;color:#ffffff'>Error Details</th></thead>";
               // tb += "<th>Action Taken</th></tr></thead>";


            if (data2.Count > 0)
            {
              

                for (var i = 0; i < data2.Count; i++)
                    {
                    tb += "<tr>";
                    tb += "<td style='padding:0.5rem; width:10%;'>&nbsp;&nbsp;" + data2[i].date.ToString("dd/MM/yyyy") + "</td>";
                    tb += "<td>&nbsp;&nbsp;" + data2[i].site_name + "</td>";

                    if (data2[i].wtg_cnt != 0)
                    {
                        tb += "<td>&nbsp;&nbsp;" + data2[i].wtg_cnt + " WTGs</td>";
                    }
                    else
                    {
                        tb += "<td>&nbsp;&nbsp;" + data2[i].wtg + "</td>";
                    }
                    tb += "<td>&nbsp;&nbsp;" + data2[i].bd_type + "</td>";
                    tb += "<td>&nbsp;&nbsp;" + Math.Round(data2[i].total_stop_num,2)+ "</td>";
                    tb += "<td>&nbsp;&nbsp;" + data2[i].error_description + "</td>";
                   // tb += "<td'>" + data2[i].action_taken + "</td>";
                    tb += "</tr>";
                }
            }
            else
            {
                tb += "<tr><td style='text-align:center;' colspan='6' ><b>Data Not Present<b></td></tr>";

            }
            tb += "</tbody></table>";
            tb += "</br>";
            tb += "<p>Thanks and Regards,<br>";
            tb += "O&M - Team</p>";
            tb += "<br>";
            tb += "<p>This is a system generated email. Please Do Not Reply.</p>";

            try
            {
                PPT_InformationLog("MailDailySend function before call from repository for wind");
                //LogInfo(0, 2, 3, functionName, "MailDailySend function before call from repository for wind", backend);

                await MailDailySend(tb, title);
                PPT_InformationLog("MailDailySend function called from repository for wind");
                //LogInfo(0, 2, 3, functionName, "MailDailySend function called from repository for wind", backend);
            }
            catch (Exception e)
            {
                string msg = e.Message;
                PPT_InformationLog("MailDailySend function call failed from repository for wind" + msg);
                //LogInfo(0, 2, 3, functionName, msg, backend);

            }
            return tb;
        }
        public async Task<string> EmailSolarReport(string fy, string fromDate, string site)
        {
            string info = ("EmailSolarReport function called from repository for wind");
            string functionName = "EmailSolarReport";
            //LogInfo(0, 1, 3, functionName, info, backend);
            PPT_InformationLog("EmailSolarReport function Called");
            //add column called kwh_afterlineloss and plf_afterlineloss in dailygensummary and uploadgentable
            //string month = (fromDate);
            //DateTime dt = DateTime.Parse("2022-12-04");
            DateTime dt = DateTime.Parse(fromDate);
            DateTime ltodate = dt.AddDays(-1);
            string lastDay = ltodate.ToString("yyyy-MM-dd");
            //DateTime nextMonth = ltodate.AddMonths(1);
            DateTime lastYear = new DateTime();
            if ((dt.Month) <= 3)
            {
                lastYear = ltodate.AddYears(-1);
            }
            else
            {
                lastYear = ltodate;
            }
            var startDate = new DateTime(ltodate.Year, ltodate.Month, 1);
            var endDate = startDate.AddMonths(1).AddDays(-1);
            string mfromDate = startDate.ToString("yyyy-MM-dd");
            string mtodate = ltodate.ToString("yyyy-MM-dd");
            string yfromDate = lastYear.ToString("yyyy") + "-04-01";
            string ytodate = ltodate.ToString("yyyy-MM-dd");
            string title = "Solar Daily Report " + (ltodate.ToString("dd-MMM-yyyy"));


            string tb = "<p style='text-align: left;'>Hi Team,<br>";
            tb += "Please find  below daily performance summary for Solar projects dated " + (ltodate.ToString("dd-MMM-yyyy")) + ".<p>";
            tb += "<p style='text-align: left;'>Note :<br>";
            //tb += "<h5 style='text-align: left;'>&nbsp;&nbsp;1.Target & Actual Gen. at Plant metering level. </h5>";
            tb += "1.Gen in Million units.<br>";
            tb += "2.Actual Gen is at JMR level.<br>";
            tb += "3.The empty cells in the 'Last Day' section indicate that DGR was not available during that time.</p>";
            tb += "<br>";
          //  tb += "<h2 style='text-align: center;'><b>" + title + "<b/></h2>";
            tb += "<table id='emailTable' style='width: 100%; border-collapse: collapse ; border-spacing: 10px;'  border='1'>";
            tb += "<thead style ='font-size: 13px;'><tr>";
            tb += "<th rowspan='2'  style='text-align: center; padding:0.5rem; background-color:#31576D;color:#ffffff'>Site</th><th  rowspan='2'   style='width:3%; text-align: center; padding:0.5rem; background-color:#31576D;color:#ffffff'>Capacity (MW)</th><th rowspan='2'  style='width:3%; text-align: center; padding:0.5rem; background-color:#31576D;color:#ffffff'>Total Tar</th>";
            tb += "<th colspan='13' class='text-center' style=' text-align:center; background-color:#86C466;color:#ffffff'>YTD</th>";
            tb += "<th colspan='13' class='text-center' style=' text-align:center; background-color:#77CAE7;'>MTD</th>";
            tb += "<th colspan='13' class='text-center' style=' text-align:center; background-color:#FFCA5A;'>Last Day (" + (ltodate.ToString("dd-MMM-yyyy")) + ")</th>";
            tb += "<tr><th  style='text-align:center; padding:0.5rem; background-color:#86C466;color:#ffffff'>Tar Gen</th>";
            tb += "<th style='text-align:center; padding:0.5rem; background-color:#86C466;color:#ffffff'>Act Gen</th>";
            tb += "<th  style='text-align:center; padding:0.5rem; background-color:#86C466;color:#ffffff'>Var (%)</th>";
            tb += "<th  style='text-align:center; padding:0.5rem; background-color:#86C466;color:#ffffff'>Tar IR</th>";
            tb += "<th  style='text-align:center; padding:0.5rem; background-color:#86C466;color:#ffffff'>Act IR</th>";
            tb += "<th  style='text-align:center; padding:0.5rem; background-color:#86C466;color:#ffffff'>Var (%)</th>";
            tb += "<th style='text-align:center; padding:0.5rem; background-color:#86C466;color:#ffffff'>PLF (%)</th>";
            tb += "<th style='text-align:center; padding:0.5rem; background-color:#86C466;color:#ffffff'>MA (%)</th>";
            tb += "<th style='text-align:center; padding:0.5rem; background-color:#86C466;color:#ffffff'>IGA (%)</th>";
            tb += "<th style='text-align:center; padding:0.5rem; background-color:#86C466;color:#ffffff'>EGA (%)</th>";
            tb += "<th  style='text-align:center; padding:0.5rem; background-color:#86C466;color:#ffffff'>Tar PR (%)</th>";
            tb += "<th style='text-align:center; padding:0.5rem; background-color:#86C466;color:#ffffff'>Act PR (%)</th>";
            tb += "<th style='text-align:center; padding:0.5rem; background-color:#86C466;color:#ffffff'>Var (%)</th>";
            tb += "<th  style='text-align:center; padding:0.5rem; background-color:#77CAE7;'>Tar Gen</th>";
            tb += "<th style='text-align:center; padding:0.5rem; background-color:#77CAE7;'>Act Gen</th>";
            tb += "<th  style='text-align:center; padding:0.5rem; background-color:#77CAE7;'>Var (%)</th>";
            tb += "<th  style='text-align:center; padding:0.5rem; background-color:#77CAE7;'>Tar IR</th>";
            tb += "<th  style='text-align:center; padding:0.5rem; background-color:#77CAE7;'>Act IR</th>";
            tb += "<th  style='text-align:center; padding:0.5rem; background-color:#77CAE7;'>Var (%)</th>";
            tb += "<th style='text-align:center; padding:0.5rem; background-color:#77CAE7;'>PLF (%)</th>";
            tb += "<th style='text-align:center; padding:0.5rem; background-color:#77CAE7;'>MA (%)</th>";
            tb += "<th style='text-align:center; padding:0.5rem; background-color:#77CAE7;'>IGA (%)</th>";
            tb += "<th style='text-align:center; padding:0.5rem; background-color:#77CAE7;'>EGA (%)</th>";
            tb += "<th  style='width:3%; text-align:center; padding:0.5rem; background-color:#77CAE7;'>Tar PR (%)</th>";
            tb += "<th style='width:3%; text-align:center; padding:0.5rem; background-color:#77CAE7;'>Act PR (%)</th>";
            tb += "<th style='text-align:center; padding:0.5rem; background-color:#77CAE7;'>Var (%)</th>";
            tb += "<th  style='text-align:center; padding:0.5rem; background-color:#FFCA5A;'>Tar Gen (MU)</th>";
            tb += "<th style='text-align:center; padding:0.5rem; background-color:#FFCA5A;'>Act Gen (MU)</th>";
            tb += "<th  style='text-align:center; padding:0.5rem; background-color:#FFCA5A;'>Var (%)</th>";
            tb += "<th  style='text-align:center; padding:0.5rem; background-color:#FFCA5A;'>Tar IR</th>";
            tb += "<th  style='text-align:center; padding:0.5rem; background-color:#FFCA5A;'>Act IR</th>";
            tb += "<th  style='text-align:center; padding:0.5rem; background-color:#FFCA5A;'>Var (%)</th>";
            tb += "<th  style='text-align:center; padding:0.5rem; background-color:#FFCA5A;'>PA (%)</th>";
            tb += "<th style='text-align:center; padding:0.5rem; background-color:#FFCA5A;'>IGA (%)</th>";
            tb += "<th style='text-align:center; padding:0.5rem; background-color:#FFCA5A;'>EGA (%)</th>";
            tb += "<th style='text-align:center; padding:0.5rem; background-color:#FFCA5A;'>CUF_AC (%)</th>";
            tb += "<th style='width:3%; text-align:center; padding:0.5rem; background-color:#FFCA5A;'>Tar PR (%)</th>";
            tb += "<th style='width:3%; text-align:center; padding:0.5rem; background-color:#FFCA5A;'>Act PR (%)</th>";
            tb += "<th style='text-align:center; padding:0.5rem; background-color:#FFCA5A;'>Var (%)</th>";
            // tb += "</tr></thead><tbody><tr>";
            tb += "</tr></thead><tbody  style='font-size: 10px;text-align:center'>";

            double t_var_yr = 0;
            double tar_mu_yr = 0;
            double poa_var_yr = 0;
            double pr_var_yr = 0;
            double act_prval_yr = 0;
            double total_target = 0;

            double t_var_mn = 0;
            double tar_mu_mn = 0;
            double poa_var_mn = 0;
            double pr_var_mn = 0;
            double act_prval_mn = 0;

            double t_var_ld = 0;
            double tar_mu_ld = 0;
            double poa_var_ld = 0;
            double pr_var_ld = 0;
            double act_prval_ld = 0;

            double total_capacity_yr = 0;
            double total_target_yr = 0;
            double total_excepted_kwh_yr = 0;
            double total_tar_kwh_yr = 0;
            double total_act_kwh_yr = 0;
            double avg_solar_var_yr  = 0;

            double total_capacity_mn = 0;
            double total_tar_kwh_mn = 0;
            double total_act_kwh_mn = 0;
            double avg_solar_var_mn = 0;

            double total_capacity_ld = 0;
            double total_tar_kwh_ld = 0;
            double total_act_kwh_ld = 0;
            double avg_solar_var_ld = 0;

            double avg_IR_var_ld = 0;
            double avg_IR_var_yr = 0;
            double avg_IR_var_mn = 0;
            double avg_pr_var_ld = 0;
            double avg_pr_var_mn = 0;
            double avg_pr_var_yr = 0;
            double total_capTarIR_yr = 0;
            double total_capActIR_yr = 0;
            double total_capTarIR_mn = 0;
            double total_capActIR_mn = 0;
            double total_capTarIR_ld = 0;
            double total_capActIR_ld = 0;
            double total_capActIga_ld = 0;
            double total_capActEga_ld = 0;
            double total_capActPr_ld = 0;
            double total_capTarPr_ld = 0;
            double total_capActPlf_ld = 0;
            double total_capActMa_ld = 0;
            double total_capActIga_mn = 0;
            double total_capActEga_mn = 0;
            double total_capActPr_mn = 0;
            double total_capTarPr_mn = 0;
            double total_capActPlf_mn = 0;
            double total_capActMa_mn = 0;
            double total_capActIga_yr = 0;
            double total_capActEga_yr = 0;
            double total_capActPr_yr = 0;
            double total_capTarPr_yr = 0;
            double total_capActPlf_yr = 0;
            double total_capActMa_yr = 0;
            double avg_tar_IR_ld = 0;
            double avg_act_IR_ld = 0;
            double avg_tar_pr_ld = 0;
            double avg_act_pr_ld = 0;
            double avg_act_iga_ld = 0;
            double avg_act_ega_ld = 0;
            double avg_act_ma_ld = 0;
            double avg_act_plf_ld = 0;
            double avg_tar_IR_yr = 0;
            double avg_act_IR_yr = 0;
            double avg_tar_pr_yr = 0;
            double avg_act_pr_yr = 0;
            double avg_act_iga_yr = 0;
            double avg_act_ega_yr = 0;
            double avg_act_ma_yr = 0;
            double avg_act_plf_yr = 0;
            double avg_tar_IR_mn = 0;
            double avg_act_IR_mn = 0;
            double avg_tar_pr_mn = 0;
            double avg_act_pr_mn = 0;
            double avg_act_iga_mn = 0;
            double avg_act_ega_mn = 0;
            double avg_act_ma_mn = 0;
            double avg_act_plf_mn = 0;
            bool dailyRecordFound = false;
            bool monthlyRecordFound = false;
            string spv = "";

            List<SolarPerformanceReports1> yearlypr, monthlypr, lastdaypr = new List<SolarPerformanceReports1>();
            try
            {
                yearlypr = await GetSolarPerformanceReportBySiteWise(fy, yfromDate, ytodate, site, spv);
                //PPT_InformationLog("EmailSolarReport function received data from GetSolarPerformanceReportBySiteWise in yearlypr list");

            }
            catch(Exception e)
            {
                string msg = e.Message;
                //PPT_ErrorLog("EmailSolarReport function received Exception while receivind data from function GetSolarPerformanceReportBySiteWise in yearlypr list" + msg);
            }
            try
            {
                monthlypr = await GetSolarPerformanceReportBySiteWise(fy, mfromDate, mtodate, site, spv);
                //PPT_InformationLog("EmailSolarReport function received data from GetSolarPerformanceReportBySiteWise in monthlypr list");

            }
            catch (Exception e)
            {
                string msg = e.Message;
                //PPT_ErrorLog("EmailSolarReport function received Exception while receivind data from function GetSolarPerformanceReportBySiteWise in monthlypr list " + msg);
            }
            try
            {
                lastdaypr = await GetSolarPerformanceReportBySiteWise(fy, lastDay, lastDay, site, spv);
                //PPT_InformationLog("EmailSolarReport function received data from GetSolarPerformanceReportBySiteWise in lastdaypr list");

            }
            catch (Exception e)
            {
                string msg = e.Message;
                //PPT_ErrorLog("EmailSolarReport function received Exception while receivind data from function GetSolarPerformanceReportBySiteWise in lastdaypr list " + msg);
            }
            yearlypr = await GetSolarPerformanceReportBySiteWise(fy, yfromDate, ytodate, site, spv);
            monthlypr = await GetSolarPerformanceReportBySiteWise(fy, mfromDate, mtodate, site, spv);
            lastdaypr = await GetSolarPerformanceReportBySiteWise(fy, lastDay, lastDay, site, spv);

            string qry = "SELECT sum(gen_nos) as tar_kwh, sites as site FROM `daily_target_kpi_solar` where date >= '" + yfromDate + "' and date <='" + (lastYear.AddYears(1).ToString("yyyy")) + "-04-01' group by site_id;";
            List<SolarPerformanceReports1> tarData = new List<SolarPerformanceReports1>();
            tarData = await Context.GetData<SolarPerformanceReports1>(qry).ConfigureAwait(false);

            for (int i = 0; i < yearlypr.Count; i++)
            {
                tb += "<tr>";
                if (yearlypr[i].pr_expected_kwh == 0 || yearlypr[i].act_kwh == 0)
                {
                    act_prval_yr = 0;
                }
                else
                {
                    act_prval_yr = (yearlypr[i].act_kwh / yearlypr[i].pr_expected_kwh) * 100;
                }
                tar_mu_yr = (yearlypr[i].tar_kwh / 1000000);
                
                if (yearlypr[i].act_kwh != 0 || yearlypr[i].tar_kwh != 0)
                {
                    t_var_yr = ((yearlypr[i].act_kwh - yearlypr[i].tar_kwh) / yearlypr[i].tar_kwh) * 100;
                }
                if (yearlypr[i].act_poa != 0 || yearlypr[i].tar_poa != 0)
                {
                    poa_var_yr = ((yearlypr[i].act_poa - yearlypr[i].tar_poa) / yearlypr[i].tar_poa) * 100;
                }
                pr_var_yr = (act_prval_yr - yearlypr[i].tar_pr);

                total_capacity_yr += yearlypr[i].capacity;
                total_excepted_kwh_yr += yearlypr[i].expected_kwh;
                total_tar_kwh_yr += yearlypr[i].tar_kwh;
                total_act_kwh_yr += yearlypr[i].act_kwh;
                total_capTarIR_yr += yearlypr[i].tar_poa * yearlypr[i].capacity;
                total_capActIR_yr += yearlypr[i].act_poa * yearlypr[i].capacity;
                total_capActIga_yr += yearlypr[i].act_iga * yearlypr[i].capacity;
                total_capActMa_yr += yearlypr[i].act_ma * yearlypr[i].capacity;
                total_capActPlf_yr += yearlypr[i].act_plf * yearlypr[i].capacity;
                total_capActEga_yr += yearlypr[i].act_ega * yearlypr[i].capacity;
                total_capTarPr_yr += yearlypr[i].tar_pr * yearlypr[i].capacity;
                total_capActPr_yr += act_prval_yr * yearlypr[i].capacity;

                foreach (SolarPerformanceReports1 tar in tarData)
                {
                    if (yearlypr[i].site == tar.site)
                    {
                        total_target = tar.tar_kwh;
                        break;
                    }
                }
                total_target_yr += total_target;

                try
                {
                    // tb += "<td>" + yearlypr[i].site + "</td>";
                    tb += "<td style='text-align:left;'>" + yearlypr[i].site + "&nbsp;&nbsp;</td>";
                    tb += "<td style='padding:0.5rem; text-align: right;'>" + Math.Round(yearlypr[i].capacity, 1) + "&nbsp;&nbsp;</td>";
                    tb += "<td style='padding:0.5rem; text-align: right;'>" + Math.Round(total_target, 1) + "&nbsp;&nbsp;</td>";

                    tb += "<td style='padding:0.5rem; text-align: right;'>" + Math.Round(yearlypr[i].tar_kwh, 1) + "&nbsp;&nbsp;</td>";
                    tb += "<td style='padding:0.5rem; text-align: right;'>" + Math.Round(yearlypr[i].act_kwh, 1) + "&nbsp;&nbsp;</td>";
                    tb += "<td style='padding:0.5rem; text-align: right;'>" + Math.Round(t_var_yr, 1) + "&nbsp;&nbsp;</td>";
                    tb += "<td style='padding:0.5rem; text-align: right;'>" + Math.Round(yearlypr[i].tar_poa, 1) + "&nbsp;&nbsp;</td>";
                    tb += "<td style='padding:0.5rem; text-align: right;'>" + Math.Round(yearlypr[i].act_poa, 1) + "&nbsp;&nbsp;</td>";
                    tb += "<td style='padding:0.5rem; text-align: right;'>" + Math.Round(poa_var_yr, 1) + "&nbsp;&nbsp;</td>";
                    tb += "<td style='padding:0.5rem; text-align: right;'>" + Math.Round(yearlypr[i].act_plf, 1) + "&nbsp;&nbsp;</td>";
                    tb += "<td style='padding:0.5rem; text-align: right;'>" + Math.Round(yearlypr[i].act_ma, 1) + "&nbsp;&nbsp;</td>";
                    tb += "<td style='padding:0.5rem; text-align: right;'>" + Math.Round(yearlypr[i].act_iga, 1) + "&nbsp;&nbsp;</td>";
                    tb += "<td style='padding:0.5rem; text-align: right;'>" + Math.Round(yearlypr[i].act_ega, 1) + "&nbsp;&nbsp;</td>";
                    tb += "<td style='padding:0.5rem; text-align: right;'>" + Math.Round(yearlypr[i].tar_pr, 1) + "&nbsp;&nbsp;</td>";
                    tb += "<td style='padding:0.5rem; text-align: right;'>" + Math.Round(act_prval_yr, 1) + "&nbsp;&nbsp;</td>";
                    tb += "<td style='padding:0.5rem; text-align: right;'>" + Math.Round(pr_var_yr, 1) + "&nbsp;&nbsp;</td>";
                }
                catch(Exception ex)
                {
                    string strEx = ex.ToString();

                }


                
                for (var j = 0; j < monthlypr.Count; j++)
                {
                    if (yearlypr[i].site == monthlypr[j].site)
                    {
                        if (monthlypr[j].pr_expected_kwh == 0 || monthlypr[j].act_kwh == 0)
                        {
                            act_prval_mn = 0;
                        }
                        else
                        {
                            act_prval_mn = (monthlypr[j].act_kwh / monthlypr[j].pr_expected_kwh) * 100;
                        }
                        tar_mu_mn = (monthlypr[i].tar_kwh / 1000000);

                        if (monthlypr[j].act_kwh != 0 || monthlypr[j].tar_kwh != 0)
                        {
                            t_var_mn = ((monthlypr[j].act_kwh - monthlypr[j].tar_kwh) / monthlypr[j].tar_kwh) * 100;
                        }
                        if (monthlypr[j].act_poa != 0 || monthlypr[j].tar_poa != 0)
                        {
                            poa_var_mn = ((monthlypr[j].act_poa - monthlypr[j].tar_poa) / monthlypr[j].tar_poa) * 100;
                        }
                        pr_var_mn = (act_prval_mn - monthlypr[j].tar_pr);

                        total_capacity_mn += monthlypr[j].capacity;
                        total_tar_kwh_mn += monthlypr[j].tar_kwh;
                        total_act_kwh_mn += monthlypr[j].act_kwh;
                        total_capTarIR_mn += monthlypr[j].tar_poa * monthlypr[j].capacity;
                        total_capActIR_mn += monthlypr[j].act_poa * monthlypr[j].capacity;
                        total_capActIga_mn += monthlypr[j].act_iga * monthlypr[j].capacity;
                        total_capActMa_mn += monthlypr[j].act_ma * monthlypr[j].capacity;
                        total_capActPlf_mn += monthlypr[j].act_plf * monthlypr[j].capacity;
                        total_capActEga_mn += monthlypr[j].act_ega * monthlypr[j].capacity;
                        total_capTarPr_mn += monthlypr[j].tar_pr * monthlypr[j].capacity;
                        total_capActPr_mn += act_prval_mn * monthlypr[j].capacity;



                        monthlyRecordFound = true;
                        try
                        {
                            tb += "<td style='padding:0.5rem; text-align: right;'>" + Math.Round(monthlypr[j].tar_kwh, 1) + "&nbsp;&nbsp;</td>";
                            tb += "<td style='padding:0.5rem; text-align: right;'>" + Math.Round(monthlypr[j].act_kwh, 1) + "&nbsp;&nbsp;</td>";
                            tb += "<td style='padding:0.5rem; text-align: right;'>" + Math.Round(t_var_mn, 1) + "&nbsp;&nbsp;</td>";
                            tb += "<td style='padding:0.5rem; text-align: right;'>" + Math.Round(monthlypr[j].tar_poa, 1) + "&nbsp;&nbsp;</td>";
                            tb += "<td style='padding:0.5rem; text-align: right;'>" + Math.Round(monthlypr[j].act_poa, 1) + "&nbsp;&nbsp;</td>";
                            tb += "<td style='padding:0.5rem; text-align: right;'>" + Math.Round(poa_var_mn, 1) + "&nbsp;&nbsp;</td>";
                            tb += "<td style='padding:0.5rem; text-align: right;'>" + Math.Round(monthlypr[j].act_plf, 1) + "&nbsp;&nbsp;</td>";
                            tb += "<td style='padding:0.5rem; text-align: right;'>" + Math.Round(monthlypr[j].act_ma, 1) + "&nbsp;&nbsp;</td>";
                            tb += "<td style='padding:0.5rem; text-align: right;'>" + Math.Round(monthlypr[j].act_iga, 1) + "&nbsp;&nbsp;</td>";
                            tb += "<td style='padding:0.5rem; text-align: right;'>" + Math.Round(monthlypr[j].act_ega, 1) + "&nbsp;&nbsp;</td>";
                            tb += "<td style='padding:0.5rem; text-align: right;'>" + Math.Round(monthlypr[j].tar_pr, 1) + "&nbsp;&nbsp;</td>";
                            tb += "<td style='padding:0.5rem; text-align: right;'>" + Math.Round(act_prval_mn, 1) + "&nbsp;&nbsp;</td>";
                            tb += "<td style='padding:0.5rem; text-align: right;'>" + Math.Round(pr_var_mn, 1) + "&nbsp;&nbsp;</td>";
                        }
                        catch (Exception ex)
                        {
                            string strEx = ex.ToString();

                        }
                    }
                }
                if (monthlyRecordFound == false)
                {
                    tb += "<td style='padding:0.5rem; text-align: center;'>-</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>-</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>-</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>-</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>-</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>-</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>-</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>-</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>-</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>-</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>-</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>-</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>-</td>";
                    
                }
                for (var k = 0; k < lastdaypr.Count; k++)
                {
                    if (yearlypr[i].site == lastdaypr[k].site)
                    {
                        dailyRecordFound = true;
                        if (lastdaypr[k].pr_expected_kwh == 0 || lastdaypr[k].act_kwh == 0)
                        {
                            act_prval_ld = 0;
                        }
                        else
                        {
                            act_prval_ld = (lastdaypr[k].act_kwh / lastdaypr[k].pr_expected_kwh) * 100;
                        }
                        tar_mu_ld = (lastdaypr[k].tar_kwh / 1000000);

                        if (lastdaypr[k].act_kwh != 0 || lastdaypr[k].tar_kwh != 0)
                        {
                            t_var_ld = ((lastdaypr[k].act_kwh - lastdaypr[k].tar_kwh) / lastdaypr[k].tar_kwh) * 100;
                        }
                        if (lastdaypr[k].act_poa != 0 || lastdaypr[k].tar_poa != 0)
                        {
                            poa_var_ld = ((lastdaypr[k].act_poa - lastdaypr[k].tar_poa) / lastdaypr[k].tar_poa) * 100;
                        }
                        pr_var_ld = (act_prval_ld - lastdaypr[k].tar_pr);

                        total_capacity_ld += lastdaypr[k].capacity;
                        total_tar_kwh_ld += lastdaypr[k].tar_kwh;
                        total_act_kwh_ld += lastdaypr[k].act_kwh;
                        total_capTarIR_ld += lastdaypr[k].tar_poa * lastdaypr[k].capacity;
                        total_capActIR_ld += lastdaypr[k].act_poa * lastdaypr[k].capacity;
                        total_capActIga_ld += lastdaypr[k].act_iga * lastdaypr[k].capacity;
                        total_capActMa_ld += lastdaypr[k].act_ma * lastdaypr[k].capacity;
                        total_capActPlf_ld += lastdaypr[k].act_plf * lastdaypr[k].capacity;
                        total_capActEga_ld += lastdaypr[k].act_ega * lastdaypr[k].capacity;
                        total_capTarPr_ld += lastdaypr[k].tar_pr * lastdaypr[k].capacity;
                        total_capActPr_ld += act_prval_ld * lastdaypr[k].capacity;

                        try { 
                        tb += "<td style='padding:0.5rem; text-align: right;'>" + Math.Round(lastdaypr[k].tar_kwh, 1) + "&nbsp;&nbsp;</td>";
                        tb += "<td style='padding:0.5rem; text-align: right;'>" + Math.Round(lastdaypr[k].act_kwh, 1) + "&nbsp;&nbsp;</td>";
                        tb += "<td style='padding:0.5rem; text-align: right;'>" + Math.Round(t_var_ld, 1) + "&nbsp;&nbsp;</td>";
                        tb += "<td style='padding:0.5rem; text-align: right;'>" + Math.Round(lastdaypr[k].tar_poa, 1) + "&nbsp;&nbsp;</td>";
                        tb += "<td style='padding:0.5rem; text-align: right;'>" + Math.Round(lastdaypr[k].act_poa, 1) + "&nbsp;&nbsp;</td>";
                        tb += "<td style='padding:0.5rem; text-align: right;'>" + Math.Round(poa_var_ld, 1) + "&nbsp;&nbsp;</td>";
                        tb += "<td style='padding:0.5rem; text-align: right;'>" + Math.Round(lastdaypr[k].act_ma, 1) + "&nbsp;&nbsp;</td>";
                        tb += "<td style='padding:0.5rem; text-align: right;'>" + Math.Round(lastdaypr[k].act_iga, 1) + "&nbsp;&nbsp;</td>";
                        tb += "<td style='padding:0.5rem; text-align: right;'>" + Math.Round(lastdaypr[k].act_ega, 1) + "&nbsp;&nbsp;</td>";
                        tb += "<td style='padding:0.5rem; text-align: right;'>" + Math.Round(lastdaypr[k].act_plf, 1) + "&nbsp;&nbsp;</td>";
                        tb += "<td style='padding:0.5rem; text-align: right;'>" + Math.Round(lastdaypr[k].tar_pr, 1) + "&nbsp;&nbsp;</td>";
                        tb += "<td style='padding:0.5rem; text-align: right;'>" + Math.Round(act_prval_ld, 1) + "&nbsp;&nbsp;</td>";
                        tb += "<td style='padding:0.5rem; text-align: right;'>" + Math.Round(pr_var_ld, 1) + "&nbsp;&nbsp;</td>";
                        }
                        catch (Exception ex)
                        {
                            string strEx = ex.ToString();

                        }

                    }
                }
                if (dailyRecordFound == false)
                {
                    tb += "<td style='padding:0.5rem; text-align: center;'>-</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>-</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>-</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>-</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>-</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>-</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>-</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>-</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>-</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>-</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>-</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>-</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>-</td>";
                }



                tb += "</tr>";
            }

            if (total_tar_kwh_yr != 0)
            {
                avg_solar_var_yr = ((total_act_kwh_yr - total_tar_kwh_yr)/ total_tar_kwh_yr) * 100;
            }
            if (total_tar_kwh_mn != 0)
            {
                avg_solar_var_mn = ((total_act_kwh_mn - total_tar_kwh_mn)/ total_tar_kwh_mn) * 100;
            }
            if (total_tar_kwh_ld != 0)
            {
                avg_solar_var_ld = ((total_act_kwh_ld - total_tar_kwh_ld)/ total_tar_kwh_ld) * 100;
            }

            if (total_capacity_yr != 0)
            {
                avg_tar_IR_yr = total_capTarIR_yr / total_capacity_yr;
                avg_act_IR_yr = total_capActIR_yr / total_capacity_yr;
                avg_act_iga_yr = total_capActIga_yr / total_capacity_yr;
                avg_act_ega_yr = total_capActEga_yr / total_capacity_yr;
                avg_tar_pr_yr = total_capTarPr_yr / total_capacity_yr;
                avg_act_pr_yr = total_capActPr_yr / total_capacity_yr;
                avg_act_plf_yr = total_capActPlf_yr / total_capacity_yr;
                avg_act_ma_yr = total_capActMa_yr / total_capacity_yr;
            }
            if (total_capacity_mn != 0)
            {
                avg_tar_IR_mn = total_capTarIR_mn / total_capacity_mn;
                avg_act_IR_mn = total_capActIR_mn / total_capacity_mn;
                avg_act_iga_mn = total_capActIga_mn / total_capacity_mn;
                avg_act_ega_mn = total_capActEga_mn / total_capacity_mn;
                avg_tar_pr_mn = total_capTarPr_mn / total_capacity_mn;
                avg_act_pr_mn = total_capActPr_mn / total_capacity_mn;
                avg_act_plf_mn = total_capActPlf_mn / total_capacity_mn;
                avg_act_ma_mn = total_capActMa_mn / total_capacity_mn;
            }
            if (total_capacity_ld != 0)
            {
                avg_tar_IR_ld = total_capTarIR_ld / total_capacity_ld;
                avg_act_IR_ld = total_capActIR_ld / total_capacity_ld;
                avg_act_iga_ld = total_capActIga_ld / total_capacity_ld;
                avg_act_ega_ld = total_capActEga_ld / total_capacity_ld;
                avg_tar_pr_ld = total_capTarPr_ld / total_capacity_ld;
                avg_act_pr_ld = total_capActPr_ld / total_capacity_ld;
                avg_act_plf_ld = total_capActPlf_ld / total_capacity_ld;
                avg_act_ma_ld = total_capActMa_ld / total_capacity_ld;
            }
            
            if (avg_tar_IR_ld != 0)
            {
                avg_IR_var_ld = ((avg_act_IR_ld - avg_tar_IR_ld) / avg_tar_IR_ld) * 100;
            }
            if (avg_tar_IR_mn != 0)
            {
                avg_IR_var_mn = ((avg_act_IR_mn - avg_tar_IR_mn) / avg_tar_IR_mn) * 100;
            }
            if (avg_tar_IR_yr != 0)
            {
                avg_IR_var_yr = ((avg_act_IR_yr - avg_tar_IR_yr) / avg_tar_IR_yr) * 100;
            }
            
            avg_pr_var_ld = (Math.Round(avg_act_pr_ld, 2) - Math.Round(avg_tar_pr_ld, 2));
            avg_pr_var_mn = (Math.Round(avg_act_pr_mn, 2) - Math.Round(avg_tar_pr_mn, 2));
            avg_pr_var_yr = (Math.Round(avg_act_pr_yr, 2) - Math.Round(avg_tar_pr_yr, 2));
            try
            {
                //return tb;
                tb += "</tbody>";
                // tb += "<tfoot><tr><td style='padding:0.5rem; text-align: right;'><b>Grand Total&nbsp;&nbsp;</b></td>";
                tb += "<tfoot style='font-size: 10px;text-align:right' ><tr><td style='text-align:left'><b>Grand Total&nbsp;&nbsp;</b></td>";
                tb += "<td style='padding:0.5rem; text-align: right;'><b>" + Math.Round(total_capacity_yr, 1) + "&nbsp;&nbsp;</b></td>";
                tb += "<td style='padding:0.5rem; text-align: right;'><b>" + Math.Round(total_target_yr, 1) + "&nbsp;&nbsp;</b></td>";
                tb += "<td style='padding:0.5rem; text-align: right;'><b>" + Math.Round(total_tar_kwh_yr, 1) + "&nbsp;&nbsp;</b></td>";
                tb += "<td style='padding:0.5rem; text-align: right;'><b>" + Math.Round(total_act_kwh_yr, 1) + "&nbsp;&nbsp;</b></td>";
                tb += "<td style='padding:0.5rem; text-align: right;'><b>" + Math.Round(avg_solar_var_yr, 1) + "&nbsp;&nbsp;</b></td>";
                tb += "<td style='padding:0.5rem; text-align: right;'><b>" + Math.Round(avg_tar_IR_yr, 1) + "&nbsp;&nbsp;</b></td>";
                tb += "<td style='padding:0.5rem; text-align: right;'><b>" + Math.Round(avg_act_IR_yr, 1) + "&nbsp;&nbsp;</b></td>";
                tb += "<td style='padding:0.5rem; text-align: right;'><b>" + Math.Round(avg_IR_var_yr, 1) + "&nbsp;&nbsp;</b></td>";
                tb += "<td style='padding:0.5rem; text-align: right;'><b>" + Math.Round(avg_act_plf_yr, 1) + "&nbsp;&nbsp;</b></td>";
                tb += "<td style='padding:0.5rem; text-align: right;'><b>" + Math.Round(avg_act_ma_yr, 1) + "&nbsp;&nbsp;</b></td>";
                tb += "<td style='padding:0.5rem; text-align: right;'><b>" + Math.Round(avg_act_iga_yr, 1) + "&nbsp;&nbsp;</b></td>";
                tb += "<td style='padding:0.5rem; text-align: right;'><b>" + Math.Round(avg_act_ega_yr, 1) + "&nbsp;&nbsp;</b></td>";
                tb += "<td style='padding:0.5rem; text-align: right;'><b>" + Math.Round(avg_tar_pr_yr, 1) + "&nbsp;&nbsp;</b></td>";
                tb += "<td style='padding:0.5rem; text-align: right;'><b>" + Math.Round(avg_act_pr_yr, 1) + "&nbsp;&nbsp;</b></td>";
                tb += "<td style='padding:0.5rem; text-align: right;'><b>" + Math.Round(avg_pr_var_yr, 1) + "&nbsp;&nbsp;</b></td>";
                if (monthlyRecordFound == true)
                {
                    tb += "<td style='padding:0.5rem; text-align: right;'><b>" + Math.Round(total_tar_kwh_mn, 1) + "&nbsp;&nbsp;</b></td>";
                    tb += "<td style='padding:0.5rem; text-align: right;'><b>" + Math.Round(total_act_kwh_mn, 1) + "&nbsp;&nbsp;</b></td>";
                    tb += "<td style='padding:0.5rem; text-align: right;'><b>" + Math.Round(avg_solar_var_mn, 1) + "&nbsp;&nbsp;</b></td>";
                    tb += "<td style='padding:0.5rem; text-align: right;'><b>" + Math.Round(avg_tar_IR_mn, 1) + "&nbsp;&nbsp;</b></td>";
                    tb += "<td style='padding:0.5rem; text-align: right;'><b>" + Math.Round(avg_act_IR_mn, 1) + "&nbsp;&nbsp;</b></td>";
                    tb += "<td style='padding:0.5rem; text-align: right;'><b>" + Math.Round(avg_IR_var_mn, 1) + "&nbsp;&nbsp;</b></td>";
                    tb += "<td style='padding:0.5rem; text-align: right;'><b>" + Math.Round(avg_act_plf_mn, 1) + "&nbsp;&nbsp;</b></td>";
                    tb += "<td style='padding:0.5rem; text-align: right;'><b>" + Math.Round(avg_act_ma_mn, 1) + "&nbsp;&nbsp;</b></td>";
                    tb += "<td style='padding:0.5rem; text-align: right;'><b>" + Math.Round(avg_act_iga_mn, 1) + "&nbsp;&nbsp;</b></td>";
                    tb += "<td style='padding:0.5rem; text-align: right;'><b>" + Math.Round(avg_act_ega_mn, 1) + "&nbsp;&nbsp;</b></td>";
                    tb += "<td style='padding:0.5rem; text-align: right;'><b>" + Math.Round(avg_tar_pr_mn, 1) + "&nbsp;&nbsp;</b></td>";
                    tb += "<td style='padding:0.5rem; text-align: right;'><b>" + Math.Round(avg_act_pr_mn, 1) + "&nbsp;&nbsp;</b></td>";
                    tb += "<td style='padding:0.5rem; text-align: right;'><b>" + Math.Round(avg_pr_var_mn, 1) + "&nbsp;&nbsp;</b></td>";
                }
                else
                {
                    tb += "<td style='padding:0.5rem; text-align: center;'>-</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>-</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>-</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>-</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>-</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>-</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>-</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>-</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>-</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>-</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>-</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>-</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>-</td>";
                }
                if (dailyRecordFound == true)
                {

                    tb += "<td style='padding:0.5rem; text-align: right;'><b>" + Math.Round(total_tar_kwh_ld, 1) + "&nbsp;&nbsp;</b></td>";
                    tb += "<td style='padding:0.5rem; text-align: right;'><b>" + Math.Round(total_act_kwh_ld, 1) + "&nbsp;&nbsp;</b></td>";
                    tb += "<td style='padding:0.5rem; text-align: right;'><b>" + Math.Round(avg_solar_var_ld, 1) + "&nbsp;&nbsp;</b></td>";
                    tb += "<td style='padding:0.5rem; text-align: right;'><b>" + Math.Round(avg_tar_IR_ld, 1) + "&nbsp;&nbsp;</b></td>";
                    tb += "<td style='padding:0.5rem; text-align: right;'><b>" + Math.Round(avg_act_IR_ld, 1) + "&nbsp;&nbsp;</b></td>";
                    tb += "<td style='padding:0.5rem; text-align: right;'><b>" + Math.Round(avg_IR_var_ld, 1) + "&nbsp;&nbsp;</b></td>";
                    tb += "<td style='padding:0.5rem; text-align: right;'><b>" + Math.Round(avg_act_ma_ld, 1) + "&nbsp;&nbsp;</b></td>";
                    tb += "<td style='padding:0.5rem; text-align: right;'><b>" + Math.Round(avg_act_iga_ld, 1) + "&nbsp;&nbsp;</b></td>";
                    tb += "<td style='padding:0.5rem; text-align: right;'><b>" + Math.Round(avg_act_ega_ld, 1) + "&nbsp;&nbsp;</b></td>";
                    tb += "<td style='padding:0.5rem; text-align: right;'><b>" + Math.Round(avg_act_plf_ld, 1) + "&nbsp;&nbsp;</b></td>";
                    tb += "<td style='padding:0.5rem; text-align: right;'><b>" + Math.Round(avg_tar_pr_ld, 1) + "&nbsp;&nbsp;</b></td>";
                    tb += "<td style='padding:0.5rem; text-align: right;'><b>" + Math.Round(avg_act_pr_ld, 1) + "&nbsp;&nbsp;</b></td>";
                    tb += "<td style='padding:0.5rem; text-align: right;'><b>" + Math.Round(avg_pr_var_ld, 1) + "&nbsp;&nbsp;</b></td></tr>";
                }
                else
                {
                    tb += "<td style='padding:0.5rem; text-align: center;'>-</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>-</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>-</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>-</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>-</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>-</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>-</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>-</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>-</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>-</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>-</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>-</td>";
                    tb += "<td style='padding:0.5rem; text-align: center;'>-</td></tr>";
                }
                tb += "</tfoot></table>";
            }
            catch (Exception ex)
            {
                string strEx = ex.ToString();

            }
            //return tb;
            List<SolarUploadingFileBreakDown> data2 = new List<SolarUploadingFileBreakDown>();
            try
            {
                //ta2 = await GetSolarMajorBreakdownData(fromDate, fromDate, site);
                data2 = await GetSolarMajorBreakdownData(lastDay,lastDay, site,spv);

                PPT_InformationLog("EmailSolarReport function received data from GetSolarMajorBreakdownData function in data2 list");
            }catch (Exception e)
            {
                PPT_ErrorLog("EmailSolarReport function returned exception while receiving data from function getSolarMajorBreakdownData :" + e.Message);
            }


            tb += "<br>";
            //tb += "<h2><b>Major Breakdown dated " + dt.ToString("dd-MMM-yyyy") + "</b></h2>";
            tb += "<h3><b>Major Breakdown dated " + ltodate.ToString("dd-MMM-yyyy") + "</b></h3>";
            tb += "</n>";
            tb += "<table id='emailTable2' rowspan='2' class='table table-bordered table-striped' style='width: 80%; '  border='1' cellspacing='0' cellpadding='0'>";
            tb += "<thead style='background-color:#31576D ;'><tr>";
            tb += "<th style='padding:0.5rem;color:#ffffff'>Date</th>";
            tb += "<th style='padding:0.5rem;color:#ffffff'>Site</th>";
            tb += "<th style='padding:0.5rem;color:#ffffff'>ICRs</th>";
            tb += "<th style='padding:0.5rem;color:#ffffff'>INVs</th>";
            tb += "<th style='padding:0.5rem;color:#ffffff'>BD Type</th>";
            tb += "<th style='padding:0.5rem;color:#ffffff'>Total Stop</th>";
            tb += "<th style='padding:0.5rem;color:#ffffff'>Reason of Breakdown</th>";
            tb += "</tr></thead>";

            if (data2.Count > 0)
            {
                //var total_time = "";
                for (var i = 0; i < data2.Count; i++)
                {

                    tb += "<tr>";
                    tb += "<td style='padding:0.5rem; width:10%;'>&nbsp;&nbsp;" + data2[i].date.ToString("dd/MM/yyyy") + "&nbsp;&nbsp;</td>";
                    tb += "<td>&nbsp;&nbsp;" + data2[i].site + "</td>";

                    if (!string.IsNullOrEmpty(data2[i].icr_cnt))//!string.IsNullOrEmpty(sites)
                    {
                        tb += "<td>&nbsp;&nbsp;" + data2[i].icr_cnt + " ICRs </td>";
                        tb += "<td>&nbsp;&nbsp;" + data2[i].inv_cnt + " INVs</td>";
                    }
                    else
                    {
                        tb += "<td>&nbsp;&nbsp;" + data2[i].icr + "</td>";
                        tb += "<td>&nbsp;&nbsp;" + data2[i].inv + "</td>";
                    }
                    tb += "<td>&nbsp;&nbsp;" + data2[i].bd_type + "</td>";
                    tb += "<td>&nbsp;&nbsp;" + Math.Round(data2[i].total_bd,2) + "</td>";
                    tb += "<td>&nbsp;&nbsp;" + data2[i].bd_remarks + "</td>";
                }

            }
            else
            {
                //console.log("Data not available");
                // tbl += "<tr><th colspan="12" style="text-align:center">Data Not Available <th></tr>";
                tb += "<tr><td style='text-align:center;' colspan='7' ><b>Data Not Present<b>&nbsp;&nbsp;</td></tr>";

            }
            tb += "</table>";
            tb += "</br>";
            tb += "<p>Thanks and Regards,<br>";
            tb += "O&M - Team</p>";
            tb += "<br>";
            tb += "<p>This is a system generated email. Please Do Not Reply.</p>";
            try
            {
                PPT_InformationLog("MailDailySend before function call from repository for solar");
                //LogInfo(0, 1, 3, functionName, "MailDailySend before function call", backend);
                await MailDailySend(tb, title);
                PPT_InformationLog("MailDailySend function called from repository for solar");

            }
            catch (Exception e)
            {
                string msg = e.Message;
                PPT_InformationLog("MailDailySend function call failed from repository for wind" + msg);
                //LogInfo(0, 1, 3, functionName, msg, backend);

            }
            // return res;
            return tb;
        }
        //internal async Task<int> checkMaillog(int report_type, int site_type)
        //{
        //    var MyConfig = new ConfigurationBuilder().AddJsonFile("appsettings.json").Build();
        //    string set_time = MyConfig.GetValue<string>("Timer:DailyReportTime");

        //    if (report_type == weekly && site_type == wind)
        //    {
        //        set_time = MyConfig.GetValue<string>("Timer:WeeklyReportTime");
        //    }
        //    if (report_type == weekly && site_type == solar)
        //    {
        //        set_time = MyConfig.GetValue<string>("Timer:WeeklyReportTimeSolar");
        //    }
            

        //    string checkQry = $"select * from mail_send_log where report_type={report_type} and site_type={site_type} and status=1 and set_time = '{set_time}' and DATE(timestamp) = '{DateTime.Today.ToString("yyyy-MM-dd")}' ";

        //    DataTable  dt = await Context.FetchData(checkQry).ConfigureAwait(false);

        //    if (dt.Rows.Count == 0)
        //    {
        //        string qry = $"insert into mail_send_log (report_type, site_type, set_time, status) values({report_type},{site_type},'{set_time}',1)";
        //        int val = await Context.ExecuteNonQry<int>(qry).ConfigureAwait(false);
        //        return 0;
        //    }
        //    else
        //    {
        //        return 1;
        //    }
            
        //}

        internal async Task<int> checkMaillog(int report_type, int site_type)
        {
            var MyConfig = new ConfigurationBuilder().AddJsonFile("appsettings.json").Build();
            string set_time = MyConfig.GetValue<string>("Timer:DailyReportTime");
            string ConnectionString = MyConfig.GetValue<string>("ConnectionStrings:Con");

            if (report_type == weekly && site_type == wind)
            {
                set_time = MyConfig.GetValue<string>("Timer:WeeklyReportTime");
            }
            if (report_type == weekly && site_type == solar)
            {
                set_time = MyConfig.GetValue<string>("Timer:WeeklyReportTimeSolar");
            }

            MYSQLDBHelper mYSQLDB = new MYSQLDBHelper(ConnectionString);
            if (Context == null)
            {
                Context = mYSQLDB;
            }
            //GenericRepository

            string checkQry = $"select * from mail_send_log where report_type={report_type} and site_type={site_type} and status=1 and set_time = '{set_time}' and DATE(timestamp) = '{DateTime.Today.ToString("yyyy-MM-dd")}' ";

            DataTable dt = await Context.FetchData(checkQry).ConfigureAwait(false);

            if (dt.Rows.Count == 0)
            {
                string qry = $"insert into mail_send_log (report_type, site_type, set_time, status) values({report_type},{site_type},'{set_time}',1)";
                int val = await Context.ExecuteNonQry<int>(qry).ConfigureAwait(false);
                return 0;
            }
            else
            {
                return 1;
            }

        }

        internal async Task<int> MailDailySend(string data ,string reportTitle)
        { 
            
            PPT_InformationLog("Inside MailDailySend function from repository for" + reportTitle);
            string info = ("MailDailySend function called from repository for " + reportTitle);
            string functionName = "MailDailySend";
            //LogInfo(0, 0, 3, functionName, info, backend);
            //MAILING FUNCTIONALITY
            MailSettings _settings = new MailSettings();
            var MyConfig = new ConfigurationBuilder().AddJsonFile("appsettings.json").Build();
            _settings.Mail = MyConfig.GetValue<string>("MailSettings:Mail");
            //_settings.Mail = "kasrsanket@gmail.com";
            //_settings.DisplayName = "Sanket Kar";
            _settings.DisplayName = MyConfig.GetValue<string>("MailSettings:DisplayName");
            //_settings.Password = "lozirdytywjlvcxd";
            _settings.Password = MyConfig.GetValue<string>("MailSettings:Password");
            //_settings.Host = "smtp.gmail.com";
            _settings.Host = MyConfig.GetValue<string>("MailSettings:Host");
            //_settings.Port = 587;
            _settings.Port = MyConfig.GetValue<int>("MailSettings:Port");

           
            string Msg = "Weekly PR Report Generated";
            List<string> AddTo = new List<string>();
            List<string> AddCc = new List<string>();

            string qry = "";
            if (reportTitle.Contains("Solar"))
            {
                int val = await checkMaillog(daily,solar);
                if(val == 1)
                {
                    PPT_InformationLog("MailDailySend function : Solar Daily Mail already sent.");
                    return 1;
                }

                PPT_InformationLog("MailDailySend function : Contains solar file");
                qry = "select useremail from login where To_Daily_Solar = 1 AND active_user = 1;";
                List<UserLogin> data2 = await Context.GetData<UserLogin>(qry).ConfigureAwait(false);
                foreach (var item in data2)
                {
                    AddTo.Add(item.useremail);
                    PPT_InformationLog("MailDailySend function : Added solar to email : " + item.useremail);

                }
                qry = "select useremail from login where Cc_Daily_Solar = 1  AND active_user = 1;";
                List<UserLogin> data3 = await Context.GetData<UserLogin>(qry).ConfigureAwait(false);
                if (data3 != null)
                {
                    foreach (var item in data3)
                    {
                        AddCc.Add(item.useremail);
                        PPT_InformationLog("MailDailySend function : Added solar cc email : " + item.useremail);

                    }
                }
                else
                {
                    PPT_InformationLog("MailDailySend function : solar cc email list is Empty ");
                }
            }
            else
            {
                int val = await checkMaillog(daily,wind);
                if (val == 1)
                {
                    PPT_InformationLog("MailDailySend function : Wind Daily Mail already sent.");
                    return 1;
                }

                PPT_InformationLog("MailDailySend function : Contains wind file");

                qry = "select useremail from login where to_daily_wind = 1  AND active_user = 1;";
                List<UserLogin> data2 = await Context.GetData<UserLogin>(qry).ConfigureAwait(false);
                foreach (var item in data2)
                {
                    AddTo.Add(item.useremail);
                    PPT_InformationLog("MailDailySend function : Added wind to email : " + item.useremail);

                }
                qry = "select useremail from login where Cc_Daily_Wind = 1  AND active_user = 1;";
                List<UserLogin> data3 = await Context.GetData<UserLogin>(qry).ConfigureAwait(false);
                if (data3 != null)
                {
                    foreach (var item in data3)
                    {
                        AddCc.Add(item.useremail);
                        PPT_InformationLog("MailDailySend function : Added wind cc email : " + item.useremail);

                    }
                }
                else
                {

                    PPT_InformationLog("MailDailySend function :  wind cc email list is Empty");
                }
            }



            // private MailServiceBS mailService;
            MailRequest request = new MailRequest();
           
            //AddTo.Add("sujitkumar0304@gmail.com");
            //AddTo.Add("prashant@softetech.in");
            //AddTo.Add("tanvi@softeltech.in");          
        
            request.ToEmail = AddTo;
            request.CcEmail = AddCc;
            request.Subject = reportTitle;
            request.Body = data;
           
            try
            {
                var res = await MailService.SendEmailAsync(request, _settings, 0);
                PPT_InformationLog("Send Email Async function called from repository");

                //LogInfo(0, 0, 3, functionName, "Send Email Async function called from repository", backend);

            }
            catch (Exception e)
            {
                string msg = e.Message;
                PPT_ErrorLog("Send Email Async function call failed from repository" + msg);
                //LogInfo(0, 0, 3, functionName, "Send Email Async function call failed :"+msg+"", backend);

            }
            return 1;
        }
        private async void API_ErrorLog(string Message)
        {
            //Read variable from appsetting to enable disable log
            string qry = $"INSERT INTO log4netlog (Date,  Message, Level) VALUES('" + DateTime.Now.ToString("yyyy-MM-dd HH:mm") + "','" + Message.Replace("'","") + "', 1);";
            var logged = await Context.ErrorLog(qry).ConfigureAwait(false);


        }
        private async void API_InformationLog(string Message)
        {
            //Read variable from appsetting to enable disable log
            string logStmt = "INSERT INTO log4netlog (Date,  Message, Level) VALUES('" + DateTime.Now.ToString("yyyy-MM-dd HH:mm") + "','" + Message.Replace("'", "") + "', 2);";
            var logged = await Context.ErrorLog(logStmt).ConfigureAwait(false);
        }
        private async void PPT_ErrorLog(string Message)
        {
            //Read variable from appsetting to enable disable log
            //string qry = "INSERT INTO log4netlog (Date,  Message, Level) VALUES('" + DateTime.Now.ToString("yyyy-MM-dd HH:mm") + "','" + Message.Replace("'", "") + "', 1);";
            //var logged = await Context.ErrorLog(qry).ConfigureAwait(false);
            try
            {
                System.IO.File.AppendAllText(@"C:\LogFile\PPT_LogFromRepo.txt", "**Error**:" + Message + "\r\n");
            }
            catch (Exception e)
            {
            }
        }
        private async void PPT_InformationLog(string Message)
        {
            //Read variable from appsetting to enable disable log
            //string qry = "INSERT INTO log4netlog (Date,  Message, Level) VALUES('" + DateTime.Now.ToString("yyyy-MM-dd HH:mm") + "','" + Message.Replace("'", "") + "', 1);";
            //var logged = await Context.ErrorLog(qry).ConfigureAwait(false);
            try
            {
                System.IO.File.AppendAllText(@"C:\LogFile\PPT_LogFromRepo.txt", "**Info**:" + Message + "\r\n");
            }
            catch (Exception e)
            {
            }
        }
        internal class ViewerStatsFormat
        {
        }

        //DGRA_V2 functions.

        /// <summary>
        /// 
        /// </summary>
        /// <param name="set"></param>
        /// <returns>
        ///    FinalResult = 0 : Complete failure
        ///    FinalResult = 1 : Completed till deletion.
        ///    FinalResult = 2 : Completed till insertion.
        ///    FinalResult = 3 : Completed till updating manual bd column
        ///    FinalResult = 4 : Completed till updating reconstructed windspeed.
        ///    FinalResult = 5 : Completed till updating expected power column.
        ///    FinalResult = 6 : Completed till updating deviation kw column.
        ///    FinalResult = 7 : Completed till updating loss kw column.
        ///    FinalResult = 8 : Completed till updating all breakdown column.
        ///    FinalResult = 9 : Completed till updating all breakdown code column.
        /// </returns>
        /// 

        Hashtable ReferenceWtgHash = new Hashtable();
        //InsertWindTMR
        internal async Task<int> InsertWindTMR(List<InsertWindTMR> set)
        {
            int val = 0;
            string qry = " insert into uploading_file_tmr (site, site_id, wtg, onm_wtg, wtg_id, date_time, date, from_time, to_time, avgActivePower, avgWindSpeed, mostRestructiveWTG) values";
            string insertValues = "";
            string functionName = "InsertWindTMR";
            string wtg = "";
            string date_time = "";

            foreach (var unit in set)
            {
                insertValues += "('" + unit.site + "', " + unit.site_id + ", '" + unit.wtg + "','" + unit.onmWTG + "'," + unit.wtg_id + ",'" + unit.date_time + "','" + unit.date + "','" + unit.from_time + "','" + unit.to_time + "'," + unit.avgActivePower + "," + unit.avgWindSpeed + "," + unit.mostRestructiveWTG + "),";
                //DELETE FROM uploading_file_pvsyst_loss WHERE site_id IN (3,9) and month In ('Apr','Mar');
                wtg = unit.wtg;
                date_time = unit.date_time.ToString();
            }
            string date = date_time.ToString().Substring(0, 10);
            string deleteQry = "DELETE FROM uploading_file_tmr WHERE wtg = '" + wtg + "' AND date_time LIKE '" + date + "%' ;";
            qry += insertValues;

            await Context.ExecuteNonQry<int>(deleteQry).ConfigureAwait(false);
            if (!(string.IsNullOrEmpty(insertValues)))
            {
                try
                {
                    val = await Context.ExecuteNonQry<int>(qry.Substring(0, (qry.Length - 1)) + ";").ConfigureAwait(false);
                    //LogInfo(0, 2, 10, functionName, msg, backend);
                }
                catch (Exception e)
                {
                    string msg = "Exception while inserting values in uploading_file_tmr, due to : " + e.ToString();
                    //API_ErrorLog(msg);
                    LogError(0, 2, 6, functionName, msg, backend);
                    return 0;
                }
            }
            return val;
        }

        //InsertWindTMLData.
        internal async Task<int> InsertWindTMLData(List<InsertWindTMLData> set, int type)
        {
            //insertWindTMLData type = 1 : Gamesa ; type = 2 : INOX ; type = 3 : Suzlon; type = 4 : Regen
            string tmlMsg = "-------------------TML Insertion Started---------------------------";
            //TML_InfoLog(tmlMsg);
            DateTime functionCall = DateTime.Now;
            tmlMsg = "type : " + type + " at : " + functionCall;
            //TML_InfoLog(tmlMsg);
            int finalResult = 0;
            string date = "";
            int site_id = 0;
            if (set.Count > 0)
            {
                date = set[0].date;
                site_id = set[0].site_id;
                string insertWinsSpeedTmdQry = "INSERT INTO windspeed_tmd (site, site_id, wtg, wtg_id, tmd_date, date, from_time, to_time, windspeed ) VALUES ";
                string insertWindSpeedTmdValues = "";
                string deleteWindSpeedTmdQry = "DELETE FROM windspeed_tmd WHERE date = '" + date + "' AND site_id = " + site_id;
                string deleteWindSpeedTmdValues = "";
                int insertWindSpeedTmdRes = 0;
                int deleteWindSpeedTmdRes = 0;
                int insertMainWindSpeedtmdRes = 0;
                int UpdateManualBdForTMLDataRes = 0;
                int UpdateReconWSAndOtherRes = 0;
                string yearMonthDate = "";
                string functionName = "InsertWindTMLData";

                //try
                //{
                //    deleteWindSpeedTmdQry += " AND wtg_id IN( " + deleteWindSpeedTmdValues + ") ;";
                //    deleteWindSpeedTmdRes = await Context.ExecuteNonQry<int>(deleteWindSpeedTmdQry).ConfigureAwait(false);
                //    finalResult = 1;
                //}
                //catch(Exception e)
                //{
                //    string msg = e.ToString();
                //    API_ErrorLog("Exception while deleting records from windspeed tmd table. Due to : " + msg);
                //    return finalResult;
                //}
                int qryCounter = 0;
                int count = 0;
                int previousWtgId = 0;
                string fileName = "";
                string info = "";

                foreach (var unit in set)
                {
                    if (count == 0)
                    {
                        fileName = unit.file_name;
                        info = ("Starting insertion and calculation of TML data file Name : " + fileName);
                        LogInfo(0, 2, 6, functionName, info, backend);

                        previousWtgId = unit.wtg_id;
                        deleteWindSpeedTmdValues += unit.wtg_id.ToString() + ",";
                    }
                    if (count >= 0)
                    {
                        if (previousWtgId != unit.wtg_id)
                        {
                            deleteWindSpeedTmdValues += unit.wtg_id.ToString() + ",";
                            previousWtgId = unit.wtg_id;
                        }
                    }
                    yearMonthDate = Convert.ToDateTime(unit.date).ToString("yyyy-MM-dd");
                    insertWindSpeedTmdValues += "('" + unit.site + "', " + unit.site_id + ", '" + unit.WTGs + "', " + unit.wtg_id + ", '" + yearMonthDate + "', '" + unit.date + "', '" + unit.from_time + "', '" + unit.to_time + "', " + unit.avg_wind_speed + " ),";

                    if (qryCounter == 10000)
                    {
                        insertWinsSpeedTmdQry += insertWindSpeedTmdValues;
                        try
                        {
                            deleteWindSpeedTmdQry += " AND wtg_id IN( " + deleteWindSpeedTmdValues.Substring(0, (deleteWindSpeedTmdValues.Length - 1)) + ") ;";
                            deleteWindSpeedTmdRes = await Context.ExecuteNonQry<int>(deleteWindSpeedTmdQry).ConfigureAwait(false);
                            tmlMsg = "Delete Query completed at " + DateTime.Now + " QUERY :- " + deleteWindSpeedTmdQry;
                            //TML_InfoLog(tmlMsg);
                            finalResult = 1;
                        }
                        catch (Exception e)
                        {
                            string msg = e.ToString();
                            //API_ErrorLog("Exception while deleting records of WTGs <" + deleteWindSpeedTmdValues.Substring(0, (deleteWindSpeedTmdValues.Length - 1)) + "> from windspeed tmd table. Due to : " + msg);
                            LogError(0, 2, 6, functionName, msg, backend);
                            return finalResult;
                        }
                        try
                        {
                            if (insertWindSpeedTmdValues != "")
                            {
                                insertWindSpeedTmdRes = await Context.ExecuteNonQry<int>(insertWinsSpeedTmdQry.Substring(0, (insertWinsSpeedTmdQry.Length - 1)) + ";").ConfigureAwait(false);
                                if (insertWindSpeedTmdRes > 0)
                                {
                                    finalResult = 2;
                                    tmlMsg = "Insert Query completed at " + DateTime.Now + " QUERY :- " + insertWinsSpeedTmdQry.Substring(0, (insertWinsSpeedTmdQry.Length - 1));
                                    //TML_InfoLog(tmlMsg);
                                    info = ("Insert into windSpeed tmd Data table successful. counter count : " + qryCounter);
                                    LogInfo(0, 2, 6, functionName, info, backend);
                                    qryCounter = 0;
                                }
                            }
                        }
                        catch (Exception e)
                        {
                            string msg = e.ToString();
                            //API_ErrorLog("Exception while inserting tmd data into windspeed tmd table. Due to : " + msg);
                            LogError(0, 2, 6, functionName, msg, backend);
                            return finalResult;
                        }
                    }
                    count++;
                    qryCounter++;
                }
                if (qryCounter < 10000)
                {
                    insertWinsSpeedTmdQry += insertWindSpeedTmdValues;
                    try
                    {
                        deleteWindSpeedTmdQry += " AND wtg_id IN( " + deleteWindSpeedTmdValues.Substring(0, (deleteWindSpeedTmdValues.Length - 1)) + ") ;";
                        deleteWindSpeedTmdRes = await Context.ExecuteNonQry<int>(deleteWindSpeedTmdQry).ConfigureAwait(false);
                        tmlMsg = "Delete Query completed at " + DateTime.Now + " QUERY :- " + deleteWindSpeedTmdQry;
                        //TML_InfoLog(tmlMsg);
                        finalResult = 1;
                    }
                    catch (Exception e)
                    {
                        string msg = "Exception while deleting WTGs <" + deleteWindSpeedTmdValues.Substring(0, (deleteWindSpeedTmdValues.Length - 1)) + "> records from windspeed tmd table. Due to : " + e.ToString();
                        //API_ErrorLog(msg);
                        LogError(0, 2, 6, functionName, msg, backend);
                        return finalResult;
                    }
                    try
                    {
                        if (insertWindSpeedTmdValues != "")
                        {
                            insertWindSpeedTmdRes = await Context.ExecuteNonQry<int>(insertWinsSpeedTmdQry.Substring(0, (insertWinsSpeedTmdQry.Length - 1)) + ";").ConfigureAwait(false);
                            if (insertWindSpeedTmdRes > 0)
                            {
                                finalResult = 2;
                                tmlMsg = "Insert Query completed at " + DateTime.Now + " QUERY :- " + insertWinsSpeedTmdQry.Substring(0, (insertWinsSpeedTmdQry.Length - 1));
                                //TML_InfoLog(tmlMsg);
                                info = ("Insert into windSpeed tmd Data table successful. counter count/no. of rows : " + qryCounter + " / " + set.Count);
                                LogInfo(0, 2, 6, functionName, info, backend);
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        string msg = "Exception while inserting tmd data into windspeed tmd table. Due to : " + e.ToString();
                        //API_ErrorLog(msg);
                        LogError(0, 2, 6, functionName, msg, backend);
                        return finalResult;
                    }
                }
                if (count == set.Count)
                {
                    info = ("Inserted data into table . counter count/no. of rows : " + count + " / " + set.Count);
                    LogInfo(0, 2, 6, functionName, info, backend);
                }
                else
                {
                    string msg = "Failed to insert data into table : counter count/no. of rows : " + count + " / " + set.Count;
                    //API_ErrorLog(msg);
                    LogError(0, 2, 6, functionName, msg, backend);
                }

                if (finalResult == 2)
                {
                    //importFormat = 1 : WTGs data in one excel sheet. Template file name : Badnawar_TML_Data
                    //importFormat = 2 : WTGs data in different sheets for each WTG. Template file name : Wind_TMR_Gamesa.
                    //importFormat = 3 :
                    insertMainWindSpeedtmdRes = await InsertMainWindSpeedTMD(set, date, site_id, 1, type);
                }
                if (insertMainWindSpeedtmdRes == 8)
                {
                    finalResult = 3;
                    UpdateManualBdForTMLDataRes = await UpdateManualBdForTMLData(date, site_id, type);
                }
                if (UpdateManualBdForTMLDataRes == 2)
                {
                    finalResult = 4;
                    UpdateReconWSAndOtherRes = await UpdateReconAndOther(date, site_id, type);
                }
                if (UpdateReconWSAndOtherRes == 8)
                {
                    //DGR_v3
                    string convDate = Convert.ToDateTime(date).ToString("yyyy-MM-dd");
                    int tmlcount = await WindTMLRecordCount(convDate, site_id, type, set.Count, 0);
                    //DGR_v2
                    finalResult = 5;
                    ReferenceWtgHash.Clear();
                }
            }

            //finalResult = 0 : Failed Completely.
            //finalResult = 1 : Deleted Records from TML data table.
            //finalResult = 2 : Inserted records in WindSpeed table for raw data.
            //finalResult = 3 : Inserted Data into main wind Speed table.
            //finalResult = 4 : Updated manual_bd Column in uploading_file_tmr_data table.
            //finalResult = 5 : Updated further calculations columns.

            return finalResult;
        }
        //Calculation for inserting data into windspeed TMD table.
        internal async Task<int> InsertMainWindSpeedTMD(List<InsertWindTMLData> set, string date, int site_id, int importFormat, int type)
        {
            //insertWindTMLData type = 1 : Gamesa ; type = 2 : INOX ; type = 3 : Suzlon; type = 4 : Regen
            //Incase of INOX insert all_bd as well.


            //importFormat = 1 : WTGs data in one excel sheet. Template file name : Badnawar_TML_Data
            //importFormat = 2 : WTGs data in different sheets for each WTG. Template file name : Wind_TMR_Gamesa.
            //importFormat = 3 :
            int finalResult = 0;
            string functionName = "InsertWIndMainWindSpeedTMD";
            string updateWindspeedTMDQry = "INSERT INTO uploading_file_tmr_data (onm_wtg, WTGs, wtg_id, site, site_id, Time_stamp, avg_active_power, avg_wind_speed, calculated_ws, restructive_WTG, date, from_time, to_time, status, status_code) VALUES ";
            string deleteFromTMDQry = "DELETE FROM uploading_file_tmr_data WHERE date = '" + date + "' AND site_id = " + site_id;
            string deleteFromTMDValues = "";
            string insertValues = "";
            int updateWindspeedTMDRes = 0;
            int deleteTmdDataRes = 0;
            int fetchReferenceWtgRes = 0;
            string tmlMsg = "";
            //Hashtable ReferenceWtgHash = new Hashtable();
            List<ImportWindReferenceWtgs> referenceList = new List<ImportWindReferenceWtgs>();
            string fetchReferenceQry = "SELECT * FROM tml_reference_wtgs WHERE site_id = " + site_id + ";";

            //try
            //{
            //    deleteTmdDataRes = await Context.ExecuteNonQry<int>(deleteFromTMDQry).ConfigureAwait(false);
            //    finalResult = 1;
            //}
            //catch (Exception e)
            //{
            //    string msg = e.ToString();
            //    API_ErrorLog("Exception while deleting records from TMD table. Due to : " + msg);
            //    return finalResult;
            //}
            try
            {
                referenceList = await Context.GetData<ImportWindReferenceWtgs>(fetchReferenceQry).ConfigureAwait(false);
                tmlMsg = "Fetch Reference Query completed at " + DateTime.Now + " QUERY :- " + fetchReferenceQry;
                //TML_InfoLog(tmlMsg);
                fetchReferenceWtgRes = referenceList.Count;
                finalResult = 2;
            }
            catch (Exception e)
            {
                string msg = "Exception while fetching records fo rreference wtgs list form tml_reference_wtgs table " + e.ToString();
                //API_ErrorLog(msg);
                LogError(0, 2, 6, functionName, msg, backend);
                return finalResult;
            }
            if (fetchReferenceWtgRes > 0)
            {
                string referenceWtgs = "";
                try
                {
                    foreach (var unit in referenceList)
                    {
                        string referenceWTGs = "'" + unit.ref1 + "', '" + unit.ref2 + "', '" + unit.ref3 + "'";
                        referenceWtgs = referenceWTGs;
                        ReferenceWtgHash.Add(unit.wtg, referenceWTGs);
                        finalResult = 3;
                    }
                    finalResult = 3;
                }
                catch (Exception e)
                {
                    string msg = e.ToString();
                    //API_ErrorLog("Error while adding data into hash table of reference <" + referenceWtgs + "> wtgs. Due to : " + msg);
                    LogError(0, 2, 6, functionName, msg, backend);
                    return finalResult;
                }
            }

            int count = 0;
            string loopDate = "";
            string info = "";
            int qryCounter = 0;
            int previousWtgId = 0;
            foreach (var unit in set)
            {
                if (count == 0)
                {
                    info = ("Calculating and Inserting data into TML data table : " + unit.file_name);
                    LogInfo(0, 2, 6, functionName, info, backend);
                    previousWtgId = unit.wtg_id;
                    deleteFromTMDValues += unit.wtg_id.ToString() + ",";
                    loopDate = unit.date;
                }
                if (count >= 0)
                {
                    if (previousWtgId != unit.wtg_id)
                    {
                        deleteFromTMDValues += unit.wtg_id.ToString() + ",";
                        previousWtgId = unit.wtg_id;
                    }
                    if (loopDate == date)
                    {
                        string Tempdate = Convert.ToDateTime(unit.date).ToString("yyyy-MM-dd");
                        if (unit.avg_wind_speed > 0 && unit.status_code == 0)
                        {
                            unit.calculated_ws = unit.avg_wind_speed;
                        }
                        if (unit.avg_wind_speed == 0 && unit.calculated_ws == 0)
                        {
                            string referenceWtgs = "";
                            referenceWtgs = ReferenceWtgHash.ContainsKey(unit.WTGs) ? Convert.ToString(ReferenceWtgHash[unit.WTGs]) : "";
                            //SELECT AVG(windspeed) as windspeed FROM windspeed_tmd WHERE site_id = 217 AND date = '14-Mar-23' AND windspeed > 0 AND to_time = '00:00:00' AND wtg IN('BD-02', 'BD-03', 'BD-04');
                            string ReferenceWSQry = "SELECT AVG(windspeed) as windspeed FROM windspeed_tmd WHERE site_id = " + site_id + " AND date = '" + date + "' AND windspeed > 0 AND to_time = '" + unit.to_time + "' AND wtg IN (" + referenceWtgs + ");";
                            try
                            {
                                List<WindSpeedData> avgeRefWindSpeed = await Context.GetData<WindSpeedData>(ReferenceWSQry).ConfigureAwait(false);
                                unit.calculated_ws = avgeRefWindSpeed[0].windspeed;
                                finalResult = 4;
                                tmlMsg = "Fetch AvgReferenceWind Speed Query completed at " + DateTime.Now + " QUERY :- " + ReferenceWSQry;
                                //TML_InfoLog(tmlMsg);
                            }
                            catch (Exception e)
                            {
                                string msg = "Exception while getting average of reference WTGS : <" + referenceWtgs + "> during iteration <" + count + "> due to : " + e.ToString();
                                //API_ErrorLog(msg);
                                LogError(0, 2, 6, functionName, msg, backend);
                            }
                        }
                        if (unit.avg_wind_speed == 0 && unit.calculated_ws == 0)
                        {
                            string averageTmlQry = "SELECT AVG(windspeed) as windspeed FROM windspeed_tmd WHERE site_id = " + site_id + " AND date = '" + date + "' AND to_time = '" + unit.to_time + "' AND windspeed IS NOT NULL AND windspeed > 0";
                            try
                            {
                                List<WindSpeedData> avgAllField = await Context.GetData<WindSpeedData>(averageTmlQry).ConfigureAwait(false);
                                unit.calculated_ws = avgAllField[0].windspeed;
                                finalResult = 5;
                                tmlMsg = "Fetch averageTmlQry Speed Query completed at " + DateTime.Now + " QUERY :- " + averageTmlQry;
                                //TML_InfoLog(tmlMsg);
                            }

                            catch (Exception e)
                            {
                                string msg = "Exception while getting all windfarm average from TML data table during iteration <" + count + "> Due to  : " + e.ToString();
                                //API_ErrorLog( msg);
                                LogError(0, 2, 6, functionName, msg, backend);
                                return finalResult;
                            }
                        }
                        if (unit.avg_wind_speed == 0 && unit.calculated_ws == 0)
                        {
                            string averageTmlQry = "";
                            try
                            {
                                TimeSpan totimeSpan = TimeSpan.Parse(unit.to_time.ToString());
                                TimeSpan toTime = totimeSpan.Add(TimeSpan.FromHours(5));
                                TimeSpan fromtimeSpan = TimeSpan.Parse(unit.from_time.ToString());
                                TimeSpan fromTime = fromtimeSpan.Subtract(TimeSpan.FromHours(5));
                                finalResult = 6;
                                //averageTmlQry = "SELECT AVG(windspeed) as windspeed FROM windspeed_tmd WHERE site_id = " + site_id + " AND date = '" + date + "' AND to_time BETWEEN '" + toTime + "' AND '" + fromTime + "' AND wtg = '" + unit.WTGs + "' AND windspeed > 0 ;";
                                averageTmlQry = "SELECT AVG(windspeed) as windspeed FROM windspeed_tmd WHERE site_id = " + site_id + " AND date = '" + date + "' AND to_time BETWEEN '" + fromTime + "' AND '" + toTime + "' AND wtg = '" + unit.WTGs + "' AND windspeed > 0 ;";
                            }
                            catch (Exception e)
                            {
                                string msg = "Exception while adding and subtracting time. Due to : " + e.ToString();
                                //API_ErrorLog( msg);
                                LogError(0, 2, 6, functionName, msg, backend);
                                return finalResult;
                            }

                            try
                            {
                                List<WindSpeedData> avgFivePrevNext = await Context.GetData<WindSpeedData>(averageTmlQry).ConfigureAwait(false);
                                unit.calculated_ws = avgFivePrevNext[0].windspeed;
                                finalResult = 7;
                                tmlMsg = "Fetch averageTmlQry Query completed at " + DateTime.Now + " QUERY :- " + averageTmlQry;
                                //TML_InfoLog(tmlMsg);
                            }
                            catch (Exception e)
                            {
                                string msg = "Error while fetching average of five hrs before and next during iteration <" + count + "> , due to : " + e.ToString();
                                //API_ErrorLog(msg);
                                LogError(0, 2, 6, functionName, msg, backend);
                                return finalResult;
                            }
                        }
                        if (type == 1)
                        {
                            insertValues += "('" + unit.onm_wtg + "', '" + unit.WTGs + "', " + unit.wtg_id + ", '" + unit.site + "', " + unit.site_id + ", '" + unit.timestamp + "', " + unit.avg_active_power + ", " + unit.avg_wind_speed + ", " + unit.calculated_ws + ", " + unit.restructive_WTG + ", '" + unit.date + "', '" + unit.from_time + "', '" + unit.to_time + "', '" + unit.status + "', " + unit.status_code + "),";
                        }
                        else if (type == 2)
                        {
                            insertValues += "('" + unit.file_name + "', '" + unit.variable + "', '" + unit.PC_validity + "', '" + unit.PLC_max + "', '" + unit.PLC_min + "', '" + unit.plc_state_code + "', '" + unit.onm_wtg + "', '" + unit.WTGs + "', " + unit.wtg_id + ", '" + unit.site + "', " + unit.site_id + ", '" + unit.timestamp + "', " + unit.avg_active_power + ", " + unit.avg_wind_speed + ", " + unit.calculated_ws + ", " + unit.restructive_WTG + ", '" + unit.date + "', '" + unit.from_time + "', '" + unit.to_time + "', '" + unit.status + "', " + unit.status_code + ", '" + unit.all_bd + "'),";
                        }
                        else if (type == 3)
                        {
                            //"INSERT INTO uploading_file_tmr_data (file_name, onm_wtg, WTGs, wtg_id, site, site_id, Time_stamp, avg_active_power, avg_wind_speed, calculated_ws, date, from_time, to_time, status, status_code) VALUES ";
                            insertValues += "('" + unit.file_name + "', '" + unit.onm_wtg + "', '" + unit.WTGs + "', " + unit.wtg_id + ", '" + unit.site + "', " + unit.site_id + ", '" + unit.timestamp + "', " + unit.avg_active_power + ", " + unit.avg_wind_speed + ", " + unit.calculated_ws + ", '" + unit.date + "', '" + unit.from_time + "', '" + unit.to_time + "', '" + unit.status + "', " + unit.status_code + "),";
                        }
                        else if (type == 4)
                        {
                            insertValues += "('" + unit.file_name + "', '" + unit.onm_wtg + "', '" + unit.WTGs + "', " + unit.wtg_id + ", '" + unit.site + "', " + unit.site_id + ", '" + unit.timestamp + "', " + unit.avg_active_power + ", " + unit.avg_wind_speed + ", " + unit.calculated_ws + ", '" + unit.date + "', '" + unit.from_time + "', '" + unit.to_time + "', '" + unit.status + "', " + unit.status_code + ", " + unit.operation_mode + ", " + unit.low_wind_period + ", " + unit.service + ", " + unit.visit + ", " + unit.error + ", " + unit.operation + ", " + unit.power_production + "),";
                        }
                        /*
                        if (unit.status_code == 0)
                        {
                            insertValues += "('" + unit.WTGs + "', " + unit.wtg_id + ", '" + unit.site + "', " + unit.site_id + ", '" + unit.timestamp + "', " + unit.avg_active_power + ", " + unit.avg_wind_speed + ", " + unit.restructive_WTG + ", '" + unit.date + "', '" + unit.from_time + "', '" + unit.to_time + "', '" + unit.status + "', " + unit.status_code + "),";
                        }*/
                        /*if(unit.status_code == 1)
                        {
                            insertValues += "('" + unit.WTGs + "', " + unit.wtg_id + ", '" + unit.site + "', " + unit.site_id + ", '" + unit.timestamp + "', NULL, " + unit.avg_wind_speed + ", " + unit.restructive_WTG + ", '" + unit.date + "', '" + unit.from_time + "', '" + unit.to_time + "', '" + unit.status + "', " + unit.status_code + "),";
                        }*/

                        if (qryCounter == 10000)
                        {
                            if (insertValues != "")
                            {
                                if (type == 1)
                                {
                                    updateWindspeedTMDQry += insertValues;
                                }
                                else if (type == 2)
                                {
                                    updateWindspeedTMDQry = "INSERT INTO uploading_file_tmr_data (file_name, variable, PC_validity, PLC_max, PLC_min, PLC_state_code, onm_wtg, WTGs, wtg_id, site, site_id, Time_stamp, avg_active_power, avg_wind_speed, calculated_ws, restructive_WTG, date, from_time, to_time, status, status_code, all_bd) VALUES ";
                                    updateWindspeedTMDQry += insertValues;
                                }
                                else if (type == 3)
                                {
                                    updateWindspeedTMDQry = "INSERT INTO uploading_file_tmr_data (file_name, onm_wtg, WTGs, wtg_id, site, site_id, Time_stamp, avg_active_power, avg_wind_speed, calculated_ws, date, from_time, to_time, status, status_code) VALUES ";
                                    updateWindspeedTMDQry += insertValues;
                                }
                                else if (type == 4)
                                {
                                    updateWindspeedTMDQry = "INSERT INTO uploading_file_tmr_data (file_name, onm_wtg, WTGs, wtg_id, site, site_id, Time_stamp, avg_active_power, avg_wind_speed, calculated_ws, date, from_time, to_time, status, status_code, operation_mode, low_wind_period, service, visit, error, operation, power_production) VALUES ";
                                    updateWindspeedTMDQry += insertValues;
                                }
                                try
                                {
                                    deleteFromTMDQry += " AND wtg_id IN( " + deleteFromTMDValues.Substring(0, (deleteFromTMDValues.Length - 1)) + ") ;";
                                    deleteTmdDataRes = await Context.ExecuteNonQry<int>(deleteFromTMDQry).ConfigureAwait(false);
                                    //DGR_v3
                                    if (deleteTmdDataRes > 0)
                                    {
                                        string conDate = Convert.ToDateTime(date).ToString("yyyy-MM-dd");
                                        int tmlcount = await WindTMLRecordCount(conDate, site_id, type, deleteTmdDataRes, 1);
                                        if (tmlcount > 0)
                                        {
                                            finalResult = 5;
                                        }
                                    }
                                    //DGR_v2
                                    tmlMsg = "deleteFromTMDQry Query completed at " + DateTime.Now + " QUERY :- " + deleteFromTMDQry;
                                    //TML_InfoLog(tmlMsg);
                                    finalResult = 1;
                                }
                                catch (Exception e)
                                {
                                    string msg = "Exception while deleting WTGs <" + deleteFromTMDValues.Substring(0, (deleteFromTMDValues.Length - 1)) + "> records from TMD table. Due to : " + e.ToString();
                                    //API_ErrorLog(msg);
                                    LogError(0, 2, 6, functionName, msg, backend);
                                    return finalResult;
                                }
                                try
                                {
                                    updateWindspeedTMDRes = await Context.ExecuteNonQry<int>(updateWindspeedTMDQry.Substring(0, (updateWindspeedTMDQry.Length - 1)) + " ;").ConfigureAwait(false);
                                    finalResult = 8;
                                    tmlMsg = "updateWindspeedTMDQry Query completed at " + DateTime.Now + " QUERY :- " + updateWindspeedTMDQry;
                                    //TML_InfoLog(tmlMsg);
                                    info = ("Inserted values into uploading_file_tmr_data  counter : " + qryCounter);
                                    LogInfo(0, 2, 6, functionName, info, backend);
                                }
                                catch (Exception e)
                                {
                                    string msg = "Error while updaating value to Windspeed TMD table . Due to  : " + e.ToString();
                                    //API_ErrorLog(msg);
                                    LogError(0, 2, 6, functionName, msg, backend);
                                    return finalResult;
                                }
                            }
                            qryCounter = 0;
                        }
                    }
                    else
                    {
                        //break;
                    }
                }
                count++;
                qryCounter++;
            }

            if (qryCounter < 10000)
            {
                if (insertValues != "")
                {
                    if (type == 1)
                    {
                        updateWindspeedTMDQry += insertValues;
                    }
                    else if (type == 2)
                    {
                        updateWindspeedTMDQry = "INSERT INTO uploading_file_tmr_data (file_name, variable, PC_validity, PLC_max, PLC_min, PLC_state_code, onm_wtg, WTGs, wtg_id, site, site_id, Time_stamp, avg_active_power, avg_wind_speed, calculated_ws, restructive_WTG, date, from_time, to_time, status, status_code, all_bd) VALUES ";
                        updateWindspeedTMDQry += insertValues;
                    }
                    else if (type == 3)
                    {
                        updateWindspeedTMDQry = "INSERT INTO uploading_file_tmr_data (file_name, onm_wtg, WTGs, wtg_id, site, site_id, Time_stamp, avg_active_power, avg_wind_speed, calculated_ws, date, from_time, to_time, status, status_code) VALUES ";
                        updateWindspeedTMDQry += insertValues;
                    }
                    else if (type == 4)
                    {
                        updateWindspeedTMDQry = "INSERT INTO uploading_file_tmr_data (file_name, onm_wtg, WTGs, wtg_id, site, site_id, Time_stamp, avg_active_power, avg_wind_speed, calculated_ws, date, from_time, to_time, status, status_code, operation_mode, low_wind_period, service, visit, error, operation, power_production) VALUES ";
                        updateWindspeedTMDQry += insertValues;
                    }
                    try
                    {
                        deleteFromTMDQry += " AND wtg_id IN( " + deleteFromTMDValues.Substring(0, (deleteFromTMDValues.Length - 1)) + ") ;";
                        deleteTmdDataRes = await Context.ExecuteNonQry<int>(deleteFromTMDQry).ConfigureAwait(false);
                        //DGR_v3
                        if (deleteTmdDataRes > 0)
                        {
                            string conDate = Convert.ToDateTime(date).ToString("yyyy-MM-dd");
                            int tmlcount = await WindTMLRecordCount(conDate, site_id, type, set.Count, 1);
                            if (tmlcount > 0)
                            {
                                finalResult = 500;
                            }
                        }
                        //DGR_v2
                        finalResult = 1;
                        tmlMsg = "deleteFromTMDValues Query completed at " + DateTime.Now + " QUERY :- " + deleteFromTMDValues;
                        //TML_InfoLog(tmlMsg);
                    }
                    catch (Exception e)
                    {
                        string msg = "Exception while deleting WTGs <" + deleteFromTMDValues.Substring(0, (deleteFromTMDValues.Length - 1)) + "> records from TMD table. Due to : " + e.ToString();
                        //API_ErrorLog(msg);
                        LogError(0, 2, 6, functionName, msg, backend);
                        return finalResult;
                    }
                    try
                    {
                        updateWindspeedTMDRes = await Context.ExecuteNonQry<int>(updateWindspeedTMDQry.Substring(0, (updateWindspeedTMDQry.Length - 1)) + " ;").ConfigureAwait(false);
                        finalResult = 8;
                        tmlMsg = "updateWindspeedTMDRes Query completed at " + DateTime.Now + " QUERY :- " + updateWindspeedTMDRes;
                        //TML_InfoLog(tmlMsg);
                        info = ("Inserted values into uploading_file_tmr_data  counter/no. of rows : " + qryCounter + " / " + set.Count);
                        LogInfo(0, 2, 6, functionName, info, backend);
                    }
                    catch (Exception e)
                    {
                        string msg = "Error while updaating value to Windspeed TMD table . Due to  : " + e.ToString();
                        //API_ErrorLog( msg);
                        LogError(0, 2, 6, functionName, msg, backend);
                        return finalResult;
                    }
                }
            }

            if (count == set.Count)
            {
                info = ("Inserted all data into uploading_file_tmr_data table : counter/no. of rows : " + count + " / " + qryCounter + " ");
                LogInfo(0, 2, 6, functionName, info, backend);
                //TML_InfoLog(info);
            }
            else
            {
                string msg = "Failed to insert all data into uploading_file_tmr_data table : counter/no. of rows : " + count + " / " + qryCounter + " ";
                //API_ErrorLog(msg);
                LogError(0, 2, 6, functionName, msg, backend);
            }
            //finalResult = 0 : Failed completely.
            //finalResult = 1 : Deleted previous data.
            //finalResult = 2 : Fetched data from reference wtg table for list.
            //finalResult = 3 : Added data into hashtable of reference wtgs.
            //finalResult = 4 : Received average of first condition of reference windspeed.
            //finalResult = 5 : Received average of second condition of reference windspeed.
            //finalResult = 6 : Converted time to 5 hrs ahead and behind for condition 3.
            //finalResult = 7 : Fetched average of condition third of reference windspeed.
            //finalResult = 8 : Inserted data into uploading_file_tmr_data table. 
            return finalResult;
        }

        //Get Manual Breakdown from uploading_file_breakdown table for TML_Data_Calculations.
        internal async Task<int> UpdateManualBdForTMLData(string date, int site_id, int type)
        {
            //insertWindTMLData type = 1 : Gamesa ; type = 2 : INOX ; type = 3 : Suzlon; type = 4 : Regen; type = 9 : during import approval
            //Some changes for INOX sucj as update all_bd as well with manual_bd column.
            int finalRes = 0;
            string functionName = "UpdateManualBdForTMLData";
            //TML_InfoLog(functionName + "------------------------");
            string tmlMsg;
            //14-Mar-23
            string original_date = Convert.ToDateTime(date).ToString("yyyy-MM-dd");
            List<WindDailyBreakdownReport> _WindBreakdownReport = new List<WindDailyBreakdownReport>();
            string getQry = "SELECT * FROM uploading_file_breakdown WHERE date = '" + original_date + "' AND site_id = " + site_id + "; ";
            string addManualBdQry = "";
            int updateManualRes = 0;
            int updateManualRes2 = 0;
            int windBDReportRows = 0;
            int updateReconWindSpeedRes = 0;
            int updateExpectedPowerRes = 0;
            int updateTMLdataRes = 0;
            int updateDeviationKwRes = 0;
            int updateLossKwhRes = 0;
            int updateAllBdRes = 0;
            int updateAllBdIDRes = 0;
            TimeSpan bdStopFrom = new TimeSpan();
            TimeSpan bdStopTo = new TimeSpan();
            string info = ("Updating manual Breakdown Column.");
            LogInfo(0, 2, 6, functionName, info, backend);
            //Update the all_bd column in case of INOX.
            try
            {
                _WindBreakdownReport = await Context.GetData<WindDailyBreakdownReport>(getQry).ConfigureAwait(false);
                finalRes = 1;
                tmlMsg = "getQry Query completed at " + DateTime.Now + " QUERY :- " + getQry;
                //TML_InfoLog(tmlMsg);
                windBDReportRows = _WindBreakdownReport.Count;
            }
            catch (Exception e)
            {
                string msg = "Error while fetching data from uploading_file_breakdown table due to Exception :" + e.Message;
                //API_ErrorLog(msg);
                LogError(0, 2, 6, functionName, msg, backend);
                return finalRes;
            }
            if (windBDReportRows > 0)
            {
                foreach (var unit in _WindBreakdownReport)
                {
                    bdStopFrom = unit.stop_from;
                    bdStopTo = unit.stop_to;
                    string finalFrom = "";
                    string finalTo = "";

                    string inputStrings = bdStopFrom.ToString();
                    char sepre = ':';
                    string[] output = inputStrings.Split(sepre);
                    if (output.Length > 0)
                    {
                        int minute = Convert.ToInt32(output[1]);
                        int remainder = minute % 10;
                        if (minute >= 10)
                        {
                            minute = minute - remainder;
                            finalFrom = output[0] + ":" + minute + ":" + output[2];
                        }
                        else
                        {
                            minute = 0;
                            finalFrom = output[0] + ":00:" + output[2];
                        }
                    }
                    inputStrings = bdStopTo.ToString();
                    string[] toOutput = inputStrings.Split(sepre);
                    if (toOutput.Length > 0)
                    {
                        int minute = Convert.ToInt32(toOutput[1]);
                        int remainder = minute % 10;
                        int hour = Convert.ToInt32(toOutput[0]);
                        if (remainder > 0)
                        {
                            minute = minute + (10 - remainder);
                        }
                        if (minute < 60)
                        {
                            finalTo = toOutput[0] + ":" + minute.ToString() + ":" + toOutput[2];
                        }
                        else
                        {
                            if (minute == 60)
                            {
                                if (hour <= 23)
                                {
                                    if (hour == 23 && minute == 60) //Convert.ToInt32(output[1]) > 55
                                    {
                                        finalTo = hour.ToString() + ":" + toOutput[1] + ":" + toOutput[2];
                                    }
                                    hour++;
                                    finalTo = hour + ":" + "00" + ":" + toOutput[2];
                                }
                            }
                        }

                    }
                    //UPDATE `uploading_file_tmr_data` SET manual_bd = "USMH" WHERE from_time >= "03:15:00" AND from_time <= "03:46:00"; AND date = 14-May-23
                    if (type == 1 || type == 4)
                    {
                        addManualBdQry += "UPDATE uploading_file_tmr_data SET manual_bd = '" + unit.bd_type + "' WHERE WTGs = '" + unit.wtg + "' AND from_time >= '" + finalFrom + "' AND to_time <= '" + finalTo + "' AND Date(Time_stamp) = '" + original_date + "' AND site_id IN("+ site_id +") ;";
                    }
                    else if (type == 2 || type == 3)
                    {
                        addManualBdQry += "UPDATE uploading_file_tmr_data SET manual_bd = '" + unit.bd_type + "', all_bd = '" + unit.bd_type + "' WHERE WTGs = '" + unit.wtg + "' AND from_time >= '" + finalFrom + "' AND to_time <= '" + finalTo + "' AND Date(Time_stamp) = '" + original_date + "' AND site_id IN(" + site_id + ") ;";
                    }
                    else if (type == 9)
                    {
                        addManualBdQry += "UPDATE uploading_file_tmr_data SET manual_bd = '" + unit.bd_type + "', all_bd = '" + unit.bd_type + "' WHERE WTGs = '" + unit.wtg + "' AND from_time >= '" + finalFrom + "' AND to_time <= '" + finalTo + "' AND Date(Time_stamp) = '" + original_date + "' AND site_id IN(" + site_id + ") ;";
                    }
                }
                try
                {
                    info = ("Query : " + addManualBdQry);
                    LogInfo(0, 2, 6, functionName, info, backend);
                    updateManualRes = await Context.ExecuteNonQry<int>(addManualBdQry).ConfigureAwait(false);
                    tmlMsg = "updateManualRes Query completed at " + DateTime.Now + " QUERY :- " + updateManualRes;
                    //TML_InfoLog(tmlMsg);
                    finalRes = 2;
                }
                catch (Exception e)
                {
                    string msg = "Exception Caught while updating manual bd column : " + e.ToString();
                    //API_ErrorLog(msg);
                    LogError(0, 2, 6, functionName, msg, backend);
                }
                if (finalRes == 2)
                {
                    /* try
                     {

                         updateReconWindSpeedRes = await UpdateReconWindSpeedForTMLData(date, site_id);
                         if(updateReconWindSpeedRes == 9)
                         {
                             finalRes = 3;
                             updateExpectedPowerRes = await UpdateExpectedPower(date, site_id);
                             if(updateExpectedPowerRes == 3)
                             {
                                 finalRes = 4;
                                 updateDeviationKwRes = await UpdateDeviationKw(date, site_id);
                             }
                             if(updateDeviationKwRes == 1)
                             {
                                 finalRes = 5;
                                 updateLossKwhRes = await UpdateLossKwh(date, site_id);
                             }
                             if(updateLossKwhRes == 1)
                             {
                                 finalRes = 6;
                                 updateAllBdRes = await UpdateAllBreakdown(date, site_id);
                             }
                             if(updateAllBdRes == 8)
                             {
                                 finalRes = 7;
                                 updateAllBdIDRes = await UpdateAllBDID(date, site_id);
                             }
                             if(updateAllBdIDRes == 2)
                             {
                                 finalRes = 8;
                             }

                         }
                     }
                     catch(Exception e)
                     {
                         //API_ErrorLog("Error whilel updating reconstructed windspeed column of table uploading_file_tmr_data. due to " + e.ToString());
                         return finalRes;
                     } */
                }
            }

            try
            {
                string addManualBdQry2 = "UPDATE uploading_file_tmr_data SET manual_bd = '-' WHERE manual_bd IS NULL AND date = '" + date + "' AND site_id = " + site_id + ";";
                updateManualRes2 = await Context.ExecuteNonQry<int>(addManualBdQry2).ConfigureAwait(false);
                tmlMsg = "updateManualRes2 Query completed at " + DateTime.Now + " QUERY :- " + updateManualRes2;
                //TML_InfoLog(tmlMsg);
                finalRes = 2;
            }
            catch (Exception e)
            {
                string msg = "Exception while updating null to '-' manual_bd column of uploading_file_tmr_data, due to : " + e.ToString();
                //API_ErrorLog(msg);
                LogError(0, 2, 6, functionName, msg, backend);
                return finalRes;
            }

            //finalRes = 0 : Failed
            //finalRes = 1 : Fetched Records from uploading_file_breakdown table.
            //finalRes = 2 : Updated Manual Breakdown Column of table uploading_file_tmr_data.
            // For old Method Till 8 For new till 2.
            //finalRes = 3 : Successfully updated Reconstructed windspeed column of table uploading_file_tmr_data.
            //finalRes = 4 : Successfully updated Expected Power column of table uploading_file_tmr_data.
            //finalRes = 5 : Successfully updated Deviation kW column of table uploading_file_tmr_data.
            //finalRes = 6 : Successfully updated Loss kW column of table uploading_file_tmr_data.
            //finalRes = 7 : Successfully updated All Breakdown of table uploading_file_tmr_data.
            //finalRes = 8 : Successfully updated All Breakdown Code of table uploading_file_tmr_data.
            return finalRes;
        }
        internal async Task<int> UpdateReconAndOther(string date, int site_id, int type)
        {
            //insertWindTMLData type = 1 : Gamesa ; type = 2 : INOX ; type = 3 : Suzlon; type = 4 : Regen
            //Check for the conditions in case of INOX.

            int finalResult = 0;
            string functionName = "UpdateReconAndOther";
            string tmlMsg = functionName + "---------------------------" + DateTime.Now;
            //TML_InfoLog(tmlMsg);
            string UpdateQry = "";
            string updateQryValues = "";
            int counter = 0;
            int qryCounter = 0;
            string fetchUpdatedTMLDataQry = "SELECT * FROM uploading_file_tmr_data WHERE date = '" + date + "' AND site_id = " + site_id + ";";
            string fetchAverageWindSpeedQry = "SELECT AVG(calculated_ws) as calculated_ws FROM uploading_file_tmr_data WHERE date = '" + date + "' AND site_id = " + site_id + ";";
            string getPowerCurveQry = "SELECT * FROM power_curve WHERE site_id = " + site_id;
            List<InsertWindTMLData> UpdatedTMLDataList = new List<InsertWindTMLData>();
            List<InsertWindPowerCurve> PowerCurveList = new List<InsertWindPowerCurve>();
            Hashtable PowerCurveHash = new Hashtable();
            int PowerCurveHashRows = 0;
            int updateRes = 0;
            int fetchUpdatedTMLDataRes = 0;
            int fetchAverageWindSpeedRes = 0;
            int getPowerCurveRes = 0;
            double averageWindSpeed = 0;
            string info = ("Calculating and updating Reconstructed and other columns.");
            LogInfo(0, 2, 6, functionName, info, backend);
            try
            {
                UpdatedTMLDataList = await Context.GetData<InsertWindTMLData>(fetchUpdatedTMLDataQry).ConfigureAwait(false);
                tmlMsg = "UpdatedTMLDataList Query completed at " + DateTime.Now + " QUERY :- " + UpdatedTMLDataList;
                //TML_InfoLog(tmlMsg);
                finalResult = 1;
                fetchUpdatedTMLDataRes = UpdatedTMLDataList.Count;
            }
            catch (Exception e)
            {
                string msg = "Exception while fetching updated data after manual bd column update. due to  : " + e.ToString();
                //API_ErrorLog(msg);
                LogError(0, 2, 6, functionName, msg, backend);
                return finalResult;
            }
            try
            {
                List<InsertWindTMLData> fetchAverage = await Context.GetData<InsertWindTMLData>(fetchAverageWindSpeedQry).ConfigureAwait(false);
                fetchAverageWindSpeedRes = fetchAverage.Count;
                tmlMsg = "fetchAverage Query completed at " + DateTime.Now + " QUERY :- " + fetchAverage;
                //TML_InfoLog(tmlMsg);
                averageWindSpeed = fetchAverage[0].calculated_ws;
                finalResult = 2;
            }
            catch (Exception e)
            {
                string msg = "Exception while fetching average windspeed from tmd data table due to :" + e.ToString();
                //API_ErrorLog(msg);
                LogError(0, 2, 6, functionName, msg, backend);
                return finalResult;
            }
            if (fetchUpdatedTMLDataRes > 0)
            {
                try
                {
                    PowerCurveList = await Context.GetData<InsertWindPowerCurve>(getPowerCurveQry).ConfigureAwait(false);
                    tmlMsg = "PowerCurveList Query completed at " + DateTime.Now + " QUERY :- " + PowerCurveList;
                    //TML_InfoLog(tmlMsg);
                    getPowerCurveRes = PowerCurveList.Count;
                    if (getPowerCurveRes > 0)
                    {
                        finalResult = 3;
                    }
                }
                catch (Exception e)
                {
                    string msg = "Exception while getting power curve Data . Due to : " + e.ToString();
                    //API_ErrorLog(msg);
                    LogError(0, 2, 6, functionName, msg, backend);
                    return finalResult;
                }
                if (getPowerCurveRes > 0)
                {
                    int incount = 0;
                    foreach (var uni in PowerCurveList)
                    {
                        try
                        {
                            PowerCurveHash.Add(uni.wind_speed, uni.active_power);
                        }
                        catch (Exception e)
                        {
                            string msg = "Exception while adding records to hashtable during iteration <" + incount + ">. due to " + e.ToString();
                            //API_ErrorLog(msg);
                            LogError(0, 2, 6, functionName, msg, backend);
                            return finalResult;
                        }
                        PowerCurveHashRows = PowerCurveHash.Count;
                        incount++;
                    }
                }

                foreach (var unit in UpdatedTMLDataList)
                {
                    //Calculate reconstructed windspeed.
                    //reconstructed wind speed condition 1.
                    try
                    {
                        double reconstructedWS = 0;
                        if (unit.calculated_ws < 3 && unit.calculated_ws > 0 && unit.manual_bd != "-" && unit.status_code == 0)
                        {
                            //respective wtgs average
                            string referenceWtgs = "";
                            referenceWtgs = ReferenceWtgHash.ContainsKey(unit.WTGs) ? Convert.ToString(ReferenceWtgHash[unit.WTGs]) : "";
                            //SELECT AVG(windspeed) as windspeed FROM windspeed_tmd WHERE site_id = 217 AND date = '14-Mar-23' AND windspeed > 0 AND to_time = '00:00:00' AND wtg IN('BD-02', 'BD-03', 'BD-04');
                            string ReferenceWSQry = "SELECT AVG(calculated_ws) as calculated_ws FROM uploading_file_tmr_data WHERE site_id = " + site_id + " AND date = '" + date + "' AND calculated_ws > 0 AND to_time = '" + unit.to_time + "' AND WTGs IN (" + referenceWtgs + ");";
                            try
                            {
                                List<InsertWindTMLData> avgeRefWindSpeed = await Context.GetData<InsertWindTMLData>(ReferenceWSQry).ConfigureAwait(false);
                                reconstructedWS = avgeRefWindSpeed[0].calculated_ws;
                                finalResult = 4;
                                tmlMsg = "ReferenceWSQry Query completed at " + DateTime.Now + " QUERY :- " + ReferenceWSQry;
                                //TML_InfoLog(tmlMsg);
                            }
                            catch (Exception e)
                            {
                                string msg = "Exception while getting average of reference WTGS from uploading_file_tmr_data in function UpdateReconAndOther calculating recon_windspeed using condition 1  : <" + referenceWtgs + "> during iteration <" + counter + "> due to : " + e.ToString();
                                //API_ErrorLog(msg);
                                LogError(0, 2, 6, functionName, msg, backend);
                            }
                            //reconstructedWS = averageWindSpeed;
                        }
                        //reconstructed windspeed condition 2
                        else if (unit.calculated_ws == 0 && unit.manual_bd == "-" && unit.status_code == 0)
                        {
                            //respective wtgs average
                            string referenceWtgs = "";
                            referenceWtgs = ReferenceWtgHash.ContainsKey(unit.WTGs) ? Convert.ToString(ReferenceWtgHash[unit.WTGs]) : "";
                            //SELECT AVG(windspeed) as windspeed FROM windspeed_tmd WHERE site_id = 217 AND date = '14-Mar-23' AND windspeed > 0 AND to_time = '00:00:00' AND wtg IN('BD-02', 'BD-03', 'BD-04');
                            string ReferenceWSQry = "SELECT AVG(calculated_ws) as calculated_ws FROM uploading_file_tmr_data WHERE site_id = " + site_id + " AND date = '" + date + "' AND calculated_ws > 0 AND to_time = '" + unit.to_time + "' AND WTGs IN (" + referenceWtgs + ");";
                            try
                            {
                                List<InsertWindTMLData> avgeRefWindSpeed = await Context.GetData<InsertWindTMLData>(ReferenceWSQry).ConfigureAwait(false);
                                reconstructedWS = avgeRefWindSpeed[0].calculated_ws;
                                finalResult = 4;
                                tmlMsg = "ReferenceWSQry Query completed at " + DateTime.Now + " QUERY :- " + ReferenceWSQry;
                                //TML_InfoLog(tmlMsg);
                            }
                            catch (Exception e)
                            {
                                string msg = "Exception while getting average of reference WTGS from uploading_file_tmr_data in function UpdateReconAndOther calculating recon_windspeed using condition 1  : <" + referenceWtgs + "> during iteration <" + counter + "> due to : " + e.ToString();
                                //API_ErrorLog(msg);
                                LogError(0, 2, 6, functionName, msg, backend);
                            }
                            //reconstructedWS = averageWindSpeed;
                        }
                        else
                        {
                            reconstructedWS = unit.calculated_ws;
                        }

                        unit.recon_wind_speed = reconstructedWS;
                        finalResult = 2;
                    }
                    catch (Exception e)
                    {
                        string msg = "Exception while calculating reconstructed windspeed during iteration <" + counter + "> . " + e.ToString();
                        //API_ErrorLog(msg);
                        LogError(0, 2, 6, functionName, msg, backend);
                        return finalResult;
                    }

                    //Update Expected Power.
                    try
                    {
                        if (PowerCurveHashRows > 0)
                        {
                            //double windSpeed = Math.Round(unit.recon_wind_speed, 1, MidpointRounding.ToEven);
                            //if (Convert.ToString(unit.from_time) == "10:30:00" || unit.avg_active_power == 1935.8)
                            //{
                            //    double hello = 3.2;
                            //    hello = Convert.ToDouble(Math.Floor(Convert.ToDouble(unit.recon_wind_speed)));
                            //}
                            //double check = unit.recon_wind_speed;
                            //double check1 = Math.Floor(Convert.ToDouble(unit.recon_wind_speed));
                            //double check1 = Convert.ToDouble(unit.recon_wind_speed.ToString().Substring(0, unit.recon_wind_speed.ToString().IndexOf('.') + 1));
                            double windSpeed = 0;
                            if (unit.recon_wind_speed.ToString().Contains("."))
                            {
                                windSpeed = Convert.ToDouble(unit.recon_wind_speed.ToString().Substring(0, unit.recon_wind_speed.ToString().IndexOf('.') + 2));
                            }
                            else
                            {
                                windSpeed = Convert.ToDouble(unit.recon_wind_speed);
                            }
                            double expPower = PowerCurveHash.ContainsKey(windSpeed) ? Convert.ToDouble(PowerCurveHash[windSpeed]) : 0;
                            if (expPower > 0)
                            {
                                unit.exp_power_kw = expPower;
                                finalResult = 4;
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        string msg = "Exception while calculating Expected power during iteration <" + counter + ">, due to : " + e.ToString();
                        //API_ErrorLog(msg);
                        LogError(0, 2, 6, functionName, msg, backend);
                        return finalResult;
                    }

                    //Calculate Deviation kw.
                    try
                    {
                        double deviation = 0;

                        //if (unit.avg_active_power <= 0)
                        //{
                        //    deviation = 0 - unit.exp_power_kw;
                        //}
                        //if (unit.avg_active_power > 0)
                        //{
                        //    deviation = unit.avg_active_power - unit.exp_power_kw;
                        //}

                        deviation = unit.avg_active_power - unit.exp_power_kw;
                        unit.deviation_kw = deviation;
                        finalResult = 5;
                    }
                    catch (Exception e)
                    {
                        string msg = "Exception while calculating deviation during iteration <" + counter + "> due to : " + e.ToString();
                        //API_ErrorLog(msg);
                        LogError(0, 2, 6, functionName, msg, backend);
                        return finalResult;
                    }

                    // Calculate Loss kw 
                    try
                    {
                        double loss = 0;
                        loss = unit.deviation_kw / 6;
                        unit.loss_kw = loss;
                        finalResult = 6;
                        //if(unit.deviation_kw < 0)
                        //{
                        //    API_InformationLog("Deviation less than 0 : " + unit.deviation_kw);
                        //}
                    }
                    catch (Exception e)
                    {
                        string msg = "Exception while calculating loss kw during iteration <" + counter + "> , due to : " + e.ToString();
                        //API_ErrorLog(msg);
                        LogError(0, 2, 6, functionName, msg, backend);
                        return finalResult;
                    }

                    //Calculate All Breakdown.
                    //insertWindTMLData type = 1 : Gamesa ; type = 2 : INOX ; type = 3 : Suzlon; type = 4 : Regen
                    //no need to calculate all_bd here for INOX already calculated before.
                    if (type == 1)
                    {
                        try
                        {
                            string allBreakdown = "NC";
                            //condition 1
                            if (unit.manual_bd != "-" && unit.manual_bd != "")
                            {
                                allBreakdown = unit.manual_bd.ToString();
                            }
                            //condition 2
                            else if (unit.manual_bd == "-" && unit.status_code == 0 && unit.restructive_WTG == 100)
                            {
                                allBreakdown = "PCD";
                            }
                            //condition 3 & condition 4
                            else if (unit.manual_bd == "-" && (unit.status_code == 0 || unit.status_code == 1) && (unit.restructive_WTG == 0 || unit.restructive_WTG == 25 || unit.restructive_WTG == 50 || unit.restructive_WTG == 125))
                            {
                                allBreakdown = "USMH";
                            }
                            //condition 5
                            else if (unit.manual_bd == "-" && unit.restructive_WTG == 75 && unit.loss_kw <= 0)
                            {
                                allBreakdown = "LULL";
                            }
                            //condition 6
                            else if (unit.manual_bd == "-" && unit.restructive_WTG == 75 && unit.status_code == 0 && unit.loss_kw > 0)
                            {
                                allBreakdown = "PCD";
                            }
                            else
                            {
                                allBreakdown = "NC";
                            }
                            unit.all_bd = allBreakdown;
                            finalResult = 7;

                        }
                        catch (Exception e)
                        {
                            string msg = "Exception while calculating all BD for Gamesa during iteration <" + counter + "> " + e.ToString();
                            //API_ErrorLog(msg);
                            LogError(0, 2, 6, functionName, msg, backend);
                            return finalResult;
                        }
                    }
                    else if (type == 2)
                    {
                        finalResult = 7;
                    }
                    else if (type == 3)
                    {
                        try
                        {
                            string allBreakdown = "NC";

                            if (unit.manual_bd == "-" && unit.status_code == 0)
                            {
                                allBreakdown = "PCD";
                            }
                            else if (unit.manual_bd != "-")
                            {
                                allBreakdown = unit.manual_bd.ToString();
                            }
                            else
                            {
                                allBreakdown = "NC";
                            }

                            unit.all_bd = allBreakdown;
                            finalResult = 7;
                        }
                        catch (Exception e)
                        {
                            string msg = "Exception while calculating Suzlon refined bd during iteration <" + counter + "." + e.ToString();
                            //API_ErrorLog(msg);
                            LogError(0, 2, 6, functionName, msg, backend);
                            return finalResult;
                        }
                    }
                    else if (type == 4)
                    {
                        try
                        {
                            string allBreakdown = "NC";
                            if (unit.manual_bd != "-")
                            {
                                allBreakdown = unit.manual_bd.ToString();
                            }
                            else if (unit.manual_bd == "-" && unit.status_code == 0 && unit.power_production == 600 && unit.operation_mode == 5)
                            {
                                allBreakdown = "PCD";
                            }
                            else if (unit.manual_bd == "-" && unit.status_code == 0 && unit.power_production < 600 && unit.operation_mode == 5 && ((unit.service + unit.visit + unit.error) == 0))
                            {
                                allBreakdown = "PCD";
                            }
                            else if (unit.manual_bd == "-" && unit.status_code == 0 && unit.power_production < 600 && unit.operation_mode == 5 && ((unit.service + unit.visit + unit.error) != 0))
                            {
                                allBreakdown = "USMH";
                            }
                            else if (unit.manual_bd == "-" && unit.status_code == 0 && (unit.operation_mode == 1 || unit.operation_mode == 9))
                            {
                                allBreakdown = "USMH";
                            }
                            else if (unit.manual_bd == "-" && unit.status_code == 0 && unit.operation_mode == 0)
                            {
                                allBreakdown = "Initilization";
                            }
                            else if (unit.manual_bd == "-" && unit.status_code == 0 && unit.operation_mode == 3)
                            {
                                allBreakdown = "Startup";
                            }
                            else if (unit.manual_bd == "-" && unit.status_code == 0 && unit.operation_mode == 2)
                            {
                                allBreakdown = "LULL";
                            }
                            else if (unit.manual_bd == "-" && unit.status_code == 0 && unit.operation_mode == 4)
                            {
                                allBreakdown = "Runup";
                            }
                            else
                            {
                                allBreakdown = "NC";
                            }

                            unit.all_bd = allBreakdown;
                            finalResult = 7;
                        }
                        catch (Exception e)
                        {
                            string msg = "Exception while calculating Regen refined bd. during iteration <" + counter + "> Due to : " + e.ToString();
                            //API_ErrorLog(msg);
                            LogError(0, 2, 6, functionName, msg, backend);
                            return finalResult;
                        }
                    }

                    if (finalResult == 7)
                    {
                        //addManualBdQry += "UPDATE uploading_file_tmr_data SET manual_bd = '" + unit.bd_type + "' WHERE WTGs = '" + unit.wtg + "' AND from_time >= '" + bdStopFrom + "' AND from_time <= '" + bdStopTo + "' ;";
                        //uploading_file_tmr_data (WTGs, wtg_id, site, site_id, Time_stamp, avg_active_power, avg_wind_speed, restructive_WTG, date, from_time, to_time, status, status_code)
                        //for INOX remove all_bd field from this updateQry.
                        if (type == 1 || type == 3 || type == 4)
                        {
                            UpdateQry += "UPDATE uploading_file_tmr_data SET recon_wind_speed = " + unit.recon_wind_speed + ", exp_power_kw = " + unit.exp_power_kw + ", deviation_kw = " + unit.deviation_kw + ", loss_kw = " + unit.loss_kw + ", all_bd = '" + unit.all_bd + "' WHERE uploading_file_TMR_Data_id = " + unit.uploading_file_TMR_Data_id + ";";
                        }
                        else if (type == 2)
                        {
                            UpdateQry += "UPDATE uploading_file_tmr_data SET recon_wind_speed = " + unit.recon_wind_speed + ", exp_power_kw = " + unit.exp_power_kw + ", deviation_kw = " + unit.deviation_kw + ", loss_kw = " + unit.loss_kw + " WHERE uploading_file_TMR_Data_id = " + unit.uploading_file_TMR_Data_id + ";";
                        }
                    }
                    if (qryCounter > 10000)
                    {
                        updateRes = await Context.ExecuteNonQry<int>(UpdateQry).ConfigureAwait(false);
                        finalResult = 8;
                        tmlMsg = "UpdateQry Query completed at " + DateTime.Now + " QUERY :- " + UpdateQry;
                        //TML_InfoLog(tmlMsg);
                        qryCounter = 0;
                    }
                    counter++;
                    qryCounter++;
                }
                if (qryCounter < 10000)
                {
                    try
                    {
                        updateRes = await Context.ExecuteNonQry<int>(UpdateQry).ConfigureAwait(false);
                        finalResult = 8;
                        tmlMsg = "UpdateQry Query completed at " + DateTime.Now + " QUERY :- " + UpdateQry;
                        //TML_InfoLog(tmlMsg);
                    }
                    catch (Exception e)
                    {
                        string msg = "Exception while updating records, due to : " + e.ToString();
                        //API_ErrorLog(msg);
                        LogError(0, 2, 6, functionName, msg, backend);
                    }
                }
                if (counter == UpdatedTMLDataList.Count)
                {
                    string msg1 = "Updated all records into datatbase counter / no. of records : " + counter + " / " + UpdatedTMLDataList.Count;
                    //info = (msg);
                    LogInfo(0, 2, 6, functionName, msg1, backend);
                    tmlMsg = "Function completed at " + DateTime.Now;
                    //TML_InfoLog(tmlMsg);
                }
                else
                {
                    string msg = "Exception while updating records into database : counter / no. of records : " + counter + " / " + UpdatedTMLDataList.Count;
                    //API_ErrorLog(msg);
                    LogError(0, 2, 6, functionName, msg, backend);
                }
            }

            //finalResult = 0 : Failed completely.
            //finalResult = 1 : Fetched data from uploading_file_TML_data table.
            //finalResult = 2 : Updated reconstructed wind speed.
            //finalResult = 3 : Fetched records from power_curve table.
            //finalResult = 4 : Calculated expected power column.
            //finalResult = 5 : Calculated deviation kw
            //finalResult = 6 : Calculated loss kw
            //finalResult = 7 : Calculate all breakdown.
            //finalResult = 8 :Updated records to the data_base.

            return finalResult;
        }


        /* internal async Task<int> InsertWindTMLData(List<InsertWindTMLData> set)
        {
            int FinalResult = 0;
            string qry = " insert into uploading_file_tmr_data (WTGs, wtg_id, site, site_id, Time_stamp, avg_active_power, avg_wind_speed, restructive_WTG, date, from_time, to_time, status, status_code) values";
            string insertValues = "";
            int counter = 0;
            string date = "";
            int site_id = 0;
            foreach (var unit in set)
            {
                if (counter == 0)
                {
                    date = unit.date;
                    site_id = unit.site_id;
                }
                counter++;
                //make single insertvalue.
                if(unit.status_code == 0)
                {
                    insertValues += "('" + unit.WTGs + "', " + unit.wtg_id + ", '" + unit.site + "', " + unit.site_id + ", '" + unit.timestamp + "', " + unit.avg_active_power + ", " + unit.avg_wind_speed + ", " + unit.restructive_WTG + ", '" + unit.date + "', '" + unit.from_time + "', '" + unit.to_time + "', '" + unit.status + "', " + unit.status_code + "),";
                }
                if(unit.status_code == 1)
                {
                    insertValues += "('" + unit.WTGs + "', " + unit.wtg_id + ", '" + unit.site + "', " + unit.site_id + ", '" + unit.timestamp + "', NULL, " + unit.avg_wind_speed + ", " + unit.restructive_WTG + ", '" + unit.date + "', '" + unit.from_time + "', '" + unit.to_time + "', '" + unit.status + "', " + unit.status_code + "),";
                }
                //DELETE FROM uploading_file_pvsyst_loss WHERE site_id IN (3,9) and month In ('Apr','Mar');

            }
            // database transactions start before delete.
            //Delete data in starting 
            string deleteQry = "DELETE FROM uploading_file_tmr_data WHERE date ='" + date + "' AND site_id = " + site_id + " ;" ;
            qry += insertValues;

            try
            {
                int deleteRes = 0;
                deleteRes = await Context.ExecuteNonQry<int>(deleteQry).ConfigureAwait(false);
                if (deleteRes >= 0 )
                {
                    FinalResult = 1;
                }
            }catch(Exception e)
            {
                string msg = e.Message;
                API_ErrorLog("Failed deletion of records due to Exception : " + msg);
                FinalResult = 0;
                return FinalResult;
            }
            if (!(string.IsNullOrEmpty(insertValues)))
            {
                try
                {
                    int updateManualBdRes = 0;
                    int insertRes = 0;
                    insertRes = await Context.ExecuteNonQry<int>(qry.Substring(0, (qry.Length - 1)) + ";").ConfigureAwait(false);
                    if (insertRes > 0)
                    {
                        FinalResult = 2;
                        updateManualBdRes = await UpdateManualBdForTMLData(set, date, site_id);
                        if(updateManualBdRes == 2)
                        {
                            FinalResult = 3;
                        }
                        if(updateManualBdRes == 3)
                        {
                            FinalResult = 4;
                        }
                        if(updateManualBdRes == 4)
                        {
                            FinalResult = 5;
                        }
                        if (updateManualBdRes == 5)
                        {
                            FinalResult = 6;
                        }
                        if (updateManualBdRes == 6)
                        {
                            FinalResult = 7;
                        }
                        if (updateManualBdRes == 7)
                        {
                            FinalResult = 8;
                        }
                        if (updateManualBdRes == 8)
                        {
                            FinalResult = 9;
                        }
                    }
                }
                catch (Exception e)
                {
                    string msg = e.Message;
                    API_ErrorLog("Exception while inserting new values in TML_Data table. Exception : " + msg);
                    return FinalResult;
                }
            }
            
            return FinalResult;
        } */

        //Old Calculations method for Wind TML Data.
        /*
        //Calculations for reconstructed wind speed.
        internal async Task<int> UpdateReconWindSpeedForTMLData(string date, int site_id)
        {
            //date = "14-Mar-23"
            string monthYear = "";
            string yearMonth = "";
            string yearMonthDate = "";
            try
            {
                monthYear = date.Substring(3,6);
                yearMonth = Convert.ToDateTime(date).ToString("yyyy-MM");
                yearMonthDate = Convert.ToDateTime(date).ToString("yyyy-MM-dd");
            }
            catch(Exception e)
            {
                string msg = e.ToString();
            }
            int finalResult = 0;
            int updateReconWSCondition1Res = 0;
            int updateReconWSCondition2Res = 0;
            int updateReconWSCondition3Res = 0;
            bool updateReconWSCondition1Flag = true;
            bool updateReconWSCondition2Flag = true;
            bool updateReconWSCondition3Flag = true;
            int tmlDataCondition1Rows = 0;
            int tmlDataCondition2Rows = 0;
            int tmlDataCondition3Rows = 0;
            double averageWindSpeed = 0;
            List<WindSpeedData> WindSpeedDataList = new List<WindSpeedData>();
            List<WindSpeedData> WindSpeedDataListForHashTbl = new List<WindSpeedData>();
            List<InsertWindTMLData> _WindTMLDataCondition1 = new List<InsertWindTMLData>();
            List<InsertWindTMLData> _WindTMLDataCondition2 = new List<InsertWindTMLData>();
            List<InsertWindTMLData> _WindTMLDataCondition3 = new List<InsertWindTMLData>();

            //SELECT* FROM uploading_file_tmr_data WHERE date LIKE('%-Mar-23') AND site_id = 217 AND status = 'Available' AND status_code = 0 AND avg_wind_speed< 3 AND avg_wind_speed > 0 AND manual_bd IS NULL;
            string selectQryCondition1 = "SELECT * FROM uploading_file_tmr_data WHERE date ='" + date + "' AND site_id = " + site_id + " AND status = 'Available' AND status_code = 0 AND avg_wind_speed< 3 AND avg_wind_speed > 0 AND manual_bd IS NULL; ";
            //SELECT* FROM uploading_file_tmr_data WHERE date = '14-Mar-23' AND site_id = 217 AND (avg_wind_speed = 0 OR avg_wind_speed IS NULL) AND manual_bd IS NULL;
            string selectCondition2Qry = "SELECT* FROM uploading_file_tmr_data WHERE date = '" + date + "' AND site_id = " + site_id + " AND (avg_wind_speed = 0 OR avg_wind_speed IS NULL) AND manual_bd IS NULL ;";
            string selectCondition3Qry = "SELECT * FROM uploading_file_tmr_data WHERE date = '" + date + "' AND site_id = " + site_id + " AND recon_wind_speed IS NULL";
            //SELECT AVG(windspeed) AS averageWindSpeed FROM `windspeed_tmd` WHERE tmd_date LIKE('2022-06%') AND site_id = 217;
            string getAverageWindSpeedQry = "SELECT AVG(windspeed) AS averageWindSpeed FROM windspeed_tmd WHERE tmd_date LIKE('" + yearMonth + "%') AND site_id = " + site_id + ";";
            //SELECT* FROM uploading_file_tmr_data WHERE uploading_file_TMR_Data_id IN(18519, 18375);
            string updateReconWSCondition1Qry = "";

            try
            {
                WindSpeedDataList = await Context.GetData<WindSpeedData>(getAverageWindSpeedQry).ConfigureAwait(false);
                finalResult = 1;
                averageWindSpeed = WindSpeedDataList[0].averageWindSpeed;
            }
            catch (Exception e)
            {
                string msg = e.ToString();
                API_ErrorLog("Exception while getting average from windspeed_tmd table where Query : " + getAverageWindSpeedQry + " due to : " + msg);
                return finalResult;
            }
            try
            {
                _WindTMLDataCondition1 = await Context.GetData<InsertWindTMLData>(selectQryCondition1).ConfigureAwait(false);
                finalResult = 2;
                tmlDataCondition1Rows = _WindTMLDataCondition1.Count;
            }
            catch (Exception e)
            {
                string msg = e.ToString();
                API_ErrorLog("Exception while fetching records from uploading_file_tml_data due to : " + msg );
                return finalResult;
            }
            if (tmlDataCondition1Rows > 0)
            {
                updateReconWSCondition1Qry =  "UPDATE uploading_file_tmr_data SET recon_wind_speed = " + averageWindSpeed + " WHERE uploading_file_TMR_Data_id IN ";
                string tmrDataId = "( ";
                foreach(var unit in _WindTMLDataCondition1)
                {
                    tmrDataId += unit.uploading_file_TMR_Data_id.ToString() + ","; 
                }
                tmrDataId = tmrDataId.Substring(0, (tmrDataId.Length - 1)) + " );";
                updateReconWSCondition1Qry += tmrDataId;

                try
                {
                    updateReconWSCondition1Res = await Context.ExecuteNonQry<int>(updateReconWSCondition1Qry).ConfigureAwait(false);
                    if(updateReconWSCondition1Res > 0)
                    {
                        finalResult = 3;
                    }
                }
                catch(Exception e)
                {
                    string msg = e.ToString();
                    API_ErrorLog("Exception while updating Reconstructed wind speed column in condition 1. Due to : " + msg);
                    updateReconWSCondition1Flag = false;
                    return finalResult;
                }

                try
                {
                    _WindTMLDataCondition2 = await Context.GetData<InsertWindTMLData>(selectCondition2Qry).ConfigureAwait(false);
                    finalResult = 4;
                    tmlDataCondition2Rows = _WindTMLDataCondition2.Count;
                }
                catch (Exception e)
                {
                    string msg = e.ToString();
                    API_ErrorLog("Exception while fetching records from uploading_file_tml_data due to : " + msg);
                    return finalResult;
                }
                if(tmlDataCondition2Rows > 0)
                {
                    Hashtable TimeWindSpeed = new Hashtable();
                    string selectTmdWSDataQry = "SELECT * FROM windspeed_tmd WHERE tmd_date='" + yearMonthDate + "' ";
                    try
                    {
                        WindSpeedDataListForHashTbl = await Context.GetData<WindSpeedData>(selectTmdWSDataQry).ConfigureAwait(false);
                        finalResult = 5;
                    }
                    catch (Exception e)
                    {
                        string msg = e.ToString();
                        API_ErrorLog("Exception while fetching records for hashtable of time and windspeed. Due to :" + msg );
                        return finalResult;
                    }
                    foreach (var unit in WindSpeedDataListForHashTbl)
                    {
                        try
                        {
                            TimeWindSpeed.Add((string)unit.tmd_time.ToString(), unit.windspeed);
                        }
                        catch(Exception e)
                        {
                            string msg = e.ToString();
                            API_ErrorLog("Exception while adding records to hashtable. due to " + msg);
                        }
                    }
                    if(TimeWindSpeed.Count > 0)
                    {
                        string updateReconWSCondition2Qry = "";
                        foreach (var unit in _WindTMLDataCondition2)
                        {
                            double windspeed = TimeWindSpeed.ContainsKey(unit.from_time.ToString()) ? Convert.ToDouble(TimeWindSpeed[unit.from_time.ToString()]) : 0;
                            updateReconWSCondition2Qry += "UPDATE uploading_file_tmr_data SET recon_wind_speed = " + windspeed + " WHERE uploading_file_TMR_Data_id = " + unit.uploading_file_TMR_Data_id + ";";
                        }
                        try
                        {
                            updateReconWSCondition2Res = await Context.ExecuteNonQry<int>(updateReconWSCondition2Qry).ConfigureAwait(false);
                            if (updateReconWSCondition2Res > 0)
                            {
                                finalResult = 6;
                            }
                        }
                        catch(Exception e)
                        {
                            string msg = e.ToString();
                            API_ErrorLog("Exception while Updating reconstructed wind speed using condition 2. due to :" + msg );
                            updateReconWSCondition2Flag = false;
                        }
                    }
                }

                if(updateReconWSCondition2Flag && updateReconWSCondition1Flag)
                {
                    _WindTMLDataCondition3 = await Context.GetData<InsertWindTMLData>(selectCondition3Qry).ConfigureAwait(false);
                    finalResult = 7;
                    tmlDataCondition3Rows = _WindTMLDataCondition3.Count;
                }
                if(tmlDataCondition3Rows > 0)
                {
                    //UPDATE uploading_file_tmr_data SET recon_wind_speed = avg_wind_speed WHERE date = '14-Mar-23' AND site_id =217 AND recon_wind_speed IS NULL;
                    string updateReconWSCondition3Qry = "UPDATE uploading_file_tmr_data SET recon_wind_speed = avg_wind_speed WHERE date = '" + date + "' AND site_id =217 AND recon_wind_speed IS NULL;";
                    try
                    {
                        updateReconWSCondition3Res = await Context.ExecuteNonQry<int>(updateReconWSCondition3Qry).ConfigureAwait(false);
                        if (updateReconWSCondition3Res > 0)
                        {
                            finalResult = 8;
                        }
                    }
                    catch(Exception e)
                    {
                        string msg = e.ToString();
                        API_ErrorLog("Exception while updating condition 3 reconstructed wind speed due to : " + msg );
                        updateReconWSCondition3Flag = false;
                    }                   
                }
            }
            if (updateReconWSCondition1Flag && updateReconWSCondition2Flag && updateReconWSCondition3Flag)
            {
                finalResult = 9;
            }
            //finalResult = 0 : Failed.
            //finalResult = 1 : Fetched Average form the table windspeed_tmd for respective site and date.
            //finalResult = 2 : Fetched records from uploading_file_tmr_data table for condition 1.
            //finalResult = 3 : Updated reconstructed wind speed Condition 1
            //finalResult = 4 : Fetched records from uploading_file_tmr_data table for condition 2
            //finalResult = 5 : Fetched records for creating hashtable for time and windspeed.
            //finalResult = 6 : Updated reconstructed wind speed Condition 2
            //finalResult = 7 : Fetched records from uploading_file_tmr_data table for condition 3
            //finalResult = 8 : Updated reconstructed wind speed Condition 3
            //finalResult = 9 : Updated reconstructed wind speed.
            return finalResult;
        }
        //Calculationsfor Expected Power 
        internal async Task<int> UpdateExpectedPower(string date, int site_id)
        {
            int finalResult = 0;
            int getPowerCurveRes = 0;
            int updateExpectedPower = 0;
            int TMLDataRows = 0;
            string getPowerCurveQry = "SELECT * FROM power_curve WHERE site_id = " + site_id;
            string getTMLDataQry = "SELECT * FROM uploading_file_tmr_data WHERE date ='" + date + "' AND site_id = " + site_id;
            string updateValue = "";
            List<InsertWindPowerCurve> PowerCurveList = new List<InsertWindPowerCurve>();
            List<InsertWindTMLData> TMLDataList = new List<InsertWindTMLData>();
            Hashtable PowerCurveHash = new Hashtable();
            try
            {
                PowerCurveList = await Context.GetData<InsertWindPowerCurve>(getPowerCurveQry).ConfigureAwait(false);
                getPowerCurveRes = PowerCurveList.Count;
                if(getPowerCurveRes > 0)
                {
                    finalResult = 1;
                }
            }
            catch (Exception e)
            {
                string msg = e.ToString();
                API_ErrorLog("Exception while getting power curve Data . Due to : " + msg );
                return finalResult;
            }
            if(getPowerCurveRes > 0)
            {
                foreach (var unit in PowerCurveList)
                {
                    try
                    {
                        PowerCurveHash.Add(unit.wind_speed, unit.active_power);
                    }
                    catch (Exception e)
                    {
                        string msg = e.ToString();
                        API_ErrorLog("Exception while adding records to hashtable. due to " + msg);
                    }
                }
            }
            try
            {
                TMLDataList = await Context.GetData<InsertWindTMLData>(getTMLDataQry).ConfigureAwait(false);
                finalResult = 2;
                TMLDataRows = TMLDataList.Count;
            }
            catch(Exception e)
            {
                string msg = e.ToString();
                API_ErrorLog("Exception while fetching records from tmldata table in list due to : " + msg);
            }
            if(TMLDataRows > 0)
            {
                if(PowerCurveHash.Count > 0)
                {
                    foreach(var unit in PowerCurveList)
                    {
                        double windSpeed = Math.Round(unit.wind_speed, 1, MidpointRounding.ToEven);
                        double activePower = PowerCurveHash.ContainsKey(windSpeed) ? Convert.ToDouble(PowerCurveHash[windSpeed]) : 0;
                        updateValue += "UPDATE uploading_file_tmr_data SET exp_power_kw = "+ activePower + " WHERE ROUND(recon_wind_speed, 1) = " + windSpeed + " AND site_id = " + site_id + " AND date = '" + date + "' ;";
                    }
                    try
                    {
                        updateExpectedPower = await Context.ExecuteNonQry<int>(updateValue).ConfigureAwait(false);
                        finalResult = 3;
                    }
                    catch(Exception e)
                    {
                        string msg = e.ToString();
                        API_ErrorLog("Exception while updating expected power column of TML data table. Due to : " + msg);
                        return finalResult;
                    }
                }

            }

            //finalResult = 0 : Completely Failed.
            //finalResult = 1 : Fetched Records from Power Curve table.
            //finalResult = 2 : Fetched Records from TMLData table.
            //finalResult = 3 : Updated Expected Power Column.
            return finalResult;
        }
        //Calculations for Deviation kw 
        internal async Task<int> UpdateDeviationKw(string date, int site_id)
        {
            int finalResult = 0;
            int updateQryRes = 0;
            //UPDATE table_name SET deviation_kw = CASE WHEN avg_active_power IS NULL OR avg_active_power = 0 THEN 0 - exp_power_kw WHEN avg_active_power > 0 THEN avg_active_power -exp_power_kw END WHERE date = '14-Mar-23' AND site_id = 217; 
            string updateDeviationQry = "UPDATE uploading_file_tmr_data SET deviation_kw = CASE WHEN avg_active_power IS NULL OR avg_active_power = 0 THEN 0 - exp_power_kw WHEN avg_active_power > 0 THEN avg_active_power -exp_power_kw END WHERE date = '" + date + "' AND site_id = " + site_id;
            try
            {
                updateQryRes = await Context.ExecuteNonQry<int>(updateDeviationQry).ConfigureAwait(false);
                finalResult = 1;
            }
            catch (Exception e)
            {
                string msg = e.ToString();
                API_ErrorLog("Exception while updating Deviation column due to : " + msg);
                return finalResult;
            }

            //finalresult = 0 : Failed Completely.
            //finalResult = 1 : Successful.
            return finalResult;
        }
        //Calculation for Loss kWH
        internal async Task<int> UpdateLossKwh(string date, int site_id)
        {
            int finalResult = 0;
            int updateLossRes = 0;
            //UPDATE uploading_file_tmr_data SET loss_kw = avg_active_power/6 WHERE uploading_file_TMR_Data_id = 246;
            string updateLossKwhQry = "UPDATE uploading_file_tmr_data SET loss_kw = deviation_kw/6 WHERE site_id = " + site_id + " AND date = '" + date + "' ;";
            try
            {
                updateLossRes = await Context.ExecuteNonQry<int>(updateLossKwhQry).ConfigureAwait(false);
                if(updateLossRes > 0)
                {
                    finalResult = 1;
                }
            }
            catch(Exception e)
            {
                string msg = e.ToString();
                API_ErrorLog("Exception while Updating Loss kwh : due to " + msg );
                return finalResult;
            }
            //finalResult = 0 : Completely Failed.
            //finalResult = 1 : Updated Loss kWH column in uploading_file_tmr_data table.
            return finalResult;
        }
        //Calculation for All Breakdown.
        internal async Task<int> UpdateAllBreakdown(string date, int site_id)
        {
            int finalResult = 0;
            int updateCondition1Res = 0;
            int updateCondition2Res = 0;
            int updateCondition3Res = 0;
            int updateCondition4Res = 0;
            int updateCondition5Res = 0;
            int updateCondition6Res = 0;
            int updateCondition7Res = 0;
            bool updateCondition1Flag = false;
            bool updateCondition2Flag = false;
            bool updateCondition3Flag = false;
            bool updateCondition4Flag = false;
            bool updateCondition5Flag = false;
            bool updateCondition6Flag = false;
            bool updateCondition7Flag = false;
            string updateAllBdCondition1Qry = "";
            string updateAllBdCondition2Qry = "";
            string updateAllBdCondition3Qry = "";
            string updateAllBdCondition4Qry = "";
            string updateAllBdCondition5Qry = "";
            string updateAllBdCondition6Qry = "";
            string updateAllBdCondition7Qry = "";
            try
            {
                updateAllBdCondition1Qry = "UPDATE uploading_file_tmr_data SET all_bd = manual_bd WHERE site_id = " + site_id + " AND date = '" + date + "' AND manual_bd IS NOT NULL";
                updateCondition1Res = await Context.ExecuteNonQry<int>(updateAllBdCondition1Qry).ConfigureAwait(false);
                finalResult = 1;
                updateCondition1Flag = true;
            }
            catch(Exception e)
            {
                string msg = e.ToString();
                API_ErrorLog("Exception while updating values for All Breakdown using condition 1. due to : " + msg);
                return finalResult;
            }
            if (updateCondition1Flag)
            {
                updateAllBdCondition2Qry = "UPDATE uploading_file_tmr_data SET all_bd = 'PCD' WHERE manual_bd IS NULL AND status_code = 0 AND restructive_WTG = 100 AND date = '" + date + "' AND site_id = " + site_id + " ;";
                try
                {
                    updateCondition2Res = await Context.ExecuteNonQry<int>(updateAllBdCondition2Qry).ConfigureAwait(false);
                    updateCondition2Flag = true;
                    finalResult = 2;
                }
                catch(Exception e)
                {
                    string msg = e.ToString();
                    API_ErrorLog("Exception while updating value of all bd using condition 2. due to : " + msg);
                    return finalResult;
                }
            }
            if (updateCondition2Flag)
            {
                updateAllBdCondition3Qry = "UPDATE uploading_file_tmr_data SET all_bd = 'USMH' WHERE manual_bd IS NULL AND status_code = 0 AND restructive_WTG = (0 OR 25 OR 50 OR 125)  AND date = '" + date + "' AND site_id = " + site_id + " ;";
                try
                {
                    updateCondition3Res = await Context.ExecuteNonQry<int>(updateAllBdCondition3Qry).ConfigureAwait(false);
                    updateCondition3Flag = true;
                    finalResult = 3;
                }
                catch(Exception e)
                {
                    string msg = e.ToString();
                    API_ErrorLog("Exception while updating value of all bd using condition 3. due to : " + msg);
                    return finalResult;
                }
            }
            if (updateCondition3Flag)
            {
                updateAllBdCondition4Qry = "UPDATE uploading_file_tmr_data SET all_bd = 'USMH' WHERE manual_bd IS NULL AND status_code = 1 AND restructive_WTG = (0 OR 25 OR 50 OR 125) AND date = '" + date + "' AND site_id = " + site_id + " ;";
                try
                {
                    updateCondition4Res = await Context.ExecuteNonQry<int>(updateAllBdCondition4Qry).ConfigureAwait(false);
                    updateCondition4Flag = true;
                    finalResult = 4;
                }
                catch (Exception e)
                {
                    string msg = e.ToString();
                    API_ErrorLog("Exception while updating value of all bd using condition 4. due to : " + msg);
                    return finalResult;
                }
            }
            if (updateCondition4Flag)
            {
                updateAllBdCondition5Qry = "UPDATE uploading_file_tmr_data SET all_bd = 'LULL' WHERE manual_bd IS NULL AND restructive_WTG = 75 AND loss_kw <=0 AND date = '" + date + "' AND site_id = " + site_id + " ;";
                try
                {
                    updateCondition5Res = await Context.ExecuteNonQry<int>(updateAllBdCondition5Qry).ConfigureAwait(false);
                    updateCondition5Flag = true;
                    finalResult = 5;
                }
                catch(Exception e)
                {
                    string msg = e.ToString();
                    API_ErrorLog("Exception while updating value of all bd using condition 5.due to : " + msg);
                    return finalResult;
                }
            }
            if (updateCondition5Flag)
            {
                updateAllBdCondition6Qry = "UPDATE uploading_file_tmr_data SET all_bd = 'PCD' WHERE manual_bd IS NULL AND restructive_WTG = 75 AND status_code = 0 AND loss_kw > 0 AND date = '" + date + "' AND site_id = " + site_id + " ;";
                try
                {
                    updateCondition6Res = await Context.ExecuteNonQry<int>(updateAllBdCondition6Qry).ConfigureAwait(false);
                    updateCondition6Flag = true;
                    finalResult = 6;
                }
                catch(Exception e)
                {
                    string msg = e.ToString();
                    API_ErrorLog("Exception while Updating value of All breakdown using condition 6. Due to : " + msg );
                    return finalResult;
                }
            }
            if(updateCondition1Flag && updateCondition2Flag && updateCondition3Flag && updateCondition4Flag && updateCondition5Flag && updateCondition6Flag)
            {
                updateAllBdCondition7Qry = "UPDATE uploading_file_tmr_data SET all_bd = 'NC' WHERE all_bd IS NULL AND date = '" + date + "' AND site_id = " + site_id + " ;";
                try
                {
                    updateCondition7Res = await Context.ExecuteNonQry<int>(updateAllBdCondition7Qry).ConfigureAwait(false);
                    updateCondition7Flag = true;
                    finalResult = 7;
                }
                catch(Exception e)
                {
                    string msg = e.ToString();
                    API_ErrorLog("Exception while updating all bd value using condition 7. due to : " + msg);
                    return finalResult;
                }
            }
            if (updateCondition1Flag && updateCondition2Flag && updateCondition3Flag && updateCondition4Flag && updateCondition5Flag && updateCondition6Flag && updateCondition7Flag)
            {
                finalResult = 8;
            }

            //finalResult = 0 : Failed Completely.
            //finalResult = 1 : Successfully Updated all_bd by condition 1
            //finalResult = 2 : Successfully Updated all_bd by condition 2
            //finalResult = 3 : Successfully Updated all_bd by condition 3
            //finalResult = 4 : Successfully Updated all_bd by condition 4
            //finalResult = 5 : Successfully Updated all_bd by condition 5
            //finalResult = 6 : Successfully Updated all_bd by condition 6
            //finalResult = 7 : Successfully Updated all_bd by condition 7
            //finalResult = 8 : Successfully Updated all_bd
            return finalResult;
        }

        //Calculations for All Breakdown codes.
        internal async Task<int> UpdateAllBDID(string date, int site_id)
        {
            int finalResult = 0;
            int getBdCodeListRes = 0;
            int updateAllBdIdRes = 0;

            List<InsertWindBDCodeGamesa> BDCodeList = new List<InsertWindBDCodeGamesa>();
            Hashtable BDCodeTypehash = new Hashtable();
            string getBDCodeListQry = "SELECT * from wind_bd_codes_gamesa WHERE site_id = " + site_id + " ;";
            string updateAllBdIdQry = "";

            try
            {
                BDCodeList = await Context.GetData<InsertWindBDCodeGamesa>(getBDCodeListQry).ConfigureAwait(false);
                finalResult = 1;
                getBdCodeListRes = BDCodeList.Count;
            }
            catch(Exception e)
            {
                string msg = e.ToString();
            }
            if(getBdCodeListRes > 0)
            {
                foreach(var unit in BDCodeList)
                {
                    updateAllBdIdQry += "UPDATE uploading_file_tmr_data SET all_bd_id = " + unit.codes + " WHERE all_bd = '" + unit.conditions + "' AND site_id = " + site_id + " AND date = '" + date + "';" ;
                }
                try
                {
                    updateAllBdIdRes = await Context.ExecuteNonQry<int>(updateAllBdIdQry).ConfigureAwait(false);
                    finalResult = 2;
                }
                catch(Exception e)
                {
                    string msg = e.ToString();
                    API_ErrorLog("Exception while updating values of All_Bd_id in tmr_data table");
                    return finalResult;
                }
            }

            //finalResult = 1 : fetched records from wind_bd_codes_gamesa for hashtable
            //finalResult = 1 : Updated column all_bd_id in table uploading_file_tmr_data successfully.
            return finalResult;
        }

        */


        //InsertWindPowerCurve
        internal async Task<int> InsertWindPowerCurve(List<InsertWindPowerCurve> set)
        {
            int val = 0;
            string qry = " INSERT INTO power_curve ( site, site_id, wind_speed, active_power ) VALUES";
            string insertValues = "";
            int counter = 0;
            string site = "";
            int site_id = 0;
            foreach (var unit in set)
            {
                if (counter == 0)
                {
                    //saving site name and site id on first iteration of loop.
                    site = unit.site;
                    site_id = unit.site_id;
                }
                insertValues += "('" + unit.site + "'," + unit.site_id + ", " + unit.wind_speed + ", " + unit.active_power + "),";
            }

            string deleteQry = "DELETE FROM power_curve WHERE site ='" + site + "' AND site_id =" + site_id + ";";
            qry += insertValues;

            await Context.ExecuteNonQry<int>(deleteQry).ConfigureAwait(false);
            if (!(string.IsNullOrEmpty(insertValues)))
            {
                val = await Context.ExecuteNonQry<int>(qry.Substring(0, (qry.Length - 1)) + ";").ConfigureAwait(false);
            }
            return val;
        }
        //InsertWindBDCodeGamesa
        internal async Task<int> InsertWindBDCodeGamesa(List<InsertWindBDCodeGamesa> set)
        {
            int val = 0;
            string qry = " INSERT INTO wind_bd_codes_gamesa ( site, site_id, codes, description, conditions ) VALUES";
            string insertValues = "";
            int counter = 0;
            string site = "";
            int site_id = 0;
            int previousSiteId = 0;
            string siteIdList = "";
            foreach (var unit in set)
            {
                if (counter == 0)
                {
                    site = unit.site;
                    site_id = unit.site_id;
                    previousSiteId = site_id;
                    siteIdList = unit.site_id.ToString();
                }
                if(unit.site_id != previousSiteId)
                {
                    siteIdList += ", " + unit.site_id.ToString();
                }
                insertValues += "('" + unit.site + "', " + unit.site_id + ", " + unit.codes + ", '" + unit.description + "', '" + unit.conditions + "'),";
                previousSiteId = unit.site_id;
                counter++;
            }

            string deleteQry = "DELETE FROM wind_bd_codes_gamesa WHERE site_id IN(" + siteIdList + ");";
            qry += insertValues;

            await Context.ExecuteNonQry<int>(deleteQry).ConfigureAwait(false);
            if (!(string.IsNullOrEmpty(insertValues)))
            {
                val = await Context.ExecuteNonQry<int>(qry.Substring(0, (qry.Length - 1)) + ";").ConfigureAwait(false);
            }
            return val;
        }
        //ImportWindBDCodeINOX
        internal async Task<int> ImportWindBDCodeINOX(List<ImportWindBDCodeINOX> set)
        {
            int val = 0;
            string qry = " INSERT INTO wind_bd_codes_inox ( site, site_id, plc_state, code, type) VALUES";
            string insertValues = "";
            int counter = 0;
            string site = "";
            int site_id = 0;
            int previousSiteId = 0;
            string siteIdList = "";
            foreach (var unit in set)
            {
                if (counter == 0)
                {
                    site = unit.site;
                    site_id = unit.site_id;
                    previousSiteId = site_id;
                    siteIdList = unit.site_id.ToString();
                }
                if (unit.site_id != previousSiteId)
                {
                    siteIdList += ", " + unit.site_id.ToString();
                }
                insertValues += "('" + unit.site + "', " + unit.site_id + ", '" + unit.plc_state + "', '" + unit.code + "', '" + unit.type + "'),";
                previousSiteId = unit.site_id;
                counter++;
            }

            string deleteQry = "DELETE FROM wind_bd_codes_inox WHERE site_id IN(" + siteIdList + ");";
            qry += insertValues;

            await Context.ExecuteNonQry<int>(deleteQry).ConfigureAwait(false);
            if (!(string.IsNullOrEmpty(insertValues)))
            {
                val = await Context.ExecuteNonQry<int>(qry.Substring(0, (qry.Length - 1)) + ";").ConfigureAwait(false);
            }
            return val;
        }
        internal async Task<int> InsertWindBDCodeREGEN(List<InsertWindBDCodeREGEN> set)
        {
            int val = 0;
            string functionName = "InsertWIndBDCodeRegen";
            int returnRes = 0;
            string qry = " INSERT INTO wind_bd_codes_regen ( site, site_id, code, operation_mode, conditions) VALUES";
            string insertValues = "";
            int counter = 0;
            string site = "";
            int site_id = 0;
            int previousSiteId = 0;
            string siteIdList = "";
            foreach (var unit in set)
            {
                if (counter == 0)
                {
                    site = unit.site;
                    site_id = unit.site_id;
                    previousSiteId = site_id;
                    siteIdList = unit.site_id.ToString();
                }
                if (unit.site_id != previousSiteId)
                {
                    siteIdList += ", " + unit.site_id.ToString();
                }
                insertValues += "('" + unit.site + "', " + unit.site_id + ", " + unit.code + ", '" + unit.operation_mode + "', '" + unit.conditions + "'),";
                previousSiteId = unit.site_id;
                counter++;
            }

            string deleteQry = "DELETE FROM wind_bd_codes_regen WHERE site_id IN(" + siteIdList + ");";
            qry += insertValues;
            try
            {
                await Context.ExecuteNonQry<int>(deleteQry).ConfigureAwait(false);
                returnRes = 1;
            }
            catch(Exception e)
            {
                string msg = "Exception while deleting records from wind_bd_codes_regen table due to : " + e.ToString();
                //API_ErrorLog(msg);
                LogError(0, 2, 1, functionName, msg, backend);
                return returnRes;
            }
            if (!(string.IsNullOrEmpty(insertValues)))
            {
                try
                {
                    val = await Context.ExecuteNonQry<int>(qry.Substring(0, (qry.Length - 1)) + ";").ConfigureAwait(false);
                    returnRes = 2;
                }
                catch(Exception e)
                {
                    string msg = "Exception while inserting records into wind_bd_codes_regen table due to : " + e.ToString();
                    //API_ErrorLog(msg);
                    LogError(0, 2, 1, functionName, msg, backend);
                    return returnRes;
                }
            }

            //returnRes : 0 - deletion failed.
            //retrunRes : 1 - Deletion successful, insertion failed.
            //returnRes : 2 - Insertion successful.
            return returnRes;
        }
        //Get BD code INOX data for hashtable
        internal async Task<List<ImportWindBDCodeINOX>> GetWindBdCodeINOX(int site_id)
        {
            string qry = "Select * from wind_bd_codes_inox WHERE site_id = " + site_id + " ;";
            return await Context.GetData<ImportWindBDCodeINOX>(qry).ConfigureAwait(false);

        }
        //InsertWindSpeedTMD
        internal async Task<int> InsertWindSpeedTMD(List<InsertWindSpeedTMD> set)
        {
            int val = 0;
            string qry = " INSERT INTO windspeed_tmd ( site, site_id, tmd_date, tmd_time, windspeed ) VALUES";
            string insertValues = "";
            int counter = 0;
            string site = "";
            string date = "";
            int site_id = 0;
            string functionName = "InsertWindSpeedTMD";
            foreach (var unit in set)
            {
                if (counter == 0)
                {
                    //saving site name and site id on first iteration of loop.
                    site = unit.site;
                    site_id = unit.site_id;
                    date = unit.date.ToString();
                }
                insertValues += "('" + unit.site + "'," + unit.site_id + ", '" + unit.date + "', '" + unit.time + "', " + unit.wind_speed + "),";
            }

            string deleteQry = "DELETE FROM windspeed_tmd WHERE site ='" + site + "' AND site_id =" + site_id + " AND tmd_date = '" + date + "' ;";
            qry += insertValues;
            try
            {
                await Context.ExecuteNonQry<int>(deleteQry).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                string msg = "Exception caught while deleting old records. Due to : " + e.ToString();
                //API_ErrorLog(msg);
                LogError(0, 2, 6, functionName, msg, backend);
                throw new Exception("Exception caught while deleting old records. Due to " + e.Message);
            }
            if (!(string.IsNullOrEmpty(insertValues)))
            {
                try
                {
                    val = await Context.ExecuteNonQry<int>(qry.Substring(0, (qry.Length - 1)) + ";").ConfigureAwait(false);
                }
                catch (Exception e)
                {
                    string msg = "Exception while inserting new records in table due to : " + e.ToString();
                    //API_ErrorLog(msg);
                    LogError(0, 2, 1, functionName, msg, backend);
                    throw new Exception("Exception while adding new records in windspeed_tmd table. Due to :" + e.Message);
                }
            }
            return val;
        }
        //ImportWindReferenceWtgs
        internal async Task<int> ImportWindReferenceWtgs(List<ImportWindReferenceWtgs> set)
        {
            string functionName = "ImportWindReferenceWtgs";

            int val = 0;
            string qry = " INSERT INTO tml_reference_wtgs ( site, site_id, wtg, wtg_id, ref1, ref2, ref3 ) VALUES";
            string insertValues = "";
            int counter = 0;
            string site = "";
            string date = "";
            int previous_site_id = 0;
            string site_id_string = "";
            foreach (var unit in set)
            {
                if (counter == 0)
                {
                    previous_site_id = unit.site_id;
                    site_id_string = unit.site_id.ToString() + ",";
                }
                if (counter > 0)
                {
                    if (previous_site_id != unit.site_id)
                    {
                        site_id_string += unit.site_id.ToString() + ",";
                        previous_site_id = unit.site_id;
                    }
                }
                insertValues += "('" + unit.site + "'," + unit.site_id + ", '" + unit.wtg + "', " + unit.wtg_id + ", '" + unit.ref1 + "', '" + unit.ref2 + "', '" + unit.ref3 + "'),";
                counter++;
            }

            string deleteQry = "DELETE FROM tml_reference_wtgs WHERE site_id IN(" + site_id_string.Substring(0, (site_id_string.Length - 1)) + ") ;";
            qry += insertValues;
            try
            {
                await Context.ExecuteNonQry<int>(deleteQry).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                string msg = "Exception caught while deleting old records. Due to : " + e.ToString();
                //API_ErrorLog(msg);
                LogError(0, 2, 1, functionName, msg, backend);

                throw new Exception("Exception caught while deleting old records. Due to " + msg);
            }
            if (!(string.IsNullOrEmpty(insertValues)))
            {
                try
                {
                    val = await Context.ExecuteNonQry<int>(qry.Substring(0, (qry.Length - 1)) + ";").ConfigureAwait(false);
                }
                catch (Exception e)
                {
                    string msg = "Exception while inserting new records in table due to : " + e.ToString();
                    //API_ErrorLog(msg);
                    LogError(0, 2, 1, functionName, msg, backend);

                    throw new Exception("Exception while adding new records in tml_reference_wtgs table. Due to :" + msg);
                }
            }
            return val;
        }
        /*internal async Task<int> InsertDailyJMR(List<WindDailyJMR> set)
        {
            //pending : add activity log
            string qry = " insert into daily_jmr (date, site, site_id, jmr_kwh) values";
            string values = "";
            string delqry = "delete from daily_jmr where";
            foreach (var unit in set)
            {
                values += "('" + unit.date + "','" + unit.site + "','" + unit.site_id + "','" + unit.jmr_kwh + "'),";
                //where clause for deleting table data which matches with client data based on matching dates and site_ids
                delqry += " date = " + unit.date + " and site_id = " + unit.site_id + " or";
            }
            qry += values;
            await Context.ExecuteNonQry<int>(delqry.Substring(0, (delqry.Length - 2)) + ";").ConfigureAwait(false);
            return await Context.ExecuteNonQry<int>(qry.Substring(0, (qry.Length - 1)) + ";").ConfigureAwait(false);
        }*/

        //InsertSolarTrackerLoss
        internal async Task<int> InsertSolarTrackerLoss(List<InsertSolarTrackerLoss> set)
        {
            string deleteQry = "DELETE FROM uploading_file_tracker_loss WHERE";
            //delete qry
            int val = 0;

            string qry = " insert into uploading_file_tracker_loss (site, site_id, ac_capacity, date, from_time, to_time, trackers_in_BD, module_tracker, module_WP, remark) values";
            string insertValues = "";
            string date = "";
            int id = 0;
            int count = 0;
            if (set.Count > 0)
            {
                foreach (var unit in set)
                {
                    insertValues += "('" + unit.site + "','" + unit.site_id + "','" + unit.ac_capacity + "','" + unit.date + "','" + unit.from_time + "','" + unit.to_time + "','" + unit.trackers_in_BD + "','" + unit.module_tracker + "','" + unit.module_WP + "','" + unit.reason + "'),";
                    if (count == 0)
                    {
                        id = unit.site_id;
                        date = unit.date.ToString();
                    }
                    count++;
                }
                deleteQry += " site_id = " + id + " and date = '" + date + "';";

                qry += insertValues;

                await Context.ExecuteNonQry<int>(deleteQry).ConfigureAwait(false);
                if (!(string.IsNullOrEmpty(insertValues)))
                {
                    val = await Context.ExecuteNonQry<int>(qry.Substring(0, (qry.Length - 1)) + ";").ConfigureAwait(false);
                }
                if (val > 0)
                {
                    //CalculateTrackerLosses(id, fromDate, toDate, logFileName)
                    //bool calculateTrackerLoss =  await CalculateTrackerLosses(id, fromDate, toDate, "log");
                }
            }
            return val;
        }

        //InsertSolarTrackerLossMonthly
        internal async Task<string> InsertSolarTrackerLossMonthly(List<InsertSolarTrackerLoss> set)
        {
            string functionName = "InsertSolarTrackerLossMonthly";

            string deleteQry = "";
            //delete qry
            int insertRes = 0;
            int deleteRes = 0;

            string qry = " insert into uploading_file_tracker_loss (site, site_id, ac_capacity, date, from_time, to_time, trackers_in_BD, module_tracker, module_WP, remark) values";
            string insertValues = "";
            string deleteValues = "";
            string calculateRes = "";
            string date = "";
            int id = 0;
            int count = 0;
            foreach (var unit in set)
            {
                insertValues += "('" + unit.site + "', " + unit.site_id + " , " + unit.ac_capacity + ", '" + unit.date + "', '" + unit.from_time + "', '" + unit.to_time + "', " + unit.trackers_in_BD + ", " + unit.module_tracker + ", " + unit.module_WP + ", '" + unit.reason + "'),";

                deleteValues += "DELETE FROM uploading_file_tracker_loss WHERE site_id = " + unit.site_id + " AND date = '" + unit.date + "' ;";
            }
            deleteQry += deleteValues;

            qry += insertValues;

            try
            {
                deleteRes = await Context.ExecuteNonQry<int>(deleteQry).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                string msg = "Exception while Deleting records from file_uploading_tracker_losses table due to : " + e.ToString();
                //API_ErrorLog(msg);
                throw new Exception("Failed to delete records from tracker_loss table due to exception : " + msg);
                LogError(0, 1, 5, functionName, msg, backend);

            }

            if (!(string.IsNullOrEmpty(insertValues)))
            {
                try
                {
                    insertRes = await Context.ExecuteNonQry<int>(qry.Substring(0, (qry.Length - 1)) + ";").ConfigureAwait(false);
                }
                catch (Exception e)
                {
                    string msg = "Exception while inserting new records in uploading_tracker_loss table due to : " + e.ToString();
                    //API_ErrorLog(msg);
                    throw new Exception("Failed to insert new records in tracker_loss table due to Exception : " + msg);
                    LogError(0, 1, 5, functionName, msg, backend);

                }
            }
            if (insertRes > 0)
            {
                foreach (var unit in set)
                {
                    string dateDoc = Convert.ToString(unit.date);
                    //string date = Convert.ToDateTime(siteData[0].commissioning_date).ToString("yyyy-MM-dd");
                    int calculateTrackerLoss = await CalculateTrackerLosses(Convert.ToString(unit.site_id), dateDoc, dateDoc, "log");
                    calculateRes += Convert.ToString(calculateTrackerLoss) + ",";
                }
                //CalculateTrackerLosses(id, fromDate, toDate, logFileName)
            }
            return calculateRes;
        }
        //InsertSolarSoilingLoss
        internal async Task<int> InsertSolarSoilingLoss(List<InsertSolarSoilingLoss> set)
        {
            int val = 0;
            //pending delete qry and code clean up
            string qry = " insert into uploading_file_soiling_loss (site_name, site_id, month, month_no, five_days, ten_days, fifteen_days, fifteen_days_original, rainy_days, sandstorm_days, total_rain, manual_scada, is_manual_scada, toplining_soiling_loss, reason) values";
            string insertValues = "";
            string deleteValues = "";
            string month = "(";
            string id = "(";
            string financialyear = "(";
            foreach (var unit in set)
            {
                insertValues += "('" + unit.site_name + "','" + unit.site_id + "','" + unit.month + "','" + unit.month_no + "','" + unit.five_days + "','" + unit.ten_days + "','" + unit.fifteen_days + "','" + unit.fifteen_days_original + "','" + unit.rainy_days + "','" + unit.sandstorm_days + "','" + unit.total_rain + "','" + unit.manual_or_SCADA + "','" + unit.isManual_or_SCADA + "','" + unit.toplining_losses + "','" + unit.reason + "'),";
                //DELETE FROM uploading_file_pvsyst_loss WHERE site_id IN (3,9) and month In ('Apr','Mar');
                month += "'" + unit.month + "',";
                id += unit.site_id + ",";
            }
            string idTemp = id.Substring(0, (id.Length - 1)) + ")";
            string monthTemp = month.Substring(0, (month.Length - 1)) + ")";

            string deleteQry = "DELETE FROM uploading_file_soiling_loss WHERE site_id IN " + idTemp + " AND month IN " + monthTemp + ";";
            qry += insertValues;

            await Context.ExecuteNonQry<int>(deleteQry).ConfigureAwait(false);
            if (!(string.IsNullOrEmpty(insertValues)))
            {
                val = await Context.ExecuteNonQry<int>(qry.Substring(0, (qry.Length - 1)) + ";").ConfigureAwait(false);
            }
            return val;
        }
        //InsertSolarPVSystLoss
        internal async Task<int> InsertSolarPVSystLoss(List<InsertSolarPVSystLoss> set)
        {
            int val = 0;
            //pending delete qry and code clean up
            string qry = " insert into uploading_file_pvsyst_loss (site_name, site_id, year, month_no, fy, month, alpha, near_sheding, iam_factor, soiling_factor, pv_loss, lid, array_missmatch, dc_ohmic, conversion_loss, plant_auxilary, system_unavailability, ac_ohmic, external_transformer, yoy_degradation, module_degradation, tstc, tcnd, far_shading, pv_loss_dueto_temp, module_quality_loss, electrical_loss, inv_loss_over_power, inv_loss_max_input_current, inv_loss_voltage, inv_loss_power_threshold, inv_loss_voltage_threshold, night_consumption, idt, line_losses, unused_energy) values";
            string insertValues = "";
            string deleteValues = "";
            string month = "(";
            string id = "(";
            string financialyear = "(";
            foreach (var unit in set)
            {
                insertValues += "('" + unit.site_name + "','" + unit.site_id + "','" + unit.year + "','" + unit.month_no + "','" + unit.FY + "','" + unit.month + "','" + unit.alpha + "','" + unit.near_shading + "','" + unit.IAM_factor + "','" + unit.soiling_factor + "','" + unit.pv_loss + "','" + unit.lid + "','" + unit.array_missmatch + "','" + unit.dc_ohmic + "','" + unit.conversion_loss + "','" + unit.plant_aux + "','" + unit.system_unavailability + "','" + unit.ac_ohmic + "','" + unit.external_transformer + "','" + unit.yoy_degradation + "','" + unit.module_degradation + "','" + unit.tstc + "','" + unit.tcnd + "', " + unit.far_shading + "," + unit.pv_loss_dueto_temp + "," + unit.module_quality_loss + "," + unit.electrical_loss + "," + unit.inv_loss_over_power + "," + unit.inv_loss_max_input_current + "," + unit.inv_loss_voltage + "," + unit.inv_loss_power_threshold + "," + unit.inv_loss_voltage_threshold + "," + unit.night_consumption + "," + unit.idt + "," + unit.line_losses + "," + unit.unused_energy + "),";
                //DELETE FROM uploading_file_pvsyst_loss WHERE site_id IN (3,9) and month In ('Apr','Mar');
                month += "'" + unit.month + "',";
                id += unit.site_id + ",";
                financialyear += "'" + unit.FY + "',";
            }
            string idTemp = id.Substring(0, (id.Length - 1)) + ")";
            string monthTemp = month.Substring(0, (month.Length - 1)) + ")";
            string financialyearTemp = financialyear.Substring(0, (financialyear.Length - 1)) + ")";

            string deleteQry = "DELETE FROM uploading_file_pvsyst_loss WHERE site_id IN " + idTemp + " AND month IN " + monthTemp + " AND fy IN " + financialyearTemp + ";";
            qry += insertValues;

            await Context.ExecuteNonQry<int>(deleteQry).ConfigureAwait(false);
            if (!(string.IsNullOrEmpty(insertValues)))
            {
                val = await Context.ExecuteNonQry<int>(qry.Substring(0, (qry.Length - 1)) + ";").ConfigureAwait(false);
            }
            return val;
        }

        //InsertSolarEstimatedHourlyData
        internal async Task<int> InsertSolarEstimatedHourlyData(List<InsertSolarEstimatedHourlyData> set)
        {
            string functionName = "InsertSolarEstimatedHourlyData";

            int finalResult = 0;
            int deleteRes = 0;
            int insertRes = 0;
            //pending delete qry and code clean up
            string qry = " insert into uploading_file_estimated_hourly_loss (site, site_id, fy_date, year, month, month_no, time, glob_hor, glob_inc, t_amb, t_array, e_out_inv, e_grid, phi_ang) values";
            string insertValues = "";
            //Sstring deleteValues = "";
            //string month = "(";
            string id = "(";
            string financialyear = "(";
            foreach (var unit in set)
            {
                insertValues += "('" + unit.site + "', " + unit.site_id + ", '" + unit.fy_date + "', " + unit.year + ", '" + unit.month + "', " + unit.month_no + ", '" + unit.time + "', " + unit.glob_hor + ", " + unit.glob_inc + ", " + unit.t_amb + ", " + unit.t_array + ", " + unit.e_out_inv + ", " + unit.e_grid + ", " + unit.phi_ang + "),";
                //DELETE FROM uploading_file_pvsyst_loss WHERE site_id IN (3,9) and month In ('Apr','Mar');
                //month += "'" + unit.month + "',";
                id += unit.site_id + ",";
                financialyear += "'" + unit.fy_date + "',";
            }
            string idTemp = id.Substring(0, (id.Length - 1)) + ")";
            //string monthTemp = month.Substring(0, (month.Length - 1)) + ")";
            string financialyearTemp = financialyear.Substring(0, (financialyear.Length - 1)) + ")";

            string deleteQry = "DELETE FROM uploading_file_estimated_hourly_loss WHERE site_id IN " + idTemp + " AND fy_date IN " + financialyearTemp + ";";
            qry += insertValues;

            try
            {
                deleteRes = await Context.ExecuteNonQry<int>(deleteQry).ConfigureAwait(false);
                if (deleteRes >= 0)
                {
                    finalResult = 1;
                }
            }
            catch (Exception e)
            {
                string msg = "Exception while deleting records form uploading_file_estimated_hourly_loss table, due to  : " + e.ToString();
                //API_ErrorLog(msg);
                LogError(0, 1, 5, functionName, msg, backend);

                return finalResult;
            }
            if (!(string.IsNullOrEmpty(insertValues)))
            {
                try
                {
                    insertRes = await Context.ExecuteNonQry<int>(qry.Substring(0, (qry.Length - 1)) + ";").ConfigureAwait(false);
                    if (insertRes > 0)
                    {
                        finalResult = 2;
                    }
                }
                catch (Exception e)
                {
                    string msg = "Exception while inserting values into uploading_file_estimated_hourly_loss table, due to : " + e.ToString();
                    //API_ErrorLog(msg);
                    LogError(0, 1, 5, functionName, msg, backend);

                    return finalResult;
                }
            }
            //finalResult = 0 : Complete Failure.
            //finalResult = 1 : Deleted completed Then Failed.
            //finalResult = 2 : Insertion in table done successfully. Successful.

            return finalResult;
        }


        internal async Task<List<SolarTrackerLoss>> GetSolarTrackerLoss(string site, string fromDate, string toDate)
        {
            string functionName = "GetSolarTrackerLoss";

            List<SolarTrackerLoss> _trackerLossList = new List<SolarTrackerLoss>();
            string filter = "date >= '" + fromDate + "'  and date<= '" + toDate + "'";
            if (!string.IsNullOrEmpty(site))
            {
                filter += " and site_id IN(" + site + ") ";
            }
            filter += " ORDER BY date ASC;";
            string qry = "SELECT site,ac_capacity,date,	from_time,to_time,trackers_in_BD,module_tracker,module_WP,remark,tracker_loss,breakdown_tra_capacity,actual_poa,actual_ghi,	target_aop_pr FROM `uploading_file_tracker_loss` where " + filter;
            try
            {
                _trackerLossList = await Context.GetData<SolarTrackerLoss>(qry).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                string msg = "Exception while fetching records from uploading_file_tracker_loss, due to : " + e.ToString();
                //API_ErrorLog(msg);
                LogError(0, 1, 5, functionName, msg, backend);

            }

            return _trackerLossList;
        }

        internal async Task<List<GetPowerCurveData>> GetWindPowerCurveData(string site, string fromDate, string toDate)
        {
            string functionName = "GetWindPowerCurveData";

            List<GetPowerCurveData> _powerCurve = new List<GetPowerCurveData>();
            List<GetPowerCurveData> _windTMLDataList = new List<GetPowerCurveData>();
            //string fdate = Convert.ToDateTime(fromDate).ToString("dd-MMM-yy");
            //string todate = Convert.ToDateTime(toDate).ToString("dd-MMM-yy");
            string filter = "";
            string tmlFilter = "";
            //filter = "date >= '" + fdate + "'  and date <= '" + todate + "'";
            if (!string.IsNullOrEmpty(site))
            {
                filter += " site_id IN(" + site + ") ";
                tmlFilter += " site_id IN(" + site + ")";
            }
            filter += " ORDER BY site_id, wind_speed ;";
            tmlFilter += " AND DATE(Time_stamp) >= '" + fromDate + "' AND DATE(Time_stamp) <= '" + toDate + "' ORDER BY site_id, avg_wind_speed";

            string fetchQry = "SELECT * FROM power_curve WHERE " + filter;
            string tmlQry = "SELECT site, site_id, DATE(Time_stamp) as date, avg_active_power, avg_wind_speed FROM uploading_file_tmr_data WHERE " + tmlFilter;

            try
            {
                _powerCurve = await Context.GetData<GetPowerCurveData>(fetchQry).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                string msg = "Exception while fetching records from tml_data table for displaying, due to  : " + e.ToString();
                //API_ErrorLog(msg);
                LogError(0, 2, 5, functionName, msg, backend);

            }
            try
            {
                _windTMLDataList = await Context.GetData<GetPowerCurveData>(tmlQry).ConfigureAwait(false);
            }
            catch(Exception e)
            {
                string msg = "Exception while retriving data from tml table, due to : " + e.ToString();
                //API_ErrorLog(msg);
                LogError(0, 2, 5, functionName, msg, backend);

            }
            return _powerCurve;
        }

        internal async Task<List<GetPowerCurveData>> GetWindTmlPowerCurveData(string site, string fromDate, string toDate, string wtgs)
        {
            string functionName = "GetWindTmlPowerCurveData";

            List<GetPowerCurveData> _windTMLDataList = new List<GetPowerCurveData>();
            string tmlFilter = "";
            if (!string.IsNullOrEmpty(site))
            {
                tmlFilter += " site_id IN(" + site + ")";
            }
            if (!string.IsNullOrEmpty(wtgs))
            {
                tmlFilter += " AND WTGs IN(" + wtgs + ")";
            }
            tmlFilter += " AND DATE(Time_stamp) >= '" + fromDate + "' AND DATE(Time_stamp) <= '" + toDate + "' ORDER BY site_id, avg_wind_speed";

            string tmlQry = "SELECT site, site_id, DATE(Time_stamp) as date, avg_active_power, avg_wind_speed FROM uploading_file_tmr_data WHERE " + tmlFilter;

            try
            {
                _windTMLDataList = await Context.GetData<GetPowerCurveData>(tmlQry).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                string msg = "Exception while retriving data from tml table, due to : " + e.ToString();
                //API_ErrorLog(msg);
                LogError(0, 2, 5, functionName, msg, backend);

            }
            return _windTMLDataList;
        }

        //GetWindTMLGraphData
        internal async Task<List<GetWindTMLGraphData>> GetWindTMLGraphDataOld(string site, string fromDate, string toDate, int isAdmin, int isYearly = 0)
        {
            string functionName = "GetWindTMLGraphData";
            //if (site.Contains(',') || isYearly == 0)
            //{
            //    isYearly = 1;
            //}

            List<GetWindTMLGraphData> _tmlDataList = new List<GetWindTMLGraphData>();
            //string fdate = Convert.ToDateTime(fromDate).ToString("dd-MMM-yy");
            //string todate = Convert.ToDateTime(toDate).ToString("dd-MMM-yy");
            string tmrFilter = "Date(Time_stamp) >= '" + fromDate + "'  and Date(Time_stamp) <= '" + toDate + "'";
            double lossIGBD = 0;
            double lossEGBD = 0;
            double lossLULL = 0;
            double lossOthersHour = 0;
            double lossPCD = 0;
            double lossSMH = 0;
            double lossUSMH = 0;
            double lossHealth = 0;
            double loadShedding = 0;
            double expected_power_sum = 0;
            double actual_active_power = 0;
            double target_sum = 0;
            double gen_actual_active_power = 0;
            double lineloss_percentage = 0;
            double lineloss_final = 0;
            double allSum = 0;
            double finalExpectedPower = 0;
            int monthlyData = 0;
            try
            {
                if (!string.IsNullOrEmpty(site))
                {
                    tmrFilter += " and site_id IN(" + site + ") ";
                }
                //tmrFilter += " ORDER BY WTGs ASC, to_time ASC ;";
                //USMH, SMH, IGBD, EGBD, PCD, NC, LULL :- SELECT all_bd, SUM(loss_kw) as loss_kw FROM `uploading_file_tmr_data` WHERE date = '06-Apr-23' AND site_id = 224 GROUP BY all_bd;
                //Expected :- SELECT (SUM(exp_power_kw)/6)/1000000 as expected_kw_sum FROM `uploading_file_tmr_data` WHERE date = '06-Apr-23' AND site_id = 224;
                //Actual :- SELECT (SUM(avg_active_power)/6)/1000000 as active_power_sum FROM `uploading_file_tmr_data` WHERE date = '06-Apr-23' AND site_id = 224;
                //
                //Target :- SELECT SUM(kwh) as target_sum FROM `daily_target_kpi` WHERE site_id = 224 AND date >= "2023-03-06" AND date <= "2023-03-06";
                //Lineloss :- SELECT line_loss as line_loss_per FROM `monthly_uploading_line_losses` WHERE site_id = 224 AND month_no = 4 AND year = 2023;
                //              line_loss_per * actual / 1000000.

                //SELECT CASE WHEN all_bd = 'Load Shedding' THEN 'LoadShedding' ELSE all_bd END as all_bd, SUM(loss_kw) / 1000000 as loss_kw FROM `uploading_file_tmr_data` WHERE date >= '01-Apr-23' and date <= '12-Jul-23' and site_id IN(221) GROUP BY all_bd;

                string fetchLossQry = "SELECT CASE WHEN all_bd = 'Load Shedding' THEN 'loadShedding' ELSE all_bd END as all_bd, SUM(loss_kw)/1000000 as loss_kw FROM `uploading_file_tmr_data` WHERE " + tmrFilter + " GROUP BY all_bd;";

                try
                {
                    _tmlDataList = await Context.GetData<GetWindTMLGraphData>(fetchLossQry).ConfigureAwait(false);
                }
                catch (Exception e)
                {
                    string msg = "Exception while fetching records from uploading_file_tmr_data for sum(loss_kw), due to  : " + e.ToString();
                    //API_ErrorLog(msg);
                    LogError(0, 2, 5, functionName, msg, backend);

                }
            }
            catch (Exception e)
            {
                string msg = "Exception while fetching records from tml_data table for displaying, due to  : " + e.ToString();
                //API_ErrorLog(msg);
                LogError(0, 2, 5, functionName, msg, backend);

            }
            try
            {
                if (_tmlDataList.Count > 0)
                {
                    foreach (var unit in _tmlDataList)
                    {//add other hrs remove nc
                        if (unit.all_bd == "IGBD")
                        {
                            lossIGBD = unit.loss_kw;
                        }
                        if (unit.all_bd == "EGBD")
                        {
                            lossEGBD = unit.loss_kw;
                        }
                        //if (unit.all_bd == "LULL")
                        //{
                        //    lossLULL = unit.loss_kw;
                        //}
                        if (unit.all_bd == "OthersHour")
                        {
                            lossOthersHour = unit.loss_kw;
                        }
                        if (unit.all_bd == "PCD")
                        {
                            lossPCD = unit.loss_kw;
                        }
                        if (unit.all_bd == "SMH")
                        {
                            lossSMH = unit.loss_kw;
                        }
                        if (unit.all_bd == "USMH")
                        {
                            lossUSMH = unit.loss_kw;
                        }
                        if (unit.all_bd == "LoadShedding")
                        {
                            loadShedding = unit.loss_kw;
                        }
                        if (unit.all_bd == "HealthCheck")
                        {
                            lossHealth = unit.loss_kw;
                        }
                    }
                    lossUSMH += lossHealth;
                }
                else
                {
                    if (isYearly == 0)
                    {
                        monthlyData = 100;
                    }
                }

            }
            catch (Exception e)
            {
                string msg = "Exception while extracting loss sum from _tmlDataList, due to : " + e.ToString();
                //API_ErrorLog(msg);
                LogError(0, 2, 5, functionName, msg, backend);

            }
            _tmlDataList.Clear();

            //Expected :- SELECT (SUM(exp_power_kw)/6)/1000000 as expected_kw_sum FROM `uploading_file_tmr_data` WHERE date = '06-Apr-23' AND site_id = 224;
            string fetchExpectedQry = "SELECT (SUM(exp_power_kw)/6)/1000000 as expected_kw_sum FROM `uploading_file_tmr_data` WHERE " + tmrFilter + ";";
            try
            {
                _tmlDataList = await Context.GetData<GetWindTMLGraphData>(fetchExpectedQry).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                string msg = "Exception while fetching Expected sum from uploading_file_tmr_data, due to : " + e.ToString();
                //API_ErrorLog(msg);
                LogError(0, 2, 5, functionName, msg, backend);

            }
            if (_tmlDataList.Count > 0)
            {
                try
                {
                    foreach (var unit in _tmlDataList)
                    {
                        expected_power_sum = unit.expected_kw_sum;
                    }
                }
                catch (Exception e)
                {
                    string msg = "Exception while extracting Expected sum value from _tmlDataList, due to : " + e.ToString();
                    //API_ErrorLog(msg);
                    LogError(0, 2, 5, functionName, msg, backend);

                }
            }
            _tmlDataList.Clear();

            //Actual :- SELECT (SUM(avg_active_power)/6)/1000000 as active_power_sum FROM `uploading_file_tmr_data` WHERE date = '06-Apr-23' AND site_id = 224;
            string fetchActualQry = "SELECT (SUM(avg_active_power)/6)/1000000 as active_power_sum FROM `uploading_file_tmr_data` WHERE " + tmrFilter + ";";
            try
            {
                _tmlDataList = await Context.GetData<GetWindTMLGraphData>(fetchActualQry).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                string msg = "Exception while fetching records from uploading_file_tmr_data for Actual Sum, due to : " + e.ToString();
                //API_ErrorLog(msg);
                LogError(0, 2, 5, functionName, msg, backend);

            }
            if (_tmlDataList.Count > 0)
            {
                try
                {
                    foreach (var unit in _tmlDataList)
                    {
                        actual_active_power = unit.active_power_sum;
                    }
                }
                catch (Exception e)
                {
                    string msg = "Exception while extracting value of Actual_active_power from _tmrDataList, due to : " + e.ToString();
                    //API_ErrorLog(msg);
                    LogError(0, 2, 5, functionName, msg, backend);

                }
            }
            _tmlDataList.Clear();

            //Target :- SELECT SUM(kwh) as target_sum FROM `daily_target_kpi` WHERE site_id = 224 AND date >= "2023-03-06" AND date <= "2023-03-06";
            string fetchTargetQryOld = "SELECT SUM(kwh) as target_sum FROM `daily_target_kpi` WHERE site_id IN(" + site + ") AND date >= '" + fromDate + "' AND date <= '" + toDate + "' ;";
            string fetchTargetQry = "SELECT site_id, date, kwh FROM `daily_target_kpi` WHERE site_id IN(" + site + ") AND date >= '" + fromDate + "' AND date <= '" + toDate + "' ;";
            string AvailableDateSiteTMD = $"SELECT site_id, DATE(Time_stamp) AS date FROM uploading_file_tmr_data WHERE site_id IN({site}) AND DATE(Time_stamp) >= '{fromDate}' AND DATE(Time_stamp) <= '{toDate}' GROUP BY site_id, DATE(Time_stamp);";
            List<TargetSubQry> _targetData = new List<TargetSubQry>();
            List<TargetSubQry> _availableDateSiteTMD = new List<TargetSubQry>();

            try
            {
                _availableDateSiteTMD = await Context.GetData<TargetSubQry>(AvailableDateSiteTMD).ConfigureAwait(false);
            }
            catch(Exception e)
            {
                string msg = "Exception while Fetching site and date data from uploading_file_tmr_data, due to : " + e.ToString();
                LogError(0, 2, 5, functionName, msg, backend);
            }
            try
            {
                _targetData = await Context.GetData<TargetSubQry>(fetchTargetQry).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                string msg = "Exception while Fetching target sum form daily_target_kpi, due to : " + e.ToString();
                //API_ErrorLog(msg);
                LogError(0, 2, 5, functionName, msg, backend);

            }
            if (_targetData.Count > 0)
            {
                try
                {
                    double sumKwh = 0.0;
                    foreach (var unit in _targetData)
                    {
                        //target_sum = unit.target_sum;
                        foreach (var inUnit in _availableDateSiteTMD)
                        {
                            if (inUnit.date == unit.date && inUnit.site_id == unit.site_id)
                            {
                                sumKwh += unit.kwh;
                            }
                        }
                    }
                    target_sum = sumKwh;
                }
                catch (Exception e)
                {
                    string msg = "Exception while Extracting target sum from _tmlDataList, due to : " + e.ToString();
                    //API_ErrorLog(msg);
                    LogError(0, 2, 5, functionName, msg, backend);

                }
            }
            _tmlDataList.Clear();

            //Actual from Generation table :- SELECT SUM(kwh) as target_sum FROM `daily_target_kpi` WHERE site_id = 224 AND date >= "2023-03-06" AND date <= "2023-03-06";
            string fetchGenActualQry = "";
            List<GetWindTMLGraphData> _tmlActualGenYearly = new List<GetWindTMLGraphData>();
            if (isYearly == 1)
            {
                fetchGenActualQry = "SELECT Month(date) as month_no, SUM(kwh) as gen_actual_active_power, site_id FROM `daily_gen_summary` WHERE site_id IN(" + site + ") AND date >= '" + fromDate + "' AND date <= '" + toDate + "' GROUP BY Month(date), site_id;";
                try
                {
                    _tmlActualGenYearly = await Context.GetData<GetWindTMLGraphData>(fetchGenActualQry).ConfigureAwait(false);
                }
                catch (Exception e)
                {
                    string msg = "Exception while Fetching Generation active power sum for yearly form daily_gen_summary, due to : " + e.ToString();
                    //API_ErrorLog(msg);
                    LogError(0, 2, 5, functionName, msg, backend);

                }
            }
            else
            {
                fetchGenActualQry = "SELECT SUM(kwh) as gen_actual_active_power FROM `daily_gen_summary` WHERE site_id IN(" + site + ") AND date >= '" + fromDate + "' AND date <= '" + toDate + "' ;";

                try
                {
                    _tmlDataList = await Context.GetData<GetWindTMLGraphData>(fetchGenActualQry).ConfigureAwait(false);
                }
                catch (Exception e)
                {
                    string msg = "Exception while Fetching Generation active power sum form daily_gen_summary, due to : " + e.ToString();
                    //API_ErrorLog(msg);
                    LogError(0, 2, 5, functionName, msg, backend);

                }
                if (_tmlDataList.Count > 0)
                {
                    try
                    {
                        foreach (var unit in _tmlDataList)
                        {
                            gen_actual_active_power = unit.gen_actual_active_power;
                        }
                    }
                    catch (Exception e)
                    {
                        string msg = "Exception while Extracting Generation active power sum from _tmlDataList, due to : " + e.ToString();
                        //API_ErrorLog(msg);
                        LogError(0, 2, 5, functionName, msg, backend);

                    }
                }
                _tmlDataList.Clear();
            }

            //Lineloss :- SELECT line_loss as line_loss_per FROM `monthly_uploading_line_losses` WHERE site_id = 224 AND month_no = 4 AND year = 2023;
            //              line_loss_per * actual / 1000000.
            string toMonth = Convert.ToDateTime(toDate).ToString("MM");
            string fromMonth = Convert.ToDateTime(fromDate).ToString("MM");
            string fromYear = Convert.ToDateTime(fromDate).ToString("yyyy");
            string toYear = Convert.ToDateTime(toDate).ToString("yyyy");
            string toYear1 = Convert.ToDateTime(toDate).ToString("yy");
            var fy = fromYear + "-" + toYear1;
            string fetchLinelossPerQry = "";
            List<GetWindTMLGraphData> _tmlLineLossForYearly = new List<GetWindTMLGraphData>();
            if (isYearly == 1)
            {
                //fetchLinelossPerQry = "SELECT month_no, line_loss as line_loss_per, site_id FROM `monthly_uploading_line_losses` WHERE site_id IN(" + site + ") AND month_no >= " + fromMonth + " AND month_no <= " + toMonth + " AND year IN(" + fromYear + "," + toYear + ") GROUP BY month_no, site_id";
                fetchLinelossPerQry = "SELECT month_no, line_loss as line_loss_per, site_id FROM `monthly_uploading_line_losses` WHERE site_id IN(" + site + ") AND fy IN('" +fy+ "') GROUP BY month_no, site_id";

                try
                {
                    _tmlLineLossForYearly = await Context.GetData<GetWindTMLGraphData>(fetchLinelossPerQry).ConfigureAwait(false);
                }
                catch (Exception e)
                {
                    string msg = "Exception while fetching lineloss percentage for yearly from mothly_uploading_lineloss, due to : " + e.ToString();
                    //API_ErrorLog(msg);
                    LogError(0, 2, 5, functionName, msg, backend);

                }
            }
            else
            {
                fetchLinelossPerQry = "SELECT line_loss as line_loss_per FROM `monthly_uploading_line_losses` WHERE site_id IN(" + site + ") AND month_no >= " + fromMonth + " AND month_no <= " + toMonth + " AND year IN(" + fromYear + "," + toYear + ") ;";
               // fetchLinelossPerQry = "SELECT line_loss as line_loss_per FROM `monthly_uploading_line_losses` WHERE site_id IN(" + site + ")  AND year IN(" + fromYear + "," + toYear + ") ;";

                try
                {
                    _tmlDataList = await Context.GetData<GetWindTMLGraphData>(fetchLinelossPerQry).ConfigureAwait(false);
                }
                catch (Exception e)
                {
                    string msg = "Exception while fetching lineloss percentage from mothly_uploading_lineloss, due to : " + e.ToString();
                    //API_ErrorLog(msg);
                    LogError(0, 2, 5, functionName, msg, backend);

                }
                if (_tmlDataList.Count > 0)
                {
                    try
                    {
                        foreach (var unit in _tmlDataList)
                        {
                            lineloss_percentage = unit.line_loss_per;
                        }
                    }
                    catch (Exception e)
                    {
                        string msg = "Exception while extracting lineloss percentage from _tmlDataList, due to : " + e.ToString();
                        //API_ErrorLog(msg);
                        LogError(0, 2, 5, functionName, msg, backend);

                    }
                }
                _tmlDataList.Clear();
            }
            double lineLossForYearly = 0;
            double actPowerForYearly = 0;
            if (isYearly == 1)
            {
                foreach (var _element in _tmlActualGenYearly)
                {
                    foreach (var _innerElement in _tmlLineLossForYearly)
                    {
                        if (_element.month_no == _innerElement.month_no && _element.site_id == _innerElement.site_id)
                        {
                            double lineloss = _innerElement.line_loss_per / 100;
                            double temp = (lineloss * _element.gen_actual_active_power) * -1; //6;
                            lineloss_final = temp / 1000000;
                            lineLossForYearly += lineloss_final;

                            double actGenPowertemp = (_element.gen_actual_active_power / 1000000) + lineloss_final;
                            actPowerForYearly += actGenPowertemp;
                        }
                    }
                }
            }
            else
            {
                //if (lineloss_percentage > 0)
                //{
                    double lineloss = lineloss_percentage / 100;
                    double temp = (lineloss * gen_actual_active_power) * -1; //6;
                    lineloss_final = temp / 1000000;
                    //string linelossTemp = lineloss_final.ToString("0.##############");
                    //linelossTemp = linelossTemp.TrimEnd('0').TrimEnd('.');
                    //lineloss_final = Convert.ToDouble(linelossTemp);
                //}
                _tmlDataList.Clear();
            }

            //Calculating Difference in expected power.
            if (isYearly ==1)
            {
                
            }
            else
            {
                gen_actual_active_power = (gen_actual_active_power / 1000000) + lineloss_final ;
                actual_active_power = gen_actual_active_power;
            }

            if (isYearly == 1)
            {
                allSum = expected_power_sum + lossUSMH + lossSMH + lossIGBD + lossEGBD + lossOthersHour + lossPCD + loadShedding + lineLossForYearly;//here NC contains other hours value., 
            }
            else
            {
                allSum = expected_power_sum + lossUSMH + lossSMH + lossIGBD + lossEGBD + lossOthersHour + lossPCD + loadShedding + lineloss_final;//here NC contains other hours value., 
            }
            double difference = 0;
            //difference = actual_active_power - allSum;
            if(isYearly == 1)
            {
                difference = actPowerForYearly - allSum;
                if (difference != 0 )
                {
                    finalExpectedPower = expected_power_sum + difference;
                }
                else
                {
                    finalExpectedPower = expected_power_sum;
                }
            }
            else
            {
                difference = gen_actual_active_power - allSum;
                if (difference != 0 )
                {
                    finalExpectedPower = expected_power_sum + difference;
                }
                else
                {
                    finalExpectedPower = expected_power_sum;
                }
            }

            if (isAdmin == 1)
            {
                string insertQry = "";
                if(isYearly == 1)
                {
                    insertQry = "INSERT INTO exp_act_difference_wind(site_id, from_date, to_date, expected, actual, difference, final_expected, target, USMH, SMH, Other, IGBD, EGBD, PCD, Lineloss) VALUES ('" + site + "', '" + fromDate + "', '" + toDate + "', " + expected_power_sum + ", " + actPowerForYearly + ", " + difference + ", " + finalExpectedPower + ", " + target_sum + ", " + lossUSMH + ", " + lossSMH + ", " + lossOthersHour + ", " + lossIGBD + ", " + lossEGBD + ", " + lossPCD + ", " + lineLossForYearly + ");";
                }
                else
                {
                    insertQry = "INSERT INTO exp_act_difference_wind(site_id, from_date, to_date, expected, actual, difference, final_expected, target, USMH, SMH, Other, IGBD, EGBD, PCD, Lineloss) VALUES ('" + site + "', '" + fromDate + "', '" + toDate + "', " + expected_power_sum + ", " + actual_active_power + ", " + difference + ", " + finalExpectedPower + ", " + target_sum + ", " + lossUSMH + ", " + lossSMH + ", " + lossOthersHour + ", " + lossIGBD + ", " + lossEGBD + ", " + lossPCD + ", " + lineloss_final + ");";
                }
                try
                {
                    int insertRes = await Context.ExecuteNonQry<int>(insertQry).ConfigureAwait(false);

                }
                catch(Exception e)
                {
                    string msg = "Exception while inserting difference data into exp_act_difference_wind table." + e.ToString();
                    //API_ErrorLog(msg);
                    LogError(0, 2, 5, functionName, msg, backend);

                }
            }

            try
            {
                _tmlDataList.Clear();
                if (isYearly == 1)
                {
                    GetWindTMLGraphData finalDataYearly = new GetWindTMLGraphData()
                    {
                        expected_final = finalExpectedPower,
                        lineloss_final = lineLossForYearly,
                        target_final = target_sum,
                        lossUSMH_final = lossUSMH,
                        lossSMH_final = lossSMH,
                        lossNC_final = lossOthersHour,
                        lossIGBD_final = lossIGBD,
                        lossEGBD_final = lossEGBD,
                        lossLULL_final = lossLULL,
                        lossPCD_final = lossPCD,
                        actual_final = actPowerForYearly,
                        loadShedding = loadShedding,
                        //monthlyData = monthlyData,
                    };
                    _tmlDataList.Add(finalDataYearly);
                }
                else
                {
                    GetWindTMLGraphData finalData = new GetWindTMLGraphData()
                    {
                        expected_final = finalExpectedPower,
                        lineloss_final = lineloss_final,
                        target_final = target_sum,
                        lossUSMH_final = lossUSMH,
                        lossSMH_final = lossSMH,
                        lossNC_final = lossOthersHour,
                        lossIGBD_final = lossIGBD,
                        lossEGBD_final = lossEGBD,
                        lossLULL_final = lossLULL,
                        lossPCD_final = lossPCD,
                        actual_final = actual_active_power,
                        loadShedding = loadShedding,
                        monthlyData = monthlyData,
                    };
                    _tmlDataList.Add(finalData);
                }
            }
            catch (Exception e)
            {
                string msg = "Exception while inserting final Values into _tmlDataList, due to : " + e.ToString();
            }
            return _tmlDataList;
        }

        internal async Task<int> CalculateTrackerLosses(string site, string fromDate, string toDate, string logFileName)
        {
            string functionName = "CalculateTrackerLosses";
            int finalRes = 1401;
            try
            {
                string qry1 = "select * from `uploading_file_tracker_loss` where site_id = " + site + " and date between '" + fromDate + "' and '" + toDate + "' ";
                List<InsertSolarTrackerLoss> data = new List<InsertSolarTrackerLoss>();
                try
                {
                    data = await Context.GetData<InsertSolarTrackerLoss>(qry1).ConfigureAwait(false);
                    finalRes++;
                }
                catch(Exception e)
                {
                    string msg = "Exception while fetching records from tracker loss table in CalculateTrackerLosses function, due to : " + e.ToString();
                    //API_ErrorLog(msg);
                    LogError(0, 1, 5, functionName, msg, backend);

                    return finalRes;
                }
                double totalGenLoss = 0;
                double totalBreakdown_tracker_cap = 0;
                double totalActualPOA = 0;
                double totalActualGHI = 0;
                double totalprTarget = 0;
                foreach (InsertSolarTrackerLoss _eachRow in data)
                {
                    //DateTime startTimeDate = _eachRow.fromTime;
                    //string startTime = startTimeDate.TimeOfDay.ToString();
                    //DateTime stopTimeDate = _eachRow.toTime;
                    //string stopTime = startTimeDate.TimeOfDay.ToString();
                    dynamic time = _eachRow.from_time;
                    string startTime = _eachRow.from_time.ToString();
                    string stopTime = _eachRow.to_time.ToString();

                    double breakdown_tracker_cap = 0;
                    double gen_loss = 0;

                    breakdown_tracker_cap = _eachRow.trackers_in_BD * _eachRow.module_tracker * _eachRow.module_WP / 1000;
                    double poa = 0;
                    double ghi = 0;
                    //if (avg_ghi > 0 && avg_poa > 0)
                    //{
                    string poaqry = "select sum(avg_poa) as avg_poa, sum(avg_ghi) as avg_ghi from uploading_pyranometer_1_min_solar where date_time >= '" + fromDate + " " + startTime + "' and date_time<='" + toDate + " " + stopTime + "' AND site_id = " + site;
                    try
                    {
                        List<SolarUploadingPyranoMeter1Min> _SolarUploadingPyranoMeter1Min = await Context.GetData<SolarUploadingPyranoMeter1Min>(poaqry).ConfigureAwait(false);
                        //AVG POA FOR BREAKDOWN
                        poa = _SolarUploadingPyranoMeter1Min[0].avg_poa / 60000;
                        //poa = 4;

                        ghi = _SolarUploadingPyranoMeter1Min[0].avg_ghi / 60000;
                        //ghi = 5;
                    }
                    catch (Exception e)
                    {
                        string msg = e.Message;
                        throw new Exception("Exception in SolarCalculate function : Exception : " + msg);
                    }

                    //}
                    //else
                    //{
                    //    poa = avg_poa;
                    //    ghi = avg_ghi;
                    //}

                    //Get TargetPR
                    string dateFQ = _eachRow.date.ToString("yyyy-MM-dd");
                    string qryTarget = "select pr from monthly_target_kpi_solar where site_id = " + site + " and month_no = month('" + dateFQ + "') and year = year('" + dateFQ + "') ";
                    List<SolarMonthlyTargetKPI> _SolarPRTarget = await Context.GetData<SolarMonthlyTargetKPI>(qryTarget).ConfigureAwait(false);
                    double prTarget = 0;
                    foreach (SolarMonthlyTargetKPI pr in _SolarPRTarget)
                    {
                        prTarget = pr.PR;
                        break;
                    }

                    gen_loss = (poa - ghi) * breakdown_tracker_cap * prTarget / 100;
                    //double total_gen_losses = 0;
                    if (gen_loss < 0)
                    {
                        gen_loss = 0;
                    }
                    
                    //string insertQuery = " update `Tracker_Losses` set gen_loss = " + gen_loss + " where site_id = " + site + " and date = " + _eachRow.date;
                    //try
                    //{
                    //    int result = await Context.ExecuteNonQry<int>(updateQuery).ConfigureAwait(false);
                    //}
                    //catch (Exception ex)
                    //{
                    //    string strEx = ex.ToString();
                    //    throw;

                    //}
                    string updQuery = " update `uploading_file_tracker_loss` set tracker_loss = " + gen_loss + ", date_of_mod = NOW(), breakdown_tra_capacity = " + breakdown_tracker_cap + ", actual_poa = " + poa + ", actual_ghi = " + ghi + ", target_aop_pr = " + prTarget + "  where uploading_file_tracker_loss_id = " + _eachRow.uploading_file_tracker_loss_id + " AND site_id = " + site;
                    try
                    {
                        int result = await Context.ExecuteNonQry<int>(updQuery).ConfigureAwait(false);
                    }
                    catch (Exception ex)
                    {
                        string msg = "Error while updating tracker_loss, breakdown_tar_capacity, actual_poa & actual_gho due to Exception : " + ex.ToString();
                        //API_ErrorLog(msg);
                        throw new Exception("Failed to update tracker_loss, breakdown_tar_capacity, actual_poa & actual_ghi due to Exception : " + msg);
                        LogError(0, 1, 5, functionName, msg, backend);
                    }
                    totalGenLoss += gen_loss;
                    totalBreakdown_tracker_cap += breakdown_tracker_cap;
                    totalActualPOA += poa;
                    totalActualGHI += ghi;
                    totalprTarget += prTarget;

                }
                finalRes = 0;
                return finalRes;
            }
            catch(Exception e)
            {
                string msg = "Exception while executing CalculateTrackerLosses() function, due to : " + e.ToString();
                //API_ErrorLog(msg);
                LogError(0, 1, 5, functionName, msg, backend);

                return finalRes;
            }
            
        }
        internal async Task<List<SolarUploadingPyranoMeter1Min>> GetModuleTemperature(string site, string fromDate, string toDate)
        {
            string[] siteSplit;
            string filter = "";
            if (!string.IsNullOrEmpty(site))
            {
                siteSplit = site.Split(',');
                filter += " and site_id in (" + site + ") ";
            }
            string getTemp = " select date(date_time), sum(mod_temp)/count(mod_temp) as mod_temp from `uploading_pyranometer_15_min_solar` where avg_poa>0 " + filter + " and date(date_time) >='" + fromDate + "' and date(date_time) <= '" + toDate + "' group by date(date_time) ";
            List<SolarUploadingPyranoMeter1Min> temp_data = new List<SolarUploadingPyranoMeter1Min>();
            try
            {
                temp_data = await Context.GetData<SolarUploadingPyranoMeter1Min>(getTemp).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                string msg = e.Message;
            }
            return temp_data;
        }

        // Actual vs Expected Function 
        internal async Task<List<SolarExpectedvsActual>> GetSolarExpectedReportOld(string site, string fromDate, string toDate, string prType)
        {     
            bool GetFrom15Min = false;
            bool CombineReport = false;
            string todate1 = "";
            string fromdate1 = "";
            if (Convert.ToDateTime(Convert.ToDateTime(fromDate).ToString("yyyy-MM-dd")) < Convert.ToDateTime("2023-10-01"))
            {
                if (Convert.ToDateTime(Convert.ToDateTime(fromDate).ToString("yyyy-MM-dd")) < Convert.ToDateTime("2023-10-01") && Convert.ToDateTime(Convert.ToDateTime(toDate).ToString("yyyy-MM-dd")) > Convert.ToDateTime("2023-10-01"))
                {
                    todate1 = "2023-09-30";
                    fromdate1 = "2023-10-01";
                   CombineReport = true;
                }

               GetFrom15Min = true;
            }
            string functionName = "GetSolarExpectedReport";

            DateTime startTime = DateTime.Now;
            DateTime timeStamp = DateTime.Now;
            //API_InformationLog("\n---------------------------------------------Performance Check for Solar Expected vs Actual---------------------------------------------------------");
            string info  = ("GetSolarExpectedReport function called at " + timeStamp + " for date range from " + fromDate + " to " + toDate);
            LogInfo(0, 1, 5, functionName, info, backend);

            string filter = "";
            string filter1 = "";
            string filter2 = "";
            string filter3 = "";
            int chkfilter = 0;
            if (!string.IsNullOrEmpty(fromDate) && !string.IsNullOrEmpty(toDate))
            {
                chkfilter = 1;
                filter += " where t1.date>='" + fromDate + "' and t1.date<='" + toDate + "' ";
                if (CombineReport)
                {
                    filter1 += "t1.date BETWEEN '" + fromDate + "' and '" + todate1 + "'";
                    filter2 += "t1.date BETWEEN '" + fromdate1 + "' and '" + toDate + "'";
                    filter3 += "t1.date BETWEEN '" + fromDate  + "' and '" + toDate + "'";
                }
            }
            if (!string.IsNullOrEmpty(site))
            {
                if (chkfilter == 0) filter += " where ";
                else
                {
                    filter += " and ";
                }
                if (CombineReport)
                {
                    filter3 += " and t1.site_id in (" + site + ") ";
                }
                else
                {
                    filter += " t1.site_id in (" + site + ") ";
                }
                   
            }
            
            string qry1 = "";
            if (prType == "AOP")
            {
                //qry1 = "select site, t1.site_id, t1. date, pr, toplining_pr, sum(inv_kwh_afterloss) as inv_kwh, sum(t1.ghi) as ghi, sum(t1.poa) as poa, avg(t1.ma) as ma, avg(t1.iga) as iga, avg(t1.ega) as ega,sum(usmh) as usmh,sum(smh) as smh,sum(oh) as oh,sum(igbdh) as igbdh,sum(egbdh) as egbdh,sum(load_shedding) as load_shedding,sum(total_losses) as total_losses,sum(t2.gen_nos) as target from daily_gen_summary_solar t1 left join daily_target_kpi_solar t2 on t1.site_id = t2.site_id and t1.date = t2.date " + filter +                    " group by t1.site, t1.date ";

                //SUM(P_exp_degraded)/60 for 1 min data and SUM(P_exp_degraded)/4 for15 min data.
                if (GetFrom15Min)
                {
                    if (CombineReport)
                    {
                        qry1 = "SELECT t2.pr,t2.toplining_PR,t1.site,t1.site_id,t1.date,SUM(t1.inv_kwh_afterloss) AS inv_kwh, SUM(t1.ghi) AS ghi,SUM(t1.poa) AS poa,AVG(t1.ma) AS ma,AVG(t1.iga) AS iga,AVG(t1.ega) AS ega,SUM(t1.usmh) AS usmh,SUM(t1.smh) AS smh,SUM(t1.oh) AS oh,SUM(t1.igbdh) AS igbdh,SUM(t1.egbdh) AS egbdh,SUM(t1.load_shedding) AS load_shedding,SUM(t1.total_losses) AS total_losses,t2.gen_nos AS target, CASE WHEN  " +  filter1 + " THEN(SELECT SUM(P_exp_degraded) / 4 FROM `uploading_pyranometer_15_min_solar` WHERE site_id = t1.site_id AND import_batch_id = t1.import_batch_id) WHEN  " + filter2 + " THEN(SELECT SUM(P_exp_degraded) / 60 FROM `uploading_pyranometer_1_min_solar` WHERE site_id = t1.site_id AND import_batch_id = t1.import_batch_id) ELSE NULL END AS Pexpected FROM daily_gen_summary_solar t1 LEFT JOIN daily_target_kpi_solar t2 ON t1.site_id = t2.site_id AND t2.date=t1.date  WHERE  " + filter3 + " GROUP BY t1.site_id, t1.date";

                       // qry1 = "SELECT t2.pr,t2.toplining_PR,t1.site_id,t1.date,SUM(t1.inv_kwh_afterloss) AS inv_kwh,SUM(t1.ghi) AS ghi,SUM(t1.poa) AS poa,AVG(t1.ma) AS ma,AVG(t1.iga) AS iga,AVG(t1.ega) AS ega,SUM(t1.usmh) AS usmh,SUM(t1.smh) AS smh,SUM(t1.oh) AS oh,SUM(t1.igbdh) AS igbdh,SUM(t1.egbdh) AS egbdh,SUM(t1.load_shedding) AS load_shedding,SUM(t1.total_losses) AS total_losses,t2.gen_nos AS target, CASE WHEN  " + filter1 + " THEN(SELECT SUM(P_exp_degraded) / 4 FROM `uploading_pyranometer_15_min_solar` WHERE site_id = t1.site_id AND import_batch_id = t1.import_batch_id) WHEN  " + filter2 + " THEN(SELECT SUM(P_exp_degraded) / 60 FROM `uploading_pyranometer_1_min_solar` WHERE site_id = t1.site_id AND import_batch_id = t1.import_batch_id) ELSE NULL END AS Pexpected FROM daily_gen_summary_solar t1 LEFT JOIN daily_target_kpi_solar t2 ON t1.site_id = t2.site_id AND t1.date = t2.date WHERE  " + filter3 + " GROUP BY t1.site_id, t1.date";

                    
                    }
                    else
                        {
                        qry1 = "select t2.pr, t2.toplining_PR, t1.site, t1.site_id, t1.date, sum(inv_kwh_afterloss) as inv_kwh, sum(t1.ghi) as ghi, sum(t1.poa) as poa, avg(t1.ma)as ma,avg(t1.iga) as iga, avg(t1.ega) as ega,sum(usmh) as usmh,sum(smh) as smh,sum(oh) as oh,sum(igbdh) as igbdh,sum(egbdh) as egbdh,sum(load_shedding) as load_shedding,sum(total_losses) as total_losses,t2.gen_nos as target, (SELECT SUM(P_exp_degraded)/4 FROM `uploading_pyranometer_15_min_solar` WHERE site_id = t1.site_id AND import_batch_id = t1.import_batch_id) AS Pexpected from daily_gen_summary_solar t1 left join daily_target_kpi_solar t2 on t1.site_id = t2.site_id and t1.date = t2.date " + filter + " group by t1.site, t1.date ";

                    }

                 }
                else
                {
                    qry1 = "select t2.pr, t2.toplining_PR, t1.site, t1.site_id, t1.date, sum(inv_kwh_afterloss) as inv_kwh, sum(t1.ghi) as ghi, sum(t1.poa) as poa, avg(t1.ma)as ma,avg(t1.iga) as iga, avg(t1.ega) as ega,sum(usmh) as usmh,sum(smh) as smh,sum(oh) as oh,sum(igbdh) as igbdh,sum(egbdh) as egbdh,sum(load_shedding) as load_shedding,sum(total_losses) as total_losses,t2.gen_nos as target, (SELECT SUM(P_exp_degraded)/60 FROM `uploading_pyranometer_1_min_solar` WHERE site_id = t1.site_id AND import_batch_id = t1.import_batch_id) AS Pexpected from daily_gen_summary_solar t1 left join daily_target_kpi_solar t2 on t1.site_id = t2.site_id and t1.date = t2.date " + filter + " group by t1.site, t1.date ";
                }
            }
            else if (prType == "toplining")
            {
                if (GetFrom15Min)
                {
                    if (CombineReport)
                    {
                        qry1 = "SELECT  t2.pr,t2.toplining_PR,t1.site,t1.site_id,t1.date,SUM(t1.inv_kwh_afterloss) AS inv_kwh,SUM(t1.ghi) AS ghi, SUM(t1.poa) AS poa, AVG(t1.ma) AS ma,AVG(t1.iga) AS iga, AVG(t1.ega) AS ega,sum(usmh)/t2.pr*t2.toplining_PR as usmh,sum(smh)/t2.pr*t2.toplining_PR as smh,sum(oh)/t2.pr*t2.toplining_PR as oh,sum(igbdh)/t2.pr*t2.toplining_PR as igbdh,sum(egbdh)/t2.pr*t2.toplining_PR as egbdh,sum(load_shedding)/t2.pr*t2.toplining_PR as load_shedding,sum(total_losses)/t2.pr*t2.toplining_PR as total_losses,t2.gen_nos as target, CASE WHEN  " + filter1 + " THEN(SELECT SUM(P_exp_degraded) / 4 FROM `uploading_pyranometer_15_min_solar` WHERE site_id = t1.site_id AND import_batch_id = t1.import_batch_id) WHEN  " + filter2 + " THEN(SELECT SUM(P_exp_degraded) / 60 FROM `uploading_pyranometer_1_min_solar` WHERE site_id = t1.site_id AND import_batch_id = t1.import_batch_id) ELSE NULL END AS Pexpected FROM daily_gen_summary_solar t1 LEFT JOIN daily_target_kpi_solar t2 ON t1.site_id = t2.site_id AND t1.date = t2.date WHERE  " + filter3 + " GROUP BY t1.site_id, t1.date";

                        ///qry1 = "SELECT  t2.pr,t2.toplining_PR,t1.site_id,t1.date,SUM(t1.inv_kwh_afterloss) AS inv_kwh,SUM(t1.ghi) AS ghi, SUM(t1.poa) AS poa, AVG(t1.ma) AS ma,AVG(t1.iga) AS iga, AVG(t1.ega) AS ega,sum(usmh)/t2.pr*t2.toplining_PR as usmh,sum(smh)/t2.pr*t2.toplining_PR as smh,sum(oh)/t2.pr*t2.toplining_PR as oh,sum(igbdh)/t2.pr*t2.toplining_PR as igbdh,sum(egbdh)/t2.pr*t2.toplining_PR as egbdh,sum(load_shedding)/t2.pr*t2.toplining_PR as load_shedding,sum(total_losses)/t2.pr*t2.toplining_PR as total_losses,t2.gen_nos as target, CASE WHEN t1.date BETWEEN " + filter1 + " THEN(SELECT SUM(P_exp_degraded) / 4 FROM `uploading_pyranometer_15_min_solar` WHERE site_id = t1.site_id AND import_batch_id = t1.import_batch_id) WHEN t1.date BETWEEN " + filter2 + " THEN(SELECT SUM(P_exp_degraded) / 60 FROM `uploading_pyranometer_1_min_solar` WHERE site_id = t1.site_id AND import_batch_id = t1.import_batch_id) ELSE NULL END AS Pexpected FROM daily_gen_summary_solar t1 LEFT JOIN daily_target_kpi_solar t2 ON t1.site_id = t2.site_id AND t1.date = t2.date WHERE t1.date BETWEEN " + filter + " GROUP BY t1.site_id,t1.date";
                    }
                    else
                    {
                        qry1 = "select t2.pr, t2.toplining_PR, t1.site, t1.site_id, t1.date, sum(inv_kwh_afterloss) as inv_kwh, sum(t1.ghi) as ghi, sum(t1.poa) as poa, avg(t1.ma)as ma,avg(t1.iga) as iga, avg(t1.ega) as ega,sum(usmh)/t2.pr*t2.toplining_PR as usmh,sum(smh)/t2.pr*t2.toplining_PR as smh,sum(oh)/t2.pr*t2.toplining_PR as oh,sum(igbdh)/t2.pr*t2.toplining_PR as igbdh,sum(egbdh)/t2.pr*t2.toplining_PR as egbdh,sum(load_shedding)/t2.pr*t2.toplining_PR as load_shedding,sum(total_losses)/t2.pr*t2.toplining_PR as total_losses,t2.gen_nos as target, (SELECT SUM(P_exp_degraded)/4 FROM `uploading_pyranometer_15_min_solar` WHERE site_id = t1.site_id AND import_batch_id = t1.import_batch_id) AS Pexpected from daily_gen_summary_solar t1 left join daily_target_kpi_solar t2 on t1.site_id = t2.site_id and t1.date = t2.date " + filter + " group by t1.site, t1.date ";
                    }
                }
                else
                {
                    qry1 = "select t2.pr, t2.toplining_PR, t1.site, t1.site_id, t1.date, sum(inv_kwh_afterloss) as inv_kwh, sum(t1.ghi) as ghi, sum(t1.poa) as poa, avg(t1.ma)as ma,avg(t1.iga) as iga, avg(t1.ega) as ega,sum(usmh)/t2.pr*t2.toplining_PR as usmh,sum(smh)/t2.pr*t2.toplining_PR as smh,sum(oh)/t2.pr*t2.toplining_PR as oh,sum(igbdh)/t2.pr*t2.toplining_PR as igbdh,sum(egbdh)/t2.pr*t2.toplining_PR as egbdh,sum(load_shedding)/t2.pr*t2.toplining_PR as load_shedding,sum(total_losses)/t2.pr*t2.toplining_PR as total_losses,t2.gen_nos as target, (SELECT SUM(P_exp_degraded)/60 FROM `uploading_pyranometer_1_min_solar` WHERE site_id = t1.site_id AND import_batch_id = t1.import_batch_id) AS Pexpected from daily_gen_summary_solar t1 left join daily_target_kpi_solar t2 on t1.site_id = t2.site_id and t1.date = t2.date " + filter + " group by t1.site, t1.date ";
                }
                

                //qry1 = "select t2.pr, t2.toplining_PR, site, t1.site_id, t1.date, sum(inv_kwh_afterloss) as inv_kwh, sum(t1.ghi) as ghi, sum(t1.poa) as poa, avg(t1.ma)as ma,avg(t1.iga) as iga, avg(t1.ega) as ega,sum(usmh)/t2.pr*t2.toplining_PR as usmh,sum(smh)/t2.pr*t2.toplining_PR as smh,sum(oh)/t2.pr*t2.toplining_PR as oh,sum(igbdh)/t2.pr*t2.toplining_PR as igbdh,sum(egbdh)/t2.pr*t2.toplining_PR as egbdh,sum(load_shedding)/t2.pr*t2.toplining_PR as load_shedding,sum(total_losses)/t2.pr*t2.toplining_PR as total_losses, t2.gen_nos as target from daily_gen_summary_solar t1 left join daily_target_kpi_solar t2 on t1.site_id = t2.site_id and t1.date = t2.date " + filter + " group by t1.site, t1.date ";

            }
            List<SolarExpectedvsActual> data = new List<SolarExpectedvsActual>();
            DateTime endfunction = DateTime.Now;
            TimeSpan difference = endfunction - timeStamp;
            info = ("First Query built on " + endfunction + ". Time Spent : " + difference);
            LogInfo(0, 1, 5, functionName, info, backend);
            try
            {
                data = await Context.GetData<SolarExpectedvsActual>(qry1).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                string msg = "Exception while getting data from daily_gen_summary and daily_target_kpi_solar table, due to : " + e.ToString();
                //API_ErrorLog(msg);
                LogError(0, 1, 5, functionName, msg, backend);

            }
            timeStamp = DateTime.Now;
            difference = timeStamp - endfunction;
            info = ("First Query executed on : " + timeStamp + ". Time Spent : " + difference);
            LogInfo(0, 1, 5, functionName, info, backend);

            string viewQry = "create or replace view expected_temp_view as SELECT t1.date,t3.site_master_solar_id as site_id, t3.site,t3.spv,(t3.ac_capacity*1000) as capacity,SUM(t1.inv_kwh) as kwh,t2.LineLoss,SUM(t1.inv_kwh)-SUM(t1.inv_kwh)*(t2.LineLoss/100) as kwh_afterloss,((SUM(t1.inv_kwh)-SUM(t1.inv_kwh)*(t2.LineLoss/100))/((t3.ac_capacity*1000)*24))*100 as plf_afterloss FROM `daily_gen_summary_solar` as t1 left join monthly_line_loss_solar as t2 on t2.site_id= t1.site_id and month_no=MONTH(t1.date) and year = year(t1.date) left join site_master_solar as t3 on t3.site_master_solar_id = t1.site_id group by t1.date ,t1.site";
            try
            {
                await Context.ExecuteNonQry<int>(viewQry).ConfigureAwait(false);
                endfunction = DateTime.Now;
                difference = endfunction - timeStamp;
                info = ("Second Query view create or replace executed on : " + endfunction + ". Time Spent : " + difference);
                LogInfo(0, 1, 5, functionName, info, backend);
            }
            catch (Exception e)
            {
                string msg = "Exception while creating temp view, due to : " + e.ToString();
                //API_ErrorLog(msg);
                LogError(0, 1, 5, functionName, msg, backend);

            }

            string viweFetchQry = "SELECT date,site, kwh_afterloss as inv_kwh, plf_afterloss as plant_kwh FROM `expected_temp_view` where date between '" + fromDate + "' and '" + toDate + "' and site_id IN(" + site + ");";
            List<SolarExpectedvsActual> newdata = new List<SolarExpectedvsActual>();
            try
            {
                newdata = await Context.GetData<SolarExpectedvsActual>(viweFetchQry).ConfigureAwait(false);
                timeStamp = DateTime.Now;
                difference = timeStamp - endfunction;
                info = ("Third Query Select from view executed on : " + timeStamp + ". Time Spent : " + difference);
                LogInfo(0, 1, 5, functionName, info, backend);
            }
            catch(Exception e)
            {
                string msg = "Exception while fetching records from expected_temp_view, due to : " + e.ToString();
                //API_ErrorLog(msg);
                LogError(0, 1, 5, functionName, msg, backend);

            }

            try
            {
                //Add time stamp to get time for each query.
                foreach (SolarExpectedvsActual _dataElement in data)
                {
                    //string site_id = _dataElement.site_id.ToString();
                    //string date = Convert.ToDateTime(_dataElement.date).ToString("yyyy-MM-dd");
                    //// Convert.ToDateTime(dr["Date"]).ToString("yyyy-MM-dd")

                    //string getPower = "  select sum(P_exp_degraded) as P_exp from `uploading_pyranometer_15_min_solar` where site_id = " + site_id + " and date(date_time) = date('" + date + "') ";
                    //List<SolarUploadingPyranoMeter1Min> data1min = new List<SolarUploadingPyranoMeter1Min>();
                    //try
                    //{
                    //    data1min = await Context.GetData<SolarUploadingPyranoMeter1Min>(getPower).ConfigureAwait(false);
                    //    _dataElement.Pexpected = (data1min[0].P_exp / 4);

                    //}
                    //catch (Exception e)
                    //{
                    //    string msg = e.Message;
                    //}

                    try
                    {
                        foreach(var _actualData in newdata)
                        {
                            if (_dataElement.date == _actualData.date && _dataElement.site == _actualData.site)
                            {
                                _dataElement.inv_kwh = _actualData.inv_kwh;
                            }
                        }
                    }
                    catch(Exception e)
                    {
                        string msg = "Exception while adding actual value to the main list, due to : " + e.ToString();
                        //API_ErrorLog(msg);
                        LogError(0, 1, 5, functionName, msg, backend);

                    }
                }
                endfunction = DateTime.Now;
                difference = endfunction - timeStamp;
                info = ("Foreach loop executed on : " + endfunction + ". Time Spent : " + difference );
                LogInfo(0, 1, 5, functionName, info, backend);
            }
            catch (Exception e)
            {
                string msg = "Exception while inserting data into main list, due to : " + e.ToString();
                //API_ErrorLog(msg);
                LogError(0, 1, 5, functionName, msg, backend);

            }
            timeStamp = DateTime.Now;
            difference = timeStamp - startTime;
            info = ("Function Executed completely on : " + timeStamp + ". Time Spent on complete function : " + difference );
            LogInfo(0, 1, 5, functionName, info, backend);
            //API_InformationLog("\n---------------------------------------------Performance Check End---------------------------------------------------------");
            return data;
        }
        internal async Task<int> getTemperatureCorrectedPR(string site, string fromDate, string toDate)
        {
            int finalRes = 1301;
            string functionName = "getTemperatureCorrectedPR"; 

            List<TemperatureCorrectedPR> returnData = new List<TemperatureCorrectedPR>();
            try
            {
                string[] fromDateSplt = fromDate.Split('-');
                string[] toDateSplt = toDate.Split('-');
                DateTime start = new DateTime(Int32.Parse(fromDateSplt[0]), Int32.Parse(fromDateSplt[1]), Int32.Parse(fromDateSplt[2]));
                DateTime end = new DateTime(Int32.Parse(toDateSplt[0]), Int32.Parse(toDateSplt[1]), Int32.Parse(toDateSplt[2]));
                returnData.Add(new TemperatureCorrectedPR());
                double avg_POA = 0;
                while (start <= end)
                {
                    string datestring = start.ToString("yyyy-MM-dd");
                    string qry = "select sum(`temp_corrected_pr`) as mod_tXavg_poa from `uploading_pyranometer_15_min_solar` where site_id = " + site + " and DATE(date_time)='" + datestring + "' ";

                    string qryPOA = "Select sum(avg_poa) as avg_poa from uploading_pyranometer_15_min_solar where site_id = " + site + " and date(date_time) = '" + datestring + "'";
                    List<SolarUploadingPyranoMeter1Min> _SolarUploadingPyranoMeter1Min = new List<SolarUploadingPyranoMeter1Min>();
                    try
                    {
                        _SolarUploadingPyranoMeter1Min = await Context.GetData<SolarUploadingPyranoMeter1Min>(qryPOA).ConfigureAwait(false);
                        finalRes++;
                    }
                    catch(Exception e)
                    {
                        string msg = "Exception while fetching records from uploading_pyranometer_15_min_solar, due to : " + e.ToString();
                        //API_ErrorLog(msg);
                        LogError(0, 1, 5, functionName, msg, backend);

                        return finalRes;
                    }
                    double sum_POA = 0;
                    foreach (SolarUploadingPyranoMeter1Min SolarPyranoMeterData in _SolarUploadingPyranoMeter1Min)
                    {
                        sum_POA = SolarPyranoMeterData.avg_poa;
                        avg_POA = SolarPyranoMeterData.avg_poa / 4000;//change 4000
                    }


                    string qry2 = "select sum(mod_temp)/count(mod_temp) as mod_temp  from `uploading_pyranometer_15_min_solar` where site_id = " + site + " and DATE(date_time)='" + datestring + "' and mod_temp>0 ";

                    List<SolarUploadingPyranoMeter1Min> data1min = new List<SolarUploadingPyranoMeter1Min>();
                    List<SolarUploadingPyranoMeter1Min> mod_temp = new List<SolarUploadingPyranoMeter1Min>();
                    try
                    {
                        data1min = await Context.GetData<SolarUploadingPyranoMeter1Min>(qry).ConfigureAwait(false);
                        mod_temp = await Context.GetData<SolarUploadingPyranoMeter1Min>(qry2).ConfigureAwait(false);
                        finalRes++;
                    }
                    catch (Exception e)
                    {
                        string msg = "Exception while fetching records from uploading_pyranometer_15_min table, due to : " + e.ToString();
                        //API_ErrorLog(msg);
                        LogError(0, 1, 5, functionName, msg, backend);

                        return finalRes;
                    }
                    data1min[0].actModWtTemp = data1min[0].mod_tXavg_poa / sum_POA;
                    returnData[0].actModWtTemp = data1min[0].actModWtTemp;

                    data1min[0].mod_temp = mod_temp[0].mod_temp;
                    returnData[0].act_avg_mod_temp = data1min[0].mod_temp;


                    //Hourly estimated
                    string qry3 = "select sum(`temp_corrected_pr`) as mod_tXavg_poa, sum(glob_inc) as glob_inc from `uploading_file_estimated_hourly_loss` where site_id = " + site + " and fy_date='" + datestring + "' ";
                    string qry4 = "select sum(t_array)/count(t_array) as t_array  from `uploading_file_estimated_hourly_loss` where site_id = " + site + " and fy_date='" + datestring + "' and t_array>0 ";
                    List<estimated1Hour> est1HourData = new List<estimated1Hour>();
                    List<estimated1Hour> est1HourDataModTemp = new List<estimated1Hour>();
                    try
                    {
                        est1HourData = await Context.GetData<estimated1Hour>(qry3).ConfigureAwait(false);
                        est1HourDataModTemp = await Context.GetData<estimated1Hour>(qry4).ConfigureAwait(false);
                        finalRes++;
                    }
                    catch (Exception e)
                    {
                        string msg = "Exception while fetching records from uploading_file_estimated_hourly_loss, due to : " + e.ToString();
                        //API_ErrorLog(msg);
                        LogError(0, 1, 5, functionName, msg, backend);

                        return finalRes;
                    }
                    if (est1HourData[0].mod_tXavg_poa == 0 && est1HourData[0].glob_inc == 0)
                    {
                        est1HourData[0].estModTemp = 0;
                    }
                    else
                    {
                        est1HourData[0].estModTemp = est1HourData[0].mod_tXavg_poa / est1HourData[0].glob_inc;
                    }
                    returnData[0].estModTemp = est1HourData[0].estModTemp;


                    est1HourData[0].t_array = est1HourDataModTemp[0].t_array;
                    returnData[0].est_avg_mod_temp = est1HourData[0].t_array;

                    //string qry5 = "SELECT t1.date,t3.site,sum(t1.plant_act)+sum(t1.total_losses) as plant_kwh,(t3.dc_capacity*1000) as dc_capacity, SUM(t1.inv_act) as act_kwh,t2.LineLoss as lineloss,(SUM(t1.inv_act)-SUM(t1.inv_act)*(t2.LineLoss/100))+sum(t1.total_losses) as act_kwh_afterloss FROM `uploading_file_generation_solar` as t1 left join monthly_line_loss_solar as t2 on t2.site_id= t1.site_id and month_no=MONTH(t1.date) left join site_master_solar as t3 on t3.site_master_solar_id = t1.site_id where t1.site_id = " + site + " and t1.date = '" + datestring + "' group by t1.date ,t1.site";
                    string qry5 = "SELECT t1.date,t3.site,sum(t1.plant_act)+sum(t1.total_losses) as plant_kwh,(t3.dc_capacity*1000) as dc_capacity, SUM(t1.inv_act) as act_kwh,t2.LineLoss as lineloss,(SUM(t1.inv_act)-SUM(t1.inv_act)*(t2.LineLoss/100))+sum(t1.total_losses) as act_kwh_afterloss FROM `uploading_file_generation_solar` as t1 left join monthly_line_loss_solar as t2 on t2.site_id= t1.site_id and month_no=MONTH(t1.date) and year=(t1.date)  left join site_master_solar as t3 on t3.site_master_solar_id = t1.site_id where t1.site_id = " + site + " and t1.date = '" + fromDate + "' group by t1.date ,t1.site;";
                    List<SolarPerformanceReports1> siteData = new List<SolarPerformanceReports1>();
                    try
                    {
                        siteData = await Context.GetData<SolarPerformanceReports1>(qry5).ConfigureAwait(false);
                        finalRes++;
                    }
                    catch (Exception e)
                    {
                        string msg = "Exception while fetching records from daily_gen_summary_solar table, due to : " + e.ToString();
                        //API_ErrorLog(msg);
                        LogError(0, 1, 5, functionName, msg, backend);

                        return finalRes;
                    }

                    string qry6 = "select * from `uploading_file_pvsyst_loss` where site_id = " + site + " and month_no >= MONTH('" + datestring + "') and month_no<= MONTH('" + datestring + "')";
                    List<SolarPowerCalc> pvsystdata = new List<SolarPowerCalc>();
                    try
                    {
                        pvsystdata = await Context.GetData<SolarPowerCalc>(qry6).ConfigureAwait(false);
                        finalRes = 11010;
                    }
                    catch (Exception e)
                    {
                        string msg = "Exception occured while fetching records from uploading_file_pvsyst_loss table. " + e.ToString();
                        //API_ErrorLog( msg);
                        LogError(0, 1, 5, functionName, msg, backend);

                        return finalRes;
                    }
                    try
                    {
                        //returnData[0].plantTempPR = siteData[0].plant_kwh / (avg_POA * siteData[0].dc_capacity * (1 - pvsystdata[0].alpha * (returnData[0].actModWtTemp - returnData[0].estModTemp)));

                        //returnData[0].jmrTempPR = siteData[0].act_kwh_afterloss / (avg_POA * siteData[0].dc_capacity * (1 - pvsystdata[0].alpha * (returnData[0].actModWtTemp - returnData[0].estModTemp)));
                        
                        returnData[0].jmrTempPR = (avg_POA * siteData[0].dc_capacity * (1 - pvsystdata[0].alpha * (returnData[0].actModWtTemp - returnData[0].estModTemp)));

                        start = start.AddDays(1);
                        finalRes++;
                    }
                    catch(Exception e)
                    {
                        string msg = "Exception while calculating plant temperature corrected pr in getTemperatureCorrectedPR function, due to : " + e.ToString();
                        //API_ErrorLog(msg);
                        LogError(0, 1, 5, functionName, msg, backend);

                        return finalRes;
                    }

                }

                //Insert the calculated data into database temperature corrected PR table.
                string deleteQry = "DELETE FROM temperature_corrected_pr WHERE site_id IN(" + site + ") AND date >= '" + fromDate + "' AND date <= '" + toDate + "';";
                string insertQry = "INSERT INTO temperature_corrected_pr(site_id, date, actModWtTemp, act_avg_mod_temp, estModTemp, est_avg_mod_temp, jmrTempPR) VALUES (" + site + ", '" + fromDate + "', " + returnData[0].actModWtTemp + ", " + returnData[0].act_avg_mod_temp + ", " + returnData[0].estModTemp + ", " + returnData[0].est_avg_mod_temp + ", " + returnData[0].jmrTempPR + ");";
                int deleteRes = 0;
                int insertRes = 0;
                try
                {
                    deleteRes = await Context.ExecuteNonQry<int>(deleteQry).ConfigureAwait(false);
                    finalRes++;
                }
                catch (Exception e)
                {
                    string msg = "Exception while deleting records from temperature _corrected_pr table from database, Due to : " + e.ToString();
                    //API_ErrorLog(msg);
                    LogError(0, 1, 5, functionName, msg, backend);

                    return finalRes;
                }

                try
                {
                    insertRes = await Context.ExecuteNonQry<int>(insertQry).ConfigureAwait(false);
                    finalRes = 0;
                }
                catch (Exception e)
                {
                    string msg = "Exception while inserting data into temprtature_corrected_pr table, due to : " + e.ToString();
                    //API_ErrorLog(msg);
                    LogError(0, 1, 5, functionName, msg, backend);

                    return finalRes;
                }

            }
            catch(Exception e)
            {
                string msg = "Exception inside getTemperatureCorrectedPR() function due to : " + e.ToString();
                //API_ErrorLog(msg);
                LogError(0, 1, 5, functionName, msg, backend);

                return finalRes;
            }
            
            return finalRes;
            //finalRes = 0 : Complete failure.
            //finalRes = 1 : Exception while fetching records from uploading_pyranometer_15_min table.
            //finalRes = 2 : Exception while fetching records from uploading_file_estimated_hourly_loss.
            //finalRes = 3 : Exception while fetching records from daily_gen_summary_solar table.
            //finalRes = 4 : Exception occured while fetching records from uploading_file_pvsyst_loss table..
            //finalRes = 5 : Exception while deleting records from temperature _corrected_pr table from database.
            //finalRes = 6 : Exception while inserting data into temprtature_corrected_pr table.
            //finalRes = 7 : Successful.
        }

        internal async Task<int> TemperatureCorrectedPRCalc(string site, string fromDate, string toDate)
        {
            string functionName = "TemperatureCorrectedPRCalc";
            int finalRes = 1201;
            //string fromDay = "";
            //string fromMonth = "";
            //string fromYear = "";
            //string toDay = "";
            //string toMonth = "";
            //string toYear = "";
            DateTime start = new DateTime();
            DateTime end = new DateTime();
            try
            {
                start = Convert.ToDateTime(fromDate);
                end = Convert.ToDateTime(toDate);
                finalRes++;
            }
            catch(Exception e)
            {
                string msg = "Exception while converting dates, due to : " + e.ToString();
                //API_ErrorLog(msg);
                LogError(0, 1, 5, functionName, msg, backend);

                return finalRes;
            }

            string[] fromDateSplt = fromDate.Split('-');
            string[] toDateSplt = toDate.Split('-');
            //DateTime start = new DateTime(Int32.Parse(fromDateSplt[0]), Int32.Parse(fromDateSplt[1]), Int32.Parse(fromDateSplt[2]));
            //DateTime end = new DateTime(Int32.Parse(toDateSplt[0]), Int32.Parse(toDateSplt[1]), Int32.Parse(toDateSplt[2]));

            while (start <= end)
            {
                string datestring = start.ToString("yyyy-MM-dd");
                //string qry3 = "select * from `uploading_pyranometer_15_min_solar` where site_id = " + site + " and DATE(date_time)='"+datestring+"' ";

                //List<SolarUploadingPyranoMeter1Min> data1min = new List<SolarUploadingPyranoMeter1Min>();
                //foreach (SolarUploadingPyranoMeter1Min _dataElement in data1min)
                //{

                //}
                string updateQry = " update `uploading_pyranometer_15_min_solar` set `temp_corrected_pr` = avg_poa * mod_temp where site_id = " + site + " and date(date_time) = '" + datestring + "' ";
                try
                {
                    await Context.ExecuteNonQry<int>(updateQry).ConfigureAwait(false);
                    finalRes++;
                }
                catch (Exception e)
                {
                    string msg = "Exception while executing update query of uploading_pyranometer_15_min_solar , due to : " + e.ToString();
                    //API_ErrorLog(msg);
                    LogError(0, 1, 5, functionName, msg, backend);

                    return finalRes;
                }
                string updateQry1Hour = " update `uploading_file_estimated_hourly_loss` set `temp_corrected_pr` = t_array*glob_inc where site_id = " + site + " and fy_date= '" + datestring + "'";
                try
                {
                    await Context.ExecuteNonQry<int>(updateQry1Hour).ConfigureAwait(false);
                    finalRes = 0;
                }
                catch (Exception e)
                {
                    string msg = "Exception while executing update query of uploading_file_estimated_hourly_loss, due to : " + e.ToString();
                    return finalRes;
                }



                start = start.AddDays(1);
            }

            //finalRes = 0 : Date conversion error .
            //finalRes = 1 : Exception while updating data into pyranometer 15 min.
            //finalRes = 2 : Exception while updating data into estimated_hourly_loss table.
            //finalRes = 3 : Function successfully ended.

            return finalRes;
        }
        internal async Task<int> PowerExpected(string site, string fromDate, string toDate, string type, string months, string fy)
        {
            string functionName = "PowerExpected";
            int finalRes = 1501;
            double Pexpected = 0;
            List<SolarPowerCalcReturn> result = new List<SolarPowerCalcReturn>();
            //Get Loss Factor Constants
            try
            {
                GetFinancialAndCurrentYear(fromDate, out int financialYear, out int currentYear);
                int fyn = financialYear;
                int cy = currentYear;
                string qry1 = "";
                if (type == "Daily")
                {
                    qry1 = "select * from `uploading_file_pvsyst_loss` where site_id = " + site + " and month_no >= MONTH('" + fromDate + "') and month_no<= MONTH('" + toDate + "') and year = '" + fyn + "';";
                }
                else if (type == "Monthly")
                {
                    qry1 = "select * from `uploading_file_pvsyst_loss` where site_id = " + site + " and month_no in (" + months + ") and fy = '" + fy + "'";
                }
                else if (type == "Yearly")
                {
                    string[] yearFY = fromDate.Split('-');
                    string[] endYearFY = toDate.Split('-');
                    qry1 = "select * from `uploading_file_pvsyst_loss` where site_id = " + site + "  and fy = '" + yearFY[0] + "-" + endYearFY[0].Substring(2, 2) + "'";
                }
                List<SolarPowerCalc> data = new List<SolarPowerCalc>();
                try
                {
                    data = await Context.GetData<SolarPowerCalc>(qry1).ConfigureAwait(false);
                }
                catch (Exception e)
                {
                    string msg = e.ToString();
                    throw new Exception("Exception occured in power expected function. " + msg);
                    LogError(0, 1, 5, functionName, msg, backend);

                }
                //Get Site Data
                List<SolarSiteMaster> siteData = new List<SolarSiteMaster>();
                string qry2 = "select dc_capacity, ac_capacity, doc as commissioning_date from `site_master_solar` where site_master_solar_id = " + site;
                try
                {
                    siteData = await Context.GetData<SolarSiteMaster>(qry2).ConfigureAwait(false);
                }
                catch (Exception e)
                {
                    string msg = "Exception while fetching records from site_master_solar, due to : " +  e.ToString();
                    //API_ErrorLog(msg);
                    LogError(0, 1, 5, functionName, msg, backend);

                }

                foreach (SolarPowerCalc _dataElement in data)
                {
                    _dataElement.Loss_factor = 1 - ((1 + _dataElement.near_sheding) * (1 + _dataElement.iam_factor) * (1 + _dataElement.soiling_factor) * (1 + _dataElement.pv_loss) * (1 + _dataElement.lid) * (1 + _dataElement.array_missmatch) * (1 + _dataElement.dc_ohmic) * (1 + _dataElement.conversion_loss) * (1 + _dataElement.plant_auxilary) * (1 + _dataElement.system_unavailability) * (1 + _dataElement.ac_ohmic) * (1 + _dataElement.far_shading) * (1 + _dataElement.module_quality_loss) * (1 + _dataElement.electrical_loss) * (1 + _dataElement.night_consumption) * (1 + _dataElement.idt));

                    //_dataElement.Loss_factor = 1 - ((1 + _dataElement.near_sheding / 100) * (1 + _dataElement.iam_factor / 100) * (1 + _dataElement.soiling_factor / 100) * (1 + _dataElement.pv_loss / 100) * (1 + _dataElement.lid / 100) * (1 + _dataElement.array_missmatch / 100) * (1 + _dataElement.dc_ohmic / 100) * (1 + _dataElement.conversion_loss / 100) * (1 + _dataElement.plant_auxilary / 100) * (1 + _dataElement.system_unavailability / 100) * (1 + _dataElement.ac_ohmic / 100) * (1 + _dataElement.external_transformer / 100));

                }
                DateTime commDate = new DateTime();
                DateTime end = new DateTime();
                DateTime start = new DateTime();
                try
                {
                    //2/21/2023
                    string date = Convert.ToDateTime(siteData[0].commissioning_date).ToString("yyyy-MM-dd");
                    string[] commissionDate = date.Split('-');
                    //commissionDate[0] = siteData[0].commissioning_date.ToString().Substring(0,1);
                    //commissionDate[1] = siteData[0].commissioning_date.ToString().Substring(2,4);
                    //commissionDate[2] = commissionDate[2].ToString().Substring(0,4);
                    DateTime commDate1 = new DateTime(Int32.Parse(commissionDate[0]), Int32.Parse(commissionDate[1]), Int32.Parse(commissionDate[2]));

                    commDate = commDate1;
                    DateTime end1 = new DateTime();
                    end = end1;
                    DateTime start1 = new DateTime();
                    start = start1;
                }
                catch (Exception e)
                {
                    string msg = e.Message;
                    throw new Exception("Exception from power Expected function : Exception " + msg);
                }
                if (type == "Daily")
                {
                    string[] fromDateSplt = fromDate.Split('-');
                    string[] toDateSplt = toDate.Split('-');
                    start = new DateTime(Int32.Parse(fromDateSplt[0]), Int32.Parse(fromDateSplt[1]), Int32.Parse(fromDateSplt[2]));
                    end = new DateTime(Int32.Parse(toDateSplt[0]), Int32.Parse(toDateSplt[1]), Int32.Parse(toDateSplt[2]));

                    while (start <= end)
                    {
                        double degradation = 0;
                        double dailyPexpected = 0;
                        SolarPowerCalc LossData = new SolarPowerCalc();
                        foreach (SolarPowerCalc _dataElement in data)
                        {
                            if (_dataElement.month_no == start.Month)
                            {
                                LossData = _dataElement;
                                break;
                            }
                        }
                        degradation = (((start - commDate).TotalDays - 1) * LossData.yoy_degradation) / 365; //start date - 1 day.

                        //Fetch from 15 min data.
                        string qry3 = "select *,date_time as stringdatetime from `uploading_pyranometer_15_min_solar` where site_id = " + site + " and DATE(date_time)='" + start.Year.ToString() + "-" + start.Month.ToString() + "-" + start.Day + "' order by date_time asc";

                        //to fetch from 1 mon data
                        //string qry3 = "select *,date_time as stringdatetime from `uploading_pyranometer_1_min_solar` where site_id = " + site + " and DATE(date_time)='" + start.Year.ToString() + "-" + start.Month.ToString() + "-" + start.Day + "' order by date_time asc";
                        List<SolarUploadingPyranoMeter1Min> data1min = new List<SolarUploadingPyranoMeter1Min>();
                        try
                        {
                            data1min = await Context.GetData<SolarUploadingPyranoMeter1Min>(qry3).ConfigureAwait(false);
                        }
                        catch (Exception e)
                        {
                            string msg = "Exception while fetching records from uploading_pyranometer_15_min_solar, due to : " +  e.ToString();
                            //API_ErrorLog(msg);
                            LogError(0, 1, 5, functionName, msg, backend);

                        }
                        foreach (SolarUploadingPyranoMeter1Min _temp1mindata in data1min)
                        {
                            if (_temp1mindata.avg_poa > 0)
                            {
                                /*double T_cell = _temp1mindata.mod_temp + (_temp1mindata.avg_poa / 1000) * LossData.tcnd;
                                double localPexpected = (siteData[0].dc_capacity * 1000) * (1 + degradation / 100) * (1 + LossData.Loss_factor / 100) * (1 - (LossData.alpha / 100 * (T_cell - LossData.tstc))) * (_temp1mindata.avg_poa / 1000);
                                dailyPexpected += localPexpected;*/
                                //double degradation = (((_temp1mindata.date - commDate).TotalDays) * LossData.yoy_degradation) / 365;
                                double T_cell = _temp1mindata.mod_temp + (_temp1mindata.avg_poa / 1000) * LossData.tcnd;
                                T_cell = Math.Round(T_cell, 5);
                                double localPexpected = (siteData[0].dc_capacity * 1000) * (_temp1mindata.avg_poa) * (1 - degradation) * (1 - LossData.Loss_factor) * (1 - (LossData.alpha * (T_cell - LossData.tstc))) / 1000;

                                if ((siteData[0].ac_capacity * 1000) < localPexpected)
                                {
                                    localPexpected = siteData[0].ac_capacity * 1000;

                                }
                                double localPexpectedDegraded = localPexpected * (1 + data[0].line_losses) * (1 + data[0].external_transformer);
                                dailyPexpected += localPexpected;

                                string updateQry = " update `uploading_pyranometer_15_min_solar` set P_exp = " + localPexpected + ", P_exp_degraded = " + localPexpectedDegraded + " where site_id = " + _temp1mindata.site_id + " and date_time = '" + _temp1mindata.stringdatetime.ToString("yyyy-MM-dd HH:mm:ss") + "' ";
                                try
                                {
                                    await Context.ExecuteNonQry<int>(updateQry).ConfigureAwait(false);
                                }
                                catch (Exception e)
                                {
                                    string msg = "Exception while updating calculated data in uploading_pyranometer_15_min_solar, due to :  " + e.ToString();
                                    //API_ErrorLog(msg);
                                    LogError(0, 1, 5, functionName, msg, backend);

                                }

                            }
                        }
                        SolarPowerCalcReturn obj = new SolarPowerCalcReturn();
                        obj.site_id = site;
                        obj.date = start.Date.ToString("yyyy-MM-dd");
                        //obj.Pexpected = dailyPexpected;
                        //Will be divide by 60 for 1 min data.
                        obj.Pexpected = (dailyPexpected / 4) * (1 + data[0].line_losses) * (1 + data[0].external_transformer);
                        result.Add(obj);
                        start = start.AddDays(1);
                    }
                }
                else if (type == "Monthly")
                {
                    string[] monthSplit = months.Split(',');
                    string[] fySplit = fy.Split('-');
                    foreach (string month in monthSplit)
                    {
                        //Monthly Pexpected
                        double MonthlyPexp = 0;
                        //Find Month's constants
                        SolarPowerCalc LossData = new SolarPowerCalc();
                        foreach (SolarPowerCalc _dataElement in data)
                        {
                            if (_dataElement.month_no == Int32.Parse(month))
                            {
                                LossData = _dataElement;
                                break;
                            }
                        }
                        //Each month in month-range
                        string year = Int32.Parse(month) > 3 ? fySplit[0] : fySplit[0].Substring(0, 2);

                        string qryMonth = "select t1.*, date(date_time) as date from `uploading_pyranometer_15_min_solar` t1 left join daily_gen_summary_solar t2 on t1.site_id = t2.site_id and date(date_time) = t2.date where month(date(date_time)) = " + month + " and year(date(date_time))='" + year + "' order by date_time asc;";
                        List<SolarUploadingPyranoMeter1Min> data1min = new List<SolarUploadingPyranoMeter1Min>();
                        try
                        {
                            data1min = await Context.GetData<SolarUploadingPyranoMeter1Min>(qryMonth).ConfigureAwait(false);
                        }
                        catch (Exception e)
                        {
                            string msg = "Exception while fetching records from uploading_pyranometer_15_min_solar, due to : " + e.ToString();
                            //API_ErrorLog(msg);
                            LogError(0, 1, 5, functionName, msg, backend);

                        }
                        foreach (SolarUploadingPyranoMeter1Min _temp1mindata in data1min)
                        {
                            if (_temp1mindata.avg_poa > 0)
                            {
                                double degradation = (((_temp1mindata.date - commDate).TotalDays) * LossData.yoy_degradation) / 365;
                                double T_cell = _temp1mindata.mod_temp + (_temp1mindata.avg_poa / 1000) * LossData.tcnd;
                                double localPexpected = (siteData[0].dc_capacity * 1000) * (_temp1mindata.avg_poa) * (1 - degradation / 100) * (1 + LossData.Loss_factor / 100) * (1 - (LossData.alpha / 100 * (T_cell - LossData.tstc)));
                                MonthlyPexp += localPexpected;
                                /*
                                double degradation = ((_temp1mindata.date - commDate).TotalDays - 365) * LossData.yoy_degradation / 365;

                                double T_cell = _temp1mindata.mod_temp + (_temp1mindata.avg_poa / 1000) * LossData.tcnd;
                                double localPexpected = (siteData[0].dc_capacity * 1000) * (1 + degradation / 100) * (1 + LossData.Loss_factor / 100) * (1 - (LossData.alpha / 100 * (T_cell - LossData.tstc))) * (_temp1mindata.avg_poa / 1000);
                                MonthlyPexp += localPexpected; */



                                string updateQry = " update `uploading_pyranometer_15_min_solar` set P_exp = " + localPexpected + " where site_id = " + _temp1mindata.site_id + " and date_time = '" + _temp1mindata.date_time + "' ";
                                try
                                {
                                    await Context.ExecuteNonQry<int>(updateQry).ConfigureAwait(false);
                                }
                                catch (Exception e)
                                {
                                    string msg = "Exception while updating calculated into uploading_pyranoter_15_min_solar table, due to : " + e.ToString();
                                    //API_ErrorLog(msg);
                                    LogError(0, 1, 5, functionName, msg, backend);

                                }
                            }
                        }
                        SolarPowerCalcReturn obj = new SolarPowerCalcReturn();
                        obj.site_id = site;
                        obj.month_no = Int32.Parse(month);
                        obj.year = Int32.Parse(year);
                        obj.Pexpected = MonthlyPexp;
                        result.Add(obj);
                    }
                }
                else if (type == "Yearly")
                {
                    double YearlyPexp = 0;
                    foreach (SolarPowerCalc _eachMonthData in data)
                    {
                        double MonthlyPexp = 0;
                        int month_no = _eachMonthData.month_no;
                        string[] fDateSplit = fromDate.Split('-');
                        string[] tDateSplit = toDate.Split('-');
                        string year = (month_no > 3) ? fDateSplit[0] : tDateSplit[0];

                        string qryMonth = "select t1.*, date(date_time) as date from `uploading_pyranometer_15_min_solar` t1 left join daily_gen_summary_solar t2 on t1.site_id = t2.site_id and date(date_time) = t2.date where month(date(date_time)) = " + month_no + " and year(date(date_time))='" + year + "' order by date_time asc;";
                        List<SolarUploadingPyranoMeter1Min> data1min = new List<SolarUploadingPyranoMeter1Min>();
                        try
                        {
                            data1min = await Context.GetData<SolarUploadingPyranoMeter1Min>(qryMonth).ConfigureAwait(false);
                        }
                        catch (Exception e)
                        {
                            string msg = "Exception while fetching records from uploading_pyranometer_15_min_solar, due to : " + e.ToString();
                            //API_ErrorLog(msg);
                            LogError(0, 1, 5, functionName, msg, backend);

                        }
                        foreach (SolarUploadingPyranoMeter1Min _temp1mindata in data1min)
                        {
                            if (_temp1mindata.avg_poa > 0)
                            {
                                double degradation = (((_temp1mindata.date - commDate).TotalDays) * _eachMonthData.yoy_degradation) / 365;
                                //double degradation = ((_temp1mindata.date - commDate).TotalDays - 365) * _eachMonthData.yoy_degradation / 365;

                                double T_cell = _temp1mindata.mod_temp + (_temp1mindata.avg_poa / 1000) * _eachMonthData.tcnd;
                                double localPexpected = (siteData[0].dc_capacity * 1000) * (_temp1mindata.avg_poa) * (1 - degradation / 100) * (1 + _eachMonthData.Loss_factor / 100) * (1 - (_eachMonthData.alpha / 100 * (T_cell - _eachMonthData.tstc)));
                                MonthlyPexp += localPexpected;

                                //double localPexpected = (siteData[0].dc_capacity * 1000) * (1 + degradation / 100) * (1 + _eachMonthData.Loss_factor / 100) * (1 - (_eachMonthData.alpha / 100 * (T_cell - _eachMonthData.tstc))) * (_temp1mindata.avg_poa / 1000);
                                //MonthlyPexp += localPexpected;

                                string updateQry = " update `uploading_pyranometer_15_min_solar` set P_exp = " + localPexpected + " where site_id = " + _temp1mindata.site_id + " and date_time = '" + _temp1mindata.date_time + "' ";
                                try
                                {
                                    await Context.ExecuteNonQry<int>(updateQry).ConfigureAwait(false);
                                }
                                catch (Exception e)
                                {
                                    string msg = "Exception while updating calculated data into uploading_pyranometer_15_min_solar table : " + e.ToString();
                                    //API_ErrorLog(msg);
                                    LogError(0, 1, 5, functionName, msg, backend);

                                }
                            }
                        }
                        YearlyPexp += MonthlyPexp;
                    }
                    SolarPowerCalcReturn obj = new SolarPowerCalcReturn();
                    obj.site_id = site;
                    obj.Pexpected = YearlyPexp;
                    result.Add(obj);
                }
                finalRes = 0;
                return finalRes;
            }
            catch(Exception e)
            {
                string msg = "Exception while executing PowerExpected() function, due to : " + e.ToString();
                //API_ErrorLog(msg);
                LogError(0, 1, 5, functionName, msg, backend);

                return finalRes;
            }
            
        }

        internal async Task<int> PowerExpected1MinPyrano(string site, string fromDate, string toDate, string type, string months, string fy)
        {
            string functionName = "PowerExpected1MinPyrano";
            int finalRes = 1501;
            double Pexpected = 0;
            List<SolarPowerCalcReturn> result = new List<SolarPowerCalcReturn>();
            //Get Loss Factor Constants
            try
            {
                GetFinancialAndCurrentYear(fromDate, out int financialYear, out int currentYear);
                int fyn = financialYear;
                int cy = currentYear;
                string qry1 = "";
                if (type == "Daily")
                {
                    qry1 = "select * from `uploading_file_pvsyst_loss` where site_id = " + site + " and month_no >= MONTH('" + fromDate + "') and month_no<= MONTH('" + toDate + "') and year = '" + fyn + "';";
                }
                else if (type == "Monthly")
                {
                    qry1 = "select * from `uploading_file_pvsyst_loss` where site_id = " + site + " and month_no in (" + months + ") and fy = '" + fy + "'";
                }
                else if (type == "Yearly")
                {
                    string[] yearFY = fromDate.Split('-');
                    string[] endYearFY = toDate.Split('-');
                    qry1 = "select * from `uploading_file_pvsyst_loss` where site_id = " + site + "  and fy = '" + yearFY[0] + "-" + endYearFY[0].Substring(2, 2) + "'";
                }
                List<SolarPowerCalc> data = new List<SolarPowerCalc>();
                try
                {
                    data = await Context.GetData<SolarPowerCalc>(qry1).ConfigureAwait(false);
                }
                catch (Exception e)
                {
                    string msg = e.ToString();
                    throw new Exception("Exception occured in power expected function. " + msg);
                    LogError(0, 1, 5, functionName, msg, backend);

                }
                //Get Site Data
                List<SolarSiteMaster> siteData = new List<SolarSiteMaster>();
                string qry2 = "select dc_capacity, ac_capacity, doc as commissioning_date from `site_master_solar` where site_master_solar_id = " + site;
                try
                {
                    siteData = await Context.GetData<SolarSiteMaster>(qry2).ConfigureAwait(false);
                }
                catch (Exception e)
                {
                    string msg = "Exception while fetching records from site_master_solar, due to : " + e.ToString();
                    //API_ErrorLog(msg);
                    LogError(0, 1, 5, functionName, msg, backend);

                }

                foreach (SolarPowerCalc _dataElement in data)
                {
                    _dataElement.Loss_factor = 1 - ((1 + _dataElement.near_sheding) * (1 + _dataElement.iam_factor) * (1 + _dataElement.soiling_factor) * (1 + _dataElement.pv_loss) * (1 + _dataElement.lid) * (1 + _dataElement.array_missmatch) * (1 + _dataElement.dc_ohmic) * (1 + _dataElement.conversion_loss) * (1 + _dataElement.plant_auxilary) * (1 + _dataElement.system_unavailability) * (1 + _dataElement.ac_ohmic) * (1 + _dataElement.far_shading) * (1 + _dataElement.module_quality_loss) * (1 + _dataElement.electrical_loss) * (1 + _dataElement.night_consumption) * (1 + _dataElement.idt));

                    //_dataElement.Loss_factor = 1 - ((1 + _dataElement.near_sheding / 100) * (1 + _dataElement.iam_factor / 100) * (1 + _dataElement.soiling_factor / 100) * (1 + _dataElement.pv_loss / 100) * (1 + _dataElement.lid / 100) * (1 + _dataElement.array_missmatch / 100) * (1 + _dataElement.dc_ohmic / 100) * (1 + _dataElement.conversion_loss / 100) * (1 + _dataElement.plant_auxilary / 100) * (1 + _dataElement.system_unavailability / 100) * (1 + _dataElement.ac_ohmic / 100) * (1 + _dataElement.external_transformer / 100));

                }
                DateTime commDate = new DateTime();
                DateTime end = new DateTime();
                DateTime start = new DateTime();
                try
                {
                    string date = Convert.ToDateTime(siteData[0].commissioning_date).ToString("yyyy-MM-dd");
                    string[] commissionDate = date.Split('-');
                    DateTime commDate1 = new DateTime(Int32.Parse(commissionDate[0]), Int32.Parse(commissionDate[1]), Int32.Parse(commissionDate[2]));

                    commDate = commDate1;
                    DateTime end1 = new DateTime();
                    end = end1;
                    DateTime start1 = new DateTime();
                    start = start1;
                }
                catch (Exception e)
                {
                    string msg = e.Message;
                    throw new Exception("Exception from power Expected function : Exception " + msg);
                }
                if (type == "Daily")
                {
                    string[] fromDateSplt = fromDate.Split('-');
                    string[] toDateSplt = toDate.Split('-');
                    start = new DateTime(Int32.Parse(fromDateSplt[0]), Int32.Parse(fromDateSplt[1]), Int32.Parse(fromDateSplt[2]));
                    end = new DateTime(Int32.Parse(toDateSplt[0]), Int32.Parse(toDateSplt[1]), Int32.Parse(toDateSplt[2]));

                    while (start <= end)
                    {
                        double degradation = 0;
                        double dailyPexpected = 0;
                        SolarPowerCalc LossData = new SolarPowerCalc();
                        foreach (SolarPowerCalc _dataElement in data)
                        {
                            if (_dataElement.month_no == start.Month)
                            {
                                LossData = _dataElement;
                                break;
                            }
                        }
                        degradation = (((start - commDate).TotalDays) * LossData.yoy_degradation) / 365; //start date - 1 day.
                        //degradation = (((start - commDate).TotalDays - 1) * LossData.yoy_degradation) / 365; //start date - 1 day.

                        //Fetch from 1 min data.
                        string qry3 = "select *,date_time as stringdatetime from `uploading_pyranometer_1_min_solar` where site_id = " + site + " and DATE(date_time)='" + start.Year.ToString() + "-" + start.Month.ToString() + "-" + start.Day + "' order by date_time asc";

                        List<SolarUploadingPyranoMeter1Min> data1min = new List<SolarUploadingPyranoMeter1Min>();
                        try
                        {
                            data1min = await Context.GetData<SolarUploadingPyranoMeter1Min>(qry3).ConfigureAwait(false);
                        }
                        catch (Exception e)
                        {
                            string msg = "Exception while fetching records from uploading_pyranometer_1_min_solar, due to : " + e.ToString();
                            //API_ErrorLog(msg);
                            LogError(0, 1, 5, functionName, msg, backend);

                        }
                        foreach (SolarUploadingPyranoMeter1Min _temp1mindata in data1min)
                        {
                            if (_temp1mindata.avg_poa > 0)
                            {
                                /*double T_cell = _temp1mindata.mod_temp + (_temp1mindata.avg_poa / 1000) * LossData.tcnd;
                                double localPexpected = (siteData[0].dc_capacity * 1000) * (1 + degradation / 100) * (1 + LossData.Loss_factor / 100) * (1 - (LossData.alpha / 100 * (T_cell - LossData.tstc))) * (_temp1mindata.avg_poa / 1000);
                                dailyPexpected += localPexpected;*/
                                //double degradation = (((_temp1mindata.date - commDate).TotalDays) * LossData.yoy_degradation) / 365;
                                double T_cell = _temp1mindata.mod_temp + (_temp1mindata.avg_poa / 1000) * LossData.tcnd;
                                T_cell = Math.Round(T_cell, 5);
                                double localPexpected = (siteData[0].dc_capacity * 1000) * (_temp1mindata.avg_poa) * (1 - degradation) * (1 - LossData.Loss_factor) * (1 - (LossData.alpha * (T_cell - LossData.tstc))) / 1000;

                                if ((siteData[0].ac_capacity * 1000) < localPexpected)
                                {
                                    localPexpected = siteData[0].ac_capacity * 1000;

                                }
                                double localPexpectedDegraded = localPexpected * (1 + data[0].line_losses) * (1 + data[0].external_transformer);
                                dailyPexpected += localPexpected;

                                string updateQry = " update `uploading_pyranometer_1_min_solar` set P_exp = " + localPexpected + ", P_exp_degraded = " + localPexpectedDegraded + " where site_id = " + _temp1mindata.site_id + " and date_time = '" + _temp1mindata.stringdatetime.ToString("yyyy-MM-dd HH:mm:ss") + "' ";
                                try
                                {
                                    await Context.ExecuteNonQry<int>(updateQry).ConfigureAwait(false);
                                }
                                catch (Exception e)
                                {
                                    string msg = "Exception while updating calculated data in uploading_pyranometer_1_min_solar, due to :  " + e.ToString();
                                    //API_ErrorLog(msg);
                                    LogError(0, 1, 5, functionName, msg, backend);

                                }

                            }
                        }
                        SolarPowerCalcReturn obj = new SolarPowerCalcReturn();
                        obj.site_id = site;
                        obj.date = start.Date.ToString("yyyy-MM-dd");
                        //obj.Pexpected = dailyPexpected;
                        //Will be divide by 60 for 1 min data.
                        obj.Pexpected = (dailyPexpected / 60) * (1 + data[0].line_losses) * (1 + data[0].external_transformer);
                        result.Add(obj);
                        start = start.AddDays(1);
                    }
                }
                else if (type == "Monthly")
                {
                    string[] monthSplit = months.Split(',');
                    string[] fySplit = fy.Split('-');
                    foreach (string month in monthSplit)
                    {
                        //Monthly Pexpected
                        double MonthlyPexp = 0;
                        //Find Month's constants
                        SolarPowerCalc LossData = new SolarPowerCalc();
                        foreach (SolarPowerCalc _dataElement in data)
                        {
                            if (_dataElement.month_no == Int32.Parse(month))
                            {
                                LossData = _dataElement;
                                break;
                            }
                        }
                        //Each month in month-range
                        string year = Int32.Parse(month) > 3 ? fySplit[0] : fySplit[0].Substring(0, 2);

                        string qryMonth = "select t1.*, date(date_time) as date from `uploading_pyranometer_1_min_solar` t1 left join daily_gen_summary_solar t2 on t1.site_id = t2.site_id and date(date_time) = t2.date where month(date(date_time)) = " + month + " and year(date(date_time))='" + year + "' order by date_time asc;";
                        List<SolarUploadingPyranoMeter1Min> data1min = new List<SolarUploadingPyranoMeter1Min>();
                        try
                        {
                            data1min = await Context.GetData<SolarUploadingPyranoMeter1Min>(qryMonth).ConfigureAwait(false);
                        }
                        catch (Exception e)
                        {
                            string msg = "Exception while fetching records from uploading_pyranometer_1_min_solar, due to : " + e.ToString();
                            //API_ErrorLog(msg);
                            LogError(0, 1, 5, functionName, msg, backend);

                        }
                        foreach (SolarUploadingPyranoMeter1Min _temp1mindata in data1min)
                        {
                            if (_temp1mindata.avg_poa > 0)
                            {
                                double degradation = (((_temp1mindata.date - commDate).TotalDays) * LossData.yoy_degradation) / 365;
                                double T_cell = _temp1mindata.mod_temp + (_temp1mindata.avg_poa / 1000) * LossData.tcnd;
                                double localPexpected = (siteData[0].dc_capacity * 1000) * (_temp1mindata.avg_poa) * (1 - degradation / 100) * (1 + LossData.Loss_factor / 100) * (1 - (LossData.alpha / 100 * (T_cell - LossData.tstc)));
                                MonthlyPexp += localPexpected;
                                /*
                                double degradation = ((_temp1mindata.date - commDate).TotalDays - 365) * LossData.yoy_degradation / 365;

                                double T_cell = _temp1mindata.mod_temp + (_temp1mindata.avg_poa / 1000) * LossData.tcnd;
                                double localPexpected = (siteData[0].dc_capacity * 1000) * (1 + degradation / 100) * (1 + LossData.Loss_factor / 100) * (1 - (LossData.alpha / 100 * (T_cell - LossData.tstc))) * (_temp1mindata.avg_poa / 1000);
                                MonthlyPexp += localPexpected; */



                                string updateQry = " update `uploading_pyranometer_1_min_solar` set P_exp = " + localPexpected + " where site_id = " + _temp1mindata.site_id + " and date_time = '" + _temp1mindata.date_time + "' ";
                                try
                                {
                                    await Context.ExecuteNonQry<int>(updateQry).ConfigureAwait(false);
                                }
                                catch (Exception e)
                                {
                                    string msg = "Exception while updating calculated into uploading_pyranoter_1_min_solar table, due to : " + e.ToString();
                                    //API_ErrorLog(msg);
                                    LogError(0, 1, 5, functionName, msg, backend);

                                }
                            }
                        }
                        SolarPowerCalcReturn obj = new SolarPowerCalcReturn();
                        obj.site_id = site;
                        obj.month_no = Int32.Parse(month);
                        obj.year = Int32.Parse(year);
                        obj.Pexpected = MonthlyPexp;
                        result.Add(obj);
                    }
                }
                else if (type == "Yearly")
                {
                    double YearlyPexp = 0;
                    foreach (SolarPowerCalc _eachMonthData in data)
                    {
                        double MonthlyPexp = 0;
                        int month_no = _eachMonthData.month_no;
                        string[] fDateSplit = fromDate.Split('-');
                        string[] tDateSplit = toDate.Split('-');
                        string year = (month_no > 3) ? fDateSplit[0] : tDateSplit[0];

                        string qryMonth = "select t1.*, date(date_time) as date from `uploading_pyranometer_1_min_solar` t1 left join daily_gen_summary_solar t2 on t1.site_id = t2.site_id and date(date_time) = t2.date where month(date(date_time)) = " + month_no + " and year(date(date_time))='" + year + "' order by date_time asc;";
                        List<SolarUploadingPyranoMeter1Min> data1min = new List<SolarUploadingPyranoMeter1Min>();
                        try
                        {
                            data1min = await Context.GetData<SolarUploadingPyranoMeter1Min>(qryMonth).ConfigureAwait(false);
                        }
                        catch (Exception e)
                        {
                            string msg = "Exception while fetching records from uploading_pyranometer_1_min_solar, due to : " + e.ToString();
                            //API_ErrorLog(msg);
                            LogError(0, 1, 5, functionName, msg, backend);

                        }
                        foreach (SolarUploadingPyranoMeter1Min _temp1mindata in data1min)
                        {
                            if (_temp1mindata.avg_poa > 0)
                            {
                                double degradation = (((_temp1mindata.date - commDate).TotalDays) * _eachMonthData.yoy_degradation) / 365;
                                //double degradation = ((_temp1mindata.date - commDate).TotalDays - 365) * _eachMonthData.yoy_degradation / 365;

                                double T_cell = _temp1mindata.mod_temp + (_temp1mindata.avg_poa / 1000) * _eachMonthData.tcnd;
                                double localPexpected = (siteData[0].dc_capacity * 1000) * (_temp1mindata.avg_poa) * (1 - degradation / 100) * (1 + _eachMonthData.Loss_factor / 100) * (1 - (_eachMonthData.alpha / 100 * (T_cell - _eachMonthData.tstc)));
                                MonthlyPexp += localPexpected;

                                //double localPexpected = (siteData[0].dc_capacity * 1000) * (1 + degradation / 100) * (1 + _eachMonthData.Loss_factor / 100) * (1 - (_eachMonthData.alpha / 100 * (T_cell - _eachMonthData.tstc))) * (_temp1mindata.avg_poa / 1000);
                                //MonthlyPexp += localPexpected;

                                string updateQry = " update `uploading_pyranometer_1_min_solar` set P_exp = " + localPexpected + " where site_id = " + _temp1mindata.site_id + " and date_time = '" + _temp1mindata.date_time + "' ";
                                try
                                {
                                    await Context.ExecuteNonQry<int>(updateQry).ConfigureAwait(false);
                                }
                                catch (Exception e)
                                {
                                    string msg = "Exception while updating calculated data into uploading_pyranometer_1_min_solar table : " + e.ToString();
                                    //API_ErrorLog(msg);
                                    LogError(0, 1, 5, functionName, msg, backend);

                                }
                            }
                        }
                        YearlyPexp += MonthlyPexp;
                    }
                    SolarPowerCalcReturn obj = new SolarPowerCalcReturn();
                    obj.site_id = site;
                    obj.Pexpected = YearlyPexp;
                    result.Add(obj);
                }
                finalRes = 0;
                return finalRes;
            }
            catch (Exception e)
            {
                string msg = "Exception while executing PowerExpected() function, due to : " + e.ToString();
                //API_ErrorLog(msg);
                LogError(0, 1, 5, functionName, msg, backend);

                return finalRes;
            }

        }

        public void GetFinancialAndCurrentYear(string fromDate, out int financialYear, out int currentYear)
        {
            DateTime date = DateTime.Parse(fromDate);
            financialYear = date.Month >= 4 ? date.Year + 1 : date.Year;
            currentYear = date.Year;
        }

        private void approval_InformationLog(string Message)
        {
            //Read variable from appsetting to enable disable log
            System.IO.File.AppendAllText(@"C:\LogFile\approval_Log.txt", "*Info*:" + Message + "\r\n");
        }
        
        private void approval_ErrorLog(string Message)
        {
            //Read variable from appsetting to enable disable log
            System.IO.File.AppendAllText(@"C:\LogFile\approval_Log.txt", "**Error**:" + Message + "\r\n");
        }

        internal async Task<int> LogError(int userId, int import_type, int module, string api_name, string Message, int is_frontend)
        {
            int returnRes = 0;
            Message = Message.Replace("'", "");
            bool isSlash = Message.Contains('\\');
            if (isSlash)
            {
                Message = Message.Replace("\\", "--");
            }
            string finalMessage = TrimString(Message, 7999);
            int isTrim = 0;
            if (Message.Length >= 8000)
            {
                isTrim = 1;
            }
            //Read variable from appsetting to enable disable log
            string logStmt = "INSERT INTO log4netlog (user_id, import_type, Level, module, is_frontend, api_name, Message, created_on, isMsgTrim) VALUES( " + userId + ", " + import_type + ", 1, " + module + ", " + is_frontend + ", '" + api_name + "', '" + finalMessage + "', '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm") + "', " + isTrim + " );";

            var logged = await Context.ErrorLog(logStmt).ConfigureAwait(false);
            returnRes = logged;

            return returnRes;
        }
        internal async Task<int> LogInfo(int userId, int import_type, int module, string api_name, string Message, int is_frontend)
        {
            int returnRes = 0;
            Message = Message.Replace("'", "");
            bool isSlash = Message.Contains('\\');
            if (isSlash)
            {
                Message = Message.Replace("\\", "--");
            }
            string finalMessage = TrimString(Message, 7999);
            int isTrim = 0;
            if(Message.Length >= 8000)
            {
                isTrim = 1;
            }
            //Read variable from appsetting to enable disable log
            string logStmt = "INSERT INTO log4netlog (user_id, import_type, Level, module, is_frontend, api_name, Message, created_on, isMsgTrim) VALUES( " + userId + ", " + import_type + ", 2, " + module + ", " + is_frontend + ", '" + api_name + "', '" + finalMessage + "', '" + DateTime.Now.ToString("yyyy-MM-dd HH:mm") + "', " + isTrim + " );";
            
            var logged = await Context.ErrorLog(logStmt).ConfigureAwait(false);
            returnRes = logged;

            return returnRes;
        }

        string TrimString(string msgString, int maxLength)
        {
            if (msgString.Length > maxLength)
            {
                return msgString.Substring(0, maxLength);
            }

            return msgString;
        }

        private void TML_InfoLog(string Message)
        {
            //Read variable from appsetting to enable disable log
            System.IO.File.AppendAllText(@"C:\LogFile\TML_Log.txt", "*Info*:" + Message + "\r\n");
        }

        //function for checking and updating manualbreakdowns.
        internal async Task<int> CheckAndUpdateManualBd(List<CheckUpdateManualBd> _dateSite, int approvedBy, string approvedByName, int status)
        {
            int result = 0;
            int finalResult = 0;
            foreach(var unit in _dateSite)
            {
                string checkTMLDataQry = "SELECT * FROM uploading_file_tmr_data WHERE site_id IN(" + unit.site_id + ") AND Date(Time_stamp) = '" + unit.date + "' GROUP BY Date(Time_stamp), site_id;";
                List<InsertWindTMLData> _DataTML = new List<InsertWindTMLData>();
                try
                {
                    int returnRes1 = 0;
                    _DataTML = await Context.GetData<InsertWindTMLData>(checkTMLDataQry).ConfigureAwait(false);
                    if (_DataTML.Count > 0)
                    {
                        unit.isTmlData = 1;
                        //TML data Inserted before the Automation upload/ approve.
                        //fetch from upload status and update the particular record with DGR data.
                        returnRes1 = await Upload_StatusOperation(Convert.ToString(unit.import_batch_id), approvedBy, approvedByName, status, 1, 1);
                    }
                    else
                    {
                        //TML file is uploaded after Automation file.
                        returnRes1 = await Upload_StatusOperation(Convert.ToString(unit.import_batch_id), approvedBy, approvedByName, status, 1);
                    }
                }
                catch (Exception e)
                {
                    string msg = "Exception while fetching record from uploading_file_tmr_data table, due to : " + e.ToString();
                    approval_ErrorLog(msg);
                    return 0;
                }
                if (unit.isTmlData == 1)
                {
                    try
                    {    
                        int inResult = await UpdateManualBdForTMLData(unit.date, unit.site_id, 9);
                        if (inResult == 2)
                        {
                            unit.dataUpdated = 1;
                        }
                        else
                        {
                            unit.dataUpdated = 0;
                        }
                        
                    }
                    catch (Exception e)
                    {
                        string msg = "Exception during UpdateManualBD function call, due to : " + e.ToString();
                        approval_ErrorLog(msg);
                        return 0;
                    }
                }
            }            
            return result;
        }

        
        //Function for bulk updating BDs of TML records.
        internal async Task<List<CheckUpdateManualBd>> BulkMapBdToTML(string fromDate, string toDate)
        {
            int result = 0;
            List<CheckUpdateManualBd> _site_ids = new List<CheckUpdateManualBd>();
            List<CheckUpdateManualBd> _dateSite = new List<CheckUpdateManualBd>();

            //Fetch and create the site_date list.
            string fetchSiteIds = "Select site_master_id AS site_id FROM site_master ";
            _site_ids = await Context.GetData<CheckUpdateManualBd>(fetchSiteIds).ConfigureAwait(false);
            if (_site_ids.Count > 0)
            {
                DateTime startDate = DateTime.Parse(fromDate);
                DateTime endDate = DateTime.Parse(toDate);

                for (DateTime currentDate = startDate; currentDate <= endDate; currentDate = currentDate.AddDays(1))
                {
                    foreach (var siteId in _site_ids)
                    {
                        _dateSite.Add(new CheckUpdateManualBd
                        {
                            date = currentDate.ToString("yyyy-MM-dd"),
                            site_id = siteId.site_id,
                        });
                    }
                }
            }

            //After Site date list is created. Call the check and map bd function.
            if (_dateSite.Count > 0)
            {
                int updateres = await CheckAndUpdateManualBd(_dateSite,2000, "TMLBulkUpload", 1);
                if (updateres == 1)
                {
                    result = 7;
                }
                else if (updateres == 0)
                {
                    string msg = "Error while updating manual bd " + _dateSite;
                    approval_ErrorLog(msg);
                }
            }

            return _dateSite;
        }

        //DGR VERSION 3 FUNCTIONS
        //Solar uploadstatus
        internal async Task<int> Upload_StatusOperationSolar(List<SolarUploadingFileGeneration3> approvalList, int approvedBy, string approvedByName, int status, int type)
        {
            //SolarOrWind = 2 Solar, 1= Wind;

            int finalResult = 0;
            string updateqry = "";
            foreach (SolarUploadingFileGeneration3 approvaldata in approvalList)
            {
                int automation = 0;
                int pyrano1min = 0;
                int pyrano15min = 0;
                if (approvaldata.gen_count > 0)
                {
                    automation = 1;
                }
                if (approvaldata.pyro1_count > 0)
                {
                    pyrano1min = 1;
                }
                if (approvaldata.pyro15_count > 0)
                {
                    pyrano15min = 1;
                }

                updateqry = "Update upload_status set type=  " + type + ", automation = " + automation + ", pyranometer1min=" + pyrano1min + ", pyranometer15min = " + pyrano15min + ", approved_by=" + approvedBy + " where  import_batch_id=" + approvaldata.import_batch_id + "";
                try
                {
                    int insertResult = await Context.ExecuteNonQry<int>(updateqry).ConfigureAwait(false);
                    finalResult = 2;
                }
                catch (Exception e)
                {
                    string msg = "Exception while inserting or updating record in upload_status table ,due to : " + e.ToString();
                    //await LogError(0, 1, 7, functionName, msg, backend);
                    finalResult = 0;
                    return finalResult;
                }
            }
            return finalResult;

            /*if (SolarOrWind == 2)
            {
                List<ImportBatchesForUploadStatus> _importBatchesData = new List<ImportBatchesForUploadStatus>();
                string fetchImportBatchesQry = "SELECT import_batch_id, import_type, site_id, import_date, data_date, imported_by, approved_by, is_approved FROM import_batches WHERE import_batch_id IN(" + dataId + ");";
                string UpdateInsertQryStart = "INSERT INTO upload_status (type, site_id, import_date, data_date, approved_by, uploaded_by, import_batch_id, automation, approve_count) VALUES ";
                string insertValues = "";
                string updateValues = "";
                string finalUpdateInsertQuery = "";

                try
                {
                    _importBatchesData = await Context.GetData<ImportBatchesForUploadStatus>(fetchImportBatchesQry).ConfigureAwait(false);
                    finalResult = 1;
                }
                catch(Exception e)
                {
                    string msg = "Exception caught while fetching records from import batches, due to :" + e.ToString();
                    await LogError(0, 1, 7, functionName, msg, backend);
                    finalResult = 0;
                    return finalResult;
                }
                if (finalResult == 1)
                {
                    foreach(var unit in _importBatchesData)
                    {
                        string importDateCon = Convert.ToDateTime(unit.import_date).ToString("yyyy-MM-dd");
                        insertValues = "(" + unit.import_type + ", " + unit.site_id + ", '" + importDateCon + "', '" + unit.data_date + "', " + unit.approved_by + ", " + unit.imported_by + ", " + unit.import_batch_id + ", 1, 1)";
                        updateValues = " ON DUPLICATE KEY UPDATE import_date ='" + importDateCon + "', approved_by = " + unit.approved_by +", uploaded_by = " + unit.imported_by + ", import_batch_id = " + unit.import_batch_id + ", automation = 1, approve_count = approve_count + 1;";
                        finalUpdateInsertQuery += UpdateInsertQryStart + insertValues + updateValues;
                    }

                    try
                    {
                        int insertResult = await Context.ExecuteNonQry<int>(finalUpdateInsertQuery).ConfigureAwait(false);
                        finalResult = 2;
                    }
                    catch (Exception e)
                    {
                        string msg = "Exception while inserting or updating record in upload_status table ,due to : " + e.ToString();
                        await LogError(0, 1, 7, functionName, msg, backend);
                        finalResult = 0;
                        return finalResult;
                    }
                }
            }*/
            /*else if (SolarOrWind == 1)
            {
                List<ImportBatchesForUploadStatus> _importBatchesData = new List<ImportBatchesForUploadStatus>();
                string fetchImportBatchesQry = "SELECT import_batch_id, import_type, site_id, import_date, data_date, imported_by, approved_by, is_approved FROM import_batches WHERE import_batch_id IN(" + dataId + ");";
                string UpdateInsertQryStart = "INSERT INTO upload_status (type, site_id, import_date, data_date, approved_by, uploaded_by, import_batch_id, automation, approve_count) VALUES ";
                string insertValues = "";
                string updateValues = "";
                string finalUpdateInsertQuery = "";

                try
                {
                    _importBatchesData = await Context.GetData<ImportBatchesForUploadStatus>(fetchImportBatchesQry).ConfigureAwait(false);
                    finalResult = 1;
                }
                catch (Exception e)
                {
                    string msg = "Exception caught while fetching records from import batches, due to :" + e.ToString();
                    await LogError(0, 1, 7, functionName, msg, backend);
                    finalResult = 0;
                    return finalResult;
                }
                if (finalResult == 1)
                {
                    foreach (var unit in _importBatchesData)
                    {
                        string importDateCon = Convert.ToDateTime(unit.import_date).ToString("yyyy-MM-dd");
                        insertValues = "(" + unit.import_type + ", " + unit.site_id + ", '" + importDateCon + "', '" + unit.data_date + "', " + unit.approved_by + ", " + unit.imported_by + ", " + unit.import_batch_id + ", 1, 1)";
                        updateValues = " ON DUPLICATE KEY UPDATE import_date ='" + importDateCon + "', approved_by = " + unit.approved_by + ", uploaded_by = " + unit.imported_by + ", import_batch_id = " + unit.import_batch_id + ", automation = 1, approve_count = approve_count + 1;";
                        finalUpdateInsertQuery += UpdateInsertQryStart + insertValues + updateValues;
                    }

                    try
                    {
                        int insertResult = await Context.ExecuteNonQry<int>(finalUpdateInsertQuery).ConfigureAwait(false);
                        finalResult = 2;
                    }
                    catch (Exception e)
                    {
                        string msg = "Exception while inserting or updating record in upload_status table ,due to : " + e.ToString();
                        await LogError(0, 1, 7, functionName, msg, backend);
                        finalResult = 0;
                        return finalResult;
                    }
                }
            }*/
            // return finalResult;
        }
        //Wind Upload status.
        internal async Task<int> Upload_StatusOperation(string dataId, int approvedBy, string approvedByName, int status, int SolarOrWind, int approval = 0)
        {
            //SolarOrWind = 2 Solar, 1= Wind;
            int finalResult = 0;
            string functionName = "Upload_StatusOperation";
            if (SolarOrWind == 1)
            {
                List<ImportBatchesForUploadStatus> _importBatchesData = new List<ImportBatchesForUploadStatus>();
                string fetchImportBatchesQry = "SELECT import_batch_id, import_type, site_id, import_date, data_date, imported_by, approved_by, is_approved FROM import_batches WHERE import_batch_id IN(" + dataId + ");";
                string UpdateInsertQryStart = "INSERT INTO upload_status (type, site_id, import_date, data_date, approved_by, uploaded_by, import_batch_id, automation, approve_count) VALUES ";
                string insertValues = "";
                string updateValues = "";
                string finalUpdateInsertQuery = "";

                try
                {
                    _importBatchesData = await Context.GetData<ImportBatchesForUploadStatus>(fetchImportBatchesQry).ConfigureAwait(false);
                    finalResult = 1;
                }
                catch (Exception e)
                {
                    string msg = "Exception caught while fetching records from import batches, due to :" + e.ToString();
                    await LogError(0, 1, 7, functionName, msg, backend);
                    finalResult = 0;
                    return finalResult;
                }
                if (finalResult == 1)
                {
                    foreach (var unit in _importBatchesData)
                    {
                        string importDateCon = Convert.ToDateTime(unit.import_date).ToString("yyyy-MM-dd");
                        insertValues = "(" + unit.import_type + ", " + unit.site_id + ", '" + importDateCon + "', '" + unit.data_date + "', " + unit.approved_by + ", " + unit.imported_by + ", " + unit.import_batch_id + ", 1, 1)";
                        updateValues = " ON DUPLICATE KEY UPDATE import_date ='" + importDateCon + "', approved_by = " + unit.approved_by + ", uploaded_by = " + unit.imported_by + ", import_batch_id = " + unit.import_batch_id + ", automation = 1, approve_count = approve_count + 1;";
                        finalUpdateInsertQuery += UpdateInsertQryStart + insertValues + updateValues;
                    }

                    try
                    {
                        int insertResult = await Context.ExecuteNonQry<int>(finalUpdateInsertQuery).ConfigureAwait(false);
                        finalResult = 2;
                    }
                    catch (Exception e)
                    {
                        string msg = "Exception while inserting or updating record in upload_status table ,due to : " + e.ToString();
                        await LogError(0, 1, 7, functionName, msg, backend);
                        finalResult = 0;
                        return finalResult;
                    }
                }
            }

            return finalResult;
        }
        //Get the total wtgs for a particaular site and count of tml samples should be present.
        internal async Task<int> WindTMLRecordCount(string date, int site_id, int type, int dataCount, int isDelete)
        {
            //isDelete: 0 don't delete, isDelete: 1 delete count from uploading file status table.
            string functionName = "WindTMLRecordCount";
            int returnResult = 0;
            //Case 1 :- all tml files uploaded at once. simple import in table.
            //Case 2 :- few wtgs left. (left but not duplicate) add to the existing count in the table.
            //Case 3 :- reimport of files all wtgs delete and update the count in the table.
            //Case 4 :- reimport the files few duplicate few new.

            //SELECT COUNT(*) FROM `location_master` WHERE site_master_id = 217;
            string fetchQry = "SELECT COUNT(*) as realCount FROM location_master WHERE site_master_id =" + site_id + ";";
            List<TMLCountComparision> _CountData = new List<TMLCountComparision>();
            try
            {
                _CountData = await Context.GetData<TMLCountComparision>(fetchQry).ConfigureAwait(false);
                returnResult = 1;
            }
            catch (Exception e)
            {
                string msg = "Exception while fetching wtg count from database, due to : " + e.ToString();
                await LogError(0, 1, 7, functionName, msg, backend);
                return 0;
            }

            if (isDelete == 1)
            {
                List<TMLCountComparision> _countData = new List<TMLCountComparision>();
                int expected_TML = 0;
                int actual_TML = 0;
                int wtg_count = 0;

                try
                {
                    string fetchActualCount = "SELECT expected_TML, actual_TML, wtg_count FROM upload_status WHERE data_date='" + date + "' AND site_id IN(" + site_id + ") AND type = 1 AND TML_uploaded = 1;";

                    _countData = await Context.GetData<TMLCountComparision>(fetchActualCount).ConfigureAwait(false);
                    if (_countData.Count > 0)
                    {
                        expected_TML = (int)_countData[0].expected_TML;
                        actual_TML = (int)_countData[0].actual_TML;
                        wtg_count = (int)_countData[0].wtg_count;

                        if (actual_TML > dataCount)
                        {
                            dataCount = actual_TML - dataCount;
                        }
                        else if (actual_TML < dataCount)
                        {
                            dataCount = dataCount - actual_TML;
                        }
                        //else
                        //{
                        //    dataCount = dataCount;
                        //}
                    }
                }
                catch (Exception e)
                {
                    string msg = "Exception while fetching count records from upload_status table " + e.ToString();
                    await LogError(0, 1, 7, functionName, msg, backend);
                }
                try
                {
                    //string deleteQry = "UPDATE upload_status SET actual_TML = actual_TML - " + dataCount + " WHERE data_date='" + date + "' AND site_id IN(" + site_id + ") AND type = 1 AND TML_uploaded = 1;";
                    //string deleteQry = "UPDATE upload_status SET actual_TML = " + dataCount + " WHERE data_date='" + date + "' AND site_id IN(" + site_id + ") AND type = 1 AND TML_uploaded = 1;";
                    string deleteQry = "UPDATE upload_status SET actual_TML = 0 WHERE data_date='" + date + "' AND site_id IN(" + site_id + ") AND type = 1 AND TML_uploaded = 1;";
                    int delRes = await Context.ExecuteNonQry<int>(deleteQry).ConfigureAwait(false);
                }
                catch (Exception e)
                {
                    string msg = "Exception while deleting actual count, due to : " + e.ToString();
                    await LogError(0, 1, 7, functionName, msg, backend);
                    return 0;
                }
            }
            else
            {
                //Check if automation file is uploaded or not. If uploaded simply update the TML count. If not uploaded then Insert into the table.
                List<TMLCountComparision> _getData = new List<TMLCountComparision>();
                try
                {
                    string fetchUploadStatus = $"SELECT upload_status_id FROM upload_status WHERE data_date=' {date} ' AND site_id IN({ site_id }) AND type = 1;";
                    _getData = await Context.GetData<TMLCountComparision>(fetchUploadStatus).ConfigureAwait(false);
                }
                catch (Exception e)
                {
                    string msg = "Exception while fetching upload_status previous data if any, due to : " + e.ToString();
                    await LogError(0, 1, 7, functionName, msg, backend);
                    return 0;
                }
                try
                {
                    if (_CountData.Count > 0)
                    {
                        int realCount = Convert.ToInt32(_CountData[0].realCount);
                        int actualCount = dataCount;
                        int expectedCount = realCount * 144;
                        int difference = expectedCount - actualCount;
                        bool automationData = false;

                        if (difference == 0)
                        {
                            DateTime today = DateTime.Now;
                            string importDateCon = today.ToString("yyyy-MM-dd");
                            string finalUpdateInsertQuery = "";
                            if (_getData.Count > 0)
                            {
                                //DGR automation data already present.
                                finalUpdateInsertQuery = $"UPDATE upload_status SET import_date = '{importDateCon}', data_date = '{date}', TML_uploaded = 1, expected_TML= {expectedCount}, actual_TML = {actualCount}, wtg_count = {realCount} WHERE upload_status_id = {_getData[0].upload_status_id}";
                                automationData = true;
                            }
                            else
                            {
                                string updateQuery1 = "INSERT INTO upload_status (type, site_id, import_date, data_date, TML_uploaded, expected_TML, actual_TML, wtg_count) VALUES ";
                                string insertValues = "(1, " + site_id + ", '" + importDateCon + "', '" + date + "', 1, " + expectedCount + ", " + actualCount + ", " + realCount + ");";
                                string updateValues = " ON DUPLICATE KEY UPDATE import_date ='" + importDateCon + "', TML_uploaded = 1, expected_TML = " + expectedCount + ", actual_TML =" + actualCount + ", wtg_count=" + realCount;
                                finalUpdateInsertQuery = updateQuery1 + insertValues;
                            }
                            try
                            {
                                int resUpdateInsert = await Context.ExecuteNonQry<int>(finalUpdateInsertQuery).ConfigureAwait(false);
                                //if (_getData.Count > 0)
                                //{
                                //    int resUpdateInsert = await Context.ExecuteNonQry<int>(dataAvailable).ConfigureAwait(false);
                                //}
                                //else
                                //{
                                //    int resUpdateInsert = await Context.ExecuteNonQry<int>(finalUpdateInsertQuery).ConfigureAwait(false);
                                //}
                                returnResult = 2;
                                if (automationData)
                                {
                                    int DailyData = await CalculateDailyExpected(site_id.ToString(), date);
                                    returnResult = 3;
                                }
                            }
                            catch (Exception e)
                            {
                                string msg = "Exception while updating in upload_status table, due to : " + e.ToString();
                                await LogError(0, 1, 7, functionName, msg, backend);
                                return 0;
                            }
                        }
                        else if (difference > 0)
                        {
                            DateTime today = DateTime.Now;
                            string importDateCon = today.ToString("yyyy-MM-dd");
                            string updateQuery1 = "INSERT INTO upload_status (type, site_id, import_date, data_date, TML_uploaded, expected_TML, actual_TML, wtg_count) VALUES ";
                            string insertValues = "(1, " + site_id + ", '" + importDateCon + "', '" + date + "', 1, " + expectedCount + ", " + actualCount + ", " + realCount + ")";
                            string updateValues = " ON DUPLICATE KEY UPDATE import_date ='" + importDateCon + "', TML_uploaded = 1, expected_TML = " + expectedCount + ", actual_TML = actual_TML +" + actualCount + ", wtg_count=" + realCount;
                            string finalUpdateInsertQuery = updateQuery1 + insertValues + updateValues;
                            try
                            {
                                int resUpdateInsert = await Context.ExecuteNonQry<int>(finalUpdateInsertQuery).ConfigureAwait(false);
                                returnResult = 2;
                            }
                            catch (Exception e)
                            {
                                string msg = "Exception while updating in upload_status table, due to : " + e.ToString();
                                await LogError(0, 1, 7, functionName, msg, backend);
                                return 0;
                            }
                        }

                    }
                }
                catch (Exception e)
                {
                    string msg = "Exception while calculating expected and actual data count, due to : " + e.ToString();
                    await LogError(0, 1, 7, functionName, msg, backend);
                    return 0;
                }
            }
            return returnResult;
        }

        //Fetch Heat Map data from upload_status table.
        internal async Task<List<Dictionary<string, object>>> GetHeatMapData(string site, string fromDate, string toDate, int isAdmin, int siteType)
        {

            List<DateTime> allDates = new List<DateTime>();
            for (DateTime date = Convert.ToDateTime(fromDate); date <= Convert.ToDateTime(toDate); date = date.AddDays(1))
                allDates.Add(date);
            List<String> allDates1 = new List<String>();
            for (DateTime date = Convert.ToDateTime(fromDate); date <= Convert.ToDateTime(toDate); date = date.AddDays(1))
            {
                string tempDate = Convert.ToString(Convert.ToDateTime(date).ToString("yyyy-MM-dd"));
                allDates1.Add(tempDate);
            }


            var resultMap = new Dictionary<string, List<Dictionary<string, object>>>();
            //upload_status has 2 as solar site, 

            if (siteType == 1)
            {
                List<HeatMapData2> _HeatMapData = new List<HeatMapData2>();
                string qry = "SELECT t2.site,t1.site_id,t1.data_date,t1.automation,t1.TML_uploaded,t1.expected_TML,t1.actual_TML,t1.wtg_count FROM upload_status as t1 join site_master as t2 on t2.site_master_id = t1.site_id WHERE t1.data_date BETWEEN '" + fromDate + "' and '" + toDate + "' and t1.site_id in (" + site + ") and type = '" + siteType + "' GROUP BY t1.site_id, t1.data_date";

                try
                {
                    _HeatMapData = await Context.GetData<HeatMapData2>(qry).ConfigureAwait(false);

                    foreach (HeatMapData2 heatmap in _HeatMapData)
                    {
                        string siteName = heatmap.site;
                        if (!resultMap.ContainsKey(siteName))
                        {
                            resultMap[siteName] = new List<Dictionary<string, object>>();
                        }
                        string date = heatmap.data_date.ToString("yyyy-MM-dd");
                        int approveCount = heatmap.approve_count;
                        int automation = heatmap.automation;
                        int tml_uploaded = heatmap.TML_uploaded;
                        int expected_tml = heatmap.expected_TML;
                        int actual_tml = heatmap.actual_TML;
                        int total_wtg_count = heatmap.wtg_count;

                        IDictionary<string, object> dictionary = new Dictionary<string, object>();
                        dictionary.Add(new KeyValuePair<string, object>("date", date));
                        dictionary.Add(new KeyValuePair<string, object>("autonation", automation));
                        dictionary.Add(new KeyValuePair<string, object>("uploded_tml", tml_uploaded));
                        dictionary.Add(new KeyValuePair<string, object>("expected_tml", expected_tml));
                        dictionary.Add(new KeyValuePair<string, object>("actual_tml", actual_tml));
                        dictionary.Add(new KeyValuePair<string, object>("wtg_count", total_wtg_count));
                        /* Dictionary<string, object> dataEntry = new Dictionary<string, object>
                        {
                            { date, approveCount }
                        };
                        resultMap[siteName].Add(dataEntry);*/
                        resultMap[siteName].Add((Dictionary<string, object>)dictionary);
                    }
                    //Convert resultMap to the desired format
                }
                catch (Exception e)
                {
                    string msg = "Exception caught while fetching records from import batches, due to :" + e.ToString();
                }
            }
            else
            {
                List<HeatMapData1> _HeatMapData = new List<HeatMapData1>();
                //string qry = "SELECT t2.site,t1.site_id,t1.data_date,t1.approve_count FROM `upload_status` as t1 join site_master_solar as t2 on t2.site_master_solar_id = t1.site_id WHERE t1.data_date BETWEEN '" + fromDate + "' and '"+ toDate + "' and t1.site_id in ("+site+") and type = '"+ siteType + "' GROUP BY t1.site_id, t1.data_date";

                //string qry = "SELECT t2.site,t1.site_id,t1.data_date,t1.automation,t1.pyranometer1min,t1.pyranometer15min FROM `upload_status` as t1 join site_master_solar as t2 on t2.site_master_solar_id = t1.site_id WHERE t1.data_date BETWEEN '" + fromDate + "' and '" + toDate + "' and t1.site_id in (" + site + ") and type = '" + siteType + "' AND approve_count !=0 GROUP BY t1.site_id, t1.data_date";
                string qry = "SELECT t2.site,t1.site_id,t1.data_date,t1.automation,t1.pyranometer1min,t1.pyranometer15min FROM `upload_status` as t1 join site_master_solar as t2 on t2.site_master_solar_id = t1.site_id WHERE t1.data_date BETWEEN '" + fromDate + "' and '" + toDate + "' and t1.site_id in (" + site + ") and type = '" + siteType + "' GROUP BY t1.site_id, t1.data_date";

                try
                {
                    _HeatMapData = await Context.GetData<HeatMapData1>(qry).ConfigureAwait(false);

                    /* foreach (HeatMapData1 heatmap in _HeatMapData)
                    {
                        string siteName = heatmap.site;
                        if (!resultMap.ContainsKey(siteName))
                        {
                            resultMap[siteName] = new List<Dictionary<string, object>>();
                        }
                        string date = heatmap.data_date.ToString("yyyy-MM-dd");
                        int approveCount = heatmap.approve_count;
                    
                        Dictionary<string, object> dataEntry = new Dictionary<string, object>
                        {
                            { date, approveCount }
                        };
                        resultMap[siteName].Add(dataEntry);
                    }*/


                    /* List<HeatMapData1> resultListNew = new List<HeatMapData1>();

                     foreach (var dateStr in allDates1)
                     {
                         var entry = _HeatMapData.FirstOrDefault(e => e.data_date.ToString("yyyy-MM-dd") == dateStr);

                         if (entry != null)
                         {
                             // Date present in heatmapData, add the entry as is
                             resultListNew.Add(entry);
                         }
                         else
                         {
                             // Date not present, create a new entry with default values
                             HeatMapData1 newEntry = new HeatMapData1
                             {
                                 data_date = dateStr,
                                 site = "Alote",
                                 site_id = 3,
                                 pyranometer15min = -1,
                                 pyranometer1min = -1,
                                 automation = -1
                             };
                             resultListNew.Add(newEntry);
                         }
                     }*/
                    //int haresh = 1;
                    //foreach (var dateStr in allDates1)
                    //{
                    foreach (HeatMapData1 heatmap in _HeatMapData)
                    {
                        bool found = false;
                        string siteName = heatmap.site;
                        if (!resultMap.ContainsKey(siteName))
                        {
                            resultMap[siteName] = new List<Dictionary<string, object>>();
                        }
                        // var entry = _HeatMapData.FirstOrDefault(e => e.data_date.ToString("yyyy-MM-dd") == dateStr);
                        string date = heatmap.data_date.ToString("yyyy-MM-dd");
                        // Check if the date is in the list of allDates1



                        if (allDates1.Contains(date))
                        {
                            int approveCount = heatmap.approve_count;
                            int automation = heatmap.automation;
                            int pyrano15min = heatmap.pyranometer15min;
                            int pyrano1min = heatmap.pyranometer1min;

                            IDictionary<string, object> dictionary = new Dictionary<string, object>
                            {
                                { "date", date },
                                { "autonation", automation },
                                { "pyranometer15min", pyrano15min },
                                { "pyranometer1min", pyrano1min }
                            };

                            resultMap[siteName].Add((Dictionary<string, object>)dictionary);
                        }
                        else
                        {
                            // If the date is missing, add it with default values
                            foreach (var missingDate in GetDateRange(fromDate, toDate))
                            {
                                IDictionary<string, object> dictionary = new Dictionary<string, object>
                                {
                                    { "date", missingDate },
                                    { "autonation", -1 },
                                    { "pyranometer15min", -1 },
                                    { "pyranometer1min", -1 }
                                };

                                resultMap[siteName].Add((Dictionary<string, object>)dictionary);
                            }
                        }

                        /* foreach (var dateStr in allDates1)
                         {
                             if (dateStr == date)
                             {
                                 found = true;

                                 break;
                             }

                         }
                         int approveCount = 0;
                         int automation = 0;
                         int pyrano15min =0;
                         int pyrano1min =0;
                         IDictionary<string, object> dictionary = new Dictionary<string, object>();
                         //if (date == element && heatmap.selected == 0)
                         //{
                         if (found)
                         {

                             approveCount = heatmap.approve_count;
                             automation = heatmap.automation;
                             pyrano15min = heatmap.pyranometer15min;
                             pyrano1min = heatmap.pyranometer1min;

                             dictionary.Add(new KeyValuePair<string, object>("date", date));
                             dictionary.Add(new KeyValuePair<string, object>("autonation", automation));
                             dictionary.Add(new KeyValuePair<string, object>("pyranometer15min", pyrano15min));
                             dictionary.Add(new KeyValuePair<string, object>("pyranometer1min", pyrano1min));

                         }
                         else
                         {

                                 approveCount = -1;
                                 automation = -1;
                                 pyrano15min = -1;
                                 pyrano1min = -1;
                                 //IDictionary<string, object> dictionary = new Dictionary<string, object>();
                                 dictionary.Add(new KeyValuePair<string, object>("date", "2024-01-06"));
                                 dictionary.Add(new KeyValuePair<string, object>("autonation", automation));
                                 dictionary.Add(new KeyValuePair<string, object>("pyranometer15min", pyrano15min));
                                 dictionary.Add(new KeyValuePair<string, object>("pyranometer1min", pyrano1min));
                          }*/

                        //}

                        /* Dictionary<string, object> dataEntry = new Dictionary<string, object>
                        {
                            { date, approveCount }
                        };
                        resultMap[siteName].Add(dataEntry);*/
                        // resultMap[siteName].Add((Dictionary<string, object>)dictionary);
                    }
                    //}


                    //Convert resultMap to the desired format
                }
                catch (Exception e)
                {
                    string msg = "Exception caught while fetching records from import batches, due to :" + e.ToString();
                }
            }
            var resultList = resultMap.Select(kvp => new Dictionary<string, object>
            {
                { "site", kvp.Key },
                { "data", kvp.Value }
            }).ToList();
            return resultList;
        }
        // Function to generate a sequence of dates between two given dates.
        IEnumerable<string> GetDateRange(string startDate, string endDate)
        {
            DateTime start = DateTime.Parse(startDate);
            DateTime end = DateTime.Parse(endDate);
            for (DateTime date = start; date <= end; date = date.AddDays(1))
            {
                yield return date.ToString("yyyy-MM-dd");
            }
        }

        //Operational Prformance Functions of v3
        //Fetch Operational Performance Comments Monthly.
        internal async Task<List<OPComments>> GetOPComments(string site_id, int month_no, int year, string spv, int siteType, int isSPV, int bdType, int isDisplay, int isMonthly)
        {
            string functionName = "GetOPComments";
            //site_type = 1 Solar, 2 : Wind 
            //isSPV : 0 = SPV, 1= Site.
            //isDisplay: 0 = display, 1: Edit
            string tableName = siteType == 1 ? "site_master_solar" : "site_master";
            string idName = siteType == 1 ? "sm.site_master_solar_id" : "sm.site_master_id";
            string fetch_qry = "";
            if (isSPV == 1)
            {
                //Site wise.
                if (isDisplay == 1)
                {
                    if (isMonthly == 0)
                    {
                        fetch_qry = $"SELECT op.OPC_id AS opc_id, op.month_no, op.year, op.type, op.site_id, op.BD_type, op.isMonthly, op.comment, sm.site FROM OPComments AS op LEFT JOIN {tableName} AS sm ON op.site_id = {idName} WHERE op.type = {siteType} AND op.isDeleted = 1 AND isSPV = {isSPV} AND op.isMonthly = {isMonthly} AND op.year = {year}  AND op.BD_type= {bdType} ORDER BY op.BD_type, sm.site;";
                    }
                    else
                    {
                        fetch_qry = $"SELECT op.OPC_id AS opc_id, op.month_no, op.year, op.type, op.site_id, op.BD_type, op.isMonthly, op.comment, sm.site FROM OPComments AS op LEFT JOIN {tableName} AS sm ON op.site_id = {idName} WHERE op.type = {siteType} AND op.isDeleted = 1 AND isSPV = {isSPV} AND op.isMonthly = {isMonthly} AND op.year = {year}  AND op.BD_type= {bdType} ORDER BY op.BD_type, sm.site;";
                    }
                }
                else if (isDisplay == 0)
                {
                    if (isMonthly == 0)
                    {
                        fetch_qry = $"SELECT op.OPC_id AS opc_id, op.month_no, op.year, op.type, op.spv, op.BD_type, op.isMonthly, op.comment, sm.site FROM OPComments AS op LEFT JOIN {tableName} AS sm ON op.site_id = {idName} WHERE op.type = {siteType} AND op.isDeleted = 1 AND isSPV = {isSPV} AND op.isMonthly = {isMonthly} AND op.site_id IN({site_id}) AND op.month_no IN({month_no}) AND op.year = {year} ORDER BY op.BD_type, sm.site;";
                    }
                    else
                    {
                        fetch_qry = $"SELECT op.OPC_id AS opc_id, op.month_no, op.year, op.type, op.spv, op.BD_type, op.isMonthly, op.comment, sm.site FROM OPComments AS op LEFT JOIN {tableName} AS sm ON op.site_id = {idName} WHERE op.type = {siteType} AND op.isDeleted = 1 AND isSPV = {isSPV} AND op.isMonthly = {isMonthly} AND op.site_id IN({site_id}) AND op.year = {year} ORDER BY op.BD_type, sm.site;";
                    }
                }
            }
            else if (isSPV == 0)
            {
                //SPV wise.
                string[] spvArray = spv.Split(',');
                spvArray = Array.FindAll(spvArray, s => !string.IsNullOrWhiteSpace(s));
                string TempSpv = string.Join("','", spvArray);
                TempSpv = $"'{TempSpv}'";
                if (isDisplay == 1)
                {
                    if (isMonthly == 0)
                    {
                        fetch_qry = $"SELECT op.OPC_id AS opc_id, op.month_no, op.year, op.type, op.spv, op.BD_type, op.isMonthly, op.comment FROM OPComments AS op  WHERE op.type = {siteType} AND op.isDeleted = 1 AND isSPV = {isSPV} AND op.isMonthly = {isMonthly} AND op.spv IN({TempSpv}) AND op.month_no IN({month_no}) AND op.year = {year} AND op.BD_type= {bdType} ORDER BY op.BD_type, op.spv;";
                    }
                    else
                    {
                        fetch_qry = $"SELECT op.OPC_id AS opc_id, op.month_no, op.year, op.type, op.spv, op.BD_type, op.isMonthly, op.comment FROM OPComments AS op WHERE op.type = {siteType} AND op.isDeleted = 1 AND isSPV = {isSPV} AND op.isMonthly = {isMonthly} AND op.spv IN({TempSpv}) AND op.year = {year} AND op.BD_type= {bdType} ORDER BY op.BD_type, op.spv;";
                    }
                }
                else if (isDisplay == 0)
                {
                    if (isMonthly == 0)
                    {
                        fetch_qry = $"SELECT op.OPC_id AS opc_id, op.month_no, op.year, op.type, op.spv, op.BD_type, op.isMonthly, op.comment FROM OPComments AS op WHERE op.type = {siteType} AND op.isDeleted = 1 AND isSPV = {isSPV} AND op.isMonthly = {isMonthly} AND op.spv IN({TempSpv}) AND op.month_no IN({month_no}) AND op.year = {year} ORDER BY op.BD_type, op.spv;";
                    }
                    else
                    {
                        fetch_qry = $"SELECT op.OPC_id AS opc_id, op.month_no, op.year, op.type, op.spv, op.BD_type, op.isMonthly, op.comment FROM OPComments AS op WHERE op.type = {siteType} AND op.isDeleted = 1 AND isSPV = {isSPV} AND op.isMonthly = {isMonthly} AND op.spv IN({TempSpv}) AND op.year = {year} ORDER BY op.BD_type, op.spv;";
                    }
                }
            }

            List<OPComments> _CommentsData = new List<OPComments>();

            try
            {
                _CommentsData = await Context.GetData<OPComments>(fetch_qry).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                string msg = "Exception caught while fetching data from OPComments table due to, " + e.ToString();
                LogError(0, 1, 7, functionName, msg, backend);
            }

            return _CommentsData;
        }
        //Operational Performance Comments Insert Comment function.
        internal async Task<int> OPCommentsInsert(List<OPComments> set)
        {
            string functionName = "OPCommentsInsert";
            int result = 0;
            int val = 0;
            int dataCount = set.Count;
            int Sitetype = 2; //2=wind, 1= Solar
            Hashtable SPV_siteHash = new Hashtable();
            try
            {
                if (dataCount > 0)
                {
                    Sitetype = set[0].type;
                    if (set[0].isSPV == 1)
                    {
                        SPV_siteHash = await SiteId_SPVHashTableWind(Sitetype);
                    }
                }
            }
            catch (Exception e)
            {
                string msg = "Exception while gettign spvHashtable, due to: " + e.ToString();
                LogError(0, 1, 7, functionName, msg, backend);
                return 0;
            }
            if (set.Count > 0 && SPV_siteHash.Count > 0)
            {
                string insertQry = "INSERT INTO OPComments (month, month_no, year, type, spv, site_id, BD_type, isDeleted, isMonthly, isSPV, comment, added_by, updated_by) VALUES ";
                string insert_values = "";
                //HashSet<string> site_ids = new HashSet<string>();
                //HashSet<string> month_no = new HashSet<string>();
                //HashSet<string> year = new HashSet<string>();

                foreach (var _element in set)
                {
                    if (_element.isSPV == 1)
                    {
                        string spvTemp = SPV_siteHash[_element.site_id].ToString();
                        string decodedComment = HttpUtility.UrlDecode(_element.comment);
                        insert_values += $"('{_element.month}', {_element.month_no}, {_element.year}, {_element.type}, '{spvTemp}', {_element.site_id}, {_element.bd_type}, 1, {_element.isMonthly}, {_element.isSPV}, '{decodedComment}', {_element.added_by}, {_element.updated_by}),";
                    }
                    else
                    {
                        string decodedComment = HttpUtility.UrlDecode(_element.comment);
                        insert_values += $"('{_element.month}', {_element.month_no}, {_element.year}, {_element.type}, '{_element.spv}', 0, {_element.bd_type}, 1, {_element.isMonthly}, {_element.isSPV}, '{decodedComment}', {_element.added_by}, {_element.updated_by}),";
                    }

                    //site_ids.Add(Convert.ToString(_element.site_id));
                    //month_no.Add(Convert.ToString(_element.month_no));
                    //year.Add(Convert.ToString(_element.year));
                }
                //try
                //{
                //    string delQry = "DELETE ";
                //    result = 1;
                //}
                //catch (Exception e)
                //{
                //    string msg = "Exception while deleting data from OPComments table due to, " + e.ToString();
                //    LogError(0, 1, 7, functionName, msg, backend);
                //    return 0;
                //}
                try
                {
                    //Insert query.
                    string finalInsertQry = insertQry + insert_values;
                    val = await Context.ExecuteNonQry<int>(finalInsertQry.Substring(0, (finalInsertQry.Length - 1)) + ";").ConfigureAwait(false);
                    result = val;
                }
                catch (Exception e)
                {
                    string msg = "Exception while inserting data into OPComments into table, due to :" + e.ToString();
                    LogError(0, 1, 7, functionName, msg, backend);
                    return 0;
                }

            }
            else
            {
                //set is empty.
            }
            return result;
        }
        //Operational Performance Comments Get SPV function.
        //internal async Task<List<OPSPV>> OPGetSPVListForEdit(string month_no, int year, int siteType, string siteId)
        //{
        //    string functionName = "OPGetSPVListForEdit";
        //    int result = 0;
        //    List<OPSPV> spvDatafromMaster = new List<OPSPV>();
        //    List<OPSPV> spvDataFromOP = new List<OPSPV>();
        //    List<OPSPV> finalSPVList = new List<OPSPV>();

        //    //get data from OP table as per filter.
        //    string fetchQry = $"SELECT op.spv AS spv FROM OPComments AS op LEFT JOIN site_master AS sm ON op.site_id = sm.site_master_id WHERE month_no IN({month_no}) AND year IN({year}) AND siteType IN({siteType});";
        //    try
        //    {
        //        spvDataFromOP = await Context.GetData<OPSPV>(fetchQry).ConfigureAwait(false);
        //        result = 1;
        //    }
        //    catch (Exception e)
        //    {
        //        string msg = "Exception while fetching data from OPComments table dur to, " + e.ToString();
        //        LogError(0, 1, 7, functionName, msg, backend);
        //    }

        //    //Get data from master table.
        //    string fetchQryMaster = $"SELECT spv AS spv FROM site_master WHERE site_master_id IN(" + siteId;
        //    try
        //    {
        //        spvDatafromMaster = await Context.GetData<OPSPV>(fetchQryMaster).ConfigureAwait(false);
        //        result = 2;
        //    }
        //    catch (Exception e)
        //    {
        //        string msg = "Exception while fetching data from OPComments table dur to, " + e.ToString();
        //        LogError(0, 1, 7, functionName, msg, backend);
        //    }
        //    if(result == 2)
        //    {
        //        foreach (var masterSPV in spvDatafromMaster)
        //        {
        //            // Check if the spv is not present in spvDataFromOP
        //            if (!spvDataFromOP.Any(opSPV => opSPV.spv == masterSPV.spv))
        //            {
        //                finalSPVList.Add(masterSPV);
        //            }
        //        }
        //    }

        //    return finalSPVList;
        //}
        //Operational Performance Comments Get Site function.
        internal async Task<List<OPSite>> OPGetSiteListForEdit(string month_no, string year, int siteType, int bdTypes, int isMonthly)
        {
            string functionName = "OPGetSiteListForEdit";
            int result = 0;
            string filter = "ORDER BY site;";
            //if (siteId != null)
            //{
            //    filter = $" WHERE site_master_id IN({siteId}) ORDER BY site;";
            //}

            List<OPSite> siteDatafromMaster = new List<OPSite>();
            List<OPSite> siteDataFromOP = new List<OPSite>();
            List<OPSite> finalSiteList = new List<OPSite>();

            //get data from OP table as per filter.
            string fetchQry = "";
            if (isMonthly == 0)
            {
                fetchQry = $"SELECT op.site_id AS site_id FROM OPComments AS op WHERE month_no IN({month_no}) AND isMonthly= {isMonthly}  AND isSPV = 1 AND BD_type = '{bdTypes}' AND isDeleted = 1 AND year IN({year}) AND type IN({siteType}) ORDER BY site_id;";
            }
            else
            {
                fetchQry = $"SELECT op.site_id AS site_id FROM OPComments AS op WHERE isMonthly= {isMonthly}  AND isSPV = 1 AND BD_type = '{bdTypes}' AND isDeleted = 1 AND year IN({year}) AND type IN({siteType}) ORDER BY site_id;";
            }
            try
            {
                siteDataFromOP = await Context.GetData<OPSite>(fetchQry).ConfigureAwait(false);
                result = 1;
            }
            catch (Exception e)
            {
                string msg = "Exception while fetching data from OPComments table dur to, " + e.ToString();
                LogError(0, 1, 7, functionName, msg, backend);
            }

            //Get data from master table.
            string fetchQryMaster = "";
            if (siteType == 2)
            {
                fetchQryMaster = $"SELECT site_master_id AS site_id, site FROM site_master ORDER BY site_id;"; //{filter}
            }
            else
            {
                fetchQryMaster = $"SELECT site_master_solar_id AS site_id, site FROM site_master_solar ORDER BY site_id;"; //{filter}
            }
            try
            {
                siteDatafromMaster = await Context.GetData<OPSite>(fetchQryMaster).ConfigureAwait(false);
                result = 2;
            }
            catch (Exception e)
            {
                string msg = "Exception while fetching data from OPComments table dur to, " + e.ToString();
                LogError(0, 1, 7, functionName, msg, backend);
            }
            if (result == 2)
            {
                foreach (var masterSite in siteDatafromMaster)
                {
                    // Check if the site is not present in siteDataFromOP
                    if (!siteDataFromOP.Any(opSite => opSite.site_id == masterSite.site_id))
                    {
                        finalSiteList.Add(masterSite);
                    }
                }
            }

            return finalSiteList;
        }
        internal async Task<List<OPSPV>> OPGetSpvListForEdit(string month_no, string year, int siteType, int bdTypes, int isMonthly)
        {
            string functionName = "OPGetSpvListForEdit";
            //site_type = 1 Solar, 2 : Wind 
            //isSPV : 0 = SPV, 1= Site.
            //isDisplay: 0 = display, 1: Edit
            int result = 0;
            string filter = "ORDER BY spv;";
            //if (siteId != null)
            //{
            //    filter = $" WHERE site_master_id IN({siteId}) ORDER BY site;";
            //}

            List<OPSPV> spvDatafromMaster = new List<OPSPV>();
            List<OPSPV> spvDataFromOP = new List<OPSPV>();
            List<OPSPV> finalSpvList = new List<OPSPV>();

            //get data from OP table as per filter.
            string fetchQry = "";
            if (isMonthly == 0)
            {
                //monthly
                fetchQry = $"SELECT op.spv AS spv FROM OPComments AS op WHERE month_no IN({month_no}) AND isMonthly= {isMonthly} AND isSPV = 0 AND BD_type = '{bdTypes}' AND isDeleted = 1 AND year IN({year}) AND type ={siteType} ORDER BY spv;";
            }
            else
            {
                //yearly
                fetchQry = $"SELECT op.spv AS spv FROM OPComments AS op WHERE isMonthly= {isMonthly} AND BD_type = '{bdTypes}' AND isSPV = 0 AND isDeleted = 1 AND year IN({year}) AND type = {siteType}  ORDER BY spv;";
            }
            try
            {
                spvDataFromOP = await Context.GetData<OPSPV>(fetchQry).ConfigureAwait(false);
                result = 1;
            }
            catch (Exception e)
            {
                string msg = "Exception while fetching data from OPComments table dur to, " + e.ToString();
                LogError(0, 1, 7, functionName, msg, backend);
            }

            //Get data from master table.
            string fetchQryMaster = "";
            if (siteType == 2)
            {
                fetchQryMaster = $"SELECT DISTINCT spv AS spv FROM site_master  ORDER BY spv;"; //{filter}
            }
            else
            {
                fetchQryMaster = $"SELECT DISTINCT spv AS spv FROM site_master_solar  ORDER BY spv;"; //{filter}
            }
            try
            {
                spvDatafromMaster = await Context.GetData<OPSPV>(fetchQryMaster).ConfigureAwait(false);
                result = 2;
            }
            catch (Exception e)
            {
                string msg = "Exception while fetching data from OPComments table dur to, " + e.ToString();
                LogError(0, 1, 7, functionName, msg, backend);
            }
            if (result == 2)
            {
                foreach (var masterSpv in spvDatafromMaster)
                {
                    // Check if the site is not present in siteDataFromOP
                    if (!spvDataFromOP.Any(opSpv => opSpv.spv == masterSpv.spv))
                    {
                        finalSpvList.Add(masterSpv);
                    }
                }
            }

            return finalSpvList;
        }
        //Operational Performance Comments Edit function.
        internal async Task<int> OPCommentsEdit(List<OPComments> set)
        {
            string functionName = "OPCEdit";

            int result = 0;
            string updateQry = "";

            foreach (var _upData in set)
            {
                string decodedComment = HttpUtility.UrlDecode(_upData.updated_comment);
                string decodedOldComment = HttpUtility.UrlDecode(_upData.comment);
                //at api side elements required are updated_by, updated_comment, isSPV, comment, site, month_no, year, isMonthly, isDeleted, spv
                updateQry += $"UPDATE OPComments SET comment='{decodedComment}', old_comment='{decodedOldComment}', updated_by= {_upData.updated_by}, updated_at = CURRENT_TIMESTAMP WHERE OPC_id = {_upData.opc_id};";
                //if (_upData.isSPV == 1)
                //{
                //    updateQry += $"UPDATE OPComments SET comment='{_upData.updated_comment}', old_comment='{_upData.comment}', updated_by= {_upData.updated_by}, updated_at = CURRENT_TIMESTAMP WHERE type = {_upData.type} AND isDeleted={_upData.isDeleted} AND site_id = {_upData.site_id} AND isMonthly = {_upData.isMonthly} AND year={_upData.year} AND month_no = {_upData.month_no}  AND bd_type = '{_upData.bd_type}';";
                //}
                //else
                //{
                //    updateQry += $"UPDATE OPComments SET comment='{_upData.updated_comment}', old_comment='{_upData.comment}', updated_by= {_upData.updated_by}, updated_at = CURRENT_TIMESTAMP WHERE type = {_upData.type} AND isDeleted={_upData.isDeleted} AND spv = {_upData.spv} AND isMonthly = {_upData.isMonthly} AND year={_upData.year} AND month_no = {_upData.month_no}  AND bd_type = '{_upData.bd_type}';";
                //}
            }
            try
            {
                int res = await Context.ExecuteNonQry<int>(updateQry).ConfigureAwait(false);
                result = 1;
            }
            catch (Exception e)
            {
                string msg = $"Exception caught while updating data into OPComments table, due to : {e.ToString()}";
                LogError(0, 1, 7, functionName, msg, backend);
                return result;
            }
            return result;
        }
        internal async Task<int> OPCommentsDelete(List<OPComments> set)
        {
            string functionName = "OPCommentsDelete";

            int result = 0;
            string updateQry = "";

            foreach (var _upData in set)
            {
                updateQry += $"UPDATE OPComments SET deleted_by= {_upData.deleted_by}, isDeleted= 0, deleted_at = CURRENT_TIMESTAMP WHERE OPC_id = {_upData.opc_id};";
            }
            try
            {
                int res = await Context.ExecuteNonQry<int>(updateQry).ConfigureAwait(false);
                result = 1;
            }
            catch (Exception e)
            {
                string msg = $"Exception caught while updating data into OPComments table, due to : {e.ToString()}";
                LogError(0, 1, 7, functionName, msg, backend);
                return result;
            }
            return result;
        }
        internal async Task<Hashtable> SiteId_SPVHashTableWind(int Sitetype)
        {
            string functionName = "SiteId_SPVHashTableWind";
            Hashtable spvSite = new Hashtable();
            List<SPVSiteWind> spvSiteData = new List<SPVSiteWind>();

            string query = "";
            if (Sitetype == 2)
            {
                query = "Select site_master_id AS site_id, site, spv FROM site_master;";
            }
            else
            {
                query = "Select site_master_solar_id AS site_id, site, spv FROM site_master_solar;";
            }
            try
            {
                spvSiteData = await Context.GetData<SPVSiteWind>(query).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                string msg = "Exception while fetching site Spv data from database, due to : " + e.ToString();
                LogError(0, 1, 7, functionName, msg, backend);
            }
            if (spvSiteData.Count > 1)
            {
                foreach (var element in spvSiteData)
                {
                    spvSite.Add(element.site_id, element.spv);
                }
            }

            return spvSite;
        }

        //wind Expected vs actual daily basis calculation function.
        internal async Task<int> CalculateDailyExpected(string site, string data_date)
        {
            string functionName = "CalculateDailyExpected";
            int returnRes = 0;
            //API_ErrorLog("CalculateDailyExpected Called with parameters : site : " + site + " and data_date : " + data_date);
            List<GetWindTMLGraphData> _tmlDataList = new List<GetWindTMLGraphData>();
            List<ExpectedVsActualDaily> _tmlAllData = new List<ExpectedVsActualDaily>();
            //string fdate = Convert.ToDateTime(fromDate).ToString("dd-MMM-yy");
            //string todate = Convert.ToDateTime(toDate).ToString("dd-MMM-yy");
            string tmrFilter = "Date(Time_stamp) = '" + data_date + "'";
            double target_sum = 0;
            double lineloss_percentage = 0;
            double allSum = 0;
            int wtgNumber = 0;
            try
            {
                if (!string.IsNullOrEmpty(site))
                {
                    tmrFilter += " and site_id IN(" + site + ") ";
                }
                /*

                SELECT site_id, WTGs AS wtg, DATE(Time_stamp) AS data_date, SUM(avg_wind_speed) AS actual_wind_speed, SUM(avg_active_power) AS actual_active_power, SUM(recon_wind_speed) AS recon_wind_speed, SUM(exp_power_kw) AS expected_power, t2.controller_kwh AS controller_kwh, COUNT(*) AS tml_count, SUM(CASE WHEN all_bd = 'EGBD' THEN loss_kw ELSE 0 END)/1000000 AS `egbd_loss`, SUM(CASE WHEN all_bd = 'HealthCheck' THEN loss_kw ELSE 0 END)/1000000 AS `healthcheck_loss`, SUM(CASE WHEN all_bd = 'IGBD' THEN loss_kw ELSE 0 END)/1000000 AS `igbd_loss`, SUM(CASE WHEN all_bd = 'Initialization' THEN loss_kw ELSE 0 END)/1000000 AS `initialization_loss`, SUM(CASE WHEN all_bd = 'LoadShedding' THEN loss_kw ELSE 0 END)/1000000 AS `loadshedding_loss`, SUM(CASE WHEN all_bd = 'LULL' THEN loss_kw ELSE 0 END)/1000000 AS `lull_loss`, SUM(CASE WHEN all_bd = 'NC' THEN loss_kw ELSE 0 END)/1000000 AS `nc_loss`, SUM(CASE WHEN all_bd = 'OtherHour' THEN loss_kw ELSE 0 END)/1000000 AS `others_loss`, SUM(CASE WHEN all_bd = 'PCD' THEN loss_kw ELSE 0 END)/1000000 AS `pcd_loss`, SUM(CASE WHEN all_bd = 'Runup' THEN loss_kw ELSE 0 END)/1000000 AS `runup_loss`, SUM(CASE WHEN all_bd = 'Setup' THEN loss_kw ELSE 0 END)/1000000 AS `setup_loss`, SUM(CASE WHEN all_bd = 'SMH' THEN loss_kw ELSE 0 END)/1000000 AS `smh_loss`, SUM(CASE WHEN all_bd = 'Startup' THEN loss_kw ELSE 0 END)/1000000 AS `startup_loss`, SUM(CASE WHEN all_bd = 'USMH' THEN loss_kw ELSE 0 END)/1000000 AS `usmh_loss`, t2.ma AS ma, t2.iga AS iga, t2.ega_a AS ega_a, t2.ega_b AS ega_b, t2.ega_c AS ega_c FROM uploading_file_tmr_data LEFT JOIN (SELECT wtg, site_id AS sid, SUM(kwh) as controller_kwh, ma_actual AS ma, iga, ega AS ega_a, ega_b, ega_c FROM `daily_gen_summary` WHERE site_id IN(222) AND date >= '2024-01-28' AND date <= '2024-01-28' GROUP BY wtg) AS t2 ON WTGs = t2.wtg WHERE DATE(Time_stamp) BETWEEN '2024-01-28' AND '2024-01-28' AND site_id IN (222) GROUP BY WTGs;
                 
                 */
                //string fetchLossQry = "SELECT CASE WHEN all_bd = 'Load Shedding' THEN 'loadShedding' ELSE all_bd END as all_bd, SUM(loss_kw)/1000000 as loss_kw FROM `uploading_file_tmr_data` WHERE " + tmrFilter + " GROUP BY all_bd;";
                string AllTMLDataQuery = $"SELECT site_id, wtg_id, WTGs AS wtg, DATE(Time_stamp) AS data_date, AVG(CASE WHEN avg_wind_speed > 0 THEN avg_wind_speed ELSE 0 END) AS actual_wind_speed, SUM(avg_active_power) AS actual_active_power, AVG(recon_wind_speed) AS recon_wind_speed, SUM(exp_power_kw) AS expected_power, t2.controller_kwh AS controller_kwh, COUNT(*) AS tml_count, SUM(CASE WHEN all_bd = 'EGBD' THEN loss_kw ELSE 0 END)/1000000 AS `egbd_loss`, SUM(CASE WHEN all_bd = 'HealthCheck' THEN loss_kw ELSE 0 END)/1000000 AS `healthcheck_loss`, SUM(CASE WHEN all_bd = 'IGBD' THEN loss_kw ELSE 0 END)/1000000 AS `igbd_loss`, SUM(CASE WHEN all_bd = 'Initialization' THEN loss_kw ELSE 0 END)/1000000 AS `initialization_loss`, SUM(CASE WHEN all_bd = 'LoadShedding' THEN loss_kw ELSE 0 END)/1000000 AS `loadshedding_loss`, SUM(CASE WHEN all_bd = 'LULL' THEN loss_kw ELSE 0 END)/1000000 AS `lull_loss`, SUM(CASE WHEN all_bd = 'NC' THEN loss_kw ELSE 0 END)/1000000 AS `nc_loss`, SUM(CASE WHEN all_bd = 'OtherHour' THEN loss_kw ELSE 0 END)/1000000 AS `others_loss`, SUM(CASE WHEN all_bd = 'PCD' THEN loss_kw ELSE 0 END)/1000000 AS `pcd_loss`, SUM(CASE WHEN all_bd = 'Runup' THEN loss_kw ELSE 0 END)/1000000 AS `runup_loss`, SUM(CASE WHEN all_bd = 'Setup' THEN loss_kw ELSE 0 END)/1000000 AS `setup_loss`, SUM(CASE WHEN all_bd = 'SMH' THEN loss_kw ELSE 0 END)/1000000 AS `smh_loss`, SUM(CASE WHEN all_bd = 'Startup' THEN loss_kw ELSE 0 END)/1000000 AS `startup_loss`, SUM(CASE WHEN all_bd = 'USMH' THEN loss_kw ELSE 0 END)/1000000 AS `usmh_loss`, t2.ma AS ma, t2.iga AS iga, t2.ega_a AS ega_a, t2.ega_b AS ega_b, t2.ega_c AS ega_c FROM uploading_file_tmr_data LEFT JOIN (SELECT wtg, site_id AS sid, kwh as controller_kwh, ma_actual AS ma, iga, ega AS ega_a, ega_b, ega_c FROM `daily_gen_summary` WHERE site_id = { site } AND date = '{ data_date }' GROUP BY wtg) AS t2 ON WTGs = t2.wtg WHERE { tmrFilter } GROUP BY WTGs;";

                try
                {
                    //API_ErrorLog("INFO******* AllTMLDataQuery : " + AllTMLDataQuery);
                    _tmlAllData = await Context.GetData<ExpectedVsActualDaily>(AllTMLDataQuery).ConfigureAwait(false);
                    returnRes = 1;
                }
                catch (Exception e)
                {
                    string msg = "Exception while fetching records from uploading_file_tmr_data , due to  : " + e.ToString();
                    //API_ErrorLog("ERROR******* " + msg);
                    //LogError(0, 2, 5, functionName, msg, backend);
                    return returnRes;
                }
            }
            catch (Exception e)
            {
                string msg = "Exception while fetching records from tml_data table for daily calculation wtgs wise, due to  : " + e.ToString();
                //API_ErrorLog("ERROR******* " + msg);
                LogError(0, 2, 5, functionName, msg, backend);
                return returnRes;
            }

            if (_tmlAllData.Count > 0)
            {
                //Fetch the WTG count from location master table.
                string wtgCountQuery = $"SELECT COUNT(*) AS wtg_number FROM location_master WHERE site_master_id IN({site}) AND status = 1;";
                try
                {
                    //API_ErrorLog("INFO******* Wtg count query : "+ wtgCountQuery);
                    List<ExpectedVsActualDaily> wtgCount = new List<ExpectedVsActualDaily>();
                    wtgCount = await Context.GetData<ExpectedVsActualDaily>(wtgCountQuery).ConfigureAwait(false);
                    if (wtgCount.Count > 0)
                    {
                        wtgNumber = Convert.ToInt32(wtgCount[0].wtg_number);
                    }
                    returnRes = 2;
                }
                catch (Exception e)
                {
                    string msg = "Exception while fetching wtg count from the location master table, due to : " + e.ToString();
                    //API_ErrorLog("ERROR******* " + msg);
                    LogError(0, 2, 5, functionName, msg, backend);
                    return returnRes;
                }

                //Fetch target sum from daily target kpi.
                string fetchTargetQry = "SELECT SUM(kwh) as target_sum FROM `daily_target_kpi` WHERE site_id =" + site + " AND date = '" + data_date + "';";
                try
                {
                    //API_ErrorLog("INFO******* fetch target query : " + fetchTargetQry);
                    _tmlDataList = await Context.GetData<GetWindTMLGraphData>(fetchTargetQry).ConfigureAwait(false);
                    returnRes = 3;
                }
                catch (Exception e)
                {
                    string msg = "Exception while Fetching target sum form daily_target_kpi, due to : " + e.ToString();
                    //API_ErrorLog("ERROR******* " + msg);
                    LogError(0, 2, 5, functionName, msg, backend);
                    return returnRes;
                }
                if (_tmlDataList.Count > 0)
                {
                    try
                    {
                        foreach (var unit in _tmlDataList)
                        {
                            target_sum = unit.target_sum;
                        }
                        target_sum /= wtgNumber;
                        returnRes = 4;
                    }
                    catch (Exception e)
                    {
                        string msg = "Exception while Extracting target sum from _tmlDataList, due to : " + e.ToString();
                        //API_ErrorLog("ERROR******* " + msg);
                        LogError(0, 2, 5, functionName, msg, backend);
                        return returnRes;

                    }
                }
                _tmlDataList.Clear();

                //Actual from daily generation summary.
                //SELECT wtg, site_id, SUM(kwh) as controller_kwh FROM `daily_gen_summary` WHERE site_id IN(222) AND date >= '2024-01-28' AND date <= '2024-01-28' GROUP BY wtg;
                //Already got in main tml data by joining above query.

                //Fetch the lineloss from the monthly lineloss table.
                string dataMonth = Convert.ToDateTime(data_date).ToString("MM");
                string dataYear = Convert.ToDateTime(data_date).ToString("yyyy");

                string fetchLinelossPerQry = "SELECT line_loss as line_loss_per FROM `monthly_uploading_line_losses` WHERE site_id =" + site + " AND month_no = " + dataMonth + " AND year =" + dataYear + ";";
                try
                {
                    //API_ErrorLog("INFO******* fetch lineloss query : " + fetchLinelossPerQry);
                    _tmlDataList = await Context.GetData<GetWindTMLGraphData>(fetchLinelossPerQry).ConfigureAwait(false);
                    returnRes = 5;
                }
                catch (Exception e)
                {
                    string msg = "Exception while fetching lineloss percentage from mothly_uploading_lineloss, due to : " + e.ToString();
                    //API_ErrorLog("ERROR******* " + msg);
                    LogError(0, 2, 5, functionName, msg, backend);
                    return returnRes;

                }
                if (_tmlDataList.Count > 0)
                {
                    try
                    {
                        foreach (var unit in _tmlDataList)
                        {
                            lineloss_percentage = unit.line_loss_per;
                        }
                        returnRes = 6;
                    }
                    catch (Exception e)
                    {
                        string msg = "Exception while extracting lineloss percentage from _tmlDataList, due to : " + e.ToString();
                        //API_ErrorLog("ERROR******* " + msg);
                        LogError(0, 2, 5, functionName, msg, backend);
                        return returnRes;
                    }
                }
                _tmlDataList.Clear();


                //After fetching all the required data from various tables finally calculating the data.
                string insertQry = "INSERT INTO daily_expected_vs_actual (site_id, data_date, wtg_id, wtg, tml_count, actual_wind_speed, actual_active_power, recon_wind_speed, expected_power, usmh_loss, smh_loss, others_loss, igbd_loss, egbd_loss, loadshedding_loss, pcd_loss, lull_loss, nc_loss, healthcheck_loss, setup_loss, initialization_loss, startup_loss, controller_kwh, lineloss_mu, jmr_kwh, target_kwh, adjusted_expected, difference_expected, ma, iga, ega_a, ega_b, ega_c) VALUES";
                string insertValues = "";
                string finalinsertQuery = "";
                foreach (var uni in _tmlAllData)
                {
                    uni.target_kwh = target_sum;
                    uni.expected_power = (uni.expected_power/6)/ 1000000;
                    string dateTem = Convert.ToDateTime(uni.data_date).ToString("yyyy-MM-dd");
                    uni.data_date = dateTem;

                    //lineloss calculation.
                    double lineloss = lineloss_percentage / 100;
                    double temp = (lineloss * uni.controller_kwh) * -1; //6;
                    uni.lineloss_mu = temp / 1000000;

                    //calculating jmr kwh
                    uni.jmr_kwh = (uni.controller_kwh / 1000000) + uni.lineloss_mu;

                    //Calculating the difference
                    allSum = uni.expected_power + uni.usmh_loss + uni.smh_loss + uni.igbd_loss + uni.egbd_loss + uni.others_loss + uni.pcd_loss + uni.loadshedding_loss + uni.lineloss_mu;
                    uni.difference_expected = uni.jmr_kwh - allSum;
                    if (uni.difference_expected != 0)
                    {
                        uni.adjusted_expected = uni.expected_power + uni.difference_expected;
                    }
                    else
                    {
                        uni.adjusted_expected = uni.expected_power;
                    }

                    //insertValues += $"({uni.site_id}, '{uni.data_date}', {uni.wtg_id}, '{uni.wtg}', {uni.tml_count}, {uni.actual_wind_speed}, {((uni.actual_active_power / 6) / 1000000)}, {uni.recon_wind_speed}, {uni.expected_power}, {uni.usmh_loss}, {uni.smh_loss}, {uni.others_loss}, {uni.igbd_loss}, {uni.egbd_loss}, {uni.loadshedding_loss}, {uni.pcd_loss}, {uni.lull_loss}, {uni.nc_loss}, {uni.healthcheck_loss}, {uni.setup_loss}, {uni.initialization_loss}, {uni.startup_loss}, {(uni.controller_kwh / 1000000)}, {uni.lineloss_mu}, {uni.jmr_kwh}, {(uni.target_kwh / 1000000)}, {uni.adjusted_expected}, {uni.difference_expected}, {uni.ma}, {uni.iga}, {uni.ega_a}, {uni.ega_b}, {uni.ega_c}),";
                    insertValues += $"({uni.site_id}, '{uni.data_date}', {uni.wtg_id}, '{uni.wtg}', {uni.tml_count}, {uni.actual_wind_speed}, {((uni.actual_active_power / 6) / 1000000)}, {uni.recon_wind_speed}, {uni.expected_power}, {uni.usmh_loss}, {uni.smh_loss}, {uni.others_loss}, {uni.igbd_loss}, {uni.egbd_loss}, {uni.loadshedding_loss}, {uni.pcd_loss}, {uni.lull_loss}, {uni.nc_loss}, {uni.healthcheck_loss}, {uni.setup_loss}, {uni.initialization_loss}, {uni.startup_loss}, {(uni.controller_kwh / 1000000)}, {uni.lineloss_mu}, {uni.jmr_kwh}, {(uni.target_kwh / 1000000)}, {uni.adjusted_expected}, {uni.difference_expected}, {100 + ((uni.usmh_loss + uni.smh_loss) / uni.adjusted_expected)}, {100 + (uni.igbd_loss/uni.adjusted_expected)}, {100 + ((uni.egbd_loss + uni.loadshedding_loss) / uni.adjusted_expected)}, {100+(uni.egbd_loss / uni.adjusted_expected)}, {100 + (uni.loadshedding_loss / uni.adjusted_expected)}),";
                }
                finalinsertQuery = insertQry + insertValues;
                finalinsertQuery = finalinsertQuery.Substring(0, (finalinsertQuery.Length - 1)) + ";";

                bool isDelete = false;
                try
                {
                    //Delete previous data if any.
                    string deleteQry = $"DELETE FROM daily_expected_vs_actual WHERE site_id IN({site}) AND data_date = '{data_date}';";
                    //API_ErrorLog("INFO******* Delete query : " + deleteQry);
                    int delres = await Context.ExecuteNonQry<int>(deleteQry).ConfigureAwait(false);
                    isDelete = true;
                    returnRes = 7;
                }
                catch (Exception e)
                {
                    string msg = "Exception while deleting previous records if any, due to : " + e.ToString();
                    //API_ErrorLog("ERROR******* " + msg);
                    LogError(0, 2, 5, functionName, msg, backend);
                    return returnRes;
                }

                if (isDelete)
                {
                    //API_ErrorLog("INFO******* insert query : " + finalinsertQuery);
                    int insertRes = await Context.ExecuteNonQry<int>(finalinsertQuery).ConfigureAwait(false);
                    returnRes = 8;
                    //API_ErrorLog("INFO******* Inserted data successfully.");
                }
            }
            else
            {
                return 1000; //No data retrived from the tml data. i.e. no data in tml data for respective date site.
            }

            _tmlDataList.Clear();

            return returnRes;
        }
        internal async Task<int> CalculateDailyExpectedSolar(string site, string fromDate, string toDate)
        {
            string functionName = "GetSolarExpectedReport";
            int returnRes = 0;
            bool AOPDataAdded = false;
            bool TopliningDataAdded = false;
            string insertDates = "";

            string filter = "";
            int chkfilter = 0;
            if (!string.IsNullOrEmpty(fromDate) && !string.IsNullOrEmpty(toDate))
            {
                chkfilter = 1;
                filter += " where t1.date>='" + fromDate + "' and t1.date<='" + toDate + "' ";
            }
            if (!string.IsNullOrEmpty(site))
            {
                if (chkfilter == 0) filter += " where ";
                else
                {
                    filter += " and ";
                }
                filter += " t1.site_id in (" + site + ") ";
            }

            string aopQuery = "";
            string topliningQuery = "";
            //AOP query..
            //aopQuery = "select t2.pr, t2.toplining_PR, t1.site, t1.site_id, t1.date, sum(inv_kwh_afterloss) as inv_kwh, sum(t1.ghi) as ghi, sum(t1.poa) as poa, avg(t1.ma)as ma,avg(t1.iga) as iga, avg(t1.ega) as ega_a, avg(t1.ega_b) as ega_b, avg(t1.ega_c) as ega_c,sum(usmh) as usmh,sum(smh) as smh,sum(oh) as oh,sum(igbdh) as igbdh,sum(egbdh) as egbdh,sum(load_shedding) as load_shedding,sum(total_losses) as total_losses,t2.gen_nos as target, (SELECT SUM(P_exp_degraded)/60 FROM `uploading_pyranometer_1_min_solar` WHERE site_id = t1.site_id AND import_batch_id = t1.import_batch_id) AS Pexpected from daily_gen_summary_solar t1 left join daily_target_kpi_solar t2 on t1.site_id = t2.site_id and t1.date = t2.date " + filter + " group by t1.site, t1.date ";

            aopQuery = $"SELECT t2.pr, t2.toplining_PR, t1.site, t1.site_id, t1.date AS data_date, SUM(t1.inv_kwh) AS inv_kwh, SUM(t1.ghi) AS ghi, SUM(t1.poa) AS poa, AVG(t1.ma) AS ma,AVG(t1.iga) AS iga, AVG(t1.ega) AS ega_a, AVG(t1.ega_b) AS ega_b, AVG(t1.ega_c) AS ega_c, SUM(usmh) AS usmh, SUM(smh) AS smh, SUM(oh) AS others, SUM(igbdh) AS igbd, SUM(egbdh) AS egbd, SUM(load_shedding) AS loadShedding, SUM(total_losses) AS total_losses,t2.gen_nos AS target, (SELECT SUM(P_exp_degraded)/60 FROM `uploading_pyranometer_1_min_solar` WHERE site_id = t1.site_id AND import_batch_id = t1.import_batch_id) AS expected_power FROM daily_gen_summary_solar t1 LEFT JOIN daily_target_kpi_solar t2 ON t1.site_id = t2.site_id AND t1.date = t2.date { filter } GROUP BY t1.site, t1.date;";
            
            // toplining query...
            topliningQuery = "SELECT t2.pr, t2.toplining_PR, t1.site, t1.site_id, t1.date AS data_date, SUM(t1.inv_kwh) AS inv_kwh, SUM(t1.ghi) AS ghi, SUM(t1.poa) AS poa, AVG(t1.ma) AS ma, AVG(t1.iga) AS iga, AVG(t1.ega) AS ega_a, AVG(t1.ega_b) AS ega_b, AVG(t1.ega_c) AS ega_c, SUM(usmh)/t2.pr*t2.toplining_PR AS usmh, SUM(smh)/t2.pr*t2.toplining_PR AS smh, SUM(oh)/t2.pr*t2.toplining_PR AS others, SUM(igbdh)/t2.pr*t2.toplining_PR AS igbd, SUM(egbdh)/t2.pr*t2.toplining_PR AS egbd, SUM(load_shedding)/t2.pr*t2.toplining_PR AS loadShedding, SUM(total_losses)/t2.pr*t2.toplining_PR AS total_losses,t2.gen_nos AS target, (SELECT SUM(P_exp_degraded)/60 FROM `uploading_pyranometer_1_min_solar` WHERE site_id = t1.site_id AND import_batch_id = t1.import_batch_id) AS expected_power from daily_gen_summary_solar t1 LEFT JOIN daily_target_kpi_solar t2 ON t1.site_id = t2.site_id AND t1.date = t2.date " + filter + " GROUP BY t1.site, t1.date ";

            List<ExpectedVsActualSolarDaily> AOPData = new List<ExpectedVsActualSolarDaily>();
            List<ExpectedVsActualSolarDaily> TopLiningData = new List<ExpectedVsActualSolarDaily>();
            try
            {
                AOPData = await Context.GetData<ExpectedVsActualSolarDaily>(aopQuery).ConfigureAwait(false);
                returnRes = 1;
            }
            catch (Exception e)
            {
                string msg = "Exception while getting data from daily_gen_summary and daily_target_kpi_solar table for AOP, due to : " + e.ToString();
                //API_ErrorLog(msg);
                LogError(0, 1, 5, functionName, msg, backend);
                return returnRes;
            }
            if(AOPData.Count > 0)
            {
                try
                {
                    TopLiningData = await Context.GetData<ExpectedVsActualSolarDaily>(topliningQuery).ConfigureAwait(false);
                    returnRes = 2;
                }
                catch (Exception e)
                {
                    string msg = "Exception while getting data from daily_gen_summary and daily_target_kpi_solar table for Toplining, due to : " + e.ToString();
                    //API_ErrorLog(msg);
                    LogError(0, 1, 5, functionName, msg, backend);
                    return returnRes;
                }
            }
            

            string viewQry = "create or replace view expected_temp_view as SELECT t1.date,t3.site_master_solar_id as site_id, t3.site,t3.spv,(t3.ac_capacity*1000) as capacity,SUM(t1.inv_kwh) as kwh,t2.LineLoss,SUM(t1.inv_kwh)-SUM(t1.inv_kwh)*(t2.LineLoss/100) as kwh_afterloss,((SUM(t1.inv_kwh)-SUM(t1.inv_kwh)*(t2.LineLoss/100))/((t3.ac_capacity*1000)*24))*100 as plf_afterloss FROM `daily_gen_summary_solar` as t1 left join monthly_line_loss_solar as t2 on t2.site_id= t1.site_id and month_no=MONTH(t1.date) and year = year(t1.date) left join site_master_solar as t3 on t3.site_master_solar_id = t1.site_id group by t1.date ,t1.site";
            try
            {
                await Context.ExecuteNonQry<int>(viewQry).ConfigureAwait(false);
                returnRes = 3;
            }
            catch (Exception e)
            {
                string msg = "Exception while creating temp view, due to : " + e.ToString();
                LogError(0, 1, 5, functionName, msg, backend);
                return returnRes;
            }

            string viweFetchQry = "SELECT date,site, site_id, kwh_afterloss as jmr_kwh, plf_afterloss as plant_kwh, LineLoss AS lineloss FROM `expected_temp_view` where date between '" + fromDate + "' and '" + toDate + "' and site_id IN(" + site + ");";
            List<SolarExpectedvsActual> newdata = new List<SolarExpectedvsActual>();
            try
            {
                newdata = await Context.GetData<SolarExpectedvsActual>(viweFetchQry).ConfigureAwait(false);
                returnRes = 4;
            }
            catch (Exception e)
            {
                string msg = "Exception while fetching records from expected_temp_view, due to : " + e.ToString();
                //API_ErrorLog(msg);
                LogError(0, 1, 5, functionName, msg, backend);
                return returnRes;
            }

            try
            {
                //For AOP data.
                foreach (var _dataElement in AOPData)
                {
                    try
                    {
                        foreach (var _actualData in newdata)
                        {
                            if (_dataElement.data_date == _actualData.date && _dataElement.site_id == _actualData.site_id)
                            {
                                string tempDate = $"'{Convert.ToDateTime(_dataElement.data_date).ToString("yyyy-MM-dd")}',";
                                insertDates += tempDate;
                                double total_bd = (_dataElement.expected_power - _dataElement.usmh - _dataElement.smh - _dataElement.others - _dataElement.igbd - _dataElement.egbd - _dataElement.loadShedding);
                                //_dataElement.pr = _dataElement.inv_kwh - total_bd;
                                _dataElement.pr = (_actualData.jmr_kwh - total_bd) / 1000000;
                                //_dataElement.inv_kwh = _actualData.inv_kwh;
                                _dataElement.inv_kwh = _dataElement.inv_kwh / 1000000;
                                _dataElement.jmr_kwh = _actualData.jmr_kwh / 1000000;
                                //_dataElement.lineloss = _actualData.lineloss;
                                double lineloss = _actualData.lineloss / 100;
                                double temp = (lineloss * _dataElement.inv_kwh) * -1; //6;
                                _dataElement.lineloss = temp / 1000000;
                                _dataElement.expected_power = _dataElement.expected_power /1000000;
                                _dataElement.usmh = _dataElement.usmh /1000000;
                                _dataElement.smh = _dataElement.smh /1000000;
                                _dataElement.others = _dataElement.others /1000000;
                                _dataElement.igbd = _dataElement.igbd /1000000;
                                _dataElement.egbd = _dataElement.egbd /1000000;
                                _dataElement.loadShedding = _dataElement.loadShedding /1000000;
                            }
                        }
                        returnRes = 5;
                    }
                    catch (Exception e)
                    {
                        string msg = "Exception while adding actual value to the main list, due to : " + e.ToString();
                        //API_ErrorLog(msg);
                        LogError(0, 1, 5, functionName, msg, backend);
                        return returnRes;
                    }
                }
                returnRes = 6;
                AOPDataAdded = true;
            }
            catch (Exception e)
            {
                string msg = "Exception while inserting data into main AOP list, due to : " + e.ToString();
                //API_ErrorLog(msg);
                LogError(0, 1, 5, functionName, msg, backend);
                return returnRes;
            }
            try
            {
                //For Toplining data.
                foreach (var _dataElement in TopLiningData)
                {
                    try
                    {
                        foreach (var _actualData in newdata)
                        {
                            if (_dataElement.data_date == _actualData.date && _dataElement.site_id == _actualData.site_id)
                            {
                                string tempDate = $"'{Convert.ToDateTime(_dataElement.data_date).ToString("yyyy-MM-dd")}',";
                                insertDates += tempDate;
                                double total_bd = (_dataElement.expected_power - _dataElement.usmh - _dataElement.smh - _dataElement.others + _dataElement.igbd + _dataElement.egbd - _dataElement.loadShedding);
                                //_dataElement.pr = _dataElement.inv_kwh - total_bd;
                                _dataElement.pr = (_actualData.jmr_kwh - total_bd) / 1000000;
                                //_dataElement.inv_kwh = _actualData.inv_kwh;
                                _dataElement.inv_kwh = _dataElement.inv_kwh / 1000000;
                                _dataElement.jmr_kwh = _actualData.jmr_kwh / 1000000;
                                //_dataElement.lineloss = _actualData.lineloss;
                                double lineloss = _actualData.lineloss / 100;
                                double temp = (lineloss * _dataElement.inv_kwh) * -1; //6;
                                _dataElement.lineloss = temp / 1000000;
                                _dataElement.expected_power = _dataElement.expected_power / 1000000;
                                _dataElement.usmh = _dataElement.usmh / 1000000;
                                _dataElement.smh = _dataElement.smh / 1000000;
                                _dataElement.others = _dataElement.others / 1000000;
                                _dataElement.igbd = _dataElement.igbd / 1000000;
                                _dataElement.egbd = _dataElement.egbd / 1000000;
                                _dataElement.loadShedding = _dataElement.loadShedding / 1000000;
                            }
                        }
                        returnRes = 7;
                    }
                    catch (Exception e)
                    {
                        string msg = "Exception while adding actual value to the main toplining list, due to : " + e.ToString();
                        //API_ErrorLog(msg);
                        LogError(0, 1, 5, functionName, msg, backend);
                        return returnRes;
                    }
                }
                returnRes = 8;
                TopliningDataAdded = true;
            }
            catch (Exception e)
            {
                string msg = "Exception while inserting data into main list, due to : " + e.ToString();
                //API_ErrorLog(msg);
                LogError(0, 1, 5, functionName, msg, backend);
                return returnRes;
            }

            //block for doing insert operation in daily expected data.
            if (TopliningDataAdded && AOPDataAdded)
            {
                //delete logic will be common for aop and Toplining.
                insertDates = insertDates.Substring(0, (insertDates.Length - 1)) + "";
                try
                {
                    string deleteQry = $"DELETE FROM daily_expected_vs_actual_solar WHERE site_id IN({site}) AND data_date IN({insertDates});";
                    int delRes = await Context.ExecuteNonQry<int>(deleteQry).ConfigureAwait(false);
                    returnRes = 9;
                }
                catch (Exception e)
                {
                    string msg = "Exception while deleting previous data from daily_expected_vs_actual_solar table due to, " + e.ToString();
                    LogError(0, 1, 5, functionName, msg, backend);
                    return returnRes;
                }
                if(returnRes == 9)
                {
                    string insertStartingQuery = "INSERT INTO daily_expected_vs_actual_solar (site_id, data_date, target, expected_power, usmh, smh, others, igbd, egbd, loadShedding, pr, inv_kwh, lineloss, jmr_kwh, ma, iga, ega_a, ega_b, ega_c, aop_top) VALUES ";
                    string aopValues = "";
                    string topliningValues = "";

                    foreach (var unit in AOPData)
                    {
                        aopValues += $"({unit.site_id}, '{unit.data_date.ToString("yyyy-MM-dd")}', {unit.target}, {unit.expected_power}, {unit.usmh}, {unit.smh}, {unit.others}, {unit.igbd}, {unit.egbd}, {unit.loadShedding}, {unit.pr}, {unit.inv_kwh}, {unit.lineloss}, {unit.jmr_kwh}, {100 + ((unit.usmh + unit.smh) / unit.expected_power)}, {100 + (unit.igbd / unit.expected_power)}, {100 + ((unit.egbd + unit.loadShedding) / unit.expected_power)}, {100 + (unit.egbd / unit.expected_power)}, {100 + (unit.loadShedding / unit.expected_power)}, 0),";
                    }
                    foreach (var unit in TopLiningData)
                    {
                        topliningValues += $"({unit.site_id}, '{unit.data_date.ToString("yyyy-MM-dd")}', {unit.target}, {unit.expected_power}, {unit.usmh}, {unit.smh}, {unit.others}, {unit.igbd}, {unit.egbd}, {unit.loadShedding}, {unit.pr}, {unit.inv_kwh}, {unit.lineloss}, {unit.jmr_kwh}, {100 + ((unit.usmh + unit.smh) / unit.expected_power)}, {100 + (unit.igbd/unit.expected_power)}, {100 + ((unit.egbd + unit.loadShedding)/unit.expected_power)}, {100 + (unit.egbd /unit.expected_power)}, {100 + (unit.loadShedding/unit.expected_power)}, 1),";
                    }
                    string finalInsertQuery = insertStartingQuery + aopValues + topliningValues.Substring(0, (topliningValues.Length - 1)) + ";";

                    try
                    {
                        int insertRes = await Context.ExecuteNonQry<int>(finalInsertQuery).ConfigureAwait(false);
                        returnRes = 10;
                    }
                    catch(Exception e)
                    {
                        string msg = "Exception while inserting data into daily_expected_vs_actual_solar table due to, " + e.ToString();
                        LogError(0, 1, 5, functionName, msg, backend);
                        return returnRes;
                    }
                }
            }

            return returnRes;
        }
        internal async Task<List<GetWindTMLGraphData>> GetWindTMLGraphData(string site, string fromDate, string toDate, int isAdmin, int isYearly = 0)
        {
            string functionName = "GetWindTMLGraphData";
            int finalRes = 0;
            List<GetWindTMLGraphData> _dailyBasisDataList = new List<GetWindTMLGraphData>();
            string tmrFilter = "data_date >= '" + fromDate + "'  and data_date <= '" + toDate + "'";
            int monthlyData = 0; //0 for monthly and 100 for yearly.
            if(isYearly == 1)
            {
                monthlyData = 100;
            }
            try
            {
                if (!string.IsNullOrEmpty(site))
                {
                    tmrFilter += " and site_id IN(" + site + ") ";
                }
                finalRes = 1;
            }catch(Exception e)
            {
                string msg = "Exception due to : " + e.Message;
            }
            try
            {
                string fetchQry = $"SELECT SUM(adjusted_expected) AS expected_final, SUM(lineloss_mu) AS lineloss_final, SUM(target_kwh) AS target_final, SUM(usmh_loss) AS lossUSMH_final, SUM(smh_loss) AS lossSMH_final, SUM(others_loss) AS lossNC_final, SUM(igbd_loss) AS lossIGBD_final, SUM(lull_loss) AS lossLULL_final, SUM(pcd_loss) AS lossPCD_final, SUM(jmr_kwh) AS actual_final, SUM(loadshedding_loss) AS loadShedding FROM daily_expected_vs_actual WHERE {tmrFilter} GROUP BY site_id, data_date;";

                _dailyBasisDataList = await Context.GetData<GetWindTMLGraphData>(fetchQry).ConfigureAwait(false);
                finalRes = 2;

            }
            catch(Exception e)
            {
                string msg = "Exception while fetching data from daily basis actual vs actual table : " + e.Message;
            }
            try
            {
                if (_dailyBasisDataList.Count > 0)
                {
                    _dailyBasisDataList[0].monthlyData = monthlyData;
                }
                finalRes = 3;
            }
            catch(Exception e)
            {
                string msg = "Exception while setting the flag of monthly or yearly, due to : " + e.Message;
            }
            //if(finalRes == 3)
            //{
            //    try
            //    {
            //        //To fetch controller kwh from daily_gen_summary table and degrade it with lineloss.
            //        //(SELECT wtg, site_id AS sid, kwh as controller_kwh, ma_actual AS ma, iga, ega AS ega_a, ega_b, ega_c FROM `daily_gen_summary` WHERE site_id = { site } AND date = '{ data_date }' GROUP BY wtg)
            //        try
            //        {
            //            //fetch controllerkwh from daily_gen_summary.
            //            string fetchController_kwhQry = "SELECT ";
            //        }
            //        catch(Exception e)
            //        {

            //        }
            //        List<GetWindTMLGraphData> _tmlDataList = new List<GetWindTMLGraphData>();
            //        double actual_active_power = 0;
            //        double target_sum = 0;
            //        double gen_actual_active_power = 0;
            //        double lineloss_percentage = 0;
            //        double lineloss_final = 0;
            //        _tmlDataList.Clear();

            //        //Actual from Generation table :- SELECT SUM(kwh) as target_sum FROM `daily_target_kpi` WHERE site_id = 224 AND date >= "2023-03-06" AND date <= "2023-03-06";
            //        string fetchGenActualQry = "";
            //        List<GetWindTMLGraphData> _tmlActualGenYearly = new List<GetWindTMLGraphData>();
            //        if (isYearly == 1)
            //        {
            //            fetchGenActualQry = "SELECT Month(date) as month_no, SUM(kwh) as gen_actual_active_power, site_id FROM `daily_gen_summary` WHERE site_id IN(" + site + ") AND date >= '" + fromDate + "' AND date <= '" + toDate + "' GROUP BY Month(date), site_id;";
            //            try
            //            {
            //                _tmlActualGenYearly = await Context.GetData<GetWindTMLGraphData>(fetchGenActualQry).ConfigureAwait(false);
            //            }
            //            catch (Exception e)
            //            {
            //                string msg = "Exception while Fetching Generation active power sum for yearly form daily_gen_summary, due to : " + e.ToString();
            //                //API_ErrorLog(msg);
            //                LogError(0, 2, 5, functionName, msg, backend);

            //            }
            //        }
            //        else
            //        {
            //            fetchGenActualQry = "SELECT SUM(kwh) as gen_actual_active_power FROM `daily_gen_summary` WHERE site_id IN(" + site + ") AND date >= '" + fromDate + "' AND date <= '" + toDate + "' ;";

            //            try
            //            {
            //                _tmlDataList = await Context.GetData<GetWindTMLGraphData>(fetchGenActualQry).ConfigureAwait(false);
            //            }
            //            catch (Exception e)
            //            {
            //                string msg = "Exception while Fetching Generation active power sum form daily_gen_summary, due to : " + e.ToString();
            //                //API_ErrorLog(msg);
            //                LogError(0, 2, 5, functionName, msg, backend);

            //            }
            //            if (_tmlDataList.Count > 0)
            //            {
            //                try
            //                {
            //                    foreach (var unit in _tmlDataList)
            //                    {
            //                        gen_actual_active_power = unit.gen_actual_active_power;
            //                    }
            //                }
            //                catch (Exception e)
            //                {
            //                    string msg = "Exception while Extracting Generation active power sum from _tmlDataList, due to : " + e.ToString();
            //                    //API_ErrorLog(msg);
            //                    LogError(0, 2, 5, functionName, msg, backend);

            //                }
            //            }
            //            _tmlDataList.Clear();
            //        }

            //        //Lineloss :- SELECT line_loss as line_loss_per FROM `monthly_uploading_line_losses` WHERE site_id = 224 AND month_no = 4 AND year = 2023;
            //        //              line_loss_per * actual / 1000000.
            //        string toMonth = Convert.ToDateTime(toDate).ToString("MM");
            //        string fromMonth = Convert.ToDateTime(fromDate).ToString("MM");
            //        string fromYear = Convert.ToDateTime(fromDate).ToString("yyyy");
            //        string toYear = Convert.ToDateTime(toDate).ToString("yyyy");
            //        string fetchLinelossPerQry = "";
            //        List<GetWindTMLGraphData> _tmlLineLossForYearly = new List<GetWindTMLGraphData>();
            //        if (isYearly == 1)
            //        {
            //            //fetchLinelossPerQry = "SELECT month_no, line_loss as line_loss_per, site_id FROM `monthly_uploading_line_losses` WHERE site_id IN(" + site + ") AND month_no >= " + fromMonth + " AND month_no <= " + toMonth + " AND year IN(" + fromYear + "," + toYear + ") GROUP BY month_no, site_id";
            //            fetchLinelossPerQry = "SELECT month_no, line_loss as line_loss_per, site_id FROM `monthly_uploading_line_losses` WHERE site_id IN(" + site + ") AND year IN(" + fromYear + "," + toYear + ") GROUP BY month_no, site_id";

            //            try
            //            {
            //                _tmlLineLossForYearly = await Context.GetData<GetWindTMLGraphData>(fetchLinelossPerQry).ConfigureAwait(false);
            //            }
            //            catch (Exception e)
            //            {
            //                string msg = "Exception while fetching lineloss percentage for yearly from mothly_uploading_lineloss, due to : " + e.ToString();
            //                //API_ErrorLog(msg);
            //                LogError(0, 2, 5, functionName, msg, backend);

            //            }
            //        }
            //        else
            //        {
            //            fetchLinelossPerQry = "SELECT line_loss as line_loss_per FROM `monthly_uploading_line_losses` WHERE site_id IN(" + site + ") AND month_no >= " + fromMonth + " AND month_no <= " + toMonth + " AND year IN(" + fromYear + "," + toYear + ") ;";
            //            // fetchLinelossPerQry = "SELECT line_loss as line_loss_per FROM `monthly_uploading_line_losses` WHERE site_id IN(" + site + ")  AND year IN(" + fromYear + "," + toYear + ") ;";

            //            try
            //            {
            //                _tmlDataList = await Context.GetData<GetWindTMLGraphData>(fetchLinelossPerQry).ConfigureAwait(false);
            //            }
            //            catch (Exception e)
            //            {
            //                string msg = "Exception while fetching lineloss percentage from mothly_uploading_lineloss, due to : " + e.ToString();
            //                //API_ErrorLog(msg);
            //                LogError(0, 2, 5, functionName, msg, backend);

            //            }
            //            if (_tmlDataList.Count > 0)
            //            {
            //                try
            //                {
            //                    foreach (var unit in _tmlDataList)
            //                    {
            //                        lineloss_percentage = unit.line_loss_per;
            //                    }
            //                }
            //                catch (Exception e)
            //                {
            //                    string msg = "Exception while extracting lineloss percentage from _tmlDataList, due to : " + e.ToString();
            //                    //API_ErrorLog(msg);
            //                    LogError(0, 2, 5, functionName, msg, backend);

            //                }
            //            }
            //            _tmlDataList.Clear();
            //        }
            //        double lineLossForYearly = 0;
            //        double actPowerForYearly = 0;
            //        if (isYearly == 1)
            //        {
            //            foreach (var _element in _tmlActualGenYearly)
            //            {
            //                foreach (var _innerElement in _tmlLineLossForYearly)
            //                {
            //                    if (_element.month_no == _innerElement.month_no && _element.site_id == _innerElement.site_id)
            //                    {
            //                        double lineloss = _innerElement.line_loss_per / 100;
            //                        double temp = (lineloss * _element.gen_actual_active_power) * -1; //6;
            //                        lineloss_final = temp / 1000000;
            //                        lineLossForYearly += lineloss_final;

            //                        double actGenPowertemp = (_element.gen_actual_active_power / 1000000) + lineloss_final;
            //                        actPowerForYearly += actGenPowertemp;
            //                    }
            //                }
            //            }
            //        }
            //        else
            //        {
            //            //if (lineloss_percentage > 0)
            //            //{
            //            double lineloss = lineloss_percentage / 100;
            //            double temp = (lineloss * gen_actual_active_power) * -1; //6;
            //            lineloss_final = temp / 1000000;
            //            _tmlDataList.Clear();
            //        }

            //        try
            //        {
            //            _tmlDataList.Clear();
            //            if(_dailyBasisDataList.Count > 0)
            //            {
            //                if(isYearly == 1)
            //                {
            //                    _dailyBasisDataList[0].lineloss_final = lineLossForYearly;
            //                    _dailyBasisDataList[0].actual_final = actPowerForYearly;
            //                }
            //                else
            //                {
            //                    _dailyBasisDataList[0].lineloss_final = lineloss_final;
            //                    double temps = ((lineloss_percentage/100) * gen_actual_active_power) * -1; //6;
            //                    double lineloss_final_new = temps / 1000000;
            //                    _dailyBasisDataList[0].actual_final = (gen_actual_active_power / 1000000) + lineloss_final_new;
            //                }
            //            }
            //        }
            //        catch (Exception e)
            //        {
            //            string msg = "Exception while inserting final Values into _tmlDataList, due to : " + e.ToString();
            //        }
            //    }
            //    catch (Exception e)
            //    {
            //        string msg = "Exception while degrading lineloss, due to : " + e.Message;
            //    }
            //}
            return _dailyBasisDataList;
        }
        internal async Task<List<SolarExpectedvsActual>> GetSolarExpectedReport(string site, string fromDate, string toDate, string prType)
        {
            string functionName = "GetSolarExpectedReport";

            string filter = "";
            int chkfilter = 0;
            if (!string.IsNullOrEmpty(fromDate) && !string.IsNullOrEmpty(toDate))
            {
                chkfilter = 1;
                filter += " WHERE t1.data_date>='" + fromDate + "' and t1.data_date<='" + toDate + "' ";
            }
            if (!string.IsNullOrEmpty(site))
            {
                if (chkfilter == 0) filter += " where ";
                else
                {
                    filter += " and ";
                    filter += " t1.site_id IN (" + site + ")";
                }

            }

            string qry1 = "";
            if (prType == "AOP")
            {
                qry1 = $"SELECT t1.site_id AS site_id, t2.site AS site, t1.data_date AS date, t1.target AS target, t1.pr AS toplining_PR, t1.inv_kwh AS inv_kwh, t1.ma AS ma, t1.iga AS iga, t1.ega_a AS ega_a, t1.ega_b AS ega_b, t1.ega_c AS ega_c, t1.usmh AS usmh, t1.smh AS smh, t1.others AS oh, t1.igbd AS igbdh, t1.egbd AS egbdh, t1.loadShedding AS load_shedding, t1.expected_power AS Pexpected FROM daily_expected_vs_actual_solar t1 LEFT JOIN site_master_solar t2 ON t1.site_id = t2.site_master_solar_id {filter} AND t1.aop_top = 0;";
            }
            else if (prType == "toplining")
            {
                qry1 = $"SELECT t1.site_id AS site_id, t2.site AS site, t1.data_date AS date, t1.target AS target, t1.pr AS toplining_PR, t1.inv_kwh AS inv_kwh, t1.ma AS ma, t1.iga AS iga, t1.ega_a AS ega_a, t1.ega_b AS ega_b, t1.ega_c AS ega_c, t1.usmh AS usmh, t1.smh AS smh, t1.others AS oh, t1.igbd AS igbdh, t1.egbd AS egbdh, t1.loadShedding AS load_shedding, t1.expected_power AS Pexpected FROM daily_expected_vs_actual_solar t1 LEFT JOIN site_master_solar t2 ON t1.site_id = t2.site_master_solar_id {filter} AND t1.aop_top = 1;";

            }
            List<SolarExpectedvsActual> data = new List<SolarExpectedvsActual>();
            try
            {
                data = await Context.GetData<SolarExpectedvsActual>(qry1).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                string msg = "Exception while getting data from daily_gen_summary and daily_target_kpi_solar table, due to : " + e.ToString();
                //API_ErrorLog(msg);
                LogError(0, 1, 5, functionName, msg, backend);

            }
            return data;
        }
        internal async Task<List<dailyBasisFetch>> GetWindTMLData(string site, string fromDate, string toDate)
        {
            string functionName = "GetWindTMLData";

            List<dailyBasisFetch> _windTMLDataList = new List<dailyBasisFetch>();
            try
            {
                //string fdate = Convert.ToDateTime(fromDate).ToString("dd-MMM-yy");
                //string todate = Convert.ToDateTime(toDate).ToString("dd-MMM-yy");
                string filter = "data_date >= '" + fromDate + "'  and data_date <= '" + toDate + "'";
                if (!string.IsNullOrEmpty(site))
                {
                    filter += " and site_id IN(" + site + ") ";
                }
                filter += " ORDER BY wtg ASC;";




                string fetchQry = "SELECT t2.site, t1.* FROM daily_expected_vs_actual t1 LEFT JOIN site_master t2 ON t1.site_id = t2.site_master_id WHERE " + filter;
                _windTMLDataList = await Context.GetData<dailyBasisFetch>(fetchQry).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                string msg = "Exception while fetching records from tml_data table for displaying, due to  : " + e.ToString();
                //API_ErrorLog(msg);
                LogError(0, 2, 5, functionName, msg, backend);

            }
            return _windTMLDataList;
        }
        internal async Task<List<ExpectedResult>> BulkCalculateDailyWindExpected(string site, string fromDate, string toDate)
        {
            List<ExpectedResult> _ReturnData = new List<ExpectedResult>();
            List<string> dateRange = new List<string>();
            List<ExpectedResult> _siteIdData = new List<ExpectedResult>();
            try
            {
                DateTime startDate = DateTime.Parse(fromDate);
                DateTime endDate = DateTime.Parse(toDate);
                for (DateTime date = startDate; date <= endDate; date = date.AddDays(1))
                {
                    dateRange.Add(date.ToString("yyyy-MM-dd"));
                }
            }
            catch(Exception e)
            {
                string msg = "Exception while generating dates between from and to dates, due to : " + e.Message;
            }
            

            if (site is null || site == "")
            {
                //fetch site_ids
                string siteFetchQry = "SELECT site_master_id AS site_id FROM site_master;";
                try
                {
                    _siteIdData = await Context.GetData<ExpectedResult>(siteFetchQry).ConfigureAwait(false);
                }
                catch(Exception e)
                {
                    string msg = "Exception while fetching site_ids from masters table, due to : " + e.Message;
                }
            }
            else
            {
                //site_id is included while call.
                if (site.Contains(","))
                {
                    string[] siteIds = site.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);

                    foreach (string siteIdStr in siteIds)
                    {
                        if (int.TryParse(siteIdStr.Trim(), out int siteId))
                        {
                            ExpectedResult result = new ExpectedResult
                            {
                                site_id = siteId
                            };
                            _siteIdData.Add(result);
                        }
                    }
                }
                else
                {
                    //single site_id
                    if (int.TryParse(site.Trim(), out int singleSiteId))
                    {
                        ExpectedResult result = new ExpectedResult
                        {
                            site_id = singleSiteId
                        };
                        _siteIdData.Add(result);
                    }
                }
            }

            //date List and siteList is ready iterate both and call the api for daily calculation.
            try
            {
                foreach(var dateUnit in dateRange)
                {
                    foreach(var siteUnit in _siteIdData)
                    {
                        int funcRes = 0;
                        try
                        {
                            funcRes = await CalculateDailyExpected(Convert.ToString(siteUnit.site_id), dateUnit);
                            string status = "";
                            if(funcRes == 8)
                            {
                                status = "Success.";
                            }
                            if(funcRes == 1000)
                            {
                                status = "TML data is not uploaded for this day and site. Please upload TML first and then call this API.";
                            }
                            ExpectedResult tempData = new ExpectedResult
                            {
                                site_id = siteUnit.site_id,
                                date = dateUnit,
                                status = status
                            };
                            _ReturnData.Add(tempData);
                        }
                        catch(Exception e)
                        {
                            string msg = "Exception while calling the function of calculation, due to : " + e.Message;
                            ExpectedResult tempData = new ExpectedResult
                            {
                                site_id = siteUnit.site_id,
                                date = dateUnit,
                                status = msg
                            };
                            _ReturnData.Add(tempData);
                        }
                    }
                }
            }
            catch(Exception e)
            {
                string msg = "Exception while Iteratively calling the function, due to " + e.Message;
                return _ReturnData;
            }

            return _ReturnData;
        }

        // Tanvi's Changes.
        internal async Task<int> dgrUploadingReminder()
        {

            PPT_InformationLog("From DGR Repository : dgrUploadingReminder : " + DateTime.Now);
            //MAILING FUNCTIONALITY

            string info = ("dgrUploadingReminder function called from repository ");
            string functionName = "dgrUploadingReminder";
            //await LogInfo(0, 0, 0, functionName, info, backend);

            MailSettings _settings = new MailSettings();
            var MyConfig = new ConfigurationBuilder().AddJsonFile("appsettings.json").Build();
            _settings.Mail = MyConfig.GetValue<string>("MailSettings:Mail");
            //_settings.Mail = "kasrsanket@gmail.com";
            //_settings.DisplayName = "Sanket Kar";
            _settings.DisplayName = MyConfig.GetValue<string>("MailSettings:DisplayName");
            //_settings.Password = "lozirdytywjlvcxd";
            _settings.Password = MyConfig.GetValue<string>("MailSettings:Password");
            //_settings.Host = "smtp.gmail.com";
            _settings.Host = MyConfig.GetValue<string>("MailSettings:Host");
            //_settings.Port = 587;
            _settings.Port = MyConfig.GetValue<int>("MailSettings:Port");


            string Msg = "Weekly PR Report Generated";
            // private MailServiceBS mailService;
            List<string> AddToWind = new List<string>();

            //List<string> AddCc = new List<string>();
            MailRequest request = new MailRequest();

            //DateTime dt = DateTime.Now;
            DateTime dt  = DateTime.Today.AddDays(-1);
            string today = dt.ToString("yyyy-MM-dd");
            //string today = "2023-11-12";


            string tb = "<p style='text-align: left;'>Dear User,<br><br>";
            tb += $"This is a reminder email that DGR data is not uploaded for {dt.ToString("dd-MMM-yyyy")} .<p>";

            tb += "<br><br><br>";
            tb += "<p>Thanks and Regards,<br>";
            tb += "O&M - Team</p>";
            tb += "<br><br>";
            tb += "<p>This is a system generated email. Please Do Not Reply.</p>";


            string windSiteQry = $"SELECT site_master_id as id,site as name FROM site_master as wind left join import_batches  on import_batches.site_id = wind.site_master_id and import_file_type = 1 and date(data_date) = '{today}' and import_type = 1 where site_id is null; ";

            List<SiteList> sitelist = await Context.GetData<SiteList>(windSiteQry).ConfigureAwait(false);

            foreach (var site in sitelist)
            {
                MailRequest Windrequest = new MailRequest();
                List<string> AddToWindEach = new List<string>();
                string qry = $"SELECT useremail FROM user_access left join login on login.login_id = user_access.login_id where site_type = 1 and identity = {site.id}  AND login.active_user = 1;";
                try
                {
                    List<UserLogin> data2 = await Context.GetData<UserLogin>(qry).ConfigureAwait(false);
                    if(data2.Count > 0)
                    {
                        foreach (var item in data2)
                        {
                            AddToWindEach.Add(item.useremail);
                            PPT_InformationLog("From DGR Repository : Inside dgrUploadingReminder function  : Added to email id :" + item.useremail);
                        }
                    }
                    else
                    {
                        continue;
                    }
                }
                catch (Exception e)
                {
                    string msg = e.ToString();
                    PPT_ErrorLog("From DGR Repository: Inside dgrUploadingReminder function : Exception Caught while fetching and adding To emails : Due to : " + msg);
                }

                //AddToWind = new List<string>();
                //AddToWind.Add("tanvi@softeltech.in");
                //AddToWind.Add("haresh@softeltech.in");

                Windrequest.ToEmail = AddToWindEach;
                //request.CcEmail = AddCc;
                Windrequest.Subject = $"DGR Uploading Reminder {today} - {site.name}";
                Windrequest.Body = tb;

                try
                {
                    var res = await MailService.SendEmailAsync(Windrequest, _settings, 0);
                    PPT_InformationLog("From DGR Repository : Inside dgrUploadingReminder function for reminder Mail : SendEmailAsync function completed");
                    info = "Dgr Reminder SendEmailAsync function completed";
                }
                catch (Exception e)
                {
                    string msg = e.Message;
                    PPT_ErrorLog("From DGR Repository : Inside dgrUploadingReminder function for reminder Mail :  SendEmailAsync function failed exception :" + e.Message);
                    info = "Dgr Reminder SendEmailAsync function failed exception :" + e.Message;
                }
            }

            string solarSiteQry = $"SELECT site_id,site_master_solar_id as id,site as name FROM site_master_solar as solar left join import_batches on import_batches.site_id = solar.site_master_solar_id and import_file_type = 1 and date(data_date) = '{today}' and import_type = 2 where site_id is null; ";

            List<SiteList> solarSitelist = await Context.GetData<SiteList>(solarSiteQry).ConfigureAwait(false);

            foreach (var site in solarSitelist)
            {
                MailRequest SolarRequest = new MailRequest();
                List<string> AddToSolar = new List<string>();
                string qry = $"SELECT useremail FROM user_access left join login on login.login_id = user_access.login_id where site_type = 2 and identity = {site.id}  AND login.active_user = 1;";
                try
                {
                    List<UserLogin> data2 = await Context.GetData<UserLogin>(qry).ConfigureAwait(false);
                    if(data2.Count > 0)
                    {
                        foreach (var item in data2)
                        {
                            AddToSolar.Add(item.useremail);
                            PPT_InformationLog("From DGR Repository : Inside dgrUploadingReminder function  : Added to email id :" + item.useremail);
                        }
                    }
                    else
                    {
                        continue;
                    }
                }
                catch (Exception e)
                {
                    string msg = e.ToString();
                    PPT_ErrorLog("From DGR Repository: Inside dgrUploadingReminder function : Exception Caught while fetching and adding To emails : Due to : " + msg);
                }

                //AddToSolar = new List<string>();
                //AddToSolar.Add("tanvi@softeltech.in");
                SolarRequest.ToEmail = AddToSolar;
                //request.CcEmail = AddCc;
                SolarRequest.Subject = $"DGR Uploading Reminder {today} - {site.name}";
                SolarRequest.Body = tb;

                try
                {
                    var res = await MailService.SendEmailAsync(SolarRequest, _settings, 0);
                    PPT_InformationLog("From DGR Repository : Inside dgrUploadingReminder function for reminder Mail : SendEmailAsync function completed");
                    info = "Dgr Reminder SendEmailAsync function completed";
                    //await LogInfo(0, 0, 0, functionName, info, backend);
                }
                catch (Exception e)
                {
                    string msg = e.Message;
                    PPT_ErrorLog("From DGR Repository : Inside dgrUploadingReminder function for reminder Mail :  SendEmailAsync function failed exception :" + e.Message);
                    info = "Dgr Reminder SendEmailAsync function failed exception :" + e.Message;
                    //await LogInfo(0, 0, 0, functionName, info, backend);
                }
            }
            return 1;
        }
    }
}
